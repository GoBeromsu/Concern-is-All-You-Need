{"type": "test", "subtype": "T1", "change": "diff --git a/querydsl-jpa/src/test/java/com/mysema/query/JPASQLBase.java b/querydsl-jpa/src/test/java/com/mysema/query/JPASQLBase.java\nindex 2a64bfed1..3f1116c19 100644\n--- a/querydsl-jpa/src/test/java/com/mysema/query/JPASQLBase.java\n+++ b/querydsl-jpa/src/test/java/com/mysema/query/JPASQLBase.java\n@@ -277,6 +277,7 @@ public class JPASQLBase {\n     }\n \n     @Test\n+    @ExcludeIn(Target.HSQLDB)\n     public void No_From() {\n         assertNotNull(query().singleResult(DateExpression.currentDate()));\n     }\n", "summaries": {"en": "Exclude NoFrom test from hsqldb", "zh": "从 hsqldb 中排除 NoFrom 测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/syncany-lib/src/test/java/org/syncany/tests/plugins/PluginOptionSpecTest.java b/syncany-lib/src/test/java/org/syncany/tests/plugins/PluginOptionSpecTest.java\nindex 1026396f..e5dbb5f5 100644\n--- a/syncany-lib/src/test/java/org/syncany/tests/plugins/PluginOptionSpecTest.java\n+++ b/syncany-lib/src/test/java/org/syncany/tests/plugins/PluginOptionSpecTest.java\n@@ -31,16 +31,6 @@ import org.syncany.plugins.PluginOptionSpec.ValueType;\n  */\n public class PluginOptionSpecTest {\n \t\n-\t@Test(expected=IllegalArgumentException.class) \n-\tpublic void optionalSensitiveTest() {\n-\t\tnew PluginOptionSpec(\"id\", \"desc\", ValueType.STRING, false, true, null);\t\t\n-\t}\n-\t\n-\t@Test(expected=IllegalArgumentException.class) \n-\tpublic void optionalNoDefaultTest() {\n-\t\tnew PluginOptionSpec(\"id\", \"desc\", ValueType.STRING, false, false, null);\t\t\n-\t}\n-\t\n \t@Test\n \tpublic void nonSetMandatoryTest() {\n \t\tPluginOptionSpec pluginOptionSpec = new PluginOptionSpec(\"id\", \"desc\", ValueType.STRING, true, true, null);\n", "summaries": {"en": "Delete test cases: optionalSensitiveTest and optionalNoDefaultTest", "zh": "删除测试用例：optionalSensitiveTest和optionalNoDefaultTest"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsTests.java b/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsTests.java\nindex 833bb26..1e34b00 100644\n--- a/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsTests.java\n+++ b/src/test/java/org/elasticsearch/index/suggest/stats/SuggestStatsTests.java\n@@ -99,7 +99,8 @@ public class SuggestStatsTests extends ElasticsearchIntegrationTest {\n \n         // check suggest time\n         assertThat(indicesStats.getTotal().getSuggest().getTimeInMillis(), greaterThan(0l));\n-        assertThat(indicesStats.getTotal().getSuggest().getTimeInMillis(), lessThanOrEqualTo(endTime - startTime));\n+        // the upperbound is num shards * total time since we do searches in parallel\n+        assertThat(indicesStats.getTotal().getSuggest().getTimeInMillis(), lessThanOrEqualTo(totalShards * (endTime - startTime)));\n \n         NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().execute().actionGet();\n         NodeStats[] nodes = nodeStats.getNodes();\n", "summaries": {"en": "Change the time judgment for suggest search", "zh": "更改对suggest搜索的时间判断"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java b/extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java\nindex 27fc3b2..85dad36 100644\n--- a/extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java\n+++ b/extensions/struts2/test/com/google/inject/struts2/Struts2FactoryTest.java\n@@ -52,7 +52,8 @@ public class Struts2FactoryTest extends TestCase {\n             @Override\n             protected void configureServlets() {\n               // Struts 2 setup\n-              bind(StrutsPrepareAndExecuteFilter.class).in(Singleton.class);\n+              bind(StrutsPrepareAndExecuteFilter.class)\n+                  .in(com.google.inject.Singleton.class);\n               filter(\"/*\").through(StrutsPrepareAndExecuteFilter.class);\n             }\n           },\n", "summaries": {"en": "Import Singleton class using fully qualified name", "zh": "使用全限定名导入Singleton类"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/core/src/main/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java b/core/src/test/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java\nsimilarity index 95%\nrename from core/src/main/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java\nrename to core/src/test/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java\nindex 9146e82b1..e15682829 100644\n--- a/core/src/main/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java\n+++ b/core/src/test/java/org/springframework/security/userdetails/decorator/StatusCheckingUserDetailsServiceTests.java\n@@ -51,7 +51,7 @@ public class StatusCheckingUserDetailsServiceTests {\n     }\n \n     class MockUserDetailsService implements UserDetailsService {\n-        private Map <String, UserDetails> users = new HashMap <String, UserDetails>();\n+        private Map users = new HashMap();\n         private GrantedAuthority[] auths = new GrantedAuthority[] {new GrantedAuthorityImpl(\"A\")};\n \n         MockUserDetailsService() {\n@@ -63,7 +63,7 @@ public class StatusCheckingUserDetailsServiceTests {\n         }\n \n         public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {\n-            return users.get(username);\n+            return (UserDetails) users.get(username);\n         }\n     }\n }\n", "summaries": {"en": "Ensure the return type is UserDetails", "zh": "确保返回类型是UserDetails"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/h2o-algos/src/test/java/hex/deeplearning/DeepLearningGradientCheck.java b/h2o-algos/src/test/java/hex/deeplearning/DeepLearningGradientCheck.java\nindex cb95774b8..5f71f7cb7 100644\n--- a/h2o-algos/src/test/java/hex/deeplearning/DeepLearningGradientCheck.java\n+++ b/h2o-algos/src/test/java/hex/deeplearning/DeepLearningGradientCheck.java\n@@ -53,9 +53,9 @@ public class DeepLearningGradientCheck extends TestUtil {\n               Distribution.Family.multinomial,\n       }) {\n         for (DeepLearningParameters.Activation act : new DeepLearningParameters.Activation[]{\n-            DeepLearningParameters.Activation.ExpRectifier,\n-//                DeepLearningParameters.Activation.Tanh,\n-//                DeepLearningParameters.Activation.Rectifier,\n+//            DeepLearningParameters.Activation.ExpRectifier,\n+                DeepLearningParameters.Activation.Tanh,\n+                DeepLearningParameters.Activation.Rectifier,\n //                DeepLearningParameters.Activation.Maxout,\n         }) {\n           for (String response : new String[]{\n", "summaries": {"en": "Update parameter call", "zh": "更新参数调用"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java b/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\nindex 0d611c38b..424cb190c 100644\n--- a/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\n@@ -118,7 +118,6 @@ public class TransportSQLActionTest extends SQLTransportIntegrationTest {\n         assertEquals(1L, response.rows()[0][0]);\n     }\n \n-    /*\n     @Test\n     public void testGroupByOnSysNodes() throws Exception {\n         execute(\"select count(*), name from sys.nodes group by name\");\n@@ -127,7 +126,6 @@ public class TransportSQLActionTest extends SQLTransportIntegrationTest {\n         execute(\"select count(*), hostname from sys.nodes group by hostname\");\n         assertThat(response.rowCount(), is(1L));\n     }\n-    */\n \n     @Test\n     public void testSysCluster() throws Exception {\n", "summaries": {"en": "Re-enable a test", "zh": "重新启用一个测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/test/java/org/mapdb/AsyncWriteEngineTest.java b/src/test/java/org/mapdb/AsyncWriteEngineTest.java\nindex 738c286..d8a5266 100644\n--- a/src/test/java/org/mapdb/AsyncWriteEngineTest.java\n+++ b/src/test/java/org/mapdb/AsyncWriteEngineTest.java\n@@ -104,8 +104,7 @@ public class AsyncWriteEngineTest extends TestFile{\n         //make commit just after bunch of records was added,\n         // we need to test that all records made it into transaction log\n         a.commit();\n-        //TODO reenable when newRecids are introduced\n-        //assertEquals(max, putCounter.longValue() - a.newRecids.size());\n+        assertEquals(max, putCounter.longValue() - a.newRecids.size());\n         assertTrue(a.writeCache.isEmpty());\n         t.close();\n \n", "summaries": {"en": "Re-enable testing", "zh": "重新启用测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/com/goide/runconfig/testing/GoTestConsoleProperties.java b/src/com/goide/runconfig/testing/GoTestConsoleProperties.java\nindex aac81a5..ae2217c 100644\n--- a/src/com/goide/runconfig/testing/GoTestConsoleProperties.java\n+++ b/src/com/goide/runconfig/testing/GoTestConsoleProperties.java\n@@ -78,9 +78,10 @@ public class GoTestConsoleProperties extends TestConsoleProperties implements SM\n           myStdOut.append(text);\n         }\n         else {\n+          String failedMessage = ServiceMessageBuilder.testFailed(myCurrentTest).addAttribute(\"message\", myStdOut.toString()).toString();\n           myFailed = false;\n           myStdOut = new StringBuilder();\n-          return super.processServiceMessages(failedMessage(), outputType, visitor)\n+          return super.processServiceMessages(failedMessage, outputType, visitor)\n                  && super.processServiceMessages(ServiceMessageBuilder.testFinished(myCurrentTest).toString(), outputType, visitor);\n         }\n       }\n", "summaries": {"en": "Declare the error message as a local variable and pass it as a parameter", "zh": "将失败消息声明为局部变量再作为参数"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/perftest/java/com/lmax/disruptor/OnePublisherToThreeWorkerPoolThroughputTest.java b/src/perftest/java/com/lmax/disruptor/OnePublisherToThreeWorkerPoolThroughputTest.java\nindex 7aa1ed3..77f5fd5 100644\n--- a/src/perftest/java/com/lmax/disruptor/OnePublisherToThreeWorkerPoolThroughputTest.java\n+++ b/src/perftest/java/com/lmax/disruptor/OnePublisherToThreeWorkerPoolThroughputTest.java\n@@ -60,16 +60,19 @@ public final class OnePublisherToThreeWorkerPoolThroughputTest\n         }\n     }\n \n-    private final RingBuffer<ValueEvent> ringBuffer = \n-            RingBuffer.createSingleProducer(ValueEvent.EVENT_FACTORY, \n+    private final RingBuffer<ValueEvent> ringBuffer =\n+            RingBuffer.createSingleProducer(ValueEvent.EVENT_FACTORY,\n                                             BUFFER_SIZE,\n                                             new YieldingWaitStrategy());\n-    \n-    private final WorkerPool<ValueEvent> workerPool = \n+\n+    private final WorkerPool<ValueEvent> workerPool =\n             new WorkerPool<ValueEvent>(ringBuffer,\n                                        ringBuffer.newBarrier(),\n                                        new FatalExceptionHandler(),\n                                        handlers);\n+    {\n+        ringBuffer.addGatingSequences(workerPool.getWorkerSequences());\n+    }\n \n     ///////////////////////////////////////////////////////////////////////////////////////////////\n \n", "summaries": {"en": "Fix performance testing for job queue", "zh": "修复工作池性能测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java b/robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java\nindex 9333dce..4d9bf68 100644\n--- a/robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java\n+++ b/robolectric/src/test/java/org/robolectric/shadows/ShadowVideoViewTest.java\n@@ -72,7 +72,7 @@ public class ShadowVideoViewTest {\n   }\n \n   @Test\n-  public void shoulDetermineIsPlaying() throws Exception {\n+  public void shouldDetermineIsPlaying() throws Exception {\n     assertThat(view.isPlaying()).isFalse();\n     view.start();\n     assertThat(view.isPlaying()).isTrue();\n", "summaries": {"en": "Corrected spelling error in test method name, changed shoulDetermineIsPlaying to shouldDetermineIsPlaying", "zh": "更正拼写错误的测试方法名，将shoulDetermineIsPlaying更正为shouldDetermineIsPlaying"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java b/src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java\nindex 566f665..303ef70 100644\n--- a/src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java\n+++ b/src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java\n@@ -11,6 +11,8 @@ import static com.xtremelabs.robolectric.util.TestUtil.resourceFile;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.StringReader;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.Stack;\n \n import org.junit.After;\n@@ -527,8 +529,17 @@ public class XmlFileLoaderTest {\n \t}\n \n \t@Test\n-\tpublic void testNextTag() {\n-\t\tfail(\"Not yet implemented\");\n+\tpublic void testNextTag() throws XmlPullParserException, IOException {\n+\t\tSet<Integer> acceptableTags = new HashSet<Integer>();\n+\t\tacceptableTags.add(XmlResourceParser.START_TAG);\n+\t\tacceptableTags.add(XmlResourceParser.END_TAG);\n+\t\tparseUntilNext(XmlResourceParser.START_DOCUMENT);\n+\t\tint evt;\n+\t\tint max = 5;\n+\t\tfor (int i = max; i > 0; i--) {\n+\t\t\tevt = parser.nextTag();\n+\t\t\tassertTrue(acceptableTags.contains(evt));\n+\t\t}\n \t}\n \n \t@Test\n", "summaries": {"en": "Implemented the function testNextTag()", "zh": "完成函数testNextTag()的实现"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/plugins/mapper-attachments/src/test/java/org/elasticsearch/mapper/attachments/MultifieldAttachmentMapperTests.java b/plugins/mapper-attachments/src/test/java/org/elasticsearch/mapper/attachments/MultifieldAttachmentMapperTests.java\nindex 2dc1081..f701c32 100644\n--- a/plugins/mapper-attachments/src/test/java/org/elasticsearch/mapper/attachments/MultifieldAttachmentMapperTests.java\n+++ b/plugins/mapper-attachments/src/test/java/org/elasticsearch/mapper/attachments/MultifieldAttachmentMapperTests.java\n@@ -151,7 +151,6 @@ public class MultifieldAttachmentMapperTests extends AttachmentUnitTestCase {\n         String forcedContentType = randomAsciiOfLength(20);\n \n         String bytes = Base64.encodeBytes(originalText.getBytes(StandardCharsets.ISO_8859_1));\n-        threadPool = new ThreadPool(\"testing-only\");\n \n         MapperService mapperService = MapperTestUtils.newMapperService(createTempDir(),\n             Settings.builder().put(AttachmentMapper.INDEX_ATTACHMENT_DETECT_LANGUAGE_SETTING.getKey(), true).build(),\n", "summaries": {"en": "Delete creation of ThreadPool object", "zh": "删除 ThreadPool 对象的创建"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/camel-core/src/test/java/org/apache/camel/processor/FileIdempotentConsumerCreateRepoTest.java b/camel-core/src/test/java/org/apache/camel/processor/FileIdempotentConsumerCreateRepoTest.java\nindex bdfd923551..caa44a33cc 100644\n--- a/camel-core/src/test/java/org/apache/camel/processor/FileIdempotentConsumerCreateRepoTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/processor/FileIdempotentConsumerCreateRepoTest.java\n@@ -19,6 +19,8 @@ package org.apache.camel.processor;\n import java.io.File;\n import java.io.IOException;\n \n+import static java.util.UUID.randomUUID;\n+\n import org.apache.camel.spi.IdempotentRepository;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -30,9 +32,8 @@ public class FileIdempotentConsumerCreateRepoTest extends Assert {\n     @Test\n     public void shouldCreateParentOfRepositoryFileStore() throws IOException {\n         // Given\n-        File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n-        File storeParent = new File(tmpDir, \"repositoryParent\");\n-        File store = new File(storeParent, \"repository\");\n+        File parentDirectory = new File(\"target/repositoryParent_\" + randomUUID());\n+        File store = new File(parentDirectory, \"store\");\n         IdempotentRepository<String> repo = fileIdempotentRepository(store);\n \n         // When\n", "summaries": {"en": "Create a parent folder as a repository to store files", "zh": "创建父文件夹作为存储文件的存储库"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/community/server/src/functionaltest/java/org/neo4j/server/rest/ManageNodeFunctionalTest.java b/community/server/src/functionaltest/java/org/neo4j/server/rest/ManageNodeFunctionalTest.java\nindex 2395464..585f945 100644\n--- a/community/server/src/functionaltest/java/org/neo4j/server/rest/ManageNodeFunctionalTest.java\n+++ b/community/server/src/functionaltest/java/org/neo4j/server/rest/ManageNodeFunctionalTest.java\n@@ -170,11 +170,6 @@ public class ManageNodeFunctionalTest\n \n     }\n \n-    private void assertProperNodeRepresentation( final Map<String, Object> noderep )\n-    {\n-        NodeRepresentationTest.verifySerialisation( noderep );\n-    }\n-\n     @Test\n     public void shouldRespondWith204WhenNodeDeleted() throws Exception\n     {\n@@ -183,7 +178,7 @@ public class ManageNodeFunctionalTest\n     }\n \n     @Test\n-    public void shouldRespondWith404WhenNodeToBeDeletedCannotBeFound() throws Exception\n+    public void shouldRespondWith404AndSensibleEntityBodyWhenNodeToBeDeletedCannotBeFound() throws Exception\n     {\n         ClientResponse response = sendDeleteRequestToServer( NON_EXISTENT_NODE_ID );\n         assertEquals( 404, response.getStatus() );\n", "summaries": {"en": "Remove unnecessary code, rename test methods", "zh": "删除无用代码，重命名测试方法"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/engine-tests/src/test/java/org/terasology/TerasologyTestingEnvironment.java b/engine-tests/src/test/java/org/terasology/TerasologyTestingEnvironment.java\nindex 0353a9153..156a420cc 100644\n--- a/engine-tests/src/test/java/org/terasology/TerasologyTestingEnvironment.java\n+++ b/engine-tests/src/test/java/org/terasology/TerasologyTestingEnvironment.java\n@@ -65,7 +65,7 @@ public abstract class TerasologyTestingEnvironment {\n     private static ModuleManager moduleManager;\n     private static AssetManager assetManager;\n \n-    private static DisplayEnvironment env;\n+    private static HeadlessEnvironment env;\n \n     private EngineEntityManager engineEntityManager;\n     private ComponentSystemManager componentSystemManager;\n@@ -80,7 +80,7 @@ public abstract class TerasologyTestingEnvironment {\n         if (!setup) {\n             setup = true;\n \n-            env = new DisplayEnvironment();\n+            env = new HeadlessEnvironment();\n             assetManager = CoreRegistry.get(AssetManager.class);\n             blockManager = CoreRegistry.get(BlockManager.class);\n             config = CoreRegistry.get(Config.class);\n", "summaries": {"en": "Change test environment to headless environment", "zh": "更改测试环境为无头环境"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/test/selenium/tests/StreamsTest.java b/test/selenium/tests/StreamsTest.java\nindex b3d4fb0..cf9047d 100644\n--- a/test/selenium/tests/StreamsTest.java\n+++ b/test/selenium/tests/StreamsTest.java\n@@ -41,6 +41,7 @@ import static play.test.Helpers.*;\n public class StreamsTest extends LoggedIn {\n \n     private static final int SERVER_STUB_PORT = 9005;\n+    private static final int WEB_PORT = 3333;\n     private ServerStub serverStub;\n \n     private WebDriver driver;\n@@ -77,9 +78,9 @@ public class StreamsTest extends LoggedIn {\n \n     @Test\n     public void addingStreamRulesWorks() {\n-        running(testServer(3333), new Runnable() {\n+        running(testServer(56517), new Runnable() {\n             public void run() {\n-                Result r = login(testBrowser(driver, 3333), serverStub, \"lennart\", \"123123123\");\n+                Result r = login(testBrowser(driver), serverStub, \"lennart\", \"123123123\");\n                 assertTrue(\"Login failed\", r.isSuccess());\n \n                 try {\n", "summaries": {"en": "Change test server port number", "zh": "修改测试服务器端口号"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/test/long/voldemort/client/rebalance/RebalanceLongTest.java b/test/long/voldemort/client/rebalance/RebalanceLongTest.java\nindex 16d5b5091..eecba30bb 100644\n--- a/test/long/voldemort/client/rebalance/RebalanceLongTest.java\n+++ b/test/long/voldemort/client/rebalance/RebalanceLongTest.java\n@@ -28,14 +28,14 @@ import voldemort.store.metadata.MetadataStore.VoldemortState;\n  * \n  */\n @RunWith(Parameterized.class)\n-public class RebalanceLargeTest extends AbstractRebalanceTest {\n+public class RebalanceLongTest extends AbstractRebalanceTest {\n \n     Map<Integer, VoldemortServer> serverMap = new HashMap<Integer, VoldemortServer>();\n     private final boolean useNio;\n     private final boolean useDonorBased;\n     protected static int NUM_MANY_KEYS = 10100;\n \n-    public RebalanceLargeTest(boolean useNio, boolean useDonorBased) {\n+    public RebalanceLongTest(boolean useNio, boolean useDonorBased) {\n         this.useNio = useNio;\n         this.useDonorBased = useDonorBased;\n     }\n", "summaries": {"en": "Rename test class RebalanceLargeTest to RebalanceLongTest", "zh": "重命名测试类RebalanceLargeTest为RebalanceLongTest"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/compiler/android-tests/src/org/jetbrains/jet/compiler/CodegenTestsOnAndroidRunner.java b/compiler/android-tests/src/org/jetbrains/jet/compiler/CodegenTestsOnAndroidRunner.java\nindex b6effc8..4e0ea0e 100644\n--- a/compiler/android-tests/src/org/jetbrains/jet/compiler/CodegenTestsOnAndroidRunner.java\n+++ b/compiler/android-tests/src/org/jetbrains/jet/compiler/CodegenTestsOnAndroidRunner.java\n@@ -180,11 +180,11 @@ public class CodegenTestsOnAndroidRunner {\n         downloader.downloadAll();\n         downloader.unzipAll();\n \n-        PermissionManager.setPermissions(pathManager);\n-\n         String platformPrefixProperty = System.setProperty(PlatformUtils.PLATFORM_PREFIX_KEY, \"Idea\");\n \n         try {\n+            PermissionManager.setPermissions(pathManager);\n+\n             antRunner.packLibraries();\n \n             emulator.createEmulator();\n", "summaries": {"en": "Move PermissionManager.setPermissions(pathManager) to the try block", "zh": "将PermissionManager.setPermissions(pathManager)移动到try块内"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/community/server/src/test/java/org/neo4j/server/web/TestJetty9WebServer.java b/community/server/src/test/java/org/neo4j/server/web/TestJetty9WebServer.java\nindex be843aa..d955033 100644\n--- a/community/server/src/test/java/org/neo4j/server/web/TestJetty9WebServer.java\n+++ b/community/server/src/test/java/org/neo4j/server/web/TestJetty9WebServer.java\n@@ -22,11 +22,6 @@ package org.neo4j.server.web;\n import org.junit.Rule;\n import org.junit.Test;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.Response.Status;\n-\n import org.neo4j.kernel.GraphDatabaseDependencies;\n import org.neo4j.kernel.logging.DevNullLoggingService;\n import org.neo4j.server.WrappingNeoServer;\n@@ -40,17 +35,8 @@ import org.neo4j.test.Mute;\n import static org.neo4j.helpers.collection.MapUtil.stringMap;\n import static org.neo4j.test.Mute.muteAll;\n \n-@Path(\"/\")\n public class TestJetty9WebServer\n {\n-\n-\t@GET\n-\tpublic Response index()\n-\t{\n-\t\treturn Response.status( Status.NO_CONTENT )\n-                .build();\n-\t}\n-\n \t@Test\n \tpublic void shouldBeAbleToRestart() throws Throwable\n \t{\n", "summaries": {"en": "Delete controller method for handling GET requests", "zh": "删除处理GET请求的控制器方法"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\nindex 1894b15..ff8a761 100644\n--- a/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n+++ b/org.springframework.context/src/test/java/org/springframework/context/annotation/BeanMethodTests.java\n@@ -28,11 +28,6 @@ import org.springframework.beans.factory.parsing.BeanDefinitionParsingException;\n import org.springframework.beans.factory.parsing.FailFastProblemReporter;\n import org.springframework.beans.factory.parsing.Location;\n import org.springframework.beans.factory.parsing.ProblemReporter;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.BeanMethod;\n-import org.springframework.context.annotation.ConfigurationClass;\n-import org.springframework.context.annotation.ModelClass;\n-import org.springframework.context.annotation.Scope;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.util.ClassUtils;\n \n@@ -63,8 +58,8 @@ public class BeanMethodTests {\n \t\tassertThat(beanMethod.getRequiredAnnotation(Bean.class), sameInstance(beanAnno));\n \t\ttry {\n \t\t\tbeanMethod.getRequiredAnnotation(Override.class);\n-\t\t\tfail(\"expected IllegalArgumentException ex\");\n-\t\t} catch (IllegalArgumentException ex) { /* expected */ }\n+\t\t\tfail(\"expected IllegalStateException ex\");\n+\t\t} catch (IllegalStateException ex) { /* expected */ }\n \n \t\t// must call setDeclaringClass() before calling getLocation()\n \t\ttry {\n", "summaries": {"en": "Update BeanMethodTests to reflect the change from IllegalArgumentException to IllegalStateException", "zh": "更新 BeanMethodTests，反映从 IllegalArgumentException 到 IllegalStateException 的更改"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/test/com/facebook/buck/step/DefaultStepRunnerTest.java b/test/com/facebook/buck/step/DefaultStepRunnerTest.java\nindex 391e0c1..1d40a1b 100644\n--- a/test/com/facebook/buck/step/DefaultStepRunnerTest.java\n+++ b/test/com/facebook/buck/step/DefaultStepRunnerTest.java\n@@ -37,7 +37,7 @@ import java.util.concurrent.TimeUnit;\n \n public class DefaultStepRunnerTest {\n \n-  @Test(expected=StepFailedException.class, timeout=1000)\n+  @Test(expected=StepFailedException.class, timeout=5000)\n   public void testParallelCommandFailure() throws Exception {\n     ImmutableList.Builder<Step> commands = ImmutableList.builder();\n     commands.add(new SleepingStep(0, 0));\n", "summaries": {"en": "Increase the timeout for DefaultStepRunnerTest#testParallelCommandFailure()", "zh": "增加DefaultStepRunnerTest＃testParallelCommandFailure（）的超时时间"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/subprojects/gradle-core/src/test/groovy/org/gradle/process/internal/child/ImplementationClassLoaderWorkerTest.java b/subprojects/gradle-core/src/test/groovy/org/gradle/process/internal/child/ImplementationClassLoaderWorkerTest.java\nindex a3e8a43..80a6de1 100644\n--- a/subprojects/gradle-core/src/test/groovy/org/gradle/process/internal/child/ImplementationClassLoaderWorkerTest.java\n+++ b/subprojects/gradle-core/src/test/groovy/org/gradle/process/internal/child/ImplementationClassLoaderWorkerTest.java\n@@ -19,7 +19,6 @@ package org.gradle.process.internal.child;\n import org.gradle.api.Action;\n import org.gradle.api.logging.LogLevel;\n import org.gradle.logging.LoggingManagerInternal;\n-import org.gradle.process.child.SerializableMockHelper;\n import org.gradle.util.JUnit4GroovyMockery;\n import org.gradle.util.ObservableUrlClassLoader;\n import org.jmock.Expectations;\n", "summaries": {"en": "Remove unused import statements", "zh": "删除未使用的导入语句"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/src/test/java/hex/NeuralNetIrisTest.java b/src/test/java/hex/NeuralNetIrisTest.java\nindex feae3432b..ae86c44f9 100644\n--- a/src/test/java/hex/NeuralNetIrisTest.java\n+++ b/src/test/java/hex/NeuralNetIrisTest.java\n@@ -57,7 +57,6 @@ public class NeuralNetIrisTest extends TestUtil {\n     int epochs = 1000;\n     Vec[] data = Utils.remove(_train.vecs(), _train.vecs().length - 1);\n     Vec labels = _train.vecs()[_train.vecs().length - 1];\n-    labels.asEnum();\n     VecsInput input = new VecsInput(data, null);\n     Layer[] ls = new Layer[3];\n     ls[0] = input;\n", "summaries": {"en": "Delete unnecessary asEnum in NN testing", "zh": "在 NN 测试中删除不必要的 asEnum"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\nindex 50292cc..369feaf 100644\n--- a/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n+++ b/tests/src/test/java/alluxio/worker/AlluxioWorkerRestApiTest.java\n@@ -94,7 +94,9 @@ public final class AlluxioWorkerRestApiTest extends RestApiTest {\n     Map<String, Long> metrics = (Map<String, Long>) new ObjectMapper().readValue(result,\n         new TypeReference<Map<String, Long>>() {});\n \n-    Assert.assertTrue(metrics.get(\"worker.BlocksAccessed\") >= 0);\n+    String blocksAccessedMetricName =\n+        WorkerContext.getWorkerSource().getName() + \".\" + WorkerSource.BLOCKS_ACCESSED;\n+    Assert.assertTrue(metrics.get(blocksAccessedMetricName) >= 0);\n   }\n \n   @Test\n", "summaries": {"en": "Fix measurement test", "zh": "修复度量测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/test/com/google/javascript/jscomp/NewTypeInferenceES5OrLowerTest.java b/test/com/google/javascript/jscomp/NewTypeInferenceES5OrLowerTest.java\nindex 0b268b1..d24a81c 100644\n--- a/test/com/google/javascript/jscomp/NewTypeInferenceES5OrLowerTest.java\n+++ b/test/com/google/javascript/jscomp/NewTypeInferenceES5OrLowerTest.java\n@@ -16984,4 +16984,15 @@ public final class NewTypeInferenceES5OrLowerTest extends NewTypeInferenceTestBa\n         \"}\"),\n         GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);\n   }\n+\n+  public void testPrototypeTemplateFunctionWithAtTypeJsdoc() {\n+    typeCheck(LINE_JOINER.join(\n+        \"/**\",\n+        \" * @interface\",\n+        \" * @template T\",\n+        \" */\",\n+        \"function Foo() {};\",\n+        \"/** @type {function(T)} */\",\n+        \"Foo.prototype.m;\"));\n+  }\n }\n", "summaries": {"en": "Add unit tests for the generic interface method", "zh": "为通用接口方法添加单元测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/blueprints-test/src/main/java/com/tinkerpop/blueprints/pgm/TransactionalGraphTestSuite.java b/blueprints-test/src/main/java/com/tinkerpop/blueprints/pgm/TransactionalGraphTestSuite.java\nindex c588c1d3..79bb55c8 100644\n--- a/blueprints-test/src/main/java/com/tinkerpop/blueprints/pgm/TransactionalGraphTestSuite.java\n+++ b/blueprints-test/src/main/java/com/tinkerpop/blueprints/pgm/TransactionalGraphTestSuite.java\n@@ -413,6 +413,13 @@ public class TransactionalGraphTestSuite extends TestSuite {\n             graph.addEdge(null, graph.addVertex(null), graph.addVertex(null), convertId(\"test\"));\n         }\n         assertEquals(BaseTest.count(graph.getEdges()), 3);\n+        graph.stopTransaction(TransactionalGraph.Conclusion.FAILURE);\n+        assertEquals(BaseTest.count(graph.getEdges()), 0);\n+\n+        for (int i = 0; i < 3; i++) {\n+            graph.addEdge(null, graph.addVertex(null), graph.addVertex(null), convertId(\"test\"));\n+        }\n+        assertEquals(BaseTest.count(graph.getEdges()), 3);\n         graph.stopTransaction(TransactionalGraph.Conclusion.SUCCESS);\n         assertEquals(BaseTest.count(graph.getEdges()), 3);\n \n", "summaries": {"en": "Add stronger semantic testing for batch transactions", "zh": "添加更强的批量事务语义测试"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/idea/tests/org/jetbrains/jet/codegen/NamespaceGenTest.java b/idea/tests/org/jetbrains/jet/codegen/NamespaceGenTest.java\nindex 76dedc0..a0c46ba 100644\n--- a/idea/tests/org/jetbrains/jet/codegen/NamespaceGenTest.java\n+++ b/idea/tests/org/jetbrains/jet/codegen/NamespaceGenTest.java\n@@ -530,6 +530,13 @@ public class NamespaceGenTest extends LightCodeInsightFixtureTestCase {\n         assertEquals(Boolean.FALSE, main.invoke(null, null, \"jet\"));\n     }\n \n+    public void testEqualsNullLiteral() throws Exception {\n+        loadText(\"fun foo(s: String?) = s == null\");\n+        final Method main = generateFunction();\n+        assertEquals(Boolean.TRUE, main.invoke(null, new Object[] { null }));\n+        assertEquals(Boolean.FALSE, main.invoke(null, \"jet\"));\n+    }\n+\n     public void testFunctionCall() throws Exception {\n         loadFile(\"functionCall.jet\");\n         System.out.println(generateToText());\n", "summaries": {"en": "Add test cases for NamespaceGenTest", "zh": "为NamespaceGenTest添加测试用例"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/jOOQ-test/src/org/jooq/test/_/testcases/FetchTests.java b/jOOQ-test/src/org/jooq/test/_/testcases/FetchTests.java\nindex 55e00a324..fcdf72523 100644\n--- a/jOOQ-test/src/org/jooq/test/_/testcases/FetchTests.java\n+++ b/jOOQ-test/src/org/jooq/test/_/testcases/FetchTests.java\n@@ -910,11 +910,11 @@ extends BaseTest<A, AP, B, S, B2S, BS, L, X, DATE, BOOL, D, T, U, UU, I, IPK, T7\n         Object[] array = { 13, \"A\", \"B\" };\r\n \r\n         author = create().newRecord(TAuthor());\r\n-        author.fromArray(array, TAuthor_FIRST_NAME(), TAuthor_LAST_NAME());\r\n+        author.fromArray(array, new Field[] { TAuthor_FIRST_NAME(), TAuthor_LAST_NAME() });\r\n         testRecordFromAssertions(object, author);\r\n \r\n         author = create().newRecord(TAuthor());\r\n-        author.fromArray(array, TAuthor_FIRST_NAME().getName(), TAuthor_LAST_NAME().getName());\r\n+        author.fromArray(array, new String[] { TAuthor_FIRST_NAME().getName(), TAuthor_LAST_NAME().getName() });\r\n         testRecordFromAssertions(object, author);\r\n     }\r\n \r\n", "summaries": {"en": "Modified parameter type of fromArray() method", "zh": "修改 fromArray()方法的参数类型"}}
{"type": "test", "subtype": "T1", "change": "diff --git a/presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java b/presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java\nindex 091fd29..4f72b1d 100644\n--- a/presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java\n+++ b/presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java\n@@ -66,7 +66,7 @@ public class TestQueryDriversOperator\n         }\n     }\n \n-    @Test\n+    @Test(enabled = false) // TODO fix this test\n     public void testCancel()\n             throws Exception\n     {\n", "summaries": {"en": "Disable incorrect test", "zh": "禁用错误的测试"}}
