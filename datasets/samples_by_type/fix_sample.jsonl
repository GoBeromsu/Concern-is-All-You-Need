{"type": "fix", "subtype": "Ix", "change": "diff --git a/grails-core/src/main/groovy/org/codehaus/groovy/grails/commons/metaclass/BaseApiProvider.java b/grails-core/src/main/groovy/org/codehaus/groovy/grails/commons/metaclass/BaseApiProvider.java\nindex 84d74a4d88..b8b7c3f01c 100644\n--- a/grails-core/src/main/groovy/org/codehaus/groovy/grails/commons/metaclass/BaseApiProvider.java\n+++ b/grails-core/src/main/groovy/org/codehaus/groovy/grails/commons/metaclass/BaseApiProvider.java\n@@ -24,6 +24,7 @@ import java.util.Arrays;\n import java.util.List;\n \n import org.apache.commons.lang.ArrayUtils;\n+import org.codehaus.groovy.grails.commons.GrailsClassUtils;\n import org.codehaus.groovy.reflection.CachedClass;\n import org.codehaus.groovy.reflection.CachedMethod;\n import org.codehaus.groovy.runtime.metaclass.ReflectionMetaMethod;\n@@ -112,6 +113,12 @@ public abstract class BaseApiProvider {\n         if (EXCLUDED_METHODS.contains(name)) return false;\n \n         boolean isStatic = Modifier.isStatic(modifiers);\n+        \n+        // skip plain setters/getters by default for instance methods (non-static)\n+        if(!isStatic && (GrailsClassUtils.isSetter(name, method.getParameterTypes()) || GrailsClassUtils.isGetter(name, method.getParameterTypes()))) {\n+            return false;\n+        }        \n+        \n         int minParameters = isStatic ? 0 : 1;\n \n         return Modifier.isPublic(modifiers) &&\n", "summaries": {"en": "Fix the bug in BaseApiProvider, do not add ordinary setter/getter as \"instance methods\"", "zh": "修复BaseApiProvider的bug，不要将普通的setter/getter添加为“实例方法”"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/app/src/processing/app/Base.java b/app/src/processing/app/Base.java\nindex 84cfb7d..30e966e 100644\n--- a/app/src/processing/app/Base.java\n+++ b/app/src/processing/app/Base.java\n@@ -1818,12 +1818,19 @@ public class Base {\n   }\n \n \n+  /**\n+   * Copy a folder from one place to another. This ignores all dot files and\n+   * folders found in the source directory, to avoid copying silly .DS_Store\n+   * files and potentially troublesome .svn folders.\n+   */\n   static public void copyDir(File sourceDir,\n                              File targetDir) throws IOException {\n     targetDir.mkdirs();\n     String files[] = sourceDir.list();\n     for (int i = 0; i < files.length; i++) {\n-      if (files[i].equals(\".\") || files[i].equals(\"..\")) continue;\n+      // Ignore dot files (.DS_Store), dot folders (.svn) while copying\n+      if (files[i].charAt(0) == '.') continue;\n+      //if (files[i].equals(\".\") || files[i].equals(\"..\")) continue;\n       File source = new File(sourceDir, files[i]);\n       File target = new File(targetDir, files[i]);\n       if (source.isDirectory()) {\n", "summaries": {"en": "Ignore dot files and dot directories in the source directory", "zh": "忽略源目录中的点文件和点文件夹"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/platform/platform-impl/src/com/intellij/help/impl/MacHelpUtil.java b/platform/platform-impl/src/com/intellij/help/impl/MacHelpUtil.java\nindex 0ded3e8..88eb3b0 100644\n--- a/platform/platform-impl/src/com/intellij/help/impl/MacHelpUtil.java\n+++ b/platform/platform-impl/src/com/intellij/help/impl/MacHelpUtil.java\n@@ -19,6 +19,7 @@ import com.intellij.openapi.util.SystemInfo;\n import com.intellij.openapi.util.registry.Registry;\n import com.intellij.ui.mac.foundation.Foundation;\n import com.intellij.ui.mac.foundation.ID;\n+import com.intellij.util.PlatformUtils;\n import org.jetbrains.annotations.NonNls;\n \n /**\n@@ -39,6 +40,6 @@ public class MacHelpUtil {\n   }\n \n   static boolean isApplicable() {\n-    return SystemInfo.isMac && Registry.is(\"ide.mac.show.native.help\", false); \n+    return SystemInfo.isMac && Registry.is(\"ide.mac.show.native.help\", false) && !PlatformUtils.isCidr() && !PlatformUtils.isCommunity();\n   }\n }\n", "summaries": {"en": "Added CIDR protocol and community device detection", "zh": "添加cidr协议和社区设备判断"}}
{"type": "fix", "subtype": "I1", "change": "diff --git a/src/net/java/sip/communicator/impl/gui/main/chatroomslist/joinforms/JoinChatRoomDialog.java b/src/net/java/sip/communicator/impl/gui/main/chatroomslist/joinforms/JoinChatRoomDialog.java\nindex 4d6e17cf0..15eea4efa 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/chatroomslist/joinforms/JoinChatRoomDialog.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/chatroomslist/joinforms/JoinChatRoomDialog.java\n@@ -216,7 +216,7 @@ public class JoinChatRoomDialog\n         if(list != null)\n         {\n             if(list.size() == 0)\n-                list.add(Messages.getI18NString(\"noAvailableRooms\"));\n+                list.add(Messages.getI18NString(\"noAvailableRooms\").getText());\n \n             chatRoomsList.setListData(new Vector(list));\n             chatRoomsScrollPane.setPreferredSize(new Dimension(500, 120));\n", "summaries": {"en": "Modified the calling method of getI18NString()", "zh": "修改getI18NString()的调用方式"}}
{"type": "fix", "subtype": "I5", "change": "diff --git a/java/compiler/impl/src/com/intellij/compiler/server/BuildManager.java b/java/compiler/impl/src/com/intellij/compiler/server/BuildManager.java\nindex 97aadd9..e13aab0 100644\n--- a/java/compiler/impl/src/com/intellij/compiler/server/BuildManager.java\n+++ b/java/compiler/impl/src/com/intellij/compiler/server/BuildManager.java\n@@ -1150,9 +1150,9 @@ public class BuildManager implements Disposable {\n \n     final List<String> launcherCp = new ArrayList<String>();\n     launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass));\n+    launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project));\n     launcherCp.add(compilerPath);\n     ClasspathBootstrap.appendJavaCompilerClasspath(launcherCp);\n-    launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project));\n     cmdLine.addParameter(\"-classpath\");\n     cmdLine.addParameter(classpathToString(launcherCp));\n \n", "summaries": {"en": "Move statement order", "zh": "移动语句顺序"}}
{"type": "fix", "subtype": "I5", "change": "diff --git a/src/jvm/clojure/lang/Compiler.java b/src/jvm/clojure/lang/Compiler.java\nindex 5f8fdc7..77dd68e 100644\n--- a/src/jvm/clojure/lang/Compiler.java\n+++ b/src/jvm/clojure/lang/Compiler.java\n@@ -3256,12 +3256,13 @@ static class InvokeExpr implements Expr{\n \t\t\tgen.ifZCmp(GeneratorAdapter.NE, onLabel);\n \t\t\t}\n \n-\t\tgen.mark(callLabel); //target\n \t\tgen.dup(); //target, target\n \t\tgen.invokeStatic(UTIL_TYPE,Method.getMethod(\"Class classOf(Object)\")); //target,class\n \t\tgen.loadThis();\n \t\tgen.swap();\n \t\tgen.putField(objx.objtype, objx.cachedClassName(siteIndex),CLASS_TYPE); //target\n+\n+\t\tgen.mark(callLabel); //target\n \t\tobjx.emitVar(gen, v);\n \t\tgen.invokeVirtual(VAR_TYPE, Method.getMethod(\"Object getRawRoot()\")); //target, proto-fn\n \t\tgen.swap();\n", "summaries": {"en": "Change the position of gen.mark(callLabel)", "zh": "更换gen.mark(callLabel)位置"}}
{"type": "fix", "subtype": "I1", "change": "diff --git a/common/buildcraft/builders/entity/EntityQuarry.java b/common/buildcraft/builders/entity/EntityQuarry.java\nindex 049b6d999..1d8a17a93 100644\n--- a/common/buildcraft/builders/entity/EntityQuarry.java\n+++ b/common/buildcraft/builders/entity/EntityQuarry.java\n@@ -70,7 +70,7 @@ public class EntityQuarry extends Entity {\n \n     @Override\n     protected void readEntityFromNBT(NBTTagCompound compound) {\n-        dataManager.set(TILE_POS, NBTUtils.readBlockPos(compound.getCompoundTag(\"tile_pos\")));\n+        dataManager.set(TILE_POS, NBTUtils.readBlockPos(compound.getTag(\"tile_pos\")));\n         dataManager.set(TYPE, compound.getInteger(\"type\"));\n     }\n \n", "summaries": {"en": "Replace getCompoundTag with getTag", "zh": "使用getTag替代getCompoundTag"}}
{"type": "fix", "subtype": "I5", "change": "diff --git a/platform/core-impl/src/com/intellij/psi/impl/smartPointers/SmartPointerManagerImpl.java b/platform/core-impl/src/com/intellij/psi/impl/smartPointers/SmartPointerManagerImpl.java\nindex 469a350..fd4cb32 100644\n--- a/platform/core-impl/src/com/intellij/psi/impl/smartPointers/SmartPointerManagerImpl.java\n+++ b/platform/core-impl/src/com/intellij/psi/impl/smartPointers/SmartPointerManagerImpl.java\n@@ -309,11 +309,11 @@ public class SmartPointerManagerImpl extends SmartPointerManager {\n         PointerReference reference = references[i];\n         if (reference != null && reference.get() == smartPointer) {\n           references[i] = null;\n+          size--;\n           result = true;\n           break;\n         }\n       }\n-      size--;\n       return result;\n     }\n \n", "summaries": {"en": "Move size-- to be executed after the loop", "zh": "将size--移到循环结束后执行"}}
{"type": "fix", "subtype": "Ix", "change": "diff --git a/OsmAnd/src/net/osmand/plus/views/MapControlsLayer.java b/OsmAnd/src/net/osmand/plus/views/MapControlsLayer.java\nindex c8081d39a5..ad9221e45b 100644\n--- a/OsmAnd/src/net/osmand/plus/views/MapControlsLayer.java\n+++ b/OsmAnd/src/net/osmand/plus/views/MapControlsLayer.java\n@@ -130,12 +130,12 @@ public class MapControlsLayer extends OsmandMapLayer {\n \t\t}\n \t\tint sh = Color.WHITE;\n \t\tif (nightMode != null && nightMode.isNightMode()) {\n-\t\t\tsh = 0xffC8C8C8;\n+\t\t\tsh = Color.TRANSPARENT;\n \t\t}\n \t\tif(shadowColor != sh) {\n \t\t\tshadowColor = sh;\n-\t\t\tzoomTextPaint.setColor(sh == Color.WHITE ? Color.BLACK : sh);\n-\t\t\trulerTextPaint.setColor(sh == Color.WHITE ? Color.BLACK : sh);\n+\t\t\tzoomTextPaint.setColor(sh == Color.WHITE ? Color.BLACK : 0xffC8C8C8);\n+\t\t\trulerTextPaint.setColor(sh == Color.WHITE ? Color.BLACK : 0xffC8C8C8);\n \t\t}\n \t\tif (showZoomLevel || !view.getSettings().SHOW_RULER.get()) {\n \t\t\tdrawZoomLevel(canvas);\n", "summaries": {"en": "Modified color settings", "zh": "修改颜色设置"}}
{"type": "fix", "subtype": "I4", "change": "diff --git a/compiler/preloader/instrumentation/src/org/jetbrains/jet/preloading/instrumentation/InterceptionInstrumenter.java b/compiler/preloader/instrumentation/src/org/jetbrains/jet/preloading/instrumentation/InterceptionInstrumenter.java\nindex 700f2db..b35bd2c 100644\n--- a/compiler/preloader/instrumentation/src/org/jetbrains/jet/preloading/instrumentation/InterceptionInstrumenter.java\n+++ b/compiler/preloader/instrumentation/src/org/jetbrains/jet/preloading/instrumentation/InterceptionInstrumenter.java\n@@ -389,7 +389,7 @@ public class InterceptionInstrumenter {\n             Type[] parameterTypes = Type.getArgumentTypes(instrumentedMethodDesc);\n             boolean isStatic = (access & ACC_STATIC) != 0;\n             int base = isStatic ? 0 : 1;\n-            int parametersUsed = 0;\n+            int parameterOffset = 0;\n             for (int i = 0; i < parameterCount; i++) {\n                 if (i == methodData.getThisParameterIndex()) {\n                     if (isStatic) {\n@@ -408,8 +408,9 @@ public class InterceptionInstrumenter {\n                     ia.aconst(instrumentedMethodDesc);\n                 }\n                 else {\n-                    ia.load(base + parametersUsed, parameterTypes[parametersUsed]);\n-                    parametersUsed++;\n+                    Type type = parameterTypes[parameterOffset];\n+                    ia.load(base + parameterOffset, type);\n+                    parameterOffset += type.getSize();\n                 }\n \n             }\n", "summaries": {"en": "Fix the parameter index for long integer and double precision floating point number", "zh": "修复长整型和双精度浮点数的参数索引"}}
{"type": "fix", "subtype": "I6", "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/nio/InOutSelector.java b/hazelcast/src/main/java/com/hazelcast/nio/InOutSelector.java\nindex e52f928354..17e9d07d33 100644\n--- a/hazelcast/src/main/java/com/hazelcast/nio/InOutSelector.java\n+++ b/hazelcast/src/main/java/com/hazelcast/nio/InOutSelector.java\n@@ -54,7 +54,7 @@ public final class InOutSelector implements Runnable {\n     public InOutSelector(ConnectionManager connectionManager) {\n         this.connectionManager = connectionManager;\n         logger = connectionManager.ioService.getLogger(this.getClass().getName());\n-        this.waitTime = 1;\n+        this.waitTime = 1000;  // TODO: This value has significant effect on idle CPU usage!\n         Selector selectorTemp = null;\n         try {\n             selectorTemp = Selector.open();\n", "summaries": {"en": "Change the value of waitTime to improve CPU usage", "zh": "更改waitTime的值以改善CPU使用率"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/platform/lang-impl/src/com/intellij/formatting/FormatProcessor.java b/platform/lang-impl/src/com/intellij/formatting/FormatProcessor.java\nindex 290a003..162f64c 100644\n--- a/platform/lang-impl/src/com/intellij/formatting/FormatProcessor.java\n+++ b/platform/lang-impl/src/com/intellij/formatting/FormatProcessor.java\n@@ -732,7 +732,7 @@ public class FormatProcessor {\n \n     BlockAlignmentProcessor.Context context = new BlockAlignmentProcessor.Context(\n       myDocument, alignment, myCurrentBlock, myAlignmentMappings, myBackwardShiftedAlignedBlocks,\n-      getIndentOptionsToUse(myCurrentBlock, myDefaultIndentOption), myRightMargin\n+      getIndentOptionsToUse(myCurrentBlock, myDefaultIndentOption), CodeStyleSettings.MAX_RIGHT_MARGIN\n     );\n     BlockAlignmentProcessor.Result result = alignmentProcessor.applyAlignment(context);\n     final LeafBlockWrapper offsetResponsibleBlock = alignment.getOffsetRespBlockBefore(myCurrentBlock);\n", "summaries": {"en": "Modified method parameter reference", "zh": "修改方法参数的引用"}}
{"type": "fix", "subtype": "I10", "change": "diff --git a/src/org/geometerplus/fbreader/formats/oeb/OEBBookReader.java b/src/org/geometerplus/fbreader/formats/oeb/OEBBookReader.java\nindex 3cea7fa4a..efe87e4e8 100644\n--- a/src/org/geometerplus/fbreader/formats/oeb/OEBBookReader.java\n+++ b/src/org/geometerplus/fbreader/formats/oeb/OEBBookReader.java\n@@ -91,7 +91,8 @@ class OEBBookReader extends ZLXMLReaderAdapter implements XMLNamespace {\n \t\t\t\tif (!navigationMap.isEmpty()) {\n \t\t\t\t\tint level = 0;\n \t\t\t\t\tfor (NCXReader.NavPoint point : navigationMap.values()) {\n-\t\t\t\t\t\tint index = myModelReader.Model.getLabel(point.ContentHRef).ParagraphIndex;\n+\t\t\t\t\t\tfinal BookModel.Label label = myModelReader.Model.getLabel(point.ContentHRef);\n+\t\t\t\t\t\tint index = (label != null) ? label.ParagraphIndex : -1;\n \t\t\t\t\t\twhile (level > point.Level) {\n \t\t\t\t\t\t\tmyModelReader.endContentsParagraph();\n \t\t\t\t\t\t\t--level;\n", "summaries": {"en": "Add label check to prevent NPE", "zh": "添加label检查以防止NPE"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java\nindex 776909321..b0806a2b7 100644\n--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java\n+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/MethodDatabase.java\n@@ -385,7 +385,7 @@ public class MethodDatabase implements Log {\n                 ClassReader r = new ClassReader(is);\n \n                 CheckInstrumentationVisitor civ = new CheckInstrumentationVisitor(this);\n-                r.accept(civ, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES | ClassReader.SKIP_CODE);\n+                r.accept(civ, ClassReader.SKIP_FRAMES | ClassReader.SKIP_CODE);\n \n                 return civ;\n             } finally {\n", "summaries": {"en": "Remove the SKIP_DEBUG flag from ClassReader", "zh": "删除 ClassReader 的 SKIP_DEBUG 标志"}}
{"type": "fix", "subtype": "Ix", "change": "diff --git a/subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/fixture/BuildExperimentRunner.java b/subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/fixture/BuildExperimentRunner.java\nindex 31d74dd..b299001 100644\n--- a/subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/fixture/BuildExperimentRunner.java\n+++ b/subprojects/internal-performance-testing/src/main/groovy/org/gradle/performance/fixture/BuildExperimentRunner.java\n@@ -183,7 +183,7 @@ public class BuildExperimentRunner {\n         InvocationSpec invocation = experiment.getInvocation();\n         if (invocation instanceof GradleInvocationSpec) {\n             if (((GradleInvocationSpec) invocation).getBuildWillRunInDaemon()) {\n-                return 5;\n+                return 10;\n             }\n         }\n         return 1;\n", "summaries": {"en": "Modified the return value in the BuildExperimentRunner class", "zh": "修改 BuildExperimentRunner 类中的返回值"}}
{"type": "fix", "subtype": "I13", "change": "diff --git a/platform/lang-impl/src/com/intellij/profile/codeInspection/ui/SingleInspectionProfilePanel.java b/platform/lang-impl/src/com/intellij/profile/codeInspection/ui/SingleInspectionProfilePanel.java\nindex 929729c..fd15e44 100644\n--- a/platform/lang-impl/src/com/intellij/profile/codeInspection/ui/SingleInspectionProfilePanel.java\n+++ b/platform/lang-impl/src/com/intellij/profile/codeInspection/ui/SingleInspectionProfilePanel.java\n@@ -823,6 +823,7 @@ public class SingleInspectionProfilePanel extends JPanel {\n \n             @Override\n             protected void onScopeAdded() {\n+              myTreeTable.updateUI();\n               updateOptionsAndDescriptionPanel();\n             }\n \n", "summaries": {"en": "Update UI to reflect new scope additions", "zh": "更新 UI 以反映新的范围添加"}}
{"type": "fix", "subtype": "I8", "change": "diff --git a/enterprise/enterprise-performance-tests/src/main/java/org/neo4j/perftest/enterprise/ccheck/DataGenerator.java b/enterprise/enterprise-performance-tests/src/main/java/org/neo4j/perftest/enterprise/ccheck/DataGenerator.java\nindex 3417aff..5c05cf7 100644\n--- a/enterprise/enterprise-performance-tests/src/main/java/org/neo4j/perftest/enterprise/ccheck/DataGenerator.java\n+++ b/enterprise/enterprise-performance-tests/src/main/java/org/neo4j/perftest/enterprise/ccheck/DataGenerator.java\n@@ -349,7 +349,8 @@ public class DataGenerator\n \n     private static Map<String, String> batchInserterConfig( Configuration configuration )\n     {\n-        Long mappedMemory = Long.parseLong( configuration.get( all_stores_total_mapped_memory_size ) );\n+        Long mappedMemory = GraphDatabaseSettings.all_stores_total_mapped_memory_size\n+                .valueOf( configuration.get( all_stores_total_mapped_memory_size ), null );\n \n         Map<String, String> config = new HashMap<String, String>();\n         config.put( \"use_memory_mapped_buffers\", \"true\" );\n", "summaries": {"en": "Correctly parse memory mapping settings", "zh": "正确解析内存映射设置"}}
{"type": "fix", "subtype": "Ix", "change": "diff --git a/core/src/main/java/com/zaxxer/hikari/proxy/ConnectionProxy.java b/core/src/main/java/com/zaxxer/hikari/proxy/ConnectionProxy.java\nindex a7d2056..4d0fff6 100644\n--- a/core/src/main/java/com/zaxxer/hikari/proxy/ConnectionProxy.java\n+++ b/core/src/main/java/com/zaxxer/hikari/proxy/ConnectionProxy.java\n@@ -179,7 +179,14 @@ public abstract class ConnectionProxy implements IHikariConnectionProxy\n                 final int length = openStatements.size();\n                 for (int i = 0; i < length; i++)\n                 {\n-                    openStatements.get(i).close();\n+                    try\n+                    {\n+                        openStatements.get(i).close();\n+                    }\n+                    catch (SQLException e)\n+                    {\n+                        checkException(e);\n+                    }\n                 }\n \n                 if (!getAutoCommit())\n", "summaries": {"en": "Add exception handling when closing Statement", "zh": "在关闭 Statement 时添加异常处理"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/moco-core/src/main/java/com/github/dreamhead/moco/setting/BaseSetting.java b/moco-core/src/main/java/com/github/dreamhead/moco/setting/BaseSetting.java\nindex 1811ff50..308d3a34 100644\n--- a/moco-core/src/main/java/com/github/dreamhead/moco/setting/BaseSetting.java\n+++ b/moco-core/src/main/java/com/github/dreamhead/moco/setting/BaseSetting.java\n@@ -13,7 +13,7 @@ public class BaseSetting extends Setting implements ConfigApplier<BaseSetting> {\n         super(matcher);\n     }\n \n-    public boolean match(HttpRequest request) {\n+    public boolean match(Request request) {\n         return this.matcher.match(request) && this.handler != null;\n     }\n \n", "summaries": {"en": "Change HttpRequest to Request", "zh": "将 HttpRequest 改为 Request"}}
{"type": "fix", "subtype": "Ix", "change": "diff --git a/services/java/com/android/server/wm/WindowAnimator.java b/services/java/com/android/server/wm/WindowAnimator.java\nindex 77f94d9..9b196cc 100644\n--- a/services/java/com/android/server/wm/WindowAnimator.java\n+++ b/services/java/com/android/server/wm/WindowAnimator.java\n@@ -139,7 +139,7 @@ public class WindowAnimator {\n \n         final int NEAT = mService.mExitingAppTokens.size();\n         for (i=0; i<NEAT; i++) {\n-            final AppWindowAnimator appAnimator = mService.mAppTokens.get(i).mAppAnimator;\n+            final AppWindowAnimator appAnimator = mService.mExitingAppTokens.get(i).mAppAnimator;\n             final boolean wasAnimating = appAnimator.animation != null\n                     && appAnimator.animation != WindowManagerService.sDummyAnimation;\n             if (appAnimator.stepAnimationLocked(mCurrentTime, mInnerDw, mInnerDh)) {\n", "summaries": {"en": "Fix the error of not being able to animate exit AppWindowToken", "zh": "修复无法动画退出AppWindowToken的错误"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/RCompletionManager.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/RCompletionManager.java\nindex ad0722905..9ec56486c 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/RCompletionManager.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/RCompletionManager.java\n@@ -381,7 +381,7 @@ public class RCompletionManager implements CompletionManager\n                }\n             });\n          }\n-         else if (input_.hasSelection())\n+         else if (!input_.isSelectionCollapsed())\n          {\n             switch(c)\n             {\n", "summaries": {"en": "Modified the condition judgment in the if statement", "zh": "修改 if 语句中的条件判断"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/platform/core-impl/src/com/intellij/psi/impl/source/PsiFileImpl.java b/platform/core-impl/src/com/intellij/psi/impl/source/PsiFileImpl.java\nindex 0315ce5..b7e395d 100644\n--- a/platform/core-impl/src/com/intellij/psi/impl/source/PsiFileImpl.java\n+++ b/platform/core-impl/src/com/intellij/psi/impl/source/PsiFileImpl.java\n@@ -253,7 +253,7 @@ public abstract class PsiFileImpl extends ElementBase implements PsiFileEx, PsiF\n     synchronized (myStubLock) {\n       StubTree fileStub = derefStub();\n       StubElement childStub = child.getStub();\n-      if (fileStub == null || childStub != null && fileStub.getRoot() != childStub.getParentStub()) {\n+      if (childStub != null && (fileStub == null || fileStub.getRoot() != childStub.getParentStub())) {\n         return false;\n       }\n     }\n", "summaries": {"en": "Modified if conditional statement", "zh": "修改if条件语句"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/widgets/SizeWidget.java b/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/widgets/SizeWidget.java\nindex 0df4940867..b3330c7833 100644\n--- a/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/widgets/SizeWidget.java\n+++ b/plugins/sonar-core-plugin/src/main/java/org/sonar/plugins/core/widgets/SizeWidget.java\n@@ -22,6 +22,6 @@ package org.sonar.plugins.core.widgets;\n public class SizeWidget extends CoreWidget {\n \n   public SizeWidget() {\n-    super(\"size\", \"Size metrics\", \"/Users/julienlancelot/Dev/Sources/sonar/plugins/sonar-core-plugin/src/main/resources/org/sonar/plugins/core/widgets/size.html.erb\");\n+    super(\"size\", \"Size metrics\", \"/org/sonar/plugins/core/widgets/size.html.erb\");\n   }\n }\n", "summaries": {"en": "Change the path of size.html.erb", "zh": "更改size.html.erb的路径"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/plugins/groovy/src/org/jetbrains/plugins/groovy/compiler/GroovyCompiler.java b/plugins/groovy/src/org/jetbrains/plugins/groovy/compiler/GroovyCompiler.java\nindex 2fefa32..35e8e5e 100644\n--- a/plugins/groovy/src/org/jetbrains/plugins/groovy/compiler/GroovyCompiler.java\n+++ b/plugins/groovy/src/org/jetbrains/plugins/groovy/compiler/GroovyCompiler.java\n@@ -94,7 +94,7 @@ public class GroovyCompiler implements TranslatingCompiler {\n       final Module module = entry.getKey();\n       final GroovyFacet facet = GroovyFacet.getInstance(module);\n       final Set<VirtualFile> moduleFiles = entry.getValue();\n-      if (facet != null && facet.getConfiguration().isCompileGroovyFiles()) {\n+      if (facet == null || facet.getConfiguration().isCompileGroovyFiles()) {\n         doCompile(compileContext, successfullyCompiled, toRecompile, module, moduleFiles);\n       } else {\n         final ResourceCompiler resourceCompiler = new ResourceCompiler(myProject, CompilerConfiguration.getInstance(myProject));\n", "summaries": {"en": "Even without the Groovy facet, Grails should still be compiled", "zh": "即使没有Groovy facet，也要编译Grails"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java b/ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java\nindex 9df668a9d..46c70b6a1 100644\n--- a/ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java\n+++ b/ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java\n@@ -261,7 +261,7 @@ public class ApacheDSContainer implements InitializingBean, DisposableBean, Life\n                 ldifFile = ldifs[0].getURI().toString();\n             }\n             logger.info(\"Loading LDIF file: \" + ldifFile);\n-            LdifFileLoader loader = new LdifFileLoader(service.getAdminSession(), ldifFile);\n+            LdifFileLoader loader = new LdifFileLoader(service.getAdminSession(), new File(ldifFile), null, getClass().getClassLoader());\n             loader.execute();\n         } else {\n             throw new IllegalArgumentException(\"More than one LDIF resource found with the supplied pattern:\" + ldifResources+ \" Got \" + Arrays.toString(ldifs));\n", "summaries": {"en": "Modified LdifFileLoader constructor parameters", "zh": "修改 LdifFileLoader 构造函数参数"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/src/ScriptOrFnScope.java b/src/ScriptOrFnScope.java\nindex bd78268..5edfdff 100644\n--- a/src/ScriptOrFnScope.java\n+++ b/src/ScriptOrFnScope.java\n@@ -78,7 +78,7 @@ class ScriptOrFnScope {\n \n     void munge() {\n \n-        if (!markedForMunging) {\n+        if (!markedForMunging && parentScope != null) {\n             return;\n         }\n \n", "summaries": {"en": "Added check for non-empty parentScope", "zh": "添加parentScope不为空判断"}}
{"type": "fix", "subtype": "I2", "change": "diff --git a/android/src/com/google/zxing/client/android/CameraManager.java b/android/src/com/google/zxing/client/android/CameraManager.java\nindex 01f0d34..388c936 100755\n--- a/android/src/com/google/zxing/client/android/CameraManager.java\n+++ b/android/src/com/google/zxing/client/android/CameraManager.java\n@@ -187,8 +187,8 @@ final class CameraManager {\n     public void onAutoFocus(boolean success, Camera camera) {\n       if (mAutoFocusHandler != null) {\n         Message message = mAutoFocusHandler.obtainMessage(mAutoFocusMessage, success);\n-        // Simulate continuous autofocus by sending a focus request every second.\n-        mAutoFocusHandler.sendMessageDelayed(message, 1000);\n+        // Simulate continuous autofocus by sending a focus request every 1.5 seconds.\n+        mAutoFocusHandler.sendMessageDelayed(message, 1500);\n         mAutoFocusHandler = null;\n       }\n     }\ndiff --git a/android/src/com/google/zxing/client/android/CaptureActivity.java b/android/src/com/google/zxing/client/android/CaptureActivity.java\nindex 53904b6..dcb5463 100755\n--- a/android/src/com/google/zxing/client/android/CaptureActivity.java\n+++ b/android/src/com/google/zxing/client/android/CaptureActivity.java\n@@ -178,6 +178,14 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal\n     return true;\n   }\n \n+  // Don't display the share menu item if the result overlay is showing.\n+  @Override\n+  public boolean onPrepareOptionsMenu(Menu menu) {\n+    super.onPrepareOptionsMenu(menu);\n+    menu.findItem(SHARE_ID).setVisible(mLastResult == null);\n+    return true;\n+  }\n+\n   @Override\n   public boolean onOptionsItemSelected(MenuItem item) {\n     switch (item.getItemId()) {\n", "summaries": {"en": "Increase the interval for sending focus requests to 1.5 seconds", "zh": "增加对焦请求发送间隔到1.5秒"}}
{"type": "fix", "subtype": "I11", "change": "diff --git a/languagetool-server/src/main/java/org/languagetool/server/LanguageToolHttpHandler.java b/languagetool-server/src/main/java/org/languagetool/server/LanguageToolHttpHandler.java\nindex 56512723a9..01dddcbcfe 100644\n--- a/languagetool-server/src/main/java/org/languagetool/server/LanguageToolHttpHandler.java\n+++ b/languagetool-server/src/main/java/org/languagetool/server/LanguageToolHttpHandler.java\n@@ -101,7 +101,9 @@ class LanguageToolHttpHandler implements HttpHandler {\n \n   @Override\n   public void handle(HttpExchange httpExchange) throws IOException {\n-    handleCount++;\n+    synchronized (this) {\n+      handleCount++;\n+    }\n     String text = null;\n     try {\n       final URI requestedUri = httpExchange.getRequestURI();\n@@ -145,7 +147,9 @@ class LanguageToolHttpHandler implements HttpHandler {\n       final String response = \"Error: \" + StringTools.escapeXML(Tools.getFullStackTrace(e));\n       sendError(httpExchange, HttpURLConnection.HTTP_INTERNAL_ERROR, response);\n     } finally {\n-      handleCount--;\n+      synchronized (this) {\n+        handleCount--;\n+      }\n       httpExchange.close();\n     }\n   }\n", "summaries": {"en": "Update handleCount variable using synchronization block", "zh": "使用同步块来更新 handleCount 变量"}}
{"type": "fix", "subtype": "I1", "change": "diff --git a/OsmAnd/src/net/osmand/plus/OsmandApplication.java b/OsmAnd/src/net/osmand/plus/OsmandApplication.java\nindex f2707bf417..25dd830476 100644\n--- a/OsmAnd/src/net/osmand/plus/OsmandApplication.java\n+++ b/OsmAnd/src/net/osmand/plus/OsmandApplication.java\n@@ -583,7 +583,7 @@ public class OsmandApplication extends Application implements ClientContext {\n \t\tuiHandler.post(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\tAccessibleToast.makeText(uiContext, b.toString(), Toast.LENGTH_LONG).show();\n+\t\t\t\tAccessibleToast.makeText(uiContext, b, Toast.LENGTH_LONG).show();\n \t\t\t}\n \t\t});\n \t}\n", "summaries": {"en": "Cancel the toString() method call on b", "zh": "取消b的toString()方法调用"}}
{"type": "fix", "subtype": "I3", "change": "diff --git a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java\nindex f11c669..8830a8b 100644\n--- a/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java\n+++ b/gdx/src/com/badlogic/gdx/scenes/scene2d/ui/TextField.java\n@@ -558,7 +558,7 @@ public class TextField extends Widget {\n \r\n \t/** Copies the contents of this TextField to the {@link Clipboard} implementation set on this TextField. */\r\n \tpublic void copy () {\r\n-\t\tif (hasSelection) {\r\n+\t\tif (hasSelection && !passwordMode) {\r\n \t\t\tint minIndex = Math.min(cursor, selectionStart);\r\n \t\t\tint maxIndex = Math.max(cursor, selectionStart);\r\n \t\t\tclipboard.setContents(text.substring(minIndex, maxIndex));\r\n@@ -568,7 +568,7 @@ public class TextField extends Widget {\n \t/** Copies the selected contents of this TextField to the {@link Clipboard} implementation set on this TextField, then removes\r\n \t * it. */\r\n \tpublic void cut () {\r\n-\t\tif (hasSelection) {\r\n+\t\tif (hasSelection && !passwordMode) {\r\n \t\t\tcopy();\r\n \t\t\tdelete();\r\n \t\t}\r\n", "summaries": {"en": "Added check for non-password mode", "zh": "添加对非密码模式的判断"}}
