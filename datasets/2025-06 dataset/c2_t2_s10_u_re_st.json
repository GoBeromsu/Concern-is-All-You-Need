{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "style",
      "refactor"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n\ndiff --git a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\nindex a4a4ef68..11fc8c3c 100644\n--- a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n+++ b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n@@ -70,7 +70,7 @@ final public class InvokeHelper {\n     public static Memory[] makeArguments(Environment env, Memory[] args,\n                                        ParameterEntity[] parameters,\n                                        String originClassName, String originMethodName,\n-                                       TraceInfo trace){\n+                                       TraceInfo trace) {\n         return InvokeArgumentHelper.makeArguments(env, args, parameters, originClassName, originMethodName, trace);\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\nindex a4a4ef68..11fc8c3c 100644\n--- a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n+++ b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n@@ -70,7 +70,7 @@ final public class InvokeHelper {\n     public static Memory[] makeArguments(Environment env, Memory[] args,\n                                        ParameterEntity[] parameters,\n                                        String originClassName, String originMethodName,\n-                                       TraceInfo trace){\n+                                       TraceInfo trace) {\n         return InvokeArgumentHelper.makeArguments(env, args, parameters, originClassName, originMethodName, trace);\n     }\n \n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n\ndiff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
      "atomicChanges": [
        {
          "change": "diff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n\ndiff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n\ndiff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n\ndiff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } ",
      "atomicChanges": [
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } ",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n\ndiff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\nindex 9850262..1018d2b 100755\n--- a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n+++ b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n@@ -357,8 +357,9 @@ public class OStorageRemote extends OStorageAbstract implements OStorageProxy {\n \r\n       status = STATUS.CLOSING;\r\n       // CLOSE ALL THE CONNECTIONS\r\n-      engine.getConnectionManager().closePool(getCurrentServerURL());\r\n-\r\n+      for(String url: serverURLs) {\r\n+        engine.getConnectionManager().closePool(url);\r\n+      }\r\n       sbTreeCollectionManager.close();\r\n \r\n       super.close(iForce, onDelete);\r\n\ndiff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\nindex 9850262..1018d2b 100755\n--- a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n+++ b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n@@ -357,8 +357,9 @@ public class OStorageRemote extends OStorageAbstract implements OStorageProxy {\n \r\n       status = STATUS.CLOSING;\r\n       // CLOSE ALL THE CONNECTIONS\r\n-      engine.getConnectionManager().closePool(getCurrentServerURL());\r\n-\r\n+      for(String url: serverURLs) {\r\n+        engine.getConnectionManager().closePool(url);\r\n+      }\r\n       sbTreeCollectionManager.close();\r\n \r\n       super.close(iForce, onDelete);\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\nindex b410481e3..ed7cbf127 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n@@ -1178,7 +1178,6 @@ public class OneToOneCallPeerPanel\n      */\n     public void removeMouseAndKeyListeners()\n     {\n-        System.out.println(\"REMOVE MOUSE AND KEY LISTENERSSSSSSSSSSS=======\" + remoteVideo);\n         if(remoteVideo != null)\n         {\n             remoteVideo.removeKeyListener(mouseAndKeyListener);\n@@ -1270,7 +1269,6 @@ public class OneToOneCallPeerPanel\n          */\n         public void mouseMoved(MouseEvent event)\n         {\n-            System.out.println(\"MOUSE MOVED!!!!!!!!!!!!!!!!!!!!\");\n             if(System.currentTimeMillis() > lastMouseMovedTime + 50)\n             {\n                 desktopSharingClient.sendMouseEvent(callPeer, event,\n\ndiff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\nindex b410481e3..ed7cbf127 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n@@ -1178,7 +1178,6 @@ public class OneToOneCallPeerPanel\n      */\n     public void removeMouseAndKeyListeners()\n     {\n-        System.out.println(\"REMOVE MOUSE AND KEY LISTENERSSSSSSSSSSS=======\" + remoteVideo);\n         if(remoteVideo != null)\n         {\n             remoteVideo.removeKeyListener(mouseAndKeyListener);\n@@ -1270,7 +1269,6 @@ public class OneToOneCallPeerPanel\n          */\n         public void mouseMoved(MouseEvent event)\n         {\n-            System.out.println(\"MOUSE MOVED!!!!!!!!!!!!!!!!!!!!\");\n             if(System.currentTimeMillis() > lastMouseMovedTime + 50)\n             {\n                 desktopSharingClient.sendMouseEvent(callPeer, event,\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n\ndiff --git a/style.py b/style.py\nindex a622d98..894c64d 100644\n--- a/style.py\n+++ b/style.py\n@@ -1,7 +1,6 @@\n-def add(x: int,y: int)->int:\n+def add(x: int, y: int) -> int:\n     #Add two numbers\n     result=x+y\n-    \n+\n     return result\n \n-print(add(5,3))\n\\ No newline at end of file\n+print(add(5, 3))",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/style.py b/style.py\nindex a622d98..894c64d 100644\n--- a/style.py\n+++ b/style.py\n@@ -1,7 +1,6 @@\n-def add(x: int,y: int)->int:\n+def add(x: int, y: int) -> int:\n     #Add two numbers\n     result=x+y\n-    \n+\n     return result\n \n-print(add(5,3))\n\\ No newline at end of file\n+print(add(5, 3))",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n\ndiff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
          "label": "style"
        },
        {
          "change": "diff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n",
          "label": "refactor"
        }
      ]
    }
  ]
}