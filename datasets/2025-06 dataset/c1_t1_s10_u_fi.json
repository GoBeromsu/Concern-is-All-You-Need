{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 1,
    "types": [
      "fix"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\nindex ded2abb..237f3a2 100644\n--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\n+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\n@@ -105,7 +105,7 @@ public class BulkProcessorIT extends ESIntegTestCase {\n     public void testBulkProcessorConcurrentRequests() throws Exception {\n         int bulkActions = randomIntBetween(10, 100);\n         int numDocs = randomIntBetween(bulkActions, bulkActions + 100);\n-        int concurrentRequests = randomIntBetween(0, 10);\n+        int concurrentRequests = randomIntBetween(0, 7);\n \n         int expectedBulkActions = numDocs / bulkActions;\n \n@@ -141,7 +141,7 @@ public class BulkProcessorIT extends ESIntegTestCase {\n \n         Set<String> ids = new HashSet<>();\n         for (BulkItemResponse bulkItemResponse : listener.bulkItems) {\n-            assertThat(bulkItemResponse.isFailed(), equalTo(false));\n+            assertThat(bulkItemResponse.getFailureMessage(), bulkItemResponse.isFailed(), equalTo(false));\n             assertThat(bulkItemResponse.getIndex(), equalTo(\"test\"));\n             assertThat(bulkItemResponse.getType(), equalTo(\"test\"));\n             //with concurrent requests > 1 we can't rely on the order of the bulk requests\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\nindex ded2abb..237f3a2 100644\n--- a/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\n+++ b/core/src/test/java/org/elasticsearch/action/bulk/BulkProcessorIT.java\n@@ -105,7 +105,7 @@ public class BulkProcessorIT extends ESIntegTestCase {\n     public void testBulkProcessorConcurrentRequests() throws Exception {\n         int bulkActions = randomIntBetween(10, 100);\n         int numDocs = randomIntBetween(bulkActions, bulkActions + 100);\n-        int concurrentRequests = randomIntBetween(0, 10);\n+        int concurrentRequests = randomIntBetween(0, 7);\n \n         int expectedBulkActions = numDocs / bulkActions;\n \n@@ -141,7 +141,7 @@ public class BulkProcessorIT extends ESIntegTestCase {\n \n         Set<String> ids = new HashSet<>();\n         for (BulkItemResponse bulkItemResponse : listener.bulkItems) {\n-            assertThat(bulkItemResponse.isFailed(), equalTo(false));\n+            assertThat(bulkItemResponse.getFailureMessage(), bulkItemResponse.isFailed(), equalTo(false));\n             assertThat(bulkItemResponse.getIndex(), equalTo(\"test\"));\n             assertThat(bulkItemResponse.getType(), equalTo(\"test\"));\n             //with concurrent requests > 1 we can't rely on the order of the bulk requests\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java b/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\nindex c43a1bc..e8225d4 100644\n--- a/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\n+++ b/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\n@@ -82,7 +82,7 @@ public class ResourceAwareExampleTopology {\n      * Use to limit the maximum amount of memory (in MB) allocated to one worker process.\n      * Can be used to spread executors to to multiple workers\n      */\n-    conf.setTopologyWorkerMaxHeapSize(512.0);\n+    conf.setTopologyWorkerMaxHeapSize(1024.0);\n \n     if (args != null && args.length > 0) {\n       conf.setNumWorkers(3);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java b/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\nindex c43a1bc..e8225d4 100644\n--- a/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\n+++ b/examples/storm-starter/src/jvm/storm/starter/ResourceAwareExampleTopology.java\n@@ -82,7 +82,7 @@ public class ResourceAwareExampleTopology {\n      * Use to limit the maximum amount of memory (in MB) allocated to one worker process.\n      * Can be used to spread executors to to multiple workers\n      */\n-    conf.setTopologyWorkerMaxHeapSize(512.0);\n+    conf.setTopologyWorkerMaxHeapSize(1024.0);\n \n     if (args != null && args.length > 0) {\n       conf.setNumWorkers(3);\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\nindex 1030114..ecccdc5 100644\n--- a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n+++ b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n@@ -503,9 +503,7 @@ public class StickyListHeadersListView extends FrameLayout {\n \tprivate int getHeaderOverlap(int position) {\n \t\tboolean isStartOfSection = isStartOfSection(position);\n \t\tif (!isStartOfSection) {\n-\t\t\tView header = mAdapter.getHeaderView(position, null, mList);\n-\t\t\theader.setLayoutParams(new ViewGroup.LayoutParams(\n-\t\t\t\t\tLayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n+\t\t\tView header = mAdapter.getView(position, null, mList);\n \n \t\t\tfinal int width = getWidth();\n \t\t\tfinal int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(\n",
      "atomicChanges": [
        {
          "change": "diff --git a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\nindex 1030114..ecccdc5 100644\n--- a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n+++ b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n@@ -503,9 +503,7 @@ public class StickyListHeadersListView extends FrameLayout {\n \tprivate int getHeaderOverlap(int position) {\n \t\tboolean isStartOfSection = isStartOfSection(position);\n \t\tif (!isStartOfSection) {\n-\t\t\tView header = mAdapter.getHeaderView(position, null, mList);\n-\t\t\theader.setLayoutParams(new ViewGroup.LayoutParams(\n-\t\t\t\t\tLayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n+\t\t\tView header = mAdapter.getView(position, null, mList);\n \n \t\t\tfinal int width = getWidth();\n \t\t\tfinal int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/widget/CheckedTextView.java b/core/java/android/widget/CheckedTextView.java\nindex de8b80d..3f080d6 100644\n--- a/core/java/android/widget/CheckedTextView.java\n+++ b/core/java/android/widget/CheckedTextView.java\n@@ -242,7 +242,7 @@ public class CheckedTextView extends TextView implements Checkable {\n                 right = width - mBasePadding;\n                 left = right - mCheckMarkWidth;\n             }\n-            checkMarkDrawable.setBounds( left, top, right, bottom);\n+            checkMarkDrawable.setBounds(mScrollX + left, top, mScrollX + right, bottom);\n             checkMarkDrawable.draw(canvas);\n         }\n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/widget/CheckedTextView.java b/core/java/android/widget/CheckedTextView.java\nindex de8b80d..3f080d6 100644\n--- a/core/java/android/widget/CheckedTextView.java\n+++ b/core/java/android/widget/CheckedTextView.java\n@@ -242,7 +242,7 @@ public class CheckedTextView extends TextView implements Checkable {\n                 right = width - mBasePadding;\n                 left = right - mCheckMarkWidth;\n             }\n-            checkMarkDrawable.setBounds( left, top, right, bottom);\n+            checkMarkDrawable.setBounds(mScrollX + left, top, mScrollX + right, bottom);\n             checkMarkDrawable.draw(canvas);\n         }\n     }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java b/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\nindex 6869dfbeb..18ff4a3c8 100644\n--- a/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\n+++ b/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\n@@ -208,7 +208,7 @@ public class ZLAndroidWidget extends View implements View.OnLongClickListener {\n \t\t}\n \t\tfinal AnimationProvider animator = getAnimationProvider();\n \t\tfinal int w = getWidth();\n-\t\tfinal int h = getHeight();\n+\t\tfinal int h = getMainAreaHeight();\n \t\tswitch (pageIndex) {\n \t\t\tcase current:\n \t\t\t\tswitch (myPageToScrollTo) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java b/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\nindex 6869dfbeb..18ff4a3c8 100644\n--- a/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\n+++ b/src/org/geometerplus/zlibrary/ui/android/view/ZLAndroidWidget.java\n@@ -208,7 +208,7 @@ public class ZLAndroidWidget extends View implements View.OnLongClickListener {\n \t\t}\n \t\tfinal AnimationProvider animator = getAnimationProvider();\n \t\tfinal int w = getWidth();\n-\t\tfinal int h = getHeight();\n+\t\tfinal int h = getMainAreaHeight();\n \t\tswitch (pageIndex) {\n \t\t\tcase current:\n \t\t\t\tswitch (myPageToScrollTo) {\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\nindex b8f0d07..05c37d1 100644\n--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -5045,15 +5045,14 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n                 if (activitiesToEnable != null) {\n                     for (ResolveInfo info : activitiesToEnable) {\n                         if (info.activityInfo != null) {\n-\n-                            if (!isSystemApp(pm, info.activityInfo.packageName, primaryUser.id)) {\n-                                throw new IllegalArgumentException(\n-                                        \"Only system apps can be enabled this way.\");\n+                            String packageName = info.activityInfo.packageName;\n+                            if (isSystemApp(pm, packageName, primaryUser.id)) {\n+                                numberOfAppsInstalled++;\n+                                pm.installExistingPackageAsUser(packageName, userId);\n+                            } else {\n+                                Slog.d(LOG_TAG, \"Not enabling \" + packageName + \" since is not a\"\n+                                        + \" system app\");\n                             }\n-\n-\n-                            numberOfAppsInstalled++;\n-                            pm.installExistingPackageAsUser(info.activityInfo.packageName, userId);\n                         }\n                     }\n                 }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\nindex b8f0d07..05c37d1 100644\n--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -5045,15 +5045,14 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n                 if (activitiesToEnable != null) {\n                     for (ResolveInfo info : activitiesToEnable) {\n                         if (info.activityInfo != null) {\n-\n-                            if (!isSystemApp(pm, info.activityInfo.packageName, primaryUser.id)) {\n-                                throw new IllegalArgumentException(\n-                                        \"Only system apps can be enabled this way.\");\n+                            String packageName = info.activityInfo.packageName;\n+                            if (isSystemApp(pm, packageName, primaryUser.id)) {\n+                                numberOfAppsInstalled++;\n+                                pm.installExistingPackageAsUser(packageName, userId);\n+                            } else {\n+                                Slog.d(LOG_TAG, \"Not enabling \" + packageName + \" since is not a\"\n+                                        + \" system app\");\n                             }\n-\n-\n-                            numberOfAppsInstalled++;\n-                            pm.installExistingPackageAsUser(info.activityInfo.packageName, userId);\n                         }\n                     }\n                 }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
          "label": "fix"
        }
      ]
    }
  ]
}