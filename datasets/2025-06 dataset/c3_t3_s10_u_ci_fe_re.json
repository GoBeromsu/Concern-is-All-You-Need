{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "feat",
      "refactor",
      "cicd"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n\ndiff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:\ndiff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        },
        {
          "change": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }\ndiff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }\ndiff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n\ndiff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
      "atomicChanges": [
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n\ndiff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests\ndiff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests",
          "label": "cicd"
        },
        {
          "change": "diff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n\ndiff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 195d357..eff2b39 100644\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -416,6 +416,8 @@ public class ParserConfig {\n \r\n         try {\r\n             return ASMDeserializerFactory.getInstance().createJavaBeanDeserializer(this, clazz, type);\r\n+        } catch (NoSuchMethodException error) {\r\n+            return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (ASMException asmError) {\r\n             return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (Exception e) {\r\n@@ -445,8 +447,7 @@ public class ParserConfig {\n         try {\r\n             return ASMDeserializerFactory.getInstance().createFieldDeserializer(mapping, clazz, fieldInfo);\r\n         } catch (Throwable e) {\r\n-            // TODO Auto-generated catch block\r\n-            e.printStackTrace();\r\n+            // skip\r\n         }\r\n \r\n         return createFieldDeserializerWithoutASM(mapping, clazz, fieldInfo);\r\n\ndiff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 195d357..eff2b39 100644\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -416,6 +416,8 @@ public class ParserConfig {\n \r\n         try {\r\n             return ASMDeserializerFactory.getInstance().createJavaBeanDeserializer(this, clazz, type);\r\n+        } catch (NoSuchMethodException error) {\r\n+            return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (ASMException asmError) {\r\n             return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (Exception e) {\r\n@@ -445,8 +447,7 @@ public class ParserConfig {\n         try {\r\n             return ASMDeserializerFactory.getInstance().createFieldDeserializer(mapping, clazz, fieldInfo);\r\n         } catch (Throwable e) {\r\n-            // TODO Auto-generated catch block\r\n-            e.printStackTrace();\r\n+            // skip\r\n         }\r\n \r\n         return createFieldDeserializerWithoutASM(mapping, clazz, fieldInfo);\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective\ndiff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        },
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/water/api/AUC.java b/src/main/java/water/api/AUC.java\nindex 4565f2772..0ee579dcd 100644\n--- a/src/main/java/water/api/AUC.java\n+++ b/src/main/java/water/api/AUC.java\n@@ -122,6 +122,7 @@ public class AUC extends Func {\n     precision = null;\n     recall = null;\n     specificity = null;\n+    mcc = null;\n     max_per_class_error = null;\n     threshold_for_criteria = null;\n     F1_for_criteria = null;\n@@ -523,6 +524,7 @@ public class AUC extends Func {\n       sb.append(\"\\t\" + \"document.getElementById('precision').innerHTML = precision[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('recall').innerHTML = recall[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('specificity').innerHTML = specificity[i];\\n\");\n+      sb.append(\"\\t\" + \"document.getElementById('mcc').innerHTML = mcc[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('max_per_class_error').innerHTML = max_per_class_error[i];\\n\");\n       sb.append(\"\\t\" + \"update(dataset);\\n\");\n       sb.append(\"}\\n\");\n\ndiff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/water/api/AUC.java b/src/main/java/water/api/AUC.java\nindex 4565f2772..0ee579dcd 100644\n--- a/src/main/java/water/api/AUC.java\n+++ b/src/main/java/water/api/AUC.java\n@@ -122,6 +122,7 @@ public class AUC extends Func {\n     precision = null;\n     recall = null;\n     specificity = null;\n+    mcc = null;\n     max_per_class_error = null;\n     threshold_for_criteria = null;\n     F1_for_criteria = null;\n@@ -523,6 +524,7 @@ public class AUC extends Func {\n       sb.append(\"\\t\" + \"document.getElementById('precision').innerHTML = precision[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('recall').innerHTML = recall[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('specificity').innerHTML = specificity[i];\\n\");\n+      sb.append(\"\\t\" + \"document.getElementById('mcc').innerHTML = mcc[i];\\n\");\n       sb.append(\"\\t\" + \"document.getElementById('max_per_class_error').innerHTML = max_per_class_error[i];\\n\");\n       sb.append(\"\\t\" + \"update(dataset);\\n\");\n       sb.append(\"}\\n\");\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    }
  ]
}