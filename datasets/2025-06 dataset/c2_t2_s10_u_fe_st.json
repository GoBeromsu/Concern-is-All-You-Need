{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "feat",
      "style"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n\ndiff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n\ndiff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n\ndiff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/com/fsck/k9/activity/MessageList.java b/src/com/fsck/k9/activity/MessageList.java\nindex d68a7e0..ffa6a0a 100644\n--- a/src/com/fsck/k9/activity/MessageList.java\n+++ b/src/com/fsck/k9/activity/MessageList.java\n@@ -2378,7 +2378,7 @@ public class MessageList extends K9ListActivity implements\n     }\n \n     private void toggleAllSelected() {\n-\tboolean newState = true;\n+        boolean newState = true;\n \n         synchronized (mAdapter.messages) {\n             if (mSelectedCount > 0) {\n@@ -2939,9 +2939,9 @@ public class MessageList extends K9ListActivity implements\n \t            break;\n \t        }\n \t        case R.id.same_sender: {\n-\t            MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n-\t\t\t\tselection.get(0).senderAddress, false, null, null);\n-\t\t\t\tmSelectedCount = 0;\n+                MessageList.actionHandle(MessageList.this, \"From \" + selection.get(0).sender,\n+                    selection.get(0).senderAddress, false, null, null);\n+                mSelectedCount = 0;\n \t            break;\n \t        }\n \t\t\t}\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n\ndiff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
      "atomicChanges": [
        {
          "change": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\nindex 6d491ae..2073210 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n@@ -35,7 +35,9 @@ public class FileWatchInputs {\n         return directories;\n     }\n \n-    public List<File> getFiles() { return files; }\n+    public List<File> getFiles() {\n+        return files;\n+    }\n \n     public static Builder newBuilder() {\n         return new Builder();\n\ndiff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\nindex 6d491ae..2073210 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n@@ -35,7 +35,9 @@ public class FileWatchInputs {\n         return directories;\n     }\n \n-    public List<File> getFiles() { return files; }\n+    public List<File> getFiles() {\n+        return files;\n+    }\n \n     public static Builder newBuilder() {\n         return new Builder();\n",
          "label": "style"
        },
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\nindex d0f4734..8ab8aca 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\n@@ -21,5 +21,4 @@ public class DefaultBuildSuccessResult extends AbstractBuildResult implements In\n     public DefaultBuildSuccessResult(long startTime, long endTime) {\n         super(startTime, endTime, \"succeeded\");\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\nindex 2545e1b..8ffe007 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTaskSuccessResult;\n \n public class DefaultTaskSuccessResult extends AbstractTaskResult implements InternalTaskSuccessResult {\n-\n     public DefaultTaskSuccessResult(long startTime, long endTime, String outcomeDescription) {\n         super(startTime, endTime, outcomeDescription);\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\nindex 1b4db01..5b99515 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTestSkippedResult;\n \n public class DefaultTestSkippedResult extends AbstractTestResult implements InternalTestSkippedResult {\n-\n     public DefaultTestSkippedResult(long startTime, long endTime) {\n         super(startTime, endTime, \"skipped\");\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\nindex 0b48ec4..db657cb 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTestSuccessResult;\n \n public class DefaultTestSuccessResult extends AbstractTestResult implements InternalTestSuccessResult {\n-\n     public DefaultTestSuccessResult(long startTime, long endTime) {\n         super(startTime, endTime, \"succeeded\");\n     }\n-\n }\n\ndiff --git a/jodd-http/src/main/java/jodd/http/HttpBrowser.java b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\nindex 7625e5db..ca05d2ff 100644\n--- a/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n+++ b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n@@ -176,7 +176,6 @@ public class HttpBrowser {\n \t\tif (newCookies != null) {\n \t\t\tfor (String cookieValue : newCookies) {\n \t\t\t\tCookie cookie = new Cookie(cookieValue);\n-\n \t\t\t\tcookies.put(cookie.getName(), cookie);\n \t\t\t}\n \t\t}\n@@ -193,6 +192,12 @@ public class HttpBrowser {\n \n \t\tif (!cookies.isEmpty()) {\n \t\t\tfor (Cookie cookie: cookies.values()) {\n+                \n+\t\t\t    Integer maxAge = cookie.getMaxAge();\n+\t\t\t\tif (maxAge != null && maxAge.intValue() == 0) {\n+\t\t\t\t    continue;\n+\t\t\t\t}\n+\n \t\t\t\tif (!first) {\n \t\t\t\t\tcookieString.append(\"; \");\n \t\t\t\t}\n@@ -205,4 +210,4 @@ public class HttpBrowser {\n \t\t\thttpRequest.header(\"cookie\", cookieString.toString(), true);\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\nindex d0f4734..8ab8aca 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultBuildSuccessResult.java\n@@ -21,5 +21,4 @@ public class DefaultBuildSuccessResult extends AbstractBuildResult implements In\n     public DefaultBuildSuccessResult(long startTime, long endTime) {\n         super(startTime, endTime, \"succeeded\");\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\nindex 2545e1b..8ffe007 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTaskSuccessResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTaskSuccessResult;\n \n public class DefaultTaskSuccessResult extends AbstractTaskResult implements InternalTaskSuccessResult {\n-\n     public DefaultTaskSuccessResult(long startTime, long endTime, String outcomeDescription) {\n         super(startTime, endTime, outcomeDescription);\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\nindex 1b4db01..5b99515 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSkippedResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTestSkippedResult;\n \n public class DefaultTestSkippedResult extends AbstractTestResult implements InternalTestSkippedResult {\n-\n     public DefaultTestSkippedResult(long startTime, long endTime) {\n         super(startTime, endTime, \"skipped\");\n     }\n-\n }\ndiff --git a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\nindex 0b48ec4..db657cb 100644\n--- a/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\n+++ b/subprojects/launcher/src/main/java/org/gradle/tooling/internal/provider/events/DefaultTestSuccessResult.java\n@@ -19,9 +19,7 @@ package org.gradle.tooling.internal.provider.events;\n import org.gradle.tooling.internal.protocol.events.InternalTestSuccessResult;\n \n public class DefaultTestSuccessResult extends AbstractTestResult implements InternalTestSuccessResult {\n-\n     public DefaultTestSuccessResult(long startTime, long endTime) {\n         super(startTime, endTime, \"succeeded\");\n     }\n-\n }\n",
          "label": "style"
        },
        {
          "change": "diff --git a/jodd-http/src/main/java/jodd/http/HttpBrowser.java b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\nindex 7625e5db..ca05d2ff 100644\n--- a/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n+++ b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n@@ -176,7 +176,6 @@ public class HttpBrowser {\n \t\tif (newCookies != null) {\n \t\t\tfor (String cookieValue : newCookies) {\n \t\t\t\tCookie cookie = new Cookie(cookieValue);\n-\n \t\t\t\tcookies.put(cookie.getName(), cookie);\n \t\t\t}\n \t\t}\n@@ -193,6 +192,12 @@ public class HttpBrowser {\n \n \t\tif (!cookies.isEmpty()) {\n \t\t\tfor (Cookie cookie: cookies.values()) {\n+                \n+\t\t\t    Integer maxAge = cookie.getMaxAge();\n+\t\t\t\tif (maxAge != null && maxAge.intValue() == 0) {\n+\t\t\t\t    continue;\n+\t\t\t\t}\n+\n \t\t\t\tif (!first) {\n \t\t\t\t\tcookieString.append(\"; \");\n \t\t\t\t}\n@@ -205,4 +210,4 @@ public class HttpBrowser {\n \t\t\thttpRequest.header(\"cookie\", cookieString.toString(), true);\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n\ndiff --git a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\nindex cc4c99f86c..4fd55218ac 100644\n--- a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n+++ b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n@@ -108,6 +108,10 @@ public class JLanguageTool {\n   private static String getBuildDate() {\n     try {\n       final URL res = JLanguageTool.class.getResource(JLanguageTool.class.getSimpleName() + \".class\");\n+      if (res == null) {\n+        // this will happen on Android, see http://stackoverflow.com/questions/15371274/\n+        return null;\n+      }\n       final Object connObj = res.openConnection();\n       if (connObj instanceof JarURLConnection) {\n         final JarURLConnection conn = (JarURLConnection) connObj;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
          "label": "style"
        },
        {
          "change": "diff --git a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\nindex cc4c99f86c..4fd55218ac 100644\n--- a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n+++ b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n@@ -108,6 +108,10 @@ public class JLanguageTool {\n   private static String getBuildDate() {\n     try {\n       final URL res = JLanguageTool.class.getResource(JLanguageTool.class.getSimpleName() + \".class\");\n+      if (res == null) {\n+        // this will happen on Android, see http://stackoverflow.com/questions/15371274/\n+        return null;\n+      }\n       final Object connObj = res.openConnection();\n       if (connObj instanceof JarURLConnection) {\n         final JarURLConnection conn = (JarURLConnection) connObj;\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\nindex cbc835175..bd74cc0cb 100644\n--- a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n+++ b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n@@ -95,6 +95,8 @@ public class ConfigurationProperty {\n                 return Integer.valueOf((String) value);\n             } else if (type.equals(BigDecimal.class)) {\n                 return new BigDecimal((String) value);\n+            } else if (type.equals(Long.class)) {\n+            \treturn new Long((String) value);\n             } else {\n                 throw new UnexpectedLiquibaseException(\"Cannot parse property \"+type.getSimpleName()+\" to a \"+type.getSimpleName());\n             }\n\ndiff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\nindex cbc835175..bd74cc0cb 100644\n--- a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n+++ b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n@@ -95,6 +95,8 @@ public class ConfigurationProperty {\n                 return Integer.valueOf((String) value);\n             } else if (type.equals(BigDecimal.class)) {\n                 return new BigDecimal((String) value);\n+            } else if (type.equals(Long.class)) {\n+            \treturn new Long((String) value);\n             } else {\n                 throw new UnexpectedLiquibaseException(\"Cannot parse property \"+type.getSimpleName()+\" to a \"+type.getSimpleName());\n             }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/style.py b/style.py\nindex a622d98..894c64d 100644\n--- a/style.py\n+++ b/style.py\n@@ -1,7 +1,6 @@\n-def add(x: int,y: int)->int:\n+def add(x: int, y: int) -> int:\n     #Add two numbers\n     result=x+y\n-    \n+\n     return result\n \n-print(add(5,3))\n\\ No newline at end of file\n+print(add(5, 3))\ndiff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\nindex ab142a0..04dba3f 100644\n--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n@@ -80,4 +80,12 @@ public class Join<SRC, DST> {\n         return whereCollector.combineWhereConditions(\" AND \", cond1, cond2, condMore);\n     }\n \n+    /**\n+     * Usually you don't need this value; just in case you are mixing custom\n+     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference\n+     * the joined (target) table.\n+     */\n+    public String getTablePrefix() {\n+        return tablePrefix;\n+    }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/style.py b/style.py\nindex a622d98..894c64d 100644\n--- a/style.py\n+++ b/style.py\n@@ -1,7 +1,6 @@\n-def add(x: int,y: int)->int:\n+def add(x: int, y: int) -> int:\n     #Add two numbers\n     result=x+y\n-    \n+\n     return result\n \n-print(add(5,3))\n\\ No newline at end of file\n+print(add(5, 3))",
          "label": "style"
        },
        {
          "change": "diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\nindex ab142a0..04dba3f 100644\n--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n@@ -80,4 +80,12 @@ public class Join<SRC, DST> {\n         return whereCollector.combineWhereConditions(\" AND \", cond1, cond2, condMore);\n     }\n \n+    /**\n+     * Usually you don't need this value; just in case you are mixing custom\n+     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference\n+     * the joined (target) table.\n+     */\n+    public String getTablePrefix() {\n+        return tablePrefix;\n+    }\n }\n",
          "label": "feat"
        }
      ]
    }
  ]
}