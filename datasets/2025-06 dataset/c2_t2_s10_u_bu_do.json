{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "docs",
      "build"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n\ndiff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n\ndiff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n\ndiff --git a/Build.gradle b/Build.gradle\nindex 7e640d3..4644dd5 100644\n--- a/Build.gradle\n+++ b/Build.gradle\n@@ -4,9 +4,9 @@ apply plugin: 'eclipse'\n apply plugin: 'org.springframework.boot'\n \n dependencies {\n-    compile('org.springframework.boot:spring-boot-starter-data-jpa')\n-    compile('org.springframework.boot:spring-boot-starter-web')\n-    runtime('com.h2database:h2')\n+    compile('org.springframework.boot:spring-boot-starter-data-jpa:2.5.2')\n+    compile('org.springframework.boot:spring-boot-starter-web:2.5.2')\n+    runtime('com.h2database:h2:1.4.200')\n     testCompile('org.springframework.boot:spring-boot-starter-test')\n }\n \n@@ -14,6 +14,9 @@ bootJar {\n }\n \n bootRun {\n+    systemProperties = System.properties\n+    systemProperties['spring.profiles.active'] = 'dev'\n+    jvmArgs('-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005')\n     main = project.findProperty('mainClassName')\n }\n \n@@ -23,7 +26,7 @@ springBoot {\n }\n \n jar {\n-    manifest {\n+    manifest {\n         attributes 'Implementation-Title': 'Grails', 'Implementation-Version': version\n     }\n }\n@@ -31,4 +34,4 @@ jar {\n \n task wrapper(type: Wrapper) {\n     gradleVersion = '7.0'\n-}\n\\ No newline at end of file\n+}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/Build.gradle b/Build.gradle\nindex 7e640d3..4644dd5 100644\n--- a/Build.gradle\n+++ b/Build.gradle\n@@ -4,9 +4,9 @@ apply plugin: 'eclipse'\n apply plugin: 'org.springframework.boot'\n \n dependencies {\n-    compile('org.springframework.boot:spring-boot-starter-data-jpa')\n-    compile('org.springframework.boot:spring-boot-starter-web')\n-    runtime('com.h2database:h2')\n+    compile('org.springframework.boot:spring-boot-starter-data-jpa:2.5.2')\n+    compile('org.springframework.boot:spring-boot-starter-web:2.5.2')\n+    runtime('com.h2database:h2:1.4.200')\n     testCompile('org.springframework.boot:spring-boot-starter-test')\n }\n \n@@ -14,6 +14,9 @@ bootJar {\n }\n \n bootRun {\n+    systemProperties = System.properties\n+    systemProperties['spring.profiles.active'] = 'dev'\n+    jvmArgs('-Xdebug','-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005')\n     main = project.findProperty('mainClassName')\n }\n \n@@ -23,7 +26,7 @@ springBoot {\n }\n \n jar {\n-    manifest {\n+    manifest {\n         attributes 'Implementation-Title': 'Grails', 'Implementation-Version': version\n     }\n }\n@@ -31,4 +34,4 @@ jar {\n \n task wrapper(type: Wrapper) {\n     gradleVersion = '7.0'\n-}\n\\ No newline at end of file\n+}\n",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }\ndiff --git a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\nindex 9b52d39f4..9c08454de 100644\n--- a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n+++ b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n@@ -73,9 +73,9 @@ import org.slf4j.LoggerFactory;\n  * situations where legacy (ex/md5) password hashes were stored and then \"upgraded\" to a stronger hash algorithm.\r\n  * Hashes are executed left to right.</p>\r\n  * <p>Example Setting: \"md5,sha1\"<br>  \r\n- * Usage: password -><br>\r\n- * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-><br>\r\n- * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-></p>\r\n+ * Usage: password -&gt;<br>\r\n+ * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-&gt;<br>\r\n+ * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-&gt;</p>\r\n  * \r\n  * <p>Bcrypt is supported as a passwordType; however, when chaining password types it MUST be the last type given. (bcrypt hashes are different \r\n  * every time they are generated)</p>\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\nindex 9b52d39f4..9c08454de 100644\n--- a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n+++ b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n@@ -73,9 +73,9 @@ import org.slf4j.LoggerFactory;\n  * situations where legacy (ex/md5) password hashes were stored and then \"upgraded\" to a stronger hash algorithm.\r\n  * Hashes are executed left to right.</p>\r\n  * <p>Example Setting: \"md5,sha1\"<br>  \r\n- * Usage: password -><br>\r\n- * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-><br>\r\n- * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-></p>\r\n+ * Usage: password -&gt;<br>\r\n+ * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-&gt;<br>\r\n+ * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-&gt;</p>\r\n  * \r\n  * <p>Bcrypt is supported as a passwordType; however, when chaining password types it MUST be the last type given. (bcrypt hashes are different \r\n  * every time they are generated)</p>\r\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n\ndiff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
      "atomicChanges": [
        {
          "change": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>\ndiff --git a/src/com/android/email/activity/MessageView.java b/src/com/android/email/activity/MessageView.java\nindex 5f09a7d..71db1f7 100644\n--- a/src/com/android/email/activity/MessageView.java\n+++ b/src/com/android/email/activity/MessageView.java\n@@ -485,7 +485,7 @@ public class MessageView extends K9Activity\n         final WebSettings webSettings = mMessageContentView.getSettings();\n \n         webSettings.setSupportZoom(true);\n-        webSettings.setBuiltInZoomControls(true);\n+        //webSettings.setBuiltInZoomControls(true);\n         webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);\n \n         mAttachments.setVisibility(View.GONE);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>",
          "label": "build"
        },
        {
          "change": "diff --git a/src/com/android/email/activity/MessageView.java b/src/com/android/email/activity/MessageView.java\nindex 5f09a7d..71db1f7 100644\n--- a/src/com/android/email/activity/MessageView.java\n+++ b/src/com/android/email/activity/MessageView.java\n@@ -485,7 +485,7 @@ public class MessageView extends K9Activity\n         final WebSettings webSettings = mMessageContentView.getSettings();\n \n         webSettings.setSupportZoom(true);\n-        webSettings.setBuiltInZoomControls(true);\n+        //webSettings.setBuiltInZoomControls(true);\n         webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);\n \n         mAttachments.setVisibility(View.GONE);\n",
          "label": "docs"
        }
      ]
    }
  ]
}