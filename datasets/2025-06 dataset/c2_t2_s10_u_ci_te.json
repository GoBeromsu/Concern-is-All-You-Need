{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "test",
      "cicd"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\nindex 8f932cf339..da93bce36c 100644\n--- a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n+++ b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n@@ -24,7 +24,7 @@ import org.junit.Test;\n \n public class HttpProxyRouteTest extends BaseJettyTest {\n \n-    private int size = 500;\n+    private int size = 10;\n \n     @Test\n     public void testHttpProxy() throws Exception {\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\nindex 8f932cf339..da93bce36c 100644\n--- a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n+++ b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n@@ -24,7 +24,7 @@ import org.junit.Test;\n \n public class HttpProxyRouteTest extends BaseJettyTest {\n \n-    private int size = 500;\n+    private int size = 10;\n \n     @Test\n     public void testHttpProxy() throws Exception {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
          "label": "test"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n\ndiff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
      "atomicChanges": [
        {
          "change": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n",
          "label": "test"
        },
        {
          "change": "diff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests\ndiff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests",
          "label": "cicd"
        },
        {
          "change": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }\ndiff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\nindex 43e4c2fa43..19dd78fcb6 100644\n--- a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n+++ b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n@@ -29,7 +29,7 @@ import org.apache.camel.component.mock.MockEndpoint;\n  * @version $Revision$\n  */\n public class HttpGetTest extends ContextTestSupport {\n-    protected String expectedText = \"<html\";\n+    protected String expectedText = \"activemq\";\n \n     public void testHttpGet() throws Exception {\n         MockEndpoint mockEndpoint = resolveMandatoryEndpoint(\"mock:results\", MockEndpoint.class);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\nindex 43e4c2fa43..19dd78fcb6 100644\n--- a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n+++ b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n@@ -29,7 +29,7 @@ import org.apache.camel.component.mock.MockEndpoint;\n  * @version $Revision$\n  */\n public class HttpGetTest extends ContextTestSupport {\n-    protected String expectedText = \"<html\";\n+    protected String expectedText = \"activemq\";\n \n     public void testHttpGet() throws Exception {\n         MockEndpoint mockEndpoint = resolveMandatoryEndpoint(\"mock:results\", MockEndpoint.class);\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all\ndiff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
          "label": "test"
        }
      ]
    }
  ]
}