repository_name,type,git_diff
camunda/zeebe,build,"diff --git a/parent/pom.xml b/parent/pom.xml
index ec0cd8c..e1f9bee 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -811,7 +811,6 @@
               different branches which need to compare to different versions
               -->
             <oldVersion>${backwards.compat.version}</oldVersion>
-            <skip>${skipChecks}</skip>
           </configuration>
         </plugin>
 

diff --git a/atomix/cluster/pom.xml b/atomix/cluster/pom.xml
index a477873..b6db695 100644
--- a/atomix/cluster/pom.xml
+++ b/atomix/cluster/pom.xml
@@ -69,6 +69,10 @@
     </dependency>
     <dependency>
       <groupId>io.netty</groupId>
+      <artifactId>netty-transport-classes-epoll</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>io.netty</groupId>
       <artifactId>netty-transport-native-epoll</artifactId>
       <classifier>linux-x86_64</classifier>
     </dependency>
@@ -278,6 +282,7 @@
             <dependency>uk.co.real-logic:sbe-tool</dependency>
             <dependency>net.jqwik:jqwik</dependency>
             <dependency>io.netty:netty-tcnative-boringssl-static</dependency>
+            <dependency>io.netty:netty-transport-native-epoll</dependency>
           </usedDependencies>
         </configuration>
       </plugin>

diff --git a/.github/actions/build-docker/action.yml b/.github/actions/build-docker/action.yml
index 25fb667..c83845b 100644
--- a/.github/actions/build-docker/action.yml
+++ b/.github/actions/build-docker/action.yml
@@ -81,8 +81,8 @@ runs:
         tags: ${{ steps.get-image.outputs.result }}
         load: ${{ inputs.push != 'true' }}
         push: ${{ inputs.push }}
-        cache-from: type=gha
-        cache-to: type=gha,mode=max
+        cache-from: type=gha,ignore-error=true
+        cache-to: type=gha,mode=max,ignore-error=true
         platforms: ${{ inputs.platforms }}
         build-args: |
           DISTBALL=${{ steps.get-distball.outputs.result }}
diff --git a/.github/workflows/benchmark.yml b/.github/workflows/benchmark.yml
index 6009cbb..da0905b 100644
--- a/.github/workflows/benchmark.yml
+++ b/.github/workflows/benchmark.yml
@@ -103,8 +103,8 @@ jobs:
           context: .
           tags: gcr.io/zeebe-io/zeebe:${{ steps.image-tag.outputs.image-tag }}
           push: true
-          cache-from: type=gha
-          cache-to: type=gha,mode=max
+          cache-from: type=gha,ignore-error=true
+          cache-to: type=gha,mode=max,ignore-error=true
           build-args: DIST=build
           target: app
   build-benchmark-images:

diff --git a/.github/workflows/os-smoke-test.yml b/.github/workflows/os-smoke-test.yml
index 194d108..7e41493 100644
--- a/.github/workflows/os-smoke-test.yml
+++ b/.github/workflows/os-smoke-test.yml
@@ -56,5 +56,7 @@ jobs:
         uses: JesseTG/rm@v1.0.2
         with:
           path: /Users/runner/.m2/repository/uk/co/real-logic/sbe-tool
+      - name: Build relevant modules
+        run: mvn -B -am -pl qa/integration-tests package -DskipTests -DskipChecks -T1C
       - name: Run smoke test
         run: mvn -B -pl qa/integration-tests verify -P smoke-test -DskipUTs -DskipChecks

diff --git a/clients/go/.gocompat.json b/clients/go/.gocompat.json
index 78dc1b6..c4e777f 100644
--- a/clients/go/.gocompat.json
+++ b/clients/go/.gocompat.json
@@ -1 +1 @@
-{""Packages"":[{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""objects"":{""Partition_PartitionBrokerRole_name"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},""PublishMessageResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""ThrowErrorRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ErrorCode"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetErrorCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""ThrowErrorResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""UpdateJobRetriesResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""CompleteJobResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_LEADER"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_LEADER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""File_gateway_proto"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""File_gateway_proto""},""type"":""var"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},""Gateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]}},""Partition_HEALTHY"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_HEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""RegisterGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""RegisterGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""}}],""Results"":null,""Variadic"":false}}},""ResolveIncidentResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""TopologyRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""ActivateJobsRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Timeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MaxJobsToActivate"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""FetchVariable"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMaxJobsToActivate"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetFetchVariable"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""CreateProcessInstanceResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""UnimplementedGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UnimplementedGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""GatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},""Gateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]}},""Partition_PartitionBrokerHealth_name"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},""ActivateJobsResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Jobs"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobs"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}],""Variadic"":false}]},""ActivatedJob"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessDefinitionVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ElementId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CustomHeaders"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Deadline"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetElementId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetCustomHeaders"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetDeadline"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""FailJobRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""NewGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""NewGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}}],""Variadic"":false}}},""Partition_UNHEALTHY"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_UNHEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""PublishMessageRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CorrelationKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TimeToLive"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MessageId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetCorrelationKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeToLive"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMessageId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""DeployProcessRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}],""Variadic"":false}]},""DeployProcessResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}],""Variadic"":false}]},""ProcessMetadata"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ResourceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetResourceName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""UpdateJobRetriesRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false}]},""CancelProcessInstanceResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""FailJobResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""CreateProcessInstanceRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""CreateProcessInstanceWithResultRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Request"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""FetchVariables"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetRequest"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetFetchVariables"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}]},""Partition_PartitionBrokerRole"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_PartitionBrokerRole_value"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},""CancelProcessInstanceRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""CompleteJobRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""Partition"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""PartitionId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Role"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}},{""Name"":""Health"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetPartitionId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetRole"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}],""Variadic"":false},{""Name"":""GetHealth"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}],""Variadic"":false}]},""Partition_INACTIVE"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_INACTIVE""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""ProcessRequestObject"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Definition"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDefinition"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},""ResolveIncidentRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""IncidentKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetIncidentKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""SetVariablesRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Local"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetLocal"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""SetVariablesResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""CreateProcessInstanceWithResultResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""GatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""Partition_PartitionBrokerHealth"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_PartitionBrokerHealth_value"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},""TopologyResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Brokers"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}},{""Name"":""ClusterSize"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""PartitionsCount"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ReplicationFactor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""GatewayVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBrokers"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}],""Variadic"":false},{""Name"":""GetClusterSize"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitionsCount"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetReplicationFactor"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetGatewayVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""BrokerInfo"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""NodeId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Port"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Partitions"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetNodeId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetHost"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetPort"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitions"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""Partition_FOLLOWER"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_FOLLOWER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""objects"":{""MapMapMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MapMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MapValueMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapValueMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""interface""}],""Variadic"":false}}},""NewJSONStringSerializer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""NewJSONStringSerializer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""}}],""Variadic"":false}}},""RPCTestMsg"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""RPCTestMsg""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Msg"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}}]},""methods"":[{""Name"":""Matches"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""SerializerMixin"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DefaultContainerWaitTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultContainerWaitTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""DefaultTestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""MapStructMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapStructMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""DefaultTestTimeoutInMs"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},""JSONStringSerializer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""JSONStringSerializer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""objects"":{""Job"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ActivatedJob"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}]},""methods"":[{""Name"":""GetVariablesAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetVariablesAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""objects"":{""ActivateJobsCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false}]}},""DefaultJobWorkerName"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""FailJobCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false}]}},""NewCancelInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCancelInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false}}},""TopologyCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CreateInstanceCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false}]}},""DefaultJobRetries"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobRetries""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""FailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""ResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchPublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchPublishMessageCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewActivateJobsCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false}}},""ResolveIncidentCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false}]}},""DefaultJobTimeoutInMs"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},""NewPublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewPublishMessageCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false}}},""ResolveIncidentCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false},{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""ActivateJobsCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},""CancelProcessInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]},""Command"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""},""type"":""type"",""definition"":{""type"":""struct""}},""DispatchFailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchFailJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchSetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewCompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCompleteJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false}}},""UpdateJobRetriesCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false}]}},""UpdateJobRetriesCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""CreateInstanceCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},""NewSetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewSetVariablesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false}}},""PublishMessageCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false}]}},""ThrowErrorCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false}]}},""CancelInstanceStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]}},""CreateInstanceCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},""DefaultJobTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""FailJobCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""LatestVersion"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""LatestVersion""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""NewCreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCreateInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false}}},""NewFailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewFailJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}}},""CompleteJobCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewTopologyCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewTopologyCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false}}},""PublishMessageCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false}]}},""ActivateJobsCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},""DispatchActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewResolveIncidentCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false}}},""PublishMessageCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ThrowErrorCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false}]}},""CompleteJobCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false}]}},""CreateInstanceWithResultCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchCreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false},{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DeployCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""AddResourceFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""AddResource"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchCancelProcessInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""PublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CreateInstanceWithResultCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""FailJobCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false}]}},""NewUpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewUpdateJobRetriesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}}},""SetVariablesCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""CompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""SetVariablesCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false}]}},""NewDeployCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewDeployCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false}}},""NewThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewThrowErrorCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false}}},""SetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchCompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchCreateInstanceWithResultCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchUpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""UpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""objects"":{""DefaultJobWorkerPollThreshold"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollThreshold""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped float""}}},""DefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""JobWorkerBuilderStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},""JobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},""NewJobWorkerBuilder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""NewJobWorkerBuilder""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false}}},""DefaultJobWorkerMaxJobActive"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerMaxJobActive""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""JobHandler"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}],""Results"":null,""Variadic"":false}}},""JobWorkerBuilderStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false}]}},""DefaultJobWorkerPollInterval"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollInterval""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""JobClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}]}},""JobWorker"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AwaitClose"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false}]}},""JobWorkerBuilder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false},{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false}]},""JobWorkerBuilderStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},""DefaultJobWorkerConcurrency"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerConcurrency""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""RequestTimeoutOffset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""RequestTimeoutOffset""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""objects"":{""AssetDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetDir""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""AssetInfo"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetInfo""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileInfo""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""AssetNames"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetNames""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MustAsset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""MustAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}}},""RestoreAsset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""RestoreAssets"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAssets""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""Asset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""Asset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""objects"":{""KeepAliveEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""KeepAliveEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""NewOAuthYamlCredentialsCache"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthYamlCredentialsCache""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""CaCertificatePath"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CaCertificatePath""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""Client"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}]}},""ClientImpl"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientImpl""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DefaultAddressPort"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressPort""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultOAuthCacheFileDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFileDir""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""GatewayAddressEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayAddressEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthAuthorizationUrlEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthAuthorizationUrlEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthCachePathEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCachePathEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthCredentialsCache"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Refresh"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Update"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""OAuthRequestTimeoutEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthRequestTimeoutEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""ErrFileNotFound"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrFileNotFound""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""ErrOAuthCredentialsCacheIsDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheIsDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""InsecureEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""InsecureEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""NewOAuthCredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthCredentialsProvider""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""DefaultAddressHost"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressHost""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultOAuthCacheFile"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFile""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""CredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]}},""DefaultKeepAlive"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultKeepAlive""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""GatewayPortEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayPortEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthClientIdEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientIdEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthDefaultAuthzURL"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultAuthzURL""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""ClientConfig"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""UsePlaintextConnection"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""CaCertificatePath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CredentialsProvider"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""}}},{""Name"":""KeepAlive"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""DialOpts"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""DialOption""}}}}]}},""DefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""NewClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""OAuthClientSecretEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientSecretEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthProviderConfig"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ClientID"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ClientSecret"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""AuthorizationServerURL"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}},{""Name"":""Timeout"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}}]}},""ErrOAuthCredentialsCacheFolderIsNotDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheFolderIsNotDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""Error"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""OAuthDefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""DefaultOauthYamlCachePath"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOauthYamlCachePath""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""GatewayHostEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayHostEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthCredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenConfig"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2/clientcredentials"",""name"":""Config""}}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}}]},""methods"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""OAuthTokenAudienceEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthTokenAudienceEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""objects"":{""DefaultJobWorkerName"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""Printable"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Printable""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""human"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""json"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""SetVariablesResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""SetVariablesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ThrowErrorResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ThrowErrorResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""Version"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Version""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""VersionString"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""VersionString""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}}},""ByPartitionID"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByPartitionID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""Commit"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Commit""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""CompleteJobResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CompleteJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""CancelInstanceResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CancelInstanceResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""StatusResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""StatusResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ResolveIncidentResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ResolveIncidentResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""UpdateJobRetriesResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""UpdateJobRetriesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ByNodeID"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByNodeID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""Execute"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Execute""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},""FailJobResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""FailJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl""},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""objects"":{""ContainerSuite"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""name"":""ContainerSuite""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""WaitTime"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""ContainerImage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayHost"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayPort"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Suite"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/stretchr/testify/suite"",""name"":""Suite""}}}]},""methods"":[{""Name"":""AfterTest"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""SetupSuite"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""TearDownSuite"",""Params"":null,""Results"":null,""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""objects"":{""MockGatewayClientMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true}]},""NewMockGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""}}}],""Variadic"":false}}},""NewMockGateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""}}}],""Variadic"":false}}},""NewMockJobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockJobWorkerMetrics""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""}}}],""Variadic"":false}}},""MockGatewayServerMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockGateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""}}}],""Variadic"":false},{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]},""MockJobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""}}}],""Variadic"":false},{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]},""MockGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""MockGateway_ActivateJobsClientMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockGateway_ActivateJobsServerMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]},""MockGateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]},""MockJobWorkerMetricsMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""NewMockGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""}}}],""Variadic"":false}}},""NewMockGateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""}}}],""Variadic"":false}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/test""}],""Reachable"":[{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Timeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MaxJobsToActivate"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""FetchVariable"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMaxJobsToActivate"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetFetchVariable"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Clear"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptor""}}],""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""GetUnknown"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""RawFields""}}],""Variadic"":false},{""Name"":""Has"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Interface"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Mutable"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""New"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""NewField"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""ProtoMethods"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}},{""Name"":""Size"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Size"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}]}],""Variadic"":false}}},{""Name"":""Marshal"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""Unmarshal"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}},{""Name"":""Resolver"",""Type"":{""type"":""interface"",""functions"":[{""Name"":""FindExtensionByName"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionType""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FindExtensionByNumber"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/encoding/protowire"",""name"":""Number""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionType""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""Merge"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Source"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Destination"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Variadic"":false}}},{""Name"":""CheckInitialized"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}}]}}],""Variadic"":false},{""Name"":""Range"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetUnknown"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""RawFields""}}],""Results"":null,""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageType""}}],""Variadic"":false},{""Name"":""WhichOneof"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""OneofDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Jobs"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobs"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessDefinitionVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ElementId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CustomHeaders"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Deadline"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetElementId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetCustomHeaders"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetDeadline"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""NodeId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Port"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Partitions"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetNodeId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetHost"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetPort"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitions"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""PartitionId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Role"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}},{""Name"":""Health"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetPartitionId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetRole"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}],""Variadic"":false},{""Name"":""GetHealth"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""ReservedNames"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Names""}}],""Variadic"":false},{""Name"":""ReservedRanges"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumRanges""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false},{""Name"":""Values"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumValueDescriptors""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""New"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Enum""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Request"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""FetchVariables"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetRequest"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetFetchVariables"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Definition"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDefinition"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ResourceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetResourceName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""File_gateway_proto""},""type"":""var"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""NewGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}}],""Variadic"":false}}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Invoke"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""NewStream"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientStream""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_FOLLOWER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_HEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_INACTIVE""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_LEADER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_UNHEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CorrelationKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TimeToLive"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MessageId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetCorrelationKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeToLive"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMessageId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""RegisterGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""}}],""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""RegisterService"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceDesc""}}},{""type"":""interface""}],""Results"":null,""Variadic"":false},{""Name"":""GetServiceInfo"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceInfo""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""Serve"",""Params"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Listener""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ServeHTTP"",""Params"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""ResponseWriter""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Results"":null,""Variadic"":false},{""Name"":""Stop"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""GracefulStop"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""serverWorkerData""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ServiceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""HandlerType"",""Type"":{""type"":""interface""}},{""Name"":""Methods"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodDesc""}}}},{""Name"":""Streams"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""}}}},{""Name"":""Metadata"",""Type"":{""type"":""interface""}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Methods"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodInfo""}}}},{""Name"":""Metadata"",""Type"":{""type"":""interface""}}]}},{""symbol"":{""package"":""net"",""name"":""Conn""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""LocalAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RemoteAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""SetDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetReadDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetWriteDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/credentials"",""name"":""AuthInfo""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AuthType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net"",""name"":""Listener""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Accept"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Conn""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Addr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""ServerTransport""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Drain"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""HandleStreams"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}}],""Results"":null,""Variadic"":false}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false}}],""Results"":null,""Variadic"":false},{""Name"":""IncrMsgRecv"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""IncrMsgSent"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""RemoteAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Options""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteHeader"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteStatus"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""ResponseWriter""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteHeader"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Request""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Method"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""URL"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""URL""}}}},{""Name"":""Proto"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProtoMajor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""ProtoMinor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}},{""Name"":""Body"",""Type"":{""type"":"""",""symbol"":{""package"":""io"",""name"":""ReadCloser""}}},{""Name"":""GetBody"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""ReadCloser""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""ContentLength"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""TransferEncoding"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""Close"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Form"",""Type"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""Values""}}},{""Name"":""PostForm"",""Type"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""Values""}}},{""Name"":""MultipartForm"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Form""}}}},{""Name"":""Trailer"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}},{""Name"":""RemoteAddr"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""RequestURI"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TLS"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""crypto/tls"",""name"":""ConnectionState""}}}},{""Name"":""Cancel"",""Type"":{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}},{""Name"":""Response"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Response""}}}}]},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""WithContext"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Variadic"":false},{""Name"":""Clone"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Variadic"":false},{""Name"":""ProtoAtLeast"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""UserAgent"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Cookies"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}}}],""Variadic"":false},{""Name"":""Cookie"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AddCookie"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}}],""Results"":null,""Variadic"":false},{""Name"":""Referer"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""MultipartReader"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Reader""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteProxy"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""BasicAuth"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""SetBasicAuth"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""ParseForm"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ParseMultipartForm"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FormValue"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""PostFormValue"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""FormFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""File""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""context"",""name"":""Context""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Deadline"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Done"",""Params"":null,""Results"":[{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}],""Variadic"":false},{""Name"":""Err"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Value"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""interface""}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Cookie""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Value"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Path"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Domain"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Expires"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}},{""Name"":""RawExpires"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""MaxAge"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Secure"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""HttpOnly"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""SameSite"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""SameSite""}}},{""Name"":""Raw"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Unparsed"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Reader""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ReadForm"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Form""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NextPart"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Part""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Form""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Value"",""Type"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""File"",""Type"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""}}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""RemoveAll"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Part""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}}]},""methods"":[{""Name"":""FormName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""FileName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""io"",""name"":""Writer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Header""},""type"":""type"",""definition"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""methods"":[{""Name"":""Add"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Del"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Clone"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}],""Variadic"":false},{""Name"":""WriteSubset"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""net/http/httptrace"",""name"":""ClientTrace""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GetConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}}},{""Name"":""GotConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""GotConnInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""PutIdleConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""GotFirstResponseByte"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Got100Continue"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Got1xxResponse"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""DNSStart"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""DNSStartInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""DNSDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""DNSDoneInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""ConnectStart"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}}},{""Name"":""ConnectDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""TLSHandshakeStart"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""TLSHandshakeDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""crypto/tls"",""name"":""ConnectionState""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""WroteHeaderField"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":false}}},{""Name"":""WroteHeaders"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Wait100Continue"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""WroteRequest"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""WroteRequestInfo""}}],""Results"":null,""Variadic"":false}}}]}},{""symbol"":{""package"":""net/http"",""name"":""keyValues""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""net/http"",""name"":""headerSorter""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""File""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ReadAt"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Seek"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Filename"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}},{""Name"":""Size"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""File""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""RecvCompress"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""SetSendCompress"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Done"",""Params"":null,""Results"":[{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TrailersOnly"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false},{""Name"":""ContentSubtype"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Method"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Status"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""BytesReceived"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Unprocessed"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""GoString"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""streamState""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""streamState""}}},{""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""},""type"":""type"",""definition"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Copy"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":true},{""Name"":""Append"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":true},{""Name"":""Delete"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Code"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""}}],""Variadic"":false},{""Name"":""Message"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Proto"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/genproto/googleapis/rpc/status"",""name"":""Status""}}}],""Variadic"":false},{""Name"":""Err"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithDetails"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/runtime/protoiface"",""name"":""MessageV1""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Details"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""UnmarshalJSON"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/genproto/googleapis/rpc/status"",""name"":""Status""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Code"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Message"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Details"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDetails"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""TypeUrl"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Value"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""MessageIs"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""MarshalFrom"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UnmarshalTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UnmarshalNew"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetTypeUrl"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetValue"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}},""methods"":[{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Append"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}},""methods"":[{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/runtime/protoiface"",""name"":""MessageV1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""recvMsg""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""traceInfo""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc/internal/channelz"",""name"":""ServerInternalMetric""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""CallsStarted"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CallsSucceeded"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CallsFailed"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""LastCallStartedTimestamp"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Compressor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Do"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Options""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Last"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc/encoding"",""name"":""Compressor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Compress"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""WriteCloser""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Decompress"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Reader""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Reader""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""serviceInfo""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""MethodName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Handler"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""methodHandler""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""StreamName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Handler"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamHandler""}}},{""Name"":""ServerStreams"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""ClientStreams"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""baseCodec""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Marshal"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Unmarshal"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""IncidentKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetIncidentKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Local"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetLocal"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ErrorCode"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetErrorCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Brokers"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}},{""Name"":""ClusterSize"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""PartitionsCount"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ReplicationFactor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""GatewayVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBrokers"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}],""Variadic"":false},{""Name"":""GetClusterSize"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitionsCount"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetReplicationFactor"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetGatewayVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UnimplementedGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultContainerWaitTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""time"",""name"":""Duration""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""JSONStringSerializer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""reflect"",""name"":""Value""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Addr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Bool"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Bytes"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false},{""Name"":""CanAddr"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""CanSet"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Call"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""CallSlice"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""Cap"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Complex"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Float"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Index"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Int"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""CanInterface"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Interface"",""Params"":null,""Results"":[{""type"":""interface""}],""Variadic"":false},{""Name"":""InterfaceData"",""Params"":null,""Results"":[{""type"":""array"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}},""len"":2}],""Variadic"":false},{""Name"":""IsNil"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""IsZero"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""MapIndex"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""MapKeys"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""MapRange"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""MapIter""}}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""OverflowComplex"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowFloat"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowInt"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowUint"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Pointer"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetBool"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":null,""Variadic"":false},{""Name"":""SetBytes"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":null,""Variadic"":false},{""Name"":""SetComplex"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Results"":null,""Variadic"":false},{""Name"":""SetFloat"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetInt"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetLen"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""SetCap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""SetMapIndex"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetUint"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetPointer"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""Pointer""}}],""Results"":null,""Variadic"":false},{""Name"":""SetString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Slice"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Slice3"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""TryRecv"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""TrySend"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Uint"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Variadic"":false},{""Name"":""UnsafeAddr"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Convert"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""Kind""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""MapIter""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Value"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Next"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""Type""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Align"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""AssignableTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Bits"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""ChanDir"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}}],""Variadic"":false},{""Name"":""Comparable"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ConvertibleTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldAlign"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Implements"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""In"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""IsVariadic"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumIn"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumOut"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Out"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""PkgPath"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""common"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""rtype""}}}],""Variadic"":false},{""Name"":""uncommon"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""uncommonType""}}}],""Variadic"":false}]}},{""symbol"":{""package"":""reflect"",""name"":""rtype""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Bits"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Align"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""FieldAlign"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""PkgPath"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ChanDir"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}}],""Variadic"":false},{""Name"":""IsVariadic"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""In"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumIn"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumOut"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Out"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Implements"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""AssignableTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ConvertibleTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Comparable"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""nameOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""nameOff""}}},{""symbol"":{""package"":""reflect"",""name"":""name""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""typeOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""typeOff""}}},{""symbol"":{""package"":""reflect"",""name"":""textOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""textOff""}}},{""symbol"":{""package"":""reflect"",""name"":""uncommonType""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""method""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""Method""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""PkgPath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Type"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}},{""Name"":""Func"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}},{""Name"":""Index"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}]}},{""symbol"":{""package"":""reflect"",""name"":""ChanDir""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""StructField""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""PkgPath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Type"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}},{""Name"":""Tag"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructTag""}}},{""Name"":""Offset"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}},{""Name"":""Index"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}},{""Name"":""Anonymous"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapStructMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapValueMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""interface""}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""NewJSONStringSerializer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""RPCTestMsg""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Msg"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}}]},""methods"":[{""Name"":""Matches"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ActivatedJob"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}]},""methods"":[{""Name"":""GetVariablesAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetVariablesAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false},{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""fmt"",""name"":""Stringer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobRetries""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""AddResourceFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""AddResource"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchFailJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchPublishMessageCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""LatestVersion""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewActivateJobsCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCancelInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCompleteJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCreateInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewDeployCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewFailJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewPublishMessageCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewResolveIncidentCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewSetVariablesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewThrowErrorCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewTopologyCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewUpdateJobRetriesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false},{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerConcurrency""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerMaxJobActive""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollInterval""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollThreshold""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped float""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}],""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AwaitClose"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false},{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""NewJobWorkerBuilder""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""RequestTimeoutOffset""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""Asset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetDir""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetInfo""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileInfo""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""os"",""name"":""FileInfo""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IsDir"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ModTime"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Variadic"":false},{""Name"":""Mode"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileMode""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Sys"",""Params"":null,""Results"":[{""type"":""interface""}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetNames""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""MustAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAssets""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CaCertificatePath""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""UsePlaintextConnection"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""CaCertificatePath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CredentialsProvider"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""}}},{""Name"":""KeepAlive"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""DialOpts"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""DialOption""}}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientImpl""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressHost""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressPort""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultKeepAlive""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFile""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFileDir""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOauthYamlCachePath""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrFileNotFound""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheFolderIsNotDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheIsDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayAddressEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayHostEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayPortEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""InsecureEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""KeepAliveEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthCredentialsProvider""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ClientID"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ClientSecret"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""AuthorizationServerURL"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}},{""Name"":""Timeout"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenConfig"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2/clientcredentials"",""name"":""Config""}}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}}]},""methods"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""AccessToken"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenType"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""RefreshToken"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Expiry"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}}]},""methods"":[{""Name"":""Type"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""SetAuthHeader"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Results"":null,""Variadic"":false},{""Name"":""WithExtra"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Extra"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""interface""}],""Variadic"":false},{""Name"":""Valid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthYamlCredentialsCache""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Refresh"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Update"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthAuthorizationUrlEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCachePathEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientIdEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientSecretEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultAuthzURL""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthRequestTimeoutEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthTokenAudienceEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByNodeID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByPartitionID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CancelInstanceResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Commit""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CompleteJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Execute""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""FailJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Printable""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""human"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""json"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ResolveIncidentResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""SetVariablesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""StatusResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ThrowErrorResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""UpdateJobRetriesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Version""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""VersionString""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""name"":""ContainerSuite""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""WaitTime"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""ContainerImage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayHost"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayPort"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Suite"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/stretchr/testify/suite"",""name"":""Suite""}}}]},""methods"":[{""Name"":""AfterTest"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""SetupSuite"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""TearDownSuite"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true}]},{""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""AnyTimes"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""MinTimes"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""MaxTimes"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DoAndReturn"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Do"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Return"",""Params"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Times"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetArg"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""After"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""after"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""callInfo""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""csAttempt""}}}],""Results"":null,""Variadic"":false},{""Name"":""before"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""callInfo""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""}}}],""Variadic"":false},{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""}}}],""Variadic"":false},{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""T"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""TestHelper""}}}]},""methods"":[{""Name"":""RecordCall"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""RecordCallWithMethodType"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Call"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Variadic"":true},{""Name"":""Finish"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockJobWorkerMetrics""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""}}}],""Variadic"":false}}}]}
\ No newline at end of file
+{""Packages"":[{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""objects"":{""CancelProcessInstanceRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""DeployProcessRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}],""Variadic"":false}]},""ResolveIncidentRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""IncidentKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetIncidentKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""ResolveIncidentResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""TopologyRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""TopologyResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Brokers"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}},{""Name"":""ClusterSize"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""PartitionsCount"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ReplicationFactor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""GatewayVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBrokers"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}],""Variadic"":false},{""Name"":""GetClusterSize"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitionsCount"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetReplicationFactor"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetGatewayVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""UpdateJobRetriesRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false}]},""BrokerInfo"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""NodeId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Port"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Partitions"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetNodeId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetHost"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetPort"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitions"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""FailJobResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""PartitionId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Role"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}},{""Name"":""Health"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetPartitionId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetRole"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}],""Variadic"":false},{""Name"":""GetHealth"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}],""Variadic"":false}]},""Partition_HEALTHY"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_HEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""PublishMessageRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CorrelationKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TimeToLive"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MessageId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetCorrelationKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeToLive"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMessageId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""ThrowErrorRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ErrorCode"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetErrorCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""ActivateJobsRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Timeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MaxJobsToActivate"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""FetchVariable"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMaxJobsToActivate"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetFetchVariable"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""CreateProcessInstanceWithResultRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Request"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""FetchVariables"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetRequest"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetFetchVariables"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}]},""FailJobRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""GatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""Partition_LEADER"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_LEADER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_PartitionBrokerHealth_name"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},""Partition_PartitionBrokerHealth_value"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},""CreateProcessInstanceWithResultResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""Partition_FOLLOWER"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_FOLLOWER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_INACTIVE"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_INACTIVE""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""ThrowErrorResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""UpdateJobRetriesResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""ActivateJobsResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Jobs"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobs"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}],""Variadic"":false}]},""CreateProcessInstanceResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""Gateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]}},""RegisterGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""RegisterGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""}}],""Results"":null,""Variadic"":false}}},""ActivatedJob"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessDefinitionVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ElementId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CustomHeaders"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Deadline"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetElementId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetCustomHeaders"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetDeadline"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""CreateProcessInstanceRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""File_gateway_proto"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""File_gateway_proto""},""type"":""var"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},""Partition_UNHEALTHY"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_UNHEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""PublishMessageResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},""CancelProcessInstanceResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""DeployProcessResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}],""Variadic"":false}]},""Gateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]}},""NewGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""NewGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}}],""Variadic"":false}}},""Partition_PartitionBrokerHealth"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""ProcessMetadata"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ResourceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetResourceName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""UnimplementedGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UnimplementedGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CompleteJobRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""CompleteJobResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""GatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},""Partition_PartitionBrokerRole"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},""Partition_PartitionBrokerRole_name"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},""Partition_PartitionBrokerRole_value"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},""ProcessRequestObject"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Definition"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDefinition"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},""SetVariablesRequest"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Local"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetLocal"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""SetVariablesResponse"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""objects"":{""DefaultContainerWaitTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultContainerWaitTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""DefaultTestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""MapMapMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MapMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""RPCTestMsg"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""RPCTestMsg""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Msg"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}}]},""methods"":[{""Name"":""Matches"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""DefaultTestTimeoutInMs"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},""JSONStringSerializer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""JSONStringSerializer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""MapStructMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapStructMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MapValueMarshal"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapValueMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""interface""}],""Variadic"":false}}},""NewJSONStringSerializer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""NewJSONStringSerializer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""}}],""Variadic"":false}}},""SerializerMixin"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""objects"":{""Job"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ActivatedJob"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}]},""methods"":[{""Name"":""GetVariablesAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetVariablesAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""objects"":{""ActivateJobsCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},""DefaultJobRetries"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobRetries""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""DispatchUpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""PublishMessageCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false}]}},""SetVariablesCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""UpdateJobRetriesCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false}]}},""Command"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""},""type"":""type"",""definition"":{""type"":""struct""}},""DefaultJobTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""NewDeployCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewDeployCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false}}},""ResolveIncidentCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false}]}},""ThrowErrorCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false}]}},""UpdateJobRetriesCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false},{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchSetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""FailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""FailJobCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false}]}},""NewSetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewSetVariablesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false}}},""PublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""FailJobCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false}]}},""NewFailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewFailJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}}},""ActivateJobsCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},""CreateInstanceWithResultCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""NewCreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCreateInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false}}},""PublishMessageCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false}]}},""DispatchResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewPublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewPublishMessageCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false}}},""NewResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewResolveIncidentCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false}}},""SetVariablesCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false}]}},""ThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false},{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CreateInstanceCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},""DefaultJobTimeoutInMs"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},""DeployCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""AddResourceFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""AddResource"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""NewCancelInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCancelInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false}}},""NewThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewThrowErrorCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false}}},""DispatchCompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchThrowErrorCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""UpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DispatchCreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""TopologyCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CreateInstanceWithResultCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""FailJobCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewActivateJobsCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewActivateJobsCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false}}},""CancelProcessInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]},""CreateInstanceCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},""DispatchCreateInstanceWithResultCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""CompleteJobCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false}]}},""CompleteJobCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DispatchCancelProcessInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""PublishMessageCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ThrowErrorCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false}]}},""CancelInstanceStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]}},""CompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""LatestVersion"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""LatestVersion""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""ActivateJobsCommandStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false}]}},""NewCompleteJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCompleteJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false}}},""CreateInstanceCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""DefaultJobWorkerName"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DispatchFailJobCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchFailJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""CreateInstanceCommandStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false}]}},""DispatchPublishMessageCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchPublishMessageCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""NewTopologyCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewTopologyCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false}}},""NewUpdateJobRetriesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewUpdateJobRetriesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}}},""ResolveIncidentCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""ResolveIncidentCommandStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""SetVariablesCommand"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""objects"":{""JobWorker"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AwaitClose"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false}]}},""NewJobWorkerBuilder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""NewJobWorkerBuilder""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false}}},""DefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""DefaultJobWorkerPollInterval"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollInterval""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""JobClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}]}},""JobWorkerBuilder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false},{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false}]},""JobWorkerBuilderStep1"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false}]}},""JobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},""DefaultJobWorkerConcurrency"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerConcurrency""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},""DefaultJobWorkerPollThreshold"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollThreshold""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped float""}}},""JobHandler"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}],""Results"":null,""Variadic"":false}}},""JobWorkerBuilderStep2"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},""JobWorkerBuilderStep3"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},""RequestTimeoutOffset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""RequestTimeoutOffset""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""DefaultJobWorkerMaxJobActive"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerMaxJobActive""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""objects"":{""Asset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""Asset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""AssetDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetDir""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""AssetInfo"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetInfo""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileInfo""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""AssetNames"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetNames""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},""MustAsset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""MustAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}}},""RestoreAsset"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""RestoreAssets"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAssets""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""objects"":{""DefaultAddressHost"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressHost""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""ErrOAuthCredentialsCacheIsDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheIsDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""GatewayAddressEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayAddressEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""CaCertificatePath"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CaCertificatePath""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""GatewayHostEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayHostEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""InsecureEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""InsecureEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthCachePathEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCachePathEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthDefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""ClientImpl"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientImpl""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""CredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]}},""DefaultOAuthCacheFileDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFileDir""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultOauthYamlCachePath"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOauthYamlCachePath""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""OAuthAuthorizationUrlEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthAuthorizationUrlEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthDefaultAuthzURL"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultAuthzURL""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultOAuthCacheFile"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFile""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""ErrOAuthCredentialsCacheFolderIsNotDir"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheFolderIsNotDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""Error"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""NewClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""NewOAuthCredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthCredentialsProvider""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""OAuthCredentialsProvider"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenConfig"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2/clientcredentials"",""name"":""Config""}}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}}]},""methods"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""OAuthRequestTimeoutEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthRequestTimeoutEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthTokenAudienceEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthTokenAudienceEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""Client"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}]}},""ClientConfig"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""UsePlaintextConnection"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""CaCertificatePath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CredentialsProvider"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""}}},{""Name"":""KeepAlive"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""DialOpts"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""DialOption""}}}}]}},""ErrFileNotFound"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrFileNotFound""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},""NewOAuthYamlCredentialsCache"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthYamlCredentialsCache""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},""OAuthClientSecretEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientSecretEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthCredentialsCache"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Refresh"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Update"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""DefaultAddressPort"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressPort""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultKeepAlive"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultKeepAlive""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""GatewayPortEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayPortEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""DefaultRequestTimeout"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},""KeepAliveEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""KeepAliveEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthClientIdEnvVar"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientIdEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},""OAuthProviderConfig"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ClientID"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ClientSecret"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""AuthorizationServerURL"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}},{""Name"":""Timeout"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}}]}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""objects"":{""Commit"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Commit""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""Execute"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Execute""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},""Printable"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Printable""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""human"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""json"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},""ResolveIncidentResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ResolveIncidentResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""SetVariablesResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""SetVariablesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""StatusResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""StatusResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ByPartitionID"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByPartitionID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""CompleteJobResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CompleteJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""UpdateJobRetriesResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""UpdateJobRetriesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""Version"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Version""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""VersionString"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""VersionString""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}}},""CancelInstanceResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CancelInstanceResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ThrowErrorResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ThrowErrorResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""FailJobResponseWrapper"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""FailJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},""ByNodeID"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByNodeID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},""DefaultJobWorkerName"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl"",""objects"":{}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""objects"":{""ContainerSuite"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""name"":""ContainerSuite""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""WaitTime"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""ContainerImage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayHost"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayPort"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Suite"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/stretchr/testify/suite"",""name"":""Suite""}}}]},""methods"":[{""Name"":""AfterTest"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""SetupSuite"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""TearDownSuite"",""Params"":null,""Results"":null,""Variadic"":false}]}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""objects"":{""MockGateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]},""NewMockGateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""}}}],""Variadic"":false}}},""MockGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},""MockJobWorkerMetricsMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""NewMockGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""}}}],""Variadic"":false}}},""NewMockJobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockJobWorkerMetrics""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""}}}],""Variadic"":false}}},""MockGatewayClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]},""MockGatewayServerMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockGateway_ActivateJobsClientMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockGateway_ActivateJobsServerMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},""MockJobWorkerMetrics"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""}}}],""Variadic"":false},{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]},""NewMockGatewayServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""}}}],""Variadic"":false}}},""MockGatewayClientMockRecorder"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true}]},""MockGateway_ActivateJobsClient"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""}}}],""Variadic"":false},{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]},""NewMockGateway_ActivateJobsServer"":{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""}}}],""Variadic"":false}}}}},{""path"":""github.com/camunda-cloud/zeebe/clients/go/test"",""objects"":{}}],""Reachable"":[{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Timeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MaxJobsToActivate"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""FetchVariable"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMaxJobsToActivate"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetFetchVariable"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Clear"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptor""}}],""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""GetUnknown"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""RawFields""}}],""Variadic"":false},{""Name"":""Has"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Interface"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Mutable"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""New"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""NewField"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""ProtoMethods"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}},{""Name"":""Size"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Size"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}]}],""Variadic"":false}}},{""Name"":""Marshal"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""Unmarshal"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Buf"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}},{""Name"":""Resolver"",""Type"":{""type"":""interface"",""functions"":[{""Name"":""FindExtensionByName"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionType""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FindExtensionByNumber"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/encoding/protowire"",""name"":""Number""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionType""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""Merge"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Source"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}},{""Name"":""Destination"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Flags"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint8""}}}]}],""Variadic"":false}}},{""Name"":""CheckInitialized"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}},{""Name"":""Message"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}}]}],""Results"":[{""type"":""struct"",""fields"":[{""Name"":""NoUnkeyedLiterals"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""NoUnkeyedLiterals""}}}]},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}}]}}],""Variadic"":false},{""Name"":""Range"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}},{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetUnknown"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""RawFields""}}],""Results"":null,""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageType""}}],""Variadic"":false},{""Name"":""WhichOneof"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""OneofDescriptor""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FieldDescriptor""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Jobs"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobs"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Type"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProcessDefinitionVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ElementId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CustomHeaders"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Worker"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Deadline"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetType"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetElementId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetCustomHeaders"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetWorker"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetDeadline"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""NodeId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Port"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Partitions"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetNodeId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetHost"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetPort"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitions"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""PartitionId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Role"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}},{""Name"":""Health"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetPartitionId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetRole"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}],""Variadic"":false},{""Name"":""GetHealth"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""ReservedNames"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Names""}}],""Variadic"":false},{""Name"":""ReservedRanges"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumRanges""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false},{""Name"":""Values"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumValueDescriptors""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""New"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Enum""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Request"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}},{""Name"":""RequestTimeout"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""FetchVariables"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetRequest"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Variadic"":false},{""Name"":""GetRequestTimeout"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetFetchVariables"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessRequestObject""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Definition"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDefinition"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Processes"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetProcesses"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ProcessMetadata""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""BpmnProcessId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Version"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ProcessDefinitionKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ResourceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBpmnProcessId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetProcessDefinitionKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetResourceName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""File_gateway_proto""},""type"":""var"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Enums"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptors""}}],""Variadic"":false},{""Name"":""Extensions"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ExtensionDescriptors""}}],""Variadic"":false},{""Name"":""FullName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Imports"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileImports""}}],""Variadic"":false},{""Name"":""Index"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""IsPlaceholder"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Messages"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""MessageDescriptors""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Options"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Variadic"":false},{""Name"":""Package"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Descriptor""}}],""Variadic"":false},{""Name"":""ParentFile"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Variadic"":false},{""Name"":""Path"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoInternal"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/internal/pragma"",""name"":""DoNotImplement""}}],""Results"":null,""Variadic"":false},{""Name"":""ProtoType"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FileDescriptor""}}],""Results"":null,""Variadic"":false},{""Name"":""Services"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ServiceDescriptors""}}],""Variadic"":false},{""Name"":""SourceLocations"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""SourceLocations""}}],""Variadic"":false},{""Name"":""Syntax"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Syntax""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""NewGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}}],""Variadic"":false}}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientConnInterface""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Invoke"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""NewStream"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ClientStream""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_FOLLOWER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_HEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_INACTIVE""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_LEADER""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_name""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerRole_value""},""type"":""var"",""definition"":{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_UNHEALTHY""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}},""methods"":[{""Name"":""Enum"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition_PartitionBrokerHealth""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumDescriptor""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumType""}}],""Variadic"":false},{""Name"":""Number"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""EnumNumber""}}],""Variadic"":false},{""Name"":""EnumDescriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CorrelationKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TimeToLive"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""MessageId"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetCorrelationKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetTimeToLive"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetMessageId"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""RegisterGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayServer""}}],""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Server""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""RegisterService"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceDesc""}}},{""type"":""interface""}],""Results"":null,""Variadic"":false},{""Name"":""GetServiceInfo"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceInfo""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""Serve"",""Params"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Listener""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ServeHTTP"",""Params"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""ResponseWriter""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Results"":null,""Variadic"":false},{""Name"":""Stop"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""GracefulStop"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""serverWorkerData""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ServiceName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""HandlerType"",""Type"":{""type"":""interface""}},{""Name"":""Methods"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodDesc""}}}},{""Name"":""Streams"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""}}}},{""Name"":""Metadata"",""Type"":{""type"":""interface""}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""ServiceInfo""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Methods"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodInfo""}}}},{""Name"":""Metadata"",""Type"":{""type"":""interface""}}]}},{""symbol"":{""package"":""net"",""name"":""Listener""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Accept"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Conn""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Addr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net"",""name"":""Conn""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""LocalAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RemoteAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""SetDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetReadDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetWriteDeadline"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""ServerTransport""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Drain"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""HandleStreams"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}}],""Results"":null,""Variadic"":false}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false}}],""Results"":null,""Variadic"":false},{""Name"":""IncrMsgRecv"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""IncrMsgSent"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""RemoteAddr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net"",""name"":""Addr""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Options""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteHeader"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteStatus"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""ResponseWriter""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteHeader"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Request""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Method"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""URL"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""URL""}}}},{""Name"":""Proto"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ProtoMajor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""ProtoMinor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}},{""Name"":""Body"",""Type"":{""type"":"""",""symbol"":{""package"":""io"",""name"":""ReadCloser""}}},{""Name"":""GetBody"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""ReadCloser""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""ContentLength"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""TransferEncoding"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""Close"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""Host"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Form"",""Type"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""Values""}}},{""Name"":""PostForm"",""Type"":{""type"":"""",""symbol"":{""package"":""net/url"",""name"":""Values""}}},{""Name"":""MultipartForm"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Form""}}}},{""Name"":""Trailer"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}},{""Name"":""RemoteAddr"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""RequestURI"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TLS"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""crypto/tls"",""name"":""ConnectionState""}}}},{""Name"":""Cancel"",""Type"":{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}},{""Name"":""Response"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Response""}}}}]},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""WithContext"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Variadic"":false},{""Name"":""Clone"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Variadic"":false},{""Name"":""ProtoAtLeast"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""UserAgent"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Cookies"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}}}],""Variadic"":false},{""Name"":""Cookie"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AddCookie"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Cookie""}}}],""Results"":null,""Variadic"":false},{""Name"":""Referer"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""MultipartReader"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Reader""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WriteProxy"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""BasicAuth"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""SetBasicAuth"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""ParseForm"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ParseMultipartForm"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FormValue"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""PostFormValue"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""FormFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""File""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""context"",""name"":""Context""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Deadline"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Done"",""Params"":null,""Results"":[{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}],""Variadic"":false},{""Name"":""Err"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Value"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""interface""}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Cookie""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Value"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Path"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Domain"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Expires"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}},{""Name"":""RawExpires"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""MaxAge"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Secure"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""HttpOnly"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""SameSite"",""Type"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""SameSite""}}},{""Name"":""Raw"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Unparsed"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Reader""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ReadForm"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Form""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NextPart"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Part""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NextRawPart"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""Part""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Form""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Value"",""Type"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}},{""Name"":""File"",""Type"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""}}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}}]},""methods"":[{""Name"":""RemoveAll"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""Part""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}}]},""methods"":[{""Name"":""FormName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""FileName"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""io"",""name"":""Writer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Write"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""net/http"",""name"":""Header""},""type"":""type"",""definition"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""methods"":[{""Name"":""Add"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Values"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""Del"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Write"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Clone"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Header""}}],""Variadic"":false},{""Name"":""WriteSubset"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""net/http/httptrace"",""name"":""ClientTrace""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GetConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}}},{""Name"":""GotConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""GotConnInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""PutIdleConn"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""GotFirstResponseByte"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Got100Continue"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Got1xxResponse"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""Name"":""DNSStart"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""DNSStartInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""DNSDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""DNSDoneInfo""}}],""Results"":null,""Variadic"":false}}},{""Name"":""ConnectStart"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}}},{""Name"":""ConnectDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""TLSHandshakeStart"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""TLSHandshakeDone"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""crypto/tls"",""name"":""ConnectionState""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":null,""Variadic"":false}}},{""Name"":""WroteHeaderField"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":false}}},{""Name"":""WroteHeaders"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""Wait100Continue"",""Type"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""Name"":""WroteRequest"",""Type"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""net/http/httptrace"",""name"":""WroteRequestInfo""}}],""Results"":null,""Variadic"":false}}}]}},{""symbol"":{""package"":""net/http"",""name"":""keyValues""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""net/http"",""name"":""headerSorter""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""mime/multipart"",""name"":""File""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ReadAt"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Seek"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""mime/multipart"",""name"":""FileHeader""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Filename"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Header"",""Type"":{""type"":"""",""symbol"":{""package"":""net/textproto"",""name"":""MIMEHeader""}}},{""Name"":""Size"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""mime/multipart"",""name"":""File""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Stream""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""RecvCompress"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""SetSendCompress"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Done"",""Params"":null,""Results"":[{""type"":""chan"",""elem"":{""type"":""struct""},""chandir"":2}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TrailersOnly"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false},{""Name"":""ContentSubtype"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Method"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Status"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Read"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""BytesReceived"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Unprocessed"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""GoString"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""streamState""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""streamState""}}},{""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""},""type"":""type"",""definition"":{""type"":""map"",""elem"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Copy"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false},{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":true},{""Name"":""Append"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":null,""Variadic"":true},{""Name"":""Delete"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Code"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""}}],""Variadic"":false},{""Name"":""Message"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Proto"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/genproto/googleapis/rpc/status"",""name"":""Status""}}}],""Variadic"":false},{""Name"":""Err"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithDetails"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/runtime/protoiface"",""name"":""MessageV1""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/internal/status"",""name"":""Status""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Details"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/codes"",""name"":""Code""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""UnmarshalJSON"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/genproto/googleapis/rpc/status"",""name"":""Status""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Code"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""Message"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Details"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""}}}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetDetails"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""}}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/types/known/anypb"",""name"":""Any""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""TypeUrl"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Value"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}}]},""methods"":[{""Name"":""MessageIs"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""MarshalFrom"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UnmarshalTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UnmarshalNew"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetTypeUrl"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetValue"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}},""methods"":[{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Variadic"":false},{""Name"":""Parent"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false},{""Name"":""Append"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""FullName""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Name""}},""methods"":[{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/protobuf/runtime/protoiface"",""name"":""MessageV1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""recvMsg""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""traceInfo""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc/internal/channelz"",""name"":""ServerInternalMetric""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""CallsStarted"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CallsSucceeded"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""CallsFailed"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""LastCallStartedTimestamp"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""Compressor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Do"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc/internal/transport"",""name"":""Options""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Last"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc/encoding"",""name"":""Compressor""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Compress"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Writer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""WriteCloser""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Decompress"",""Params"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Reader""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""io"",""name"":""Reader""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""serviceInfo""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""MethodDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""MethodName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Handler"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""methodHandler""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamDesc""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""StreamName"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Handler"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""StreamHandler""}}},{""Name"":""ServerStreams"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""ClientStreams"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""baseCodec""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Marshal"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Unmarshal"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""IncidentKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetIncidentKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ElementInstanceKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Variables"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Local"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetElementInstanceKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetVariables"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetLocal"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Key"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""ErrorCode"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ErrorMessage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetErrorCode"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""GetErrorMessage"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Brokers"",""Type"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}},{""Name"":""ClusterSize"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""PartitionsCount"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""ReplicationFactor"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}},{""Name"":""GatewayVersion"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetBrokers"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}}],""Variadic"":false},{""Name"":""GetClusterSize"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetPartitionsCount"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetReplicationFactor"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false},{""Name"":""GetGatewayVersion"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UnimplementedGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""JobKey"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""Name"":""Retries"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}}]},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false},{""Name"":""GetJobKey"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""GetRetries"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Reset"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ProtoMessage"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""ProtoReflect"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""Message""}}],""Variadic"":false},{""Name"":""Descriptor"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultContainerWaitTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""time"",""name"":""Duration""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""DefaultTestTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""JSONStringSerializer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""reflect"",""name"":""Value""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Addr"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Bool"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Bytes"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false},{""Name"":""CanAddr"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""CanSet"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Call"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""CallSlice"",""Params"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""Cap"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Complex"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Float"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Index"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Int"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""CanInterface"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Interface"",""Params"":null,""Results"":[{""type"":""interface""}],""Variadic"":false},{""Name"":""InterfaceData"",""Params"":null,""Results"":[{""type"":""array"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}},""len"":2}],""Variadic"":false},{""Name"":""IsNil"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""IsValid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""IsZero"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""MapIndex"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""MapKeys"",""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}}],""Variadic"":false},{""Name"":""MapRange"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""MapIter""}}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""OverflowComplex"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowFloat"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowInt"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""OverflowUint"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Pointer"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""Set"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetBool"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":null,""Variadic"":false},{""Name"":""SetBytes"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Results"":null,""Variadic"":false},{""Name"":""SetComplex"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""complex128""}}],""Results"":null,""Variadic"":false},{""Name"":""SetFloat"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetInt"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetLen"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""SetCap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""SetMapIndex"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":null,""Variadic"":false},{""Name"":""SetUint"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Results"":null,""Variadic"":false},{""Name"":""SetPointer"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""Pointer""}}],""Results"":null,""Variadic"":false},{""Name"":""SetString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""Slice"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Slice3"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""TryRecv"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""TrySend"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Type"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Uint"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uint64""}}],""Variadic"":false},{""Name"":""UnsafeAddr"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Convert"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""Kind""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""MapIter""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Value"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}],""Variadic"":false},{""Name"":""Next"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""Type""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Align"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""AssignableTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Bits"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""ChanDir"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}}],""Variadic"":false},{""Name"":""Comparable"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ConvertibleTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldAlign"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Implements"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""In"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""IsVariadic"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumIn"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumOut"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Out"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""PkgPath"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""common"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""rtype""}}}],""Variadic"":false},{""Name"":""uncommon"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""uncommonType""}}}],""Variadic"":false}]}},{""symbol"":{""package"":""reflect"",""name"":""rtype""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}],""Variadic"":false},{""Name"":""Bits"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Align"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""FieldAlign"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Kind"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Kind""}}],""Variadic"":false},{""Name"":""NumMethod"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Method"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}}],""Variadic"":false},{""Name"":""MethodByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Method""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""PkgPath"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""ChanDir"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}}],""Variadic"":false},{""Name"":""IsVariadic"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Elem"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Field"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByIndex"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}}],""Variadic"":false},{""Name"":""FieldByName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""FieldByNameFunc"",""Params"":[{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructField""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""In"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Key"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumField"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumIn"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""NumOut"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Out"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Variadic"":false},{""Name"":""Implements"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""AssignableTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ConvertibleTo"",""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""Comparable"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""nameOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""nameOff""}}},{""symbol"":{""package"":""reflect"",""name"":""name""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""typeOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""typeOff""}}},{""symbol"":{""package"":""reflect"",""name"":""textOff""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""textOff""}}},{""symbol"":{""package"":""reflect"",""name"":""uncommonType""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""method""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""reflect"",""name"":""Method""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""PkgPath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Type"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}},{""Name"":""Func"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}}},{""Name"":""Index"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}]}},{""symbol"":{""package"":""reflect"",""name"":""ChanDir""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""ChanDir""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""reflect"",""name"":""StructField""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Name"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""PkgPath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Type"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}}},{""Name"":""Tag"",""Type"":{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""StructTag""}}},{""Name"":""Offset"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""uintptr""}}},{""Name"":""Index"",""Type"":{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}}},{""Name"":""Anonymous"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapStructMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""MapValueMarshal""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Value""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""interface""}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""NewJSONStringSerializer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""SerializerMixin""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AsJSON"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Validate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/utils"",""name"":""RPCTestMsg""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Msg"",""Type"":{""type"":"""",""symbol"":{""package"":""google.golang.org/protobuf/reflect/protoreflect"",""name"":""ProtoMessage""}}}]},""methods"":[{""Name"":""Matches"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ActivatedJob"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivatedJob""}}}}]},""methods"":[{""Name"":""GetVariablesAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetVariablesAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAsMap"",""Params"":null,""Results"":[{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""GetCustomHeadersAs"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false},{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MaxJobsToActivate"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false},{""Name"":""WorkerName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ProcessInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCancelProcessInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCompleteJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""fmt"",""name"":""Stringer""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""WithResult"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""LatestVersion"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false},{""Name"":""Version"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""BPMNProcessId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep2""}}],""Variadic"":false},{""Name"":""ProcessDefinitionKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceWithResultCommandStep1""}}],""Variadic"":true},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobRetries""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobTimeoutInMs""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""AddResourceFile"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""AddResource"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchActivateJobsCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchCreateInstanceWithResultCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchFailJobCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchPublishMessageCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""LatestVersion""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewActivateJobsCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCancelInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCompleteJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewCreateInstanceCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewDeployCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewFailJobCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewPublishMessageCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewResolveIncidentCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewSetVariablesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewThrowErrorCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewTopologyCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""NewUpdateJobRetriesCommand""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""retryPredicate""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""MessageName"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""MessageId"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""TimeToLive"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""CorrelationKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""IncidentKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""ElementInstanceKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Local"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""VariablesFromMap"",""Params"":[{""type"":""map"",""elem"":{""type"":""interface""},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObject"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromObjectIgnoreOmitempty"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromString"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""VariablesFromStringer"",""Params"":[{""type"":"""",""symbol"":{""package"":""fmt"",""name"":""Stringer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchSetVariablesCommand""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""}}],""Variadic"":false},{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""ErrorMessage"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ErrorCode"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchThrowErrorCommand""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommand""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Command"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""Command""}}}]},""methods"":[{""Name"":""JobKey"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""}}],""Variadic"":false},{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Retries"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int32""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DispatchUpdateJobRetriesCommand""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerConcurrency""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerMaxJobActive""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped int""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollInterval""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultJobWorkerPollThreshold""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped float""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""},""type"":""type"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/entities"",""name"":""Job""}}],""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""AwaitClose"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false},{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Handler"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobHandler""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Concurrency"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""FetchVariables"",""Params"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":true},{""Name"":""MaxJobsActive"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Metrics"",""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Name"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Open"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorker""}}],""Variadic"":false},{""Name"":""PollInterval"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""PollThreshold"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""RequestTimeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false},{""Name"":""Timeout"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep3""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""JobType"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep2""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""NewJobWorkerBuilder""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""GatewayClient""}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobClient""}},{""type"":""func"",""signature"":{""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""RequestTimeoutOffset""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""Asset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetDir""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetInfo""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileInfo""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""os"",""name"":""FileInfo""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""IsDir"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false},{""Name"":""ModTime"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}],""Variadic"":false},{""Name"":""Mode"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""os"",""name"":""FileMode""}}],""Variadic"":false},{""Name"":""Name"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Size"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Sys"",""Params"":null,""Results"":[{""type"":""interface""}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""AssetNames""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""MustAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""byte""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAsset""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/embedded"",""name"":""RestoreAssets""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CaCertificatePath""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""UsePlaintextConnection"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}},{""Name"":""CaCertificatePath"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""CredentialsProvider"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""}}},{""Name"":""KeepAlive"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""DialOpts"",""Type"":{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""DialOption""}}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientImpl""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""NewTopologyCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""TopologyCommand""}}}],""Variadic"":false},{""Name"":""NewDeployProcessCommand"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""DeployCommand""}}}],""Variadic"":false},{""Name"":""NewPublishMessageCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""PublishMessageCommandStep1""}}],""Variadic"":false},{""Name"":""NewResolveIncidentCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ResolveIncidentCommandStep1""}}],""Variadic"":false},{""Name"":""NewCreateInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CreateInstanceCommandStep1""}}],""Variadic"":false},{""Name"":""NewCancelInstanceCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CancelInstanceStep1""}}],""Variadic"":false},{""Name"":""NewCompleteJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""CompleteJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewFailJobCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""FailJobCommandStep1""}}],""Variadic"":false},{""Name"":""NewUpdateJobRetriesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""UpdateJobRetriesCommandStep1""}}],""Variadic"":false},{""Name"":""NewSetVariablesCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""SetVariablesCommandStep1""}}],""Variadic"":false},{""Name"":""NewActivateJobsCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ActivateJobsCommandStep1""}}],""Variadic"":false},{""Name"":""NewThrowErrorCommand"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/commands"",""name"":""ThrowErrorCommandStep1""}}],""Variadic"":false},{""Name"":""NewJobWorker"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/worker"",""name"":""JobWorkerBuilderStep1""}}],""Variadic"":false},{""Name"":""Close"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""CredentialsProvider""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressHost""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultAddressPort""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultKeepAlive""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFile""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOAuthCacheFileDir""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultOauthYamlCachePath""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""DefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrFileNotFound""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""},""type"":""type"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheFolderIsNotDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ErrOAuthCredentialsCacheIsDir""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Error""}},""methods"":[{""Name"":""Error"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayAddressEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayHostEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""GatewayPortEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""InsecureEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""KeepAliveEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""ClientConfig""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""Client""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthCredentialsProvider""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthProviderConfig""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""ClientID"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""ClientSecret"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""AuthorizationServerURL"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}},{""Name"":""Timeout"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsProvider""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""Audience"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenConfig"",""Type"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2/clientcredentials"",""name"":""Config""}}}},{""Name"":""Cache"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}}}]},""methods"":[{""Name"":""ApplyCredentials"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""map"",""elem"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},""key"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ShouldRetryRequest"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""AccessToken"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""TokenType"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""RefreshToken"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""Expiry"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Time""}}}]},""methods"":[{""Name"":""Type"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""SetAuthHeader"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""net/http"",""name"":""Request""}}}],""Results"":null,""Variadic"":false},{""Name"":""WithExtra"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Extra"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""interface""}],""Variadic"":false},{""Name"":""Valid"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""NewOAuthYamlCredentialsCache""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCredentialsCache""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""Get"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Variadic"":false},{""Name"":""Refresh"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Update"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""golang.org/x/oauth2"",""name"":""Token""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthAuthorizationUrlEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthCachePathEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientIdEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthClientSecretEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultAuthzURL""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthDefaultRequestTimeout""},""type"":""const"",""definition"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}},""methods"":[{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false},{""Name"":""Nanoseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Microseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Milliseconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int64""}}],""Variadic"":false},{""Name"":""Seconds"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Minutes"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Hours"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""float64""}}],""Variadic"":false},{""Name"":""Truncate"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false},{""Name"":""Round"",""Params"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Results"":[{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthRequestTimeoutEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/zbc"",""name"":""OAuthTokenAudienceEnvVar""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByNodeID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""BrokerInfo""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ByPartitionID""},""type"":""type"",""definition"":{""type"":""slice"",""elem"":{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Partition""}}}},""methods"":[{""Name"":""Len"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Variadic"":false},{""Name"":""Swap"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false},{""Name"":""Less"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""bool""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CancelInstanceResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Commit""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""CompleteJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""DefaultJobWorkerName""},""type"":""const"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""untyped string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Execute""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":null,""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""FailJobResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Printable""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""human"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""json"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ResolveIncidentResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""SetVariablesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""StatusResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""ThrowErrorResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""UpdateJobRetriesResponseWrapper""},""type"":""type"",""definition"":{""type"":""struct""}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""Version""},""type"":""var"",""definition"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/cmd/zbctl/internal/commands"",""name"":""VersionString""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/containersuite"",""name"":""ContainerSuite""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""WaitTime"",""Type"":{""type"":"""",""symbol"":{""package"":""time"",""name"":""Duration""}}},{""Name"":""ContainerImage"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayAddress"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayHost"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}},{""Name"":""GatewayPort"",""Type"":{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}},{""Name"":""Suite"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/stretchr/testify/suite"",""name"":""Suite""}}}]},""methods"":[{""Name"":""AfterTest"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Results"":null,""Variadic"":false},{""Name"":""SetupSuite"",""Params"":null,""Results"":null,""Variadic"":false},{""Name"":""TearDownSuite"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsClient""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}},{""type"":""slice"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":true}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true}]},{""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""AnyTimes"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""MinTimes"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""MaxTimes"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DoAndReturn"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Do"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Return"",""Params"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Times"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetArg"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""After"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""String"",""Params"":null,""Results"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}}],""Variadic"":false}]},{""symbol"":{""package"":""google.golang.org/grpc"",""name"":""CallOption""},""type"":""type"",""definition"":{""type"":""interface"",""functions"":[{""Name"":""after"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""callInfo""}}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""csAttempt""}}}],""Results"":null,""Variadic"":false},{""Name"":""before"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc"",""name"":""callInfo""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""}}}],""Variadic"":false},{""Name"":""ActivateJobs"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsRequest""}}},{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""Gateway_ActivateJobsServer""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CancelProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CompleteJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""CreateProcessInstanceWithResultResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""DeployProcessResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""FailJobResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""PublishMessageResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ResolveIncidentResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""SetVariablesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ThrowErrorResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""TopologyResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}},{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesRequest""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""UpdateJobRetriesResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""ActivateJobs"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CancelProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CompleteJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstance"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""CreateProcessInstanceWithResult"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""DeployProcess"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""FailJob"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""PublishMessage"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ResolveIncident"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetVariables"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""ThrowError"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Topology"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""UpdateJobRetries"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""}}}],""Variadic"":false},{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}},{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClientMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""CloseSend"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Header"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Recv"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Trailer"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""}}}],""Variadic"":false},{""Name"":""Context"",""Params"":null,""Results"":[{""type"":"""",""symbol"":{""package"":""context"",""name"":""Context""}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/pkg/pb"",""name"":""ActivateJobsResponse""}}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":[{""type"":"""",""symbol"":{""package"":"""",""name"":""error""}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":"""",""symbol"":{""package"":""google.golang.org/grpc/metadata"",""name"":""MD""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServerMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""Context"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""RecvMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""Send"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SendMsg"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetHeader"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false},{""Name"":""SetTrailer"",""Params"":[{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""EXPECT"",""Params"":null,""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""}}}],""Variadic"":false},{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""int""}}],""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetricsMockRecorder""},""type"":""type"",""definition"":{""type"":""struct""},""methods"":[{""Name"":""SetJobsRemainingCount"",""Params"":[{""type"":""interface""},{""type"":""interface""}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayClient""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""},""type"":""type"",""definition"":{""type"":""struct"",""fields"":[{""Name"":""T"",""Type"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""TestHelper""}}}]},""methods"":[{""Name"":""RecordCall"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""RecordCallWithMethodType"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":"""",""symbol"":{""package"":""reflect"",""name"":""Type""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Call""}}}],""Variadic"":true},{""Name"":""Call"",""Params"":[{""type"":""interface""},{""type"":""basic"",""symbol"":{""package"":"""",""name"":""string""}},{""type"":""slice"",""elem"":{""type"":""interface""}}],""Results"":[{""type"":""slice"",""elem"":{""type"":""interface""}}],""Variadic"":true},{""Name"":""Finish"",""Params"":null,""Results"":null,""Variadic"":false}]},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGatewayServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGatewayServer""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsClient""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsClient""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockGateway_ActivateJobsServer""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockGateway_ActivateJobsServer""}}}],""Variadic"":false}}},{""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""NewMockJobWorkerMetrics""},""type"":""func"",""definition"":{""type"":""func"",""signature"":{""Params"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/golang/mock/gomock"",""name"":""Controller""}}}],""Results"":[{""type"":""pointer"",""elem"":{""type"":"""",""symbol"":{""package"":""github.com/camunda-cloud/zeebe/clients/go/internal/mock_pb"",""name"":""MockJobWorkerMetrics""}}}],""Variadic"":false}}}]}
\ No newline at end of file

diff --git a/benchmarks/project/pom.xml b/benchmarks/project/pom.xml
index 011c2a3..62030b6 100644
--- a/benchmarks/project/pom.xml
+++ b/benchmarks/project/pom.xml
@@ -32,7 +32,6 @@
     <!-- maven plugin versions -->
     <plugin.version.exec>1.6.0</plugin.version.exec>
     <plugin.version.shade>3.2.1</plugin.version.shade>
-    <plugin.version.fmt>2.9</plugin.version.fmt>
     <plugin.version.license>3.0</plugin.version.license>
   </properties>
 
diff --git a/parent/pom.xml b/parent/pom.xml
index 874c4bd..626a5aa 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -118,7 +118,6 @@
     <plugin.version.compiler>3.8.1</plugin.version.compiler>
     <plugin.version.exec>3.0.0</plugin.version.exec>
     <plugin.version.failsafe>3.0.0-M5</plugin.version.failsafe>
-    <plugin.version.fmt>2.12</plugin.version.fmt>
     <plugin.version.license>4.1</plugin.version.license>
     <plugin.version.protobuf-maven-plugin>0.6.1</plugin.version.protobuf-maven-plugin>
     <plugin.version.proto-backwards-compatibility>1.0.7</plugin.version.proto-backwards-compatibility>
@@ -171,7 +170,6 @@
     <license.skip>${skipChecks}</license.skip>
     <enforcer.skip>${skipChecks}</enforcer.skip>
     <mdep.analyze.skip>${skipChecks}</mdep.analyze.skip>
-    <fmt.skip>${skipChecks}</fmt.skip>
     <sort.skip>${skipChecks}</sort.skip>
   </properties>
 
@@ -1183,21 +1181,6 @@
 
         <!-- Google code format plugin -->
         <plugin>
-          <groupId>com.coveo</groupId>
-          <artifactId>fmt-maven-plugin</artifactId>
-          <version>${plugin.version.fmt}</version>
-          <executions>
-            <execution>
-              <id>format</id>
-              <goals>
-                <goal>format</goal>
-              </goals>
-              <phase>process-sources</phase>
-            </execution>
-          </executions>
-        </plugin>
-
-        <plugin>
           <groupId>com.diffplug.spotless</groupId>
           <artifactId>spotless-maven-plugin</artifactId>
           <version>${plugin.version.spotless}</version>
@@ -1702,32 +1685,6 @@
       </build>
     </profile>
 
-    <!-- profile to disable the fmt-plugin on unsupported jdks -->
-    <profile>
-      <id>fmt-plugin</id>
-      <activation>
-        <jdk>[,9)</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>com.coveo</groupId>
-            <artifactId>fmt-maven-plugin</artifactId>
-            <executions>
-              <execution>
-                <id>format</id>
-                <goals>
-                  <goal>check</goal>
-                  <goal>format</goal>
-                </goals>
-                <phase>none</phase>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-
     <!-- profile to perform strict validation checks -->
     <profile>
       <id>checks</id>

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 4caae53..c8ad3c6 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -414,7 +414,8 @@ jobs:
       - name: golangci-lint
         uses: golangci/golangci-lint-action@v3
         with:
-          version: v1.32
+          # fixed to avoid triggering false positive; see https://github.com/golangci/golangci-lint-action/issues/535
+          version: v1.47.3
           working-directory: clients/go
   java-checks:
     name: Java checks
diff --git a/clients/go/.golangci.yaml b/clients/go/.golangci.yaml
index dde2f92..07106c5 100644
--- a/clients/go/.golangci.yaml
+++ b/clients/go/.golangci.yaml
@@ -1,5 +1,5 @@
 linters:
-  enable:  
+  enable:
   - gofmt
   - golint
   - misspell

diff --git a/parent/pom.xml b/parent/pom.xml
index 43f365c..7a9eb5d 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -40,6 +40,7 @@
     <version.assertj>3.19.0</version.assertj>
     <version.awaitility>4.1.0</version.awaitility>
     <version.camunda>7.15.0</version.camunda>
+    <version.checkstyle>8.43</version.checkstyle>
     <version.commons-lang>3.12.0</version.commons-lang>
     <version.commons-logging>1.2</version.commons-logging>
     <version.commons-math>3.6.1</version.commons-math>
@@ -859,6 +860,11 @@
               <artifactId>zeebe-build-tools</artifactId>
               <version>${project.version}</version>
             </dependency>
+            <dependency>
+              <groupId>com.puppycrawl.tools</groupId>
+              <artifactId>checkstyle</artifactId>
+              <version>${version.checkstyle}</version>
+            </dependency>
           </dependencies>
           <configuration>
             <configLocation>check/.checkstyle.xml</configLocation>

diff --git a/parent/pom.xml b/parent/pom.xml
index 4b79121..2ea6b01 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -931,7 +931,7 @@
               <goals>
                 <goal>format</goal>
               </goals>
-              <phase>compile</phase>
+              <phase>process-sources</phase>
             </execution>
           </executions>
         </plugin>

diff --git a/topology/pom.xml b/topology/pom.xml
index 389508e..ee6239a 100644
--- a/topology/pom.xml
+++ b/topology/pom.xml
@@ -16,6 +16,7 @@
   </parent>
 
   <artifactId>zeebe-cluster-topology</artifactId>
+  <name>Zeebe Cluster Topology</name>
 
   <properties>
     <proto.dir>${maven.multiModuleProjectDirectory}/topology/src/main/resources/proto</proto.dir>

diff --git a/.ci/scripts/distribution/analyse-java.sh b/.ci/scripts/distribution/analyse-java.sh
index a0122f7..0e965df 100755
--- a/.ci/scripts/distribution/analyse-java.sh
+++ b/.ci/scripts/distribution/analyse-java.sh
@@ -23,12 +23,12 @@ else
   fi
 
   if [ ""${GIT_BRANCH}"" == ""master"" ] || [ ""${GIT_BRANCH}"" == ""develop"" ]; then
-    TARGET_BRANCH=""master""
+    TARGET_BRANCH=""${GIT_BRANCH}""
   else
     TARGET_BRANCH=""develop""
+    PROPERTIES+=(""-Dsonar.branch.target=${TARGET_BRANCH}"")
   fi
 
-  PROPERTIES+=(""-Dsonar.branch.target=${TARGET_BRANCH}"")
   git fetch --no-tags ""${GIT_URL}"" ""+refs/heads/${TARGET_BRANCH}:refs/remotes/origin/${TARGET_BRANCH}""
 fi
 
diff --git a/parent/pom.xml b/parent/pom.xml
index f4c3160..d34b41f 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -1570,7 +1570,7 @@
         <!-- sonarscanner integration -->
         <!-- sonar.login token must be passed at runtime to avoid sharing token -->
         <sonar.host.url>https://sonarcloud.io</sonar.host.url>
-        <sonar.organization>zeebe-io</sonar.organization>
+        <sonar.organization>camunda-cloud</sonar.organization>
         <sonar.login>${env.SONARCLOUD_TOKEN}</sonar.login>
         <sonar.links.issue>${project.scm.url}/issues</sonar.links.issue>
         <sonar.cpd.exclusions>

diff --git a/dmn/pom.xml b/dmn/pom.xml
index df836e6..6737390 100644
--- a/dmn/pom.xml
+++ b/dmn/pom.xml
@@ -10,7 +10,7 @@
     <relativePath>../parent/pom.xml</relativePath>
   </parent>
 
-  <artifactId>dmn</artifactId>
+  <artifactId>zeebe-dmn</artifactId>
   <name>Zeebe DMN Engine</name>
 
   <dependencies>

diff --git a/.ci/scripts/release/build-go.sh b/.ci/scripts/release/build-go.sh
index 369fdca..8b3c22a 100755
--- a/.ci/scripts/release/build-go.sh
+++ b/.ci/scripts/release/build-go.sh
@@ -1,23 +1,12 @@
 #!/bin/bash -xue
 
-export CGO_ENABLED=0
+pushd clients/go/internal/embedded
+echo ""${RELEASE_VERSION}"" > data/VERSION
+""${GOPATH}/bin/go-bindata"" -pkg embedded -o embedded.go -prefix data data/
 
-ORG_DIR=${GOPATH}/src/github.com/camunda-cloud
-GOBINDATA_VERSION=""3.1.3""
+git commit -am ""build(project): update go embedded version data""
+git push origin ""${RELEASE_BRANCH}""
 
-mkdir -p ${ORG_DIR}
-ln -s ${PWD} ${ORG_DIR}/zeebe
-
-curl -sL https://github.com/go-bindata/go-bindata/archive/v${GOBINDATA_VERSION}.tar.gz | tar xz
-cd go-bindata-${GOBINDATA_VERSION}
-go install ./...
-
-cd ${ORG_DIR}/zeebe/clients/go/internal/embedded
-echo ${RELEASE_VERSION} > data/VERSION
-go-bindata -pkg embedded -o embedded.go -prefix data data/
-
-git commit -am ""chore(project): update go embedded version data""
-git push origin ${RELEASE_BRANCH} 
-
-cd ${ORG_DIR}/zeebe/clients/go/cmd/zbctl
+popd
+pushd clients/go/cmd/zbctl
 ./build.sh
diff --git a/.ci/scripts/release/build-java.sh b/.ci/scripts/release/build-java.sh
index 93e4ec6..9c72fed 100755
--- a/.ci/scripts/release/build-java.sh
+++ b/.ci/scripts/release/build-java.sh
@@ -1,5 +1,2 @@
 #!/bin/bash -xeu
-
-export JAVA_TOOL_OPTIONS=""$JAVA_TOOL_OPTIONS -XX:MaxRAMFraction=$((LIMITS_CPU))""
-
-mvn -B -s ${MAVEN_SETTINGS_XML} -DskipTests clean install -Pprepare-offline -PcheckFormat,-autoFormat
+mvn -B -s ""${MAVEN_SETTINGS_XML}"" -T1C -DskipTests clean install -Pprepare-offline,-PcheckFormat,-autoFormat
diff --git a/.ci/scripts/release/compat-update-go.sh b/.ci/scripts/release/compat-update-go.sh
index bef9a6e..4582a6d 100755
--- a/.ci/scripts/release/compat-update-go.sh
+++ b/.ci/scripts/release/compat-update-go.sh
@@ -1,17 +1,12 @@
 #!/bin/bash -xue
 
-GOCOMPAT_VERSION=""v0.3.0""
-
-if [[ ""$RELEASE_VERSION"" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
-  curl -sL https://github.com/smola/gocompat/releases/download/${GOCOMPAT_VERSION}/gocompat_linux_amd64.tar.gz | tar xzvf - -C /usr/bin gocompat_linux_amd64
-  mv /usr/bin/gocompat_linux_amd64 /usr/bin/gocompat
-  chmod +x /usr/bin/gocompat
+if [[ ! ""$RELEASE_VERSION"" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
+  echo ""Skipping updating the compat version as ${RELEASE_VERSION} is not a stable version""
+  exit 0
+fi
 
-  cd ${GOPATH}/src/github.com/camunda-cloud/zeebe/clients/go
-  gocompat save ./...
+pushd clients/go
+""${GOPATH}/bin/gocompat"" save ./...
 
-  git commit -am ""chore(project): update go versions""
-  git push origin ${RELEASE_BRANCH}
-else
-  echo ""Skipping updating the compat version as $RELEASE_VERSION is not a stable version""
-fi
+git commit -am ""build(project): update go versions""
+git push origin ""${RELEASE_BRANCH}""
diff --git a/.ci/scripts/release/compat-update-java.sh b/.ci/scripts/release/compat-update-java.sh
index 149b486..6718572 100755
--- a/.ci/scripts/release/compat-update-java.sh
+++ b/.ci/scripts/release/compat-update-java.sh
@@ -1,14 +1,12 @@
 #!/bin/bash -xue
 
-if [[ ""$RELEASE_VERSION"" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
-  mvn -B -s ${MAVEN_SETTINGS_XML} versions:set-property -DgenerateBackupPoms=false -Dproperty=backwards.compat.version -DnewVersion=${RELEASE_VERSION}
-
-  FILE=$(mvn -B -s ${MAVEN_SETTINGS_XML} help:evaluate -Dexpression=ignored.changes.file -q -DforceStdout)
-
-  rm -f clients/java/$FILE test/$FILE exporter-api/$FILE protocol/$FILE bpmn-model/$FILE
-
-  git commit -am ""chore(project): update java compat versions""
-  git push origin ${RELEASE_BRANCH}
-else
-  echo ""Skipping updating the compat version as $RELEASE_VERSION is not a stable version""
+if [[ ! ""$RELEASE_VERSION"" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
+  echo ""Skipping updating the compat version as ${RELEASE_VERSION} is not a stable version""
+  exit 0
 fi
+
+mvn -B -s ""${MAVEN_SETTINGS_XML}"" versions:set-property -DgenerateBackupPoms=false -Dproperty=backwards.compat.version -DnewVersion=""${RELEASE_VERSION}""
+FILE=$(mvn -B -s ""${MAVEN_SETTINGS_XML}"" help:evaluate -Dexpression=ignored.changes.file -q -DforceStdout)
+rm -f ""clients/java/${FILE}"" ""test/${FILE}"" ""exporter-api/${FILE}"" ""protocol/${FILE}"" ""bpmn-model/${FILE}""
+git commit -am ""build(project): update java compat versions""
+git push origin ""${RELEASE_BRANCH}""
diff --git a/.ci/scripts/release/github-release.sh b/.ci/scripts/release/github-release.sh
index 24a9466..3c2dd6d 100755
--- a/.ci/scripts/release/github-release.sh
+++ b/.ci/scripts/release/github-release.sh
@@ -4,31 +4,29 @@ export GITHUB_TOKEN=${GITHUB_TOKEN_PSW}
 export GITHUB_ORG=camunda-cloud
 export GITHUB_REPO=zeebe
 
-curl -sL  https://github.com/github-release/github-release/releases/download/v0.10.0/linux-amd64-github-release.bz2 | bzip2 -fd - > github-release
-chmod +x github-release
-GITHUB_RELEASE=${PWD}/github-release
+BINDIR=${BINDIR:-/tmp}
+GITHUB_RELEASE=${GITHUB_RELEASE:-""${BINDIR}/github-release""}
+""${GITHUB_RELEASE}"" release --user ""${GITHUB_ORG}"" --repo ""${GITHUB_REPO}"" --tag ""${RELEASE_VERSION}"" --draft --name ""Zeebe ${RELEASE_VERSION}"" --description """"
 
-${GITHUB_RELEASE} release --user ${GITHUB_ORG} --repo ${GITHUB_REPO} --tag ${RELEASE_VERSION} --draft --name ""Zeebe ${RELEASE_VERSION}"" --description """"
-
-git tag clients/go/v${RELEASE_VERSION}
-git push origin clients/go/v${RELEASE_VERSION}
+git tag ""clients/go/v${RELEASE_VERSION}""
+git push origin ""clients/go/v${RELEASE_VERSION}""
 
 function upload {
-  pushd ${1}
-
-  local artifact=${2}
-  local checksum=${artifact}.sha1sum
+  local -r buildDir=""${1}""
+  local -r artifact=""${2}""
+  local -r checksum=""${artifact}.sha1sum""
 
-  sha1sum ${artifact} > ${checksum}
+  pushd ""${buildDir}""
 
-  ${GITHUB_RELEASE} upload --user ${GITHUB_ORG} --repo ${GITHUB_REPO} --tag ${RELEASE_VERSION} --name ""${artifact}"" --file ""${artifact}""
-  ${GITHUB_RELEASE} upload --user ${GITHUB_ORG} --repo ${GITHUB_REPO} --tag ${RELEASE_VERSION} --name ""${checksum}"" --file ""${checksum}""
+  sha1sum ""${artifact}"" > ""${checksum}""
+  ""${GITHUB_RELEASE}"" upload --user ""${GITHUB_ORG}"" --repo ""${GITHUB_REPO}"" --tag ""${RELEASE_VERSION}"" --name ""${artifact}"" --file ""${artifact}""
+  ""${GITHUB_RELEASE}"" upload --user ""${GITHUB_ORG}"" --repo ""${GITHUB_REPO}"" --tag ""${RELEASE_VERSION}"" --name ""${checksum}"" --file ""${checksum}""
 
   popd
 }
 
-upload dist/target camunda-cloud-zeebe-${RELEASE_VERSION}.tar.gz
-upload dist/target camunda-cloud-zeebe-${RELEASE_VERSION}.zip
+upload dist/target ""camunda-cloud-zeebe-${RELEASE_VERSION}.tar.gz""
+upload dist/target ""camunda-cloud-zeebe-${RELEASE_VERSION}.zip""
 upload clients/go/cmd/zbctl/dist zbctl
 upload clients/go/cmd/zbctl/dist zbctl.exe
 upload clients/go/cmd/zbctl/dist zbctl.darwin
diff --git a/.ci/scripts/release/post-github.sh b/.ci/scripts/release/post-github.sh
index 9a613f1..77b77e9 100755
--- a/.ci/scripts/release/post-github.sh
+++ b/.ci/scripts/release/post-github.sh
@@ -1,10 +1,10 @@
 #!/bin/bash
 
-cd ${GOPATH}/src/github.com/camunda-cloud/zeebe/clients/go/internal/embedded
+cd ""clients/go/internal/embedded""
 
-echo ${DEVELOPMENT_VERSION} > data/VERSION
-go-bindata -pkg embedded -o embedded.go -prefix data/ data/
+echo ""${DEVELOPMENT_VERSION}"" > data/VERSION
+""${GOPATH}/go-bindata"" -pkg embedded -o embedded.go -prefix data/ data/
 
-git commit -am ""chore(project): prepare next development version (Go client)""
-git push origin ${RELEASE_BRANCH}
+git commit -am ""build(project): prepare next development version (Go client)""
+git push origin ""${RELEASE_BRANCH}""
 

diff --git a/.ci/scripts/distribution/prepare-go.sh b/.ci/scripts/distribution/prepare-go.sh
index 8dc0313..a084d66 100755
--- a/.ci/scripts/distribution/prepare-go.sh
+++ b/.ci/scripts/distribution/prepare-go.sh
@@ -1,6 +1,6 @@
 #!/bin/sh -eux
 
-GOCOMPAT_VERSION=""v0.2.0""
+GOCOMPAT_VERSION=""v0.3.0""
 GOTESTSUM_VERSION=""0.4.0""
 
 curl -sL https://github.com/smola/gocompat/releases/download/${GOCOMPAT_VERSION}/gocompat_linux_amd64.tar.gz | tar xzvf - -C /usr/bin gocompat_linux_amd64
diff --git a/.ci/scripts/release/compat-update-go.sh b/.ci/scripts/release/compat-update-go.sh
index deaea12..bef9a6e 100755
--- a/.ci/scripts/release/compat-update-go.sh
+++ b/.ci/scripts/release/compat-update-go.sh
@@ -1,6 +1,6 @@
 #!/bin/bash -xue
 
-GOCOMPAT_VERSION=""v0.2.0""
+GOCOMPAT_VERSION=""v0.3.0""
 
 if [[ ""$RELEASE_VERSION"" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
   curl -sL https://github.com/smola/gocompat/releases/download/${GOCOMPAT_VERSION}/gocompat_linux_amd64.tar.gz | tar xzvf - -C /usr/bin gocompat_linux_amd64

diff --git a/benchmarks/project/pom.xml b/benchmarks/project/pom.xml
index 62030b6..ab87dea 100644
--- a/benchmarks/project/pom.xml
+++ b/benchmarks/project/pom.xml
@@ -123,11 +123,6 @@
       </plugin>
 
       <plugin>
-        <groupId>com.diffplug.spotless</groupId>
-        <artifactId>spotless-maven-plugin</artifactId>
-      </plugin>
-
-      <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-shade-plugin</artifactId>
         <executions>

diff --git a/Dockerfile b/Dockerfile
index 6762a39..7f380cd 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -34,7 +34,6 @@ RUN wget -O - https://github.com/jvm-profiling-tools/async-profiler/releases/dow
 FROM ${APP_ENV} as app
 
 ENV ZB_HOME=/usr/local/zeebe \
-    ZEEBE_LOG_LEVEL=info \
     ZEEBE_BROKER_GATEWAY_NETWORK_HOST=0.0.0.0 \
     ZEEBE_STANDALONE_GATEWAY=false
 ENV PATH ""${ZB_HOME}/bin:${PATH}""
diff --git a/docker/utils/startup.sh b/docker/utils/startup.sh
index bc8d2fc..0fcde2b 100755
--- a/docker/utils/startup.sh
+++ b/docker/utils/startup.sh
@@ -1,17 +1,14 @@
 #!/bin/bash -xeu
 
-# legacy support
-# This environment variable was used to set the gatewway cluster host in standalone and embedded mode.
-# Now, there are two dedicated environment variables for the two different deployment scenarios.
-export ZEEBE_HOST=${ZEEBE_HOST:-$(hostname -i)}
-# Legacy support
+HOST=$(hostname -i)
 
 if [ ""$ZEEBE_STANDALONE_GATEWAY"" = ""true"" ]; then
-    export ZEEBE_GATEWAY_CLUSTER_HOST=${ZEEBE_GATEWAY_CLUSTER_HOST:-${ZEEBE_HOST}}
+    export ZEEBE_GATEWAY_NETWORK_HOST=${ZEEBE_GATEWAY_NETWORK_HOST:-${HOST}}
+    export ZEEBE_GATEWAY_CLUSTER_HOST=${ZEEBE_GATEWAY_CLUSTER_HOST:-${HOST}}
 
     exec /usr/local/zeebe/bin/gateway
 else
-    export ZEEBE_BROKER_NETWORK_HOST=${ZEEBE_BROKER_NETWORK_HOST:-${ZEEBE_HOST}}
+    export ZEEBE_BROKER_NETWORK_HOST=${ZEEBE_BROKER_NETWORK_HOST:-${HOST}}
     export ZEEBE_BROKER_GATEWAY_CLUSTER_HOST=${ZEEBE_BROKER_GATEWAY_CLUSTER_HOST:-${ZEEBE_BROKER_NETWORK_HOST}}
 
     exec /usr/local/zeebe/bin/broker

diff --git a/parent/pom.xml b/parent/pom.xml
index c402aef..f48a517 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -202,6 +202,12 @@
 
       <dependency>
         <groupId>io.camunda</groupId>
+        <artifactId>zeebe-protocol-util</artifactId>
+        <version>${project.version}</version>
+      </dependency>
+
+      <dependency>
+        <groupId>io.camunda</groupId>
         <artifactId>zeebe-dispatcher</artifactId>
         <version>${project.version}</version>
       </dependency>
"
camunda/zeebe,chore,"diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicator.java b/gateway/src/main/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicator.java
new file mode 100644
index 0000000..75d9cca
--- /dev/null
+++ b/gateway/src/main/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicator.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.gateway.impl.probes.health;
+
+import static java.util.Objects.requireNonNull;
+
+import java.time.Duration;
+import java.util.HashMap;
+import java.util.Map;
+import org.springframework.boot.actuate.health.Health;
+import org.springframework.boot.actuate.health.Health.Builder;
+import org.springframework.boot.actuate.health.HealthIndicator;
+import org.springframework.boot.actuate.health.Status;
+import org.springframework.scheduling.annotation.Scheduled;
+
+/**
+ * Wrapper for a health indicator that adds time tolerance to the underlying health indicator. When
+ * the original health indicator reports a {@code Status.DOWN}, then this health indicator will
+ * still report the health status as {@code Status.UP} for a certain time. If the health comes back
+ * up during that time, then the downtime will be hidden by the decorator. If the health stays down
+ * for a long time, then this health indicator will also switch to {@code Status.DOWN}
+ *
+ * <p>Ultimately, the purpose of this class is to implement a health indicator like ""no connection
+ * to backend for > 5 min of time"". In this setup, one needs a ""no connection to backend"" health
+ * indicator that toggles immediately when the connection gets lost. This can then be wrapped in
+ * this class to add the delay.
+ */
+public class DelayedHealthIndicator implements HealthIndicator {
+
+  private final HealthIndicator originalHealthIndicator;
+
+  private final Duration maxDowntime;
+
+  private Status lastStatus;
+  private Long lastTimeUp;
+
+  private final Map<String, Object> staticDetails = new HashMap<>();
+
+  public DelayedHealthIndicator(
+      final HealthIndicator originalHealthIndicator, final Duration maxDowntime) {
+    if (requireNonNull(maxDowntime).toMillis() < 0) {
+      throw new IllegalArgumentException(""maxDonwtime must be >= 0"");
+    }
+    this.originalHealthIndicator = requireNonNull(originalHealthIndicator);
+    this.maxDowntime = maxDowntime;
+
+    staticDetails.put(""derivedFrom"", originalHealthIndicator.getClass().getSimpleName());
+    staticDetails.put(""maxDowntime"", maxDowntime);
+  }
+
+  @Scheduled(fixedDelay = 5000)
+  public void checkHealth() {
+    lastStatus = originalHealthIndicator.health().getStatus();
+
+    if (lastStatus.equals(Status.UP)) {
+      lastTimeUp = System.currentTimeMillis();
+    }
+  }
+
+  @Override
+  public Health health() {
+    final Builder responseBuilder;
+    final long now = System.currentTimeMillis();
+    if (lastTimeUp == null) { // was never up
+      if (lastStatus == null) {
+        responseBuilder = Health.unknown();
+      } else {
+        responseBuilder = Health.status(lastStatus);
+      }
+    } else if (lastTimeUp + maxDowntime.toMillis() > now) {
+      responseBuilder = Health.up();
+    } else {
+      responseBuilder = Health.status(lastStatus);
+    }
+
+    return responseBuilder.withDetails(createDetails(now)).build();
+  }
+
+  private Map<String, Object> createDetails(long referenceTime) {
+    final var result = new HashMap<>(staticDetails);
+    if (lastStatus != null) {
+      result.put(""lastSeenStatus"", lastStatus.getCode());
+    }
+
+    result.put(""wasEverUp"", lastTimeUp != null);
+
+    if (lastTimeUp != null && lastStatus != Status.UP) {
+      result.put(""downTime"", Duration.ofMillis(referenceTime - lastTimeUp));
+    }
+
+    return result;
+  }
+}
diff --git a/gateway/src/test/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicatorTest.java b/gateway/src/test/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicatorTest.java
new file mode 100644
index 0000000..1c5a06c
--- /dev/null
+++ b/gateway/src/test/java/io/zeebe/gateway/impl/probes/health/DelayedHealthIndicatorTest.java
@@ -0,0 +1,172 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.gateway.impl.probes.health;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.Mockito.when;
+
+import java.time.Duration;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.boot.actuate.health.Health;
+import org.springframework.boot.actuate.health.HealthIndicator;
+import org.springframework.boot.actuate.health.Status;
+
+@RunWith(MockitoJUnitRunner.class)
+public class DelayedHealthIndicatorTest {
+
+  private static final Duration TEST_MAX_DOWNTIME = Duration.ofMillis(50);
+
+  @Mock private HealthIndicator mockHealthIndicator;
+
+  @Test
+  public void shouldRejectNullHealthIndicatorInConstructor() {
+    assertThatThrownBy(() -> new DelayedHealthIndicator(null, TEST_MAX_DOWNTIME))
+        .isInstanceOf(NullPointerException.class);
+  }
+
+  @Test
+  public void shouldRejectNullMaxDowntimeInConstructor() {
+    assertThatThrownBy(() -> new DelayedHealthIndicator(mockHealthIndicator, null))
+        .isInstanceOf(NullPointerException.class);
+  }
+
+  @Test
+  public void shouldRejectNegativeMaxDowntimeInConstructor() {
+    assertThatThrownBy(
+            () -> new DelayedHealthIndicator(mockHealthIndicator, Duration.ofMillis(-50)))
+        .isInstanceOf(IllegalArgumentException.class);
+  }
+
+  @Test
+  public void shouldReportUnknownHealthStatusIfAskedBeforeDelegateHealthIndicatorWasCalled() {
+    // given
+    final var sutDelayedHealthIndicator =
+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);
+
+    // when
+    final Health actualHealth = sutDelayedHealthIndicator.health();
+
+    // then
+    assertThat(actualHealth).isNotNull();
+    assertThat(actualHealth.getStatus()).isEqualTo(Status.UNKNOWN);
+  }
+
+  @Test
+  public void
+      shouldReportHealthStatusOfDelegateHealthIndicatorIfBackendHealthIndicatorWasNeverUp() {
+    // given
+    final var sutDelayedHealthIndicator =
+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);
+
+    when(mockHealthIndicator.health()).thenReturn(Health.down().build());
+
+    // when
+    sutDelayedHealthIndicator.checkHealth();
+    final Health actualHealth = sutDelayedHealthIndicator.health();
+
+    // then
+    assertThat(actualHealth).isNotNull();
+    assertThat(actualHealth.getStatus()).isEqualTo(Status.DOWN);
+  }
+
+  @Test
+  public void
+      shouldReportHealthStatusUpWhenBackendHealthIndicatorWasUpInThePastAndIsTemporarilyDown() {
+    // given
+    final var sutDelayedHealthIndicator =
+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);
+    // backend health indicator was up in the past
+    when(mockHealthIndicator.health()).thenReturn(Health.up().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    // when
+    // backend health indicator goes down
+    when(mockHealthIndicator.health()).thenReturn(Health.down().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    final Health actualHealth = sutDelayedHealthIndicator.health();
+
+    // then
+    // delayed health indicator is still up
+    assertThat(actualHealth).isNotNull();
+    assertThat(actualHealth.getStatus()).isEqualTo(Status.UP);
+  }
+
+  @Test
+  public void
+      shouldReportHealthStatusDownWhenBackendHealthIndicatorWasUpInThePastAndIsDownForMoreThanMaxDowntime()
+          throws InterruptedException {
+    // given
+    final var sutDelayedHealthIndicator =
+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);
+    // backend health indicator was up in the past
+    when(mockHealthIndicator.health()).thenReturn(Health.up().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    // when
+    // backend health indicator goes down
+    when(mockHealthIndicator.health()).thenReturn(Health.down().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    final Health actualHealthImmediate = sutDelayedHealthIndicator.health();
+
+    // wait for more then the configured max downtime
+    Thread.sleep(100);
+    sutDelayedHealthIndicator.checkHealth();
+    final Health actualHealthAfterDelay = sutDelayedHealthIndicator.health();
+
+    // then
+    // immediate health report was up
+    assertThat(actualHealthImmediate).isNotNull();
+    assertThat(actualHealthImmediate.getStatus()).isEqualTo(Status.UP);
+
+    // delayed health report was down
+    assertThat(actualHealthAfterDelay).isNotNull();
+    assertThat(actualHealthAfterDelay.getStatus()).isEqualTo(Status.DOWN);
+  }
+
+  @Test
+  public void
+      shouldReportHealthStatusUpWhenBackendHealthIndicatorGoesDownTemporarilyButComesUpBeforeTheMaxDowntimeExpired()
+          throws InterruptedException {
+    // given
+    final var sutDelayedHealthIndicator =
+        new DelayedHealthIndicator(mockHealthIndicator, TEST_MAX_DOWNTIME);
+    // backend health indicator was up in the past
+    when(mockHealthIndicator.health()).thenReturn(Health.up().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    // when
+    // backend health indicator goes down
+    when(mockHealthIndicator.health()).thenReturn(Health.down().build());
+    sutDelayedHealthIndicator.checkHealth();
+    final Health actualHealthImmediate = sutDelayedHealthIndicator.health();
+
+    // backend health indicator is up again
+    when(mockHealthIndicator.health()).thenReturn(Health.up().build());
+    sutDelayedHealthIndicator.checkHealth();
+
+    // wait for more then the configured max downtime
+    Thread.sleep(100);
+
+    final Health actualHealthAfterDelay = sutDelayedHealthIndicator.health();
+
+    // then
+    // immediate health report was up
+    assertThat(actualHealthImmediate).isNotNull();
+    assertThat(actualHealthImmediate.getStatus()).isEqualTo(Status.UP);
+
+    // delayed health report is also up
+    assertThat(actualHealthAfterDelay).isNotNull();
+    assertThat(actualHealthAfterDelay.getStatus()).isEqualTo(Status.UP);
+  }
+}

diff --git a/util/src/main/java/io/zeebe/util/sched/ActorControl.java b/util/src/main/java/io/zeebe/util/sched/ActorControl.java
index 6cf391c..9721278 100755
--- a/util/src/main/java/io/zeebe/util/sched/ActorControl.java
+++ b/util/src/main/java/io/zeebe/util/sched/ActorControl.java
@@ -32,6 +32,18 @@ public class ActorControl {
     this.task = new ActorTask(actor);
   }
 
+  private ActorControl(ActorTask task) {
+    this.actor = task.actor;
+    this.task = task;
+  }
+
+  public static ActorControl current() {
+    final ActorThread actorThread =
+        ActorControl.ensureCalledFromActorThread(""ActorControl#current"");
+
+    return new ActorControl(actorThread.currentTask);
+  }
+
   /**
    * changes the actor's scheduling hints. For example, this makes it possible to transform a
    * cpu-bound actor into an io-bound actor and vice versa.
@@ -492,7 +504,7 @@ public class ActorControl {
     return currentJob;
   }
 
-  private ActorThread ensureCalledFromActorThread(String methodName) {
+  private static ActorThread ensureCalledFromActorThread(String methodName) {
     final ActorThread thread = ActorThread.current();
 
     if (thread == null) {
diff --git a/util/src/main/java/io/zeebe/util/sched/future/ActorFuture.java b/util/src/main/java/io/zeebe/util/sched/future/ActorFuture.java
index 82fffce..e2664f8 100644
--- a/util/src/main/java/io/zeebe/util/sched/future/ActorFuture.java
+++ b/util/src/main/java/io/zeebe/util/sched/future/ActorFuture.java
@@ -9,6 +9,7 @@ package io.zeebe.util.sched.future;
 
 import io.zeebe.util.sched.ActorTask;
 import java.util.concurrent.Future;
+import java.util.function.BiConsumer;
 
 /** interface for actor futures */
 public interface ActorFuture<V> extends Future<V> {
@@ -23,6 +24,30 @@ public interface ActorFuture<V> extends Future<V> {
   /** To be used by scheduler only */
   void block(ActorTask onCompletion);
 
+  /**
+   * Registers an consumer, which is executed after the future was completed. The consumer is
+   * executed in the current actor thread, which is used to register the consumer.
+   *
+   * <p>Example:
+   *
+   * <p>Actor A calls Actor B to retrieve an value. Actor B returns an future, which will be
+   * completed later with the right value. Actor A wants to do some work, after B returns the value.
+   * For that Actor A calls `#onComplete`, at this returned future, to register an consumer. After
+   * the future is completed, the registered consumer is called in the Actor A context.
+   *
+   * <p>Running in Actor A context:
+   *
+   * <pre>
+   *  final ActorFuture<Value> future = ActorB.getValue();
+   *  future.onComplete(value, throwable -> { // do things - runs in Actor A context again
+   *  });
+   * </pre>
+   *
+   * @param consumer the consumer which should be called after the future was completed
+   * @throws UnsupportedOperationException when not called on actor thread
+   */
+  void onComplete(BiConsumer<V, Throwable> consumer);
+
   boolean isCompletedExceptionally();
 
   Throwable getException();
diff --git a/util/src/main/java/io/zeebe/util/sched/future/CompletableActorFuture.java b/util/src/main/java/io/zeebe/util/sched/future/CompletableActorFuture.java
index 13438d1..e6a13de 100644
--- a/util/src/main/java/io/zeebe/util/sched/future/CompletableActorFuture.java
+++ b/util/src/main/java/io/zeebe/util/sched/future/CompletableActorFuture.java
@@ -9,6 +9,7 @@ package io.zeebe.util.sched.future;
 
 import static org.agrona.UnsafeAccess.UNSAFE;
 
+import io.zeebe.util.sched.ActorControl;
 import io.zeebe.util.sched.ActorTask;
 import io.zeebe.util.sched.ActorThread;
 import io.zeebe.util.sched.FutureUtil;
@@ -18,6 +19,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
+import java.util.function.BiConsumer;
 import org.agrona.concurrent.ManyToOneConcurrentLinkedQueue;
 
 /** Completable future implementation that is garbage free and reusable */
@@ -200,6 +202,12 @@ public class CompletableActorFuture<V> implements ActorFuture<V> {
   }
 
   @Override
+  public void onComplete(BiConsumer<V, Throwable> consumer) {
+    final ActorControl actorControl = ActorControl.current();
+    actorControl.runOnCompletion(this, consumer);
+  }
+
+  @Override
   public boolean isCompletedExceptionally() {
     return state == COMPLETED_EXCEPTIONALLY;
   }
diff --git a/util/src/test/java/io/zeebe/util/sched/functional/ActorFutureTest.java b/util/src/test/java/io/zeebe/util/sched/functional/ActorFutureTest.java
index ba8aaa9..2e6cdde 100644
--- a/util/src/test/java/io/zeebe/util/sched/functional/ActorFutureTest.java
+++ b/util/src/test/java/io/zeebe/util/sched/functional/ActorFutureTest.java
@@ -12,6 +12,7 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import io.zeebe.util.collection.Tuple;
 import io.zeebe.util.sched.Actor;
+import io.zeebe.util.sched.ActorThread;
 import io.zeebe.util.sched.future.ActorFuture;
 import io.zeebe.util.sched.future.CompletableActorFuture;
 import io.zeebe.util.sched.testing.ControlledActorSchedulerRule;
@@ -658,6 +659,70 @@ public class ActorFutureTest {
         .hasMessageContaining(""Throwable must not be null."");
   }
 
+  @Test
+  public void shouldNotRunOnCompleteInMainThread() {
+    // given
+    final CompletableActorFuture<Void> future = new CompletableActorFuture<>();
+
+    // expect exception
+    // when
+    assertThatThrownBy(() -> future.onComplete((v, t) -> {}))
+        .isInstanceOf(UnsupportedOperationException.class);
+  }
+
+  @Test
+  public void shouldRunOnComplete() {
+    // given
+    final ActorB actorB = new ActorB();
+    schedulerRule.submitActor(actorB);
+    final ActorA actorA = new ActorA(actorB);
+    schedulerRule.submitActor(actorA);
+
+    // when
+    final ActorFuture<Integer> future = actorA.sumValues();
+    schedulerRule.workUntilDone();
+
+    // then
+    assertThat(future.isDone()).isTrue();
+    assertThat(future.join()).isEqualTo(0xCAFF);
+  }
+
+  private static class ActorA extends Actor {
+
+    private final ActorB actorB;
+
+    ActorA(ActorB actorB) {
+      this.actorB = actorB;
+    }
+
+    ActorFuture<Integer> sumValues() {
+
+      final CompletableActorFuture<Integer> future = new CompletableActorFuture<>();
+      actor.call(
+          () -> {
+            actorB
+                .getValue()
+                .onComplete(
+                    (v, t) -> {
+                      future.complete(v + 1);
+
+                      final ActorThread current = ActorThread.current();
+                      assert current != null : ""Expected to run in actor thread!"";
+                      assert current.getCurrentTask().getActor() == this
+                          : ""Expected to run in same actor!"";
+                    });
+          });
+
+      return future;
+    }
+  }
+
+  private static class ActorB extends Actor {
+    public ActorFuture<Integer> getValue() {
+      return actor.call(() -> 0xCAFE);
+    }
+  }
+
   class BlockedCallActor extends Actor {
     public void waitOnFuture() {
       actor.call(

diff --git a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/MessageValidator.java b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/MessageValidator.java
index af05bcb..ea5f452 100644
--- a/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/MessageValidator.java
+++ b/bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/MessageValidator.java
@@ -21,6 +21,7 @@ import io.zeebe.model.bpmn.instance.Message;
 import io.zeebe.model.bpmn.instance.MessageEventDefinition;
 import io.zeebe.model.bpmn.instance.Process;
 import io.zeebe.model.bpmn.instance.ReceiveTask;
+import io.zeebe.model.bpmn.instance.StartEvent;
 import io.zeebe.model.bpmn.instance.zeebe.ZeebeSubscription;
 import java.util.Collection;
 import java.util.stream.Collectors;
@@ -48,9 +49,30 @@ public class MessageValidator implements ModelElementValidator<Message> {
         validationResultCollector.addError(
             0, ""Must have exactly one zeebe:subscription extension element"");
       }
+    } else if (isReferedByStartEvent(element)) {
+      if (element.getName() == null || element.getName().isEmpty()) {
+        validationResultCollector.addError(0, ""Name must be present and not empty"");
+      }
     }
   }
 
+  private boolean isReferedByStartEvent(Message element) {
+    final Collection<StartEvent> startEvents =
+        element
+            .getParentElement()
+            .getChildElementsByType(Process.class)
+            .stream()
+            .flatMap(p -> p.getChildElementsByType(StartEvent.class).stream())
+            .collect(Collectors.toList());
+    return startEvents
+        .stream()
+        .flatMap(i -> i.getEventDefinitions().stream())
+        .anyMatch(
+            e ->
+                e instanceof MessageEventDefinition
+                    && ((MessageEventDefinition) e).getMessage() == element);
+  }
+
   private boolean isReferedByCatchEvent(Message element) {
     final Collection<IntermediateCatchEvent> intermediateCatchEvents =
         element
diff --git a/broker-core/src/main/java/io/zeebe/broker/exporter/record/value/MessageStartEventSubscriptionRecordValueImpl.java b/broker-core/src/main/java/io/zeebe/broker/exporter/record/value/MessageStartEventSubscriptionRecordValueImpl.java
new file mode 100644
index 0000000..f1ddf98
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/exporter/record/value/MessageStartEventSubscriptionRecordValueImpl.java
@@ -0,0 +1,93 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.exporter.record.value;
+
+import io.zeebe.broker.exporter.ExporterObjectMapper;
+import io.zeebe.broker.exporter.record.RecordValueImpl;
+import io.zeebe.exporter.record.value.MessageStartEventSubscriptionRecordValue;
+import java.util.Objects;
+
+public class MessageStartEventSubscriptionRecordValueImpl extends RecordValueImpl
+    implements MessageStartEventSubscriptionRecordValue {
+
+  private long workflowKey;
+  private String startEventId;
+  private String messageName;
+
+  public MessageStartEventSubscriptionRecordValueImpl(
+      ExporterObjectMapper objectMapper,
+      long workflowKey,
+      String startEventId,
+      String messageName) {
+
+    super(objectMapper);
+
+    this.workflowKey = workflowKey;
+    this.startEventId = startEventId;
+    this.messageName = messageName;
+  }
+
+  @Override
+  public long getWorkflowKey() {
+    return this.workflowKey;
+  }
+
+  @Override
+  public String getStartEventId() {
+    return this.startEventId;
+  }
+
+  @Override
+  public String getMessageName() {
+    return this.messageName;
+  }
+
+  @Override
+  public boolean equals(final Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    final MessageStartEventSubscriptionRecordValueImpl that =
+        (MessageStartEventSubscriptionRecordValueImpl) o;
+    return workflowKey == that.workflowKey
+        && Objects.equals(messageName, that.messageName)
+        && Objects.equals(startEventId, that.startEventId);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(workflowKey, startEventId, messageName);
+  }
+
+  @Override
+  public String toString() {
+    return ""MessageStartEventSubscriptionRecordValueImpl{""
+        + ""messageName='""
+        + messageName
+        + '\''
+        + "", workflowKey='""
+        + workflowKey
+        + '\''
+        + "", startEventId=""
+        + startEventId
+        + '}';
+  }
+}
diff --git a/broker-core/src/main/java/io/zeebe/broker/exporter/stream/ExporterRecordMapper.java b/broker-core/src/main/java/io/zeebe/broker/exporter/stream/ExporterRecordMapper.java
index 92b681f..893967e 100644
--- a/broker-core/src/main/java/io/zeebe/broker/exporter/stream/ExporterRecordMapper.java
+++ b/broker-core/src/main/java/io/zeebe/broker/exporter/stream/ExporterRecordMapper.java
@@ -22,6 +22,7 @@ import io.zeebe.broker.exporter.record.RecordImpl;
 import io.zeebe.broker.exporter.record.value.IncidentRecordValueImpl;
 import io.zeebe.broker.exporter.record.value.JobBatchRecordValueImpl;
 import io.zeebe.broker.exporter.record.value.JobRecordValueImpl;
+import io.zeebe.broker.exporter.record.value.MessageStartEventSubscriptionRecordValueImpl;
 import io.zeebe.broker.exporter.record.value.MessageSubscriptionRecordValueImpl;
 import io.zeebe.broker.exporter.record.value.RaftRecordValueImpl;
 import io.zeebe.broker.exporter.record.value.TimerRecordValueImpl;
@@ -31,6 +32,7 @@ import io.zeebe.broker.exporter.record.value.deployment.DeployedWorkflowImpl;
 import io.zeebe.broker.exporter.record.value.deployment.DeploymentResourceImpl;
 import io.zeebe.broker.exporter.record.value.job.HeadersImpl;
 import io.zeebe.broker.exporter.record.value.raft.RaftMemberImpl;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.MessageSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.WorkflowInstanceSubscriptionRecord;
 import io.zeebe.broker.workflow.data.TimerRecord;
@@ -116,6 +118,9 @@ public class ExporterRecordMapper {
       case TIMER:
         valueSupplier = this::ofTimerRecord;
         break;
+      case MESSAGE_START_EVENT_SUBSCRIPTION:
+        valueSupplier = this::ofMessageStartEventSubscriptionRecord;
+        break;
       default:
         return null;
     }
@@ -258,6 +263,18 @@ public class ExporterRecordMapper {
         record.getElementInstanceKey());
   }
 
+  private MessageStartEventSubscriptionRecordValueImpl ofMessageStartEventSubscriptionRecord(
+      final LoggedEvent event) {
+    final MessageStartEventSubscriptionRecord record = new MessageStartEventSubscriptionRecord();
+    event.readValue(record);
+
+    return new MessageStartEventSubscriptionRecordValueImpl(
+        objectMapper,
+        record.getWorkflowKey(),
+        asString(record.getStartEventId()),
+        asString(record.getMessageName()));
+  }
+
   private WorkflowInstanceRecordValue ofWorkflowInstanceRecord(final LoggedEvent event) {
     final WorkflowInstanceRecord record = new WorkflowInstanceRecord();
     event.readValue(record);
diff --git a/broker-core/src/main/java/io/zeebe/broker/logstreams/ZbStreamProcessorService.java b/broker-core/src/main/java/io/zeebe/broker/logstreams/ZbStreamProcessorService.java
index c12740c..a24bce4 100755
--- a/broker-core/src/main/java/io/zeebe/broker/logstreams/ZbStreamProcessorService.java
+++ b/broker-core/src/main/java/io/zeebe/broker/logstreams/ZbStreamProcessorService.java
@@ -32,11 +32,11 @@ import io.zeebe.broker.subscription.command.SubscriptionCommandSender;
 import io.zeebe.broker.subscription.message.processor.MessageEventProcessors;
 import io.zeebe.broker.system.configuration.ClusterCfg;
 import io.zeebe.broker.transport.controlmessage.ControlMessageHandlerManager;
-import io.zeebe.broker.workflow.deployment.distribute.processor.DeploymentCreatedProcessor;
 import io.zeebe.broker.workflow.deployment.distribute.processor.DeploymentDistributeProcessor;
 import io.zeebe.broker.workflow.processor.BpmnStepProcessor;
 import io.zeebe.broker.workflow.processor.CatchEventBehavior;
 import io.zeebe.broker.workflow.processor.WorkflowEventProcessors;
+import io.zeebe.broker.workflow.processor.deployment.DeploymentCreatedProcessor;
 import io.zeebe.broker.workflow.processor.deployment.DeploymentEventProcessors;
 import io.zeebe.broker.workflow.processor.timer.DueDateTimerChecker;
 import io.zeebe.broker.workflow.repository.WorkflowRepository;
@@ -162,10 +162,8 @@ public class ZbStreamProcessorService implements Service<ZbStreamProcessorServic
             managementApi,
             logStreamWriter);
 
-    typedEventStreamProcessorBuilder
-        .onEvent(ValueType.DEPLOYMENT, DeploymentIntent.CREATED, new DeploymentCreatedProcessor())
-        .onCommand(
-            ValueType.DEPLOYMENT, DeploymentIntent.DISTRIBUTE, deploymentDistributeProcessor);
+    typedEventStreamProcessorBuilder.onCommand(
+        ValueType.DEPLOYMENT, DeploymentIntent.DISTRIBUTE, deploymentDistributeProcessor);
   }
 
   private BpmnStepProcessor addWorkflowProcessors(
@@ -203,6 +201,11 @@ public class ZbStreamProcessorService implements Service<ZbStreamProcessorServic
     } else {
       DeploymentEventProcessors.addDeploymentCreateProcessor(typedProcessorBuilder, workflowState);
     }
+
+    typedProcessorBuilder.onEvent(
+        ValueType.DEPLOYMENT,
+        DeploymentIntent.CREATED,
+        new DeploymentCreatedProcessor(workflowState));
   }
 
   private void addIncidentProcessors(
diff --git a/broker-core/src/main/java/io/zeebe/broker/logstreams/processor/TypedStreamEnvironment.java b/broker-core/src/main/java/io/zeebe/broker/logstreams/processor/TypedStreamEnvironment.java
index 99b052e..e57977b 100644
--- a/broker-core/src/main/java/io/zeebe/broker/logstreams/processor/TypedStreamEnvironment.java
+++ b/broker-core/src/main/java/io/zeebe/broker/logstreams/processor/TypedStreamEnvironment.java
@@ -18,6 +18,7 @@
 package io.zeebe.broker.logstreams.processor;
 
 import io.zeebe.broker.exporter.stream.ExporterRecord;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.MessageSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.WorkflowInstanceSubscriptionRecord;
 import io.zeebe.broker.workflow.data.TimerRecord;
@@ -47,6 +48,8 @@ public class TypedStreamEnvironment {
     EVENT_REGISTRY.put(ValueType.MESSAGE, MessageRecord.class);
     EVENT_REGISTRY.put(ValueType.MESSAGE_SUBSCRIPTION, MessageSubscriptionRecord.class);
     EVENT_REGISTRY.put(
+        ValueType.MESSAGE_START_EVENT_SUBSCRIPTION, MessageStartEventSubscriptionRecord.class);
+    EVENT_REGISTRY.put(
         ValueType.WORKFLOW_INSTANCE_SUBSCRIPTION, WorkflowInstanceSubscriptionRecord.class);
     EVENT_REGISTRY.put(ValueType.EXPORTER, ExporterRecord.class);
     EVENT_REGISTRY.put(ValueType.JOB_BATCH, JobBatchRecord.class);
diff --git a/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZbColumnFamilies.java b/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZbColumnFamilies.java
index c632a83..47d3797 100644
--- a/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZbColumnFamilies.java
+++ b/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZbColumnFamilies.java
@@ -62,6 +62,10 @@ public enum ZbColumnFamilies {
   MESSAGE_SUBSCRIPTION_BY_SENT_TIME,
   MESSAGE_SUBSCRIPTION_BY_NAME_AND_CORRELATION_KEY,
 
+  // message start event subscription
+  MESSAGE_START_EVENT_SUBSCRIPTION_BY_NAME_AND_KEY,
+  MESSAGE_START_EVENT_SUBSCRIPTION_BY_KEY_AND_NAME,
+
   // workflow instance subscription
   WORKFLOW_SUBSCRIPTION_BY_KEY,
   WORKFLOW_SUBSCRIPTION_BY_SENT_TIME,
diff --git a/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZeebeState.java b/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZeebeState.java
index c8bce20..59e0f59 100644
--- a/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZeebeState.java
+++ b/broker-core/src/main/java/io/zeebe/broker/logstreams/state/ZeebeState.java
@@ -20,6 +20,7 @@ package io.zeebe.broker.logstreams.state;
 import io.zeebe.broker.incident.processor.IncidentState;
 import io.zeebe.broker.job.JobState;
 import io.zeebe.broker.logstreams.processor.KeyGenerator;
+import io.zeebe.broker.subscription.message.state.MessageStartEventSubscriptionState;
 import io.zeebe.broker.subscription.message.state.MessageState;
 import io.zeebe.broker.subscription.message.state.MessageSubscriptionState;
 import io.zeebe.broker.subscription.message.state.WorkflowInstanceSubscriptionState;
@@ -36,6 +37,7 @@ public class ZeebeState {
   private final JobState jobState;
   private final MessageState messageState;
   private final MessageSubscriptionState messageSubscriptionState;
+  private final MessageStartEventSubscriptionState messageStartEventSubscriptionState;
   private final WorkflowInstanceSubscriptionState workflowInstanceSubscriptionState;
   private final IncidentState incidentState;
 
@@ -50,6 +52,7 @@ public class ZeebeState {
     jobState = new JobState(zeebeDb);
     messageState = new MessageState(zeebeDb);
     messageSubscriptionState = new MessageSubscriptionState(zeebeDb);
+    messageStartEventSubscriptionState = new MessageStartEventSubscriptionState(zeebeDb);
     workflowInstanceSubscriptionState = new WorkflowInstanceSubscriptionState(zeebeDb);
     incidentState = new IncidentState(zeebeDb);
   }
@@ -74,6 +77,10 @@ public class ZeebeState {
     return messageSubscriptionState;
   }
 
+  public MessageStartEventSubscriptionState getMessageStartEventSubscriptionState() {
+    return messageStartEventSubscriptionState;
+  }
+
   public WorkflowInstanceSubscriptionState getWorkflowInstanceSubscriptionState() {
     return workflowInstanceSubscriptionState;
   }
diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/message/data/MessageStartEventSubscriptionRecord.java b/broker-core/src/main/java/io/zeebe/broker/subscription/message/data/MessageStartEventSubscriptionRecord.java
new file mode 100644
index 0000000..e5defc2
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/message/data/MessageStartEventSubscriptionRecord.java
@@ -0,0 +1,63 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message.data;
+
+import io.zeebe.msgpack.UnpackedObject;
+import io.zeebe.msgpack.property.LongProperty;
+import io.zeebe.msgpack.property.StringProperty;
+import org.agrona.DirectBuffer;
+
+public class MessageStartEventSubscriptionRecord extends UnpackedObject {
+
+  private final LongProperty workflowKeyProp = new LongProperty(""workflowKey"");
+  private final StringProperty messageNameProp = new StringProperty(""messageName"", """");
+  private final StringProperty startEventIdProp = new StringProperty(""startEventId"", """");
+
+  public MessageStartEventSubscriptionRecord() {
+    this.declareProperty(workflowKeyProp)
+        .declareProperty(messageNameProp)
+        .declareProperty(startEventIdProp);
+  }
+
+  public MessageStartEventSubscriptionRecord setWorkflowKey(long key) {
+    workflowKeyProp.setValue(key);
+    return this;
+  }
+
+  public long getWorkflowKey() {
+    return workflowKeyProp.getValue();
+  }
+
+  public MessageStartEventSubscriptionRecord setMessageName(DirectBuffer messageName) {
+    messageNameProp.setValue(messageName);
+    return this;
+  }
+
+  public DirectBuffer getMessageName() {
+    return messageNameProp.getValue();
+  }
+
+  public MessageStartEventSubscriptionRecord setStartEventId(DirectBuffer startEventId) {
+    this.startEventIdProp.setValue(startEventId);
+    return this;
+  }
+
+  public DirectBuffer getStartEventId() {
+    return startEventIdProp.getValue();
+  }
+}
diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/CloseMessageStartEventSubscriptionProcessor.java b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/CloseMessageStartEventSubscriptionProcessor.java
new file mode 100644
index 0000000..3b3a63e
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/CloseMessageStartEventSubscriptionProcessor.java
@@ -0,0 +1,51 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message.processor;
+
+import io.zeebe.broker.logstreams.processor.TypedRecord;
+import io.zeebe.broker.logstreams.processor.TypedRecordProcessor;
+import io.zeebe.broker.logstreams.processor.TypedResponseWriter;
+import io.zeebe.broker.logstreams.processor.TypedStreamWriter;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
+import io.zeebe.broker.subscription.message.state.MessageStartEventSubscriptionState;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
+
+public class CloseMessageStartEventSubscriptionProcessor
+    implements TypedRecordProcessor<MessageStartEventSubscriptionRecord> {
+
+  private final MessageStartEventSubscriptionState subscriptionState;
+
+  public CloseMessageStartEventSubscriptionProcessor(
+      MessageStartEventSubscriptionState subscriptionState) {
+    this.subscriptionState = subscriptionState;
+  }
+
+  @Override
+  public void processRecord(
+      TypedRecord<MessageStartEventSubscriptionRecord> record,
+      TypedResponseWriter responseWriter,
+      TypedStreamWriter streamWriter) {
+    final MessageStartEventSubscriptionRecord subscriptionRecord = record.getValue();
+    final long workflowKey = subscriptionRecord.getWorkflowKey();
+
+    subscriptionState.removeSubscriptionsOfWorkflow(workflowKey);
+
+    streamWriter.appendFollowUpEvent(
+        record.getKey(), MessageStartEventSubscriptionIntent.CLOSED, subscriptionRecord);
+  }
+}
diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/MessageEventProcessors.java b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/MessageEventProcessors.java
index ef8d2eb..9ddf357 100644
--- a/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/MessageEventProcessors.java
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/MessageEventProcessors.java
@@ -21,10 +21,12 @@ import io.zeebe.broker.clustering.base.topology.TopologyManager;
 import io.zeebe.broker.logstreams.processor.TypedEventStreamProcessorBuilder;
 import io.zeebe.broker.logstreams.state.ZeebeState;
 import io.zeebe.broker.subscription.command.SubscriptionCommandSender;
+import io.zeebe.broker.subscription.message.state.MessageStartEventSubscriptionState;
 import io.zeebe.broker.subscription.message.state.MessageState;
 import io.zeebe.broker.subscription.message.state.MessageSubscriptionState;
 import io.zeebe.protocol.clientapi.ValueType;
 import io.zeebe.protocol.intent.MessageIntent;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
 import io.zeebe.protocol.intent.MessageSubscriptionIntent;
 
 public class MessageEventProcessors {
@@ -37,6 +39,8 @@ public class MessageEventProcessors {
 
     final MessageState messageState = zeebeState.getMessageState();
     final MessageSubscriptionState subscriptionState = zeebeState.getMessageSubscriptionState();
+    final MessageStartEventSubscriptionState startEventSubscriptionState =
+        zeebeState.getMessageStartEventSubscriptionState();
 
     typedProcessorBuilder
         .onCommand(
@@ -59,6 +63,14 @@ public class MessageEventProcessors {
             ValueType.MESSAGE_SUBSCRIPTION,
             MessageSubscriptionIntent.CLOSE,
             new CloseMessageSubscriptionProcessor(subscriptionState, subscriptionCommandSender))
+        .onCommand(
+            ValueType.MESSAGE_START_EVENT_SUBSCRIPTION,
+            MessageStartEventSubscriptionIntent.OPEN,
+            new OpenMessageStartEventSubscriptionProcessor(startEventSubscriptionState))
+        .onCommand(
+            ValueType.MESSAGE_START_EVENT_SUBSCRIPTION,
+            MessageStartEventSubscriptionIntent.CLOSE,
+            new CloseMessageStartEventSubscriptionProcessor(startEventSubscriptionState))
         .withListener(
             new MessageObserver(
                 messageState, subscriptionState, subscriptionCommandSender, topologyManager));
diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/OpenMessageStartEventSubscriptionProcessor.java b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/OpenMessageStartEventSubscriptionProcessor.java
new file mode 100644
index 0000000..082face
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/message/processor/OpenMessageStartEventSubscriptionProcessor.java
@@ -0,0 +1,50 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message.processor;
+
+import io.zeebe.broker.logstreams.processor.TypedRecord;
+import io.zeebe.broker.logstreams.processor.TypedRecordProcessor;
+import io.zeebe.broker.logstreams.processor.TypedResponseWriter;
+import io.zeebe.broker.logstreams.processor.TypedStreamWriter;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
+import io.zeebe.broker.subscription.message.state.MessageStartEventSubscriptionState;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
+
+public class OpenMessageStartEventSubscriptionProcessor
+    implements TypedRecordProcessor<MessageStartEventSubscriptionRecord> {
+
+  private final MessageStartEventSubscriptionState subscriptionState;
+
+  public OpenMessageStartEventSubscriptionProcessor(
+      MessageStartEventSubscriptionState subscriptionState) {
+    this.subscriptionState = subscriptionState;
+  }
+
+  @Override
+  public void processRecord(
+      TypedRecord<MessageStartEventSubscriptionRecord> record,
+      TypedResponseWriter responseWriter,
+      TypedStreamWriter streamWriter) {
+
+    final MessageStartEventSubscriptionRecord subscription = record.getValue();
+    subscriptionState.put(subscription);
+
+    streamWriter.appendFollowUpEvent(
+        record.getKey(), MessageStartEventSubscriptionIntent.OPENED, subscription);
+  }
+}
diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionState.java b/broker-core/src/main/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionState.java
new file mode 100644
index 0000000..b63212e
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionState.java
@@ -0,0 +1,120 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message.state;
+
+import io.zeebe.broker.logstreams.state.UnpackedObjectValue;
+import io.zeebe.broker.logstreams.state.ZbColumnFamilies;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
+import io.zeebe.db.ColumnFamily;
+import io.zeebe.db.ZeebeDb;
+import io.zeebe.db.impl.DbCompositeKey;
+import io.zeebe.db.impl.DbLong;
+import io.zeebe.db.impl.DbNil;
+import io.zeebe.db.impl.DbString;
+import org.agrona.DirectBuffer;
+
+public class MessageStartEventSubscriptionState {
+
+  private final ZeebeDb<ZbColumnFamilies> zeebeDb;
+
+  private final DbString messageName;
+  private final DbLong workflowKey;
+
+  // (messageName, workflowKey => MessageSubscription)
+  private final DbCompositeKey<DbString, DbLong> messageNameAndWorkflowKey;
+  private final ColumnFamily<DbCompositeKey<DbString, DbLong>, UnpackedObjectValue>
+      subscriptionsColumnFamily;
+  private final UnpackedObjectValue subscriptionValue;
+  private final MessageStartEventSubscriptionRecord subscriptionRecord;
+
+  // (workflowKey, messageName) => \0  : to find existing subscriptions of a workflow
+  private final DbCompositeKey<DbLong, DbString> workflowKeyAndMessageName;
+  private final ColumnFamily<DbCompositeKey<DbLong, DbString>, DbNil>
+      subscriptionsOfWorkflowKeyColumnfamily;
+
+  public MessageStartEventSubscriptionState(ZeebeDb<ZbColumnFamilies> zeebeDb) {
+    this.zeebeDb = zeebeDb;
+
+    messageName = new DbString();
+    workflowKey = new DbLong();
+    messageNameAndWorkflowKey = new DbCompositeKey<>(messageName, workflowKey);
+    subscriptionValue = new UnpackedObjectValue();
+    subscriptionRecord = new MessageStartEventSubscriptionRecord();
+    subscriptionValue.wrapObject(subscriptionRecord);
+    subscriptionsColumnFamily =
+        zeebeDb.createColumnFamily(
+            ZbColumnFamilies.MESSAGE_START_EVENT_SUBSCRIPTION_BY_NAME_AND_KEY,
+            messageNameAndWorkflowKey,
+            subscriptionValue);
+
+    workflowKeyAndMessageName = new DbCompositeKey<>(workflowKey, messageName);
+    subscriptionsOfWorkflowKeyColumnfamily =
+        zeebeDb.createColumnFamily(
+            ZbColumnFamilies.MESSAGE_START_EVENT_SUBSCRIPTION_BY_KEY_AND_NAME,
+            workflowKeyAndMessageName,
+            DbNil.INSTANCE);
+  }
+
+  public void put(final MessageStartEventSubscriptionRecord subscription) {
+    subscriptionRecord.setStartEventId(subscription.getStartEventId());
+    subscriptionRecord.setMessageName(subscription.getMessageName());
+    subscriptionRecord.setWorkflowKey(subscription.getWorkflowKey());
+
+    zeebeDb.batch(
+        () -> {
+          messageName.wrapBuffer(subscription.getMessageName());
+          workflowKey.wrapLong(subscription.getWorkflowKey());
+          subscriptionsColumnFamily.put(messageNameAndWorkflowKey, subscriptionValue);
+          subscriptionsOfWorkflowKeyColumnfamily.put(workflowKeyAndMessageName, DbNil.INSTANCE);
+        });
+  }
+
+  public void removeSubscriptionsOfWorkflow(long workflowKey) {
+    this.workflowKey.wrapLong(workflowKey);
+
+    subscriptionsOfWorkflowKeyColumnfamily.whileEqualPrefix(
+        this.workflowKey,
+        (key, value) -> {
+          subscriptionsColumnFamily.delete(messageNameAndWorkflowKey);
+          subscriptionsOfWorkflowKeyColumnfamily.delete(key);
+        });
+  }
+
+  public boolean exists(final MessageStartEventSubscriptionRecord subscription) {
+    messageName.wrapBuffer(subscription.getMessageName());
+    workflowKey.wrapLong(subscription.getWorkflowKey());
+
+    return subscriptionsColumnFamily.exists(messageNameAndWorkflowKey);
+  }
+
+  public void visitSubscriptionsByMessageName(
+      DirectBuffer messageName, MessageStartEventSubscriptionVisitor visitor) {
+
+    this.messageName.wrapBuffer(messageName);
+    subscriptionsColumnFamily.whileEqualPrefix(
+        this.messageName,
+        (key, value) -> {
+          visitor.visit((MessageStartEventSubscriptionRecord) value.getObject());
+        });
+  }
+
+  @FunctionalInterface
+  public interface MessageStartEventSubscriptionVisitor {
+    void visit(MessageStartEventSubscriptionRecord subscription);
+  }
+}
diff --git a/broker-core/src/main/java/io/zeebe/broker/workflow/deployment/distribute/processor/DeploymentCreatedProcessor.java b/broker-core/src/main/java/io/zeebe/broker/workflow/deployment/distribute/processor/DeploymentCreatedProcessor.java
deleted file mode 100644
index 4b5de11..0000000
--- a/broker-core/src/main/java/io/zeebe/broker/workflow/deployment/distribute/processor/DeploymentCreatedProcessor.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Zeebe Broker Core
- * Copyright © 2017 camunda services GmbH (info@camunda.com)
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-package io.zeebe.broker.workflow.deployment.distribute.processor;
-
-import io.zeebe.broker.logstreams.processor.TypedRecord;
-import io.zeebe.broker.logstreams.processor.TypedRecordProcessor;
-import io.zeebe.broker.logstreams.processor.TypedResponseWriter;
-import io.zeebe.broker.logstreams.processor.TypedStreamWriter;
-import io.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
-import io.zeebe.protocol.intent.DeploymentIntent;
-
-public class DeploymentCreatedProcessor implements TypedRecordProcessor<DeploymentRecord> {
-
-  @Override
-  public void processRecord(
-      final TypedRecord<DeploymentRecord> event,
-      final TypedResponseWriter responseWriter,
-      final TypedStreamWriter streamWriter) {
-    final DeploymentRecord deploymentEvent = event.getValue();
-
-    streamWriter.appendFollowUpCommand(
-        event.getKey(), DeploymentIntent.DISTRIBUTE, deploymentEvent);
-  }
-}
diff --git a/broker-core/src/main/java/io/zeebe/broker/workflow/model/element/ExecutableFlowElementContainer.java b/broker-core/src/main/java/io/zeebe/broker/workflow/model/element/ExecutableFlowElementContainer.java
index fb64ee5..0352f52 100644
--- a/broker-core/src/main/java/io/zeebe/broker/workflow/model/element/ExecutableFlowElementContainer.java
+++ b/broker-core/src/main/java/io/zeebe/broker/workflow/model/element/ExecutableFlowElementContainer.java
@@ -29,10 +29,21 @@ import java.util.List;
  */
 public class ExecutableFlowElementContainer extends ExecutableActivity {
 
-  private List<ExecutableCatchEventElement> startEvents = new ArrayList<>();
+  private final List<ExecutableCatchEventElement> startEvents;
 
   public ExecutableFlowElementContainer(String id) {
     super(id);
+    startEvents = new ArrayList<>();
+  }
+
+  public ExecutableCatchEventElement getStartEvent() {
+    // return non-message start event
+    for (ExecutableCatchEventElement startEvent : startEvents) {
+      if (!startEvent.isMessage()) {
+        return startEvent;
+      }
+    }
+    return null;
   }
 
   public List<ExecutableCatchEventElement> getStartEvents() {
@@ -40,6 +51,6 @@ public class ExecutableFlowElementContainer extends ExecutableActivity {
   }
 
   public void addStartEvent(ExecutableCatchEventElement startEvent) {
-    startEvents.add(startEvent);
+    this.startEvents.add(startEvent);
   }
 }
diff --git a/broker-core/src/main/java/io/zeebe/broker/workflow/model/transformation/transformer/MessageTransformer.java b/broker-core/src/main/java/io/zeebe/broker/workflow/model/transformation/transformer/MessageTransformer.java
index 2ec35eb..26f96f7 100644
--- a/broker-core/src/main/java/io/zeebe/broker/workflow/model/transformation/transformer/MessageTransformer.java
+++ b/broker-core/src/main/java/io/zeebe/broker/workflow/model/transformation/transformer/MessageTransformer.java
@@ -41,7 +41,7 @@ public class MessageTransformer implements ModelElementTransformer<Message> {
     final ExecutableMessage executableElement = new ExecutableMessage(id);
 
     final ExtensionElements extensionElements = element.getExtensionElements();
-    // If there are no extension elements to a message, the message is not referenced anywhere.
+
     if (extensionElements != null) {
       final ZeebeSubscription subscription =
           extensionElements.getElementsQuery().filterByType(ZeebeSubscription.class).singleResult();
@@ -50,8 +50,10 @@ public class MessageTransformer implements ModelElementTransformer<Message> {
       final JsonPathQuery query = queryCompiler.compile(subscription.getCorrelationKey());
 
       executableElement.setCorrelationKey(query);
-      executableElement.setMessageName(BufferUtil.wrapString(element.getName()));
+    }
 
+    if (element.getName() != null) {
+      executableElement.setMessageName(BufferUtil.wrapString(element.getName()));
       context.addMessage(executableElement);
     }
   }
diff --git a/broker-core/src/main/java/io/zeebe/broker/workflow/processor/deployment/DeploymentCreatedProcessor.java b/broker-core/src/main/java/io/zeebe/broker/workflow/processor/deployment/DeploymentCreatedProcessor.java
new file mode 100644
index 0000000..18ca7b0
--- /dev/null
+++ b/broker-core/src/main/java/io/zeebe/broker/workflow/processor/deployment/DeploymentCreatedProcessor.java
@@ -0,0 +1,96 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.workflow.processor.deployment;
+
+import io.zeebe.broker.logstreams.processor.TypedRecord;
+import io.zeebe.broker.logstreams.processor.TypedRecordProcessor;
+import io.zeebe.broker.logstreams.processor.TypedResponseWriter;
+import io.zeebe.broker.logstreams.processor.TypedStreamWriter;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
+import io.zeebe.broker.workflow.model.element.ExecutableCatchEventElement;
+import io.zeebe.broker.workflow.model.element.ExecutableWorkflow;
+import io.zeebe.broker.workflow.state.DeployedWorkflow;
+import io.zeebe.broker.workflow.state.WorkflowState;
+import io.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
+import io.zeebe.protocol.impl.record.value.deployment.Workflow;
+import io.zeebe.protocol.intent.DeploymentIntent;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
+import java.util.List;
+
+public class DeploymentCreatedProcessor implements TypedRecordProcessor<DeploymentRecord> {
+
+  private WorkflowState workflowState;
+
+  public DeploymentCreatedProcessor(WorkflowState workflowState) {
+    this.workflowState = workflowState;
+  }
+
+  @Override
+  public void processRecord(
+      final TypedRecord<DeploymentRecord> event,
+      final TypedResponseWriter responseWriter,
+      final TypedStreamWriter streamWriter) {
+    final DeploymentRecord deploymentEvent = event.getValue();
+
+    // TODO: Write Distribute only on deployment partition (partition 0)
+    streamWriter.appendFollowUpCommand(
+        event.getKey(), DeploymentIntent.DISTRIBUTE, deploymentEvent);
+
+    for (final Workflow workflowRecord : deploymentEvent.workflows()) {
+      if (workflowRecord.getVersion() != 1) { // if not the first version
+        closeExistingMessageStartEventSubscriptions(workflowState, workflowRecord, streamWriter);
+      }
+      openMessageStartEventSubscriptions(workflowState, workflowRecord, streamWriter);
+    }
+  }
+
+  private void closeExistingMessageStartEventSubscriptions(
+      WorkflowState workflowState, Workflow workflowRecord, TypedStreamWriter streamWriter) {
+    final int previousVersion = workflowRecord.getVersion() - 1;
+    final long previousWorkflowKey =
+        workflowState
+            .getWorkflowByProcessIdAndVersion(workflowRecord.getBpmnProcessId(), previousVersion)
+            .getKey();
+    final MessageStartEventSubscriptionRecord subscriptionRecord =
+        new MessageStartEventSubscriptionRecord();
+    subscriptionRecord.setWorkflowKey(previousWorkflowKey);
+
+    streamWriter.appendNewCommand(MessageStartEventSubscriptionIntent.CLOSE, subscriptionRecord);
+  }
+
+  private void openMessageStartEventSubscriptions(
+      WorkflowState workflowState, Workflow workflowRecord, TypedStreamWriter streamWriter) {
+    final long workflowKey = workflowRecord.getKey();
+    final DeployedWorkflow workflowDefinition = workflowState.getWorkflowByKey(workflowKey);
+    final ExecutableWorkflow workflow = workflowDefinition.getWorkflow();
+    final List<ExecutableCatchEventElement> startEvents = workflow.getStartEvents();
+
+    // if startEvents contain message events
+    for (ExecutableCatchEventElement startEvent : startEvents) {
+      if (startEvent.isMessage()) {
+        final MessageStartEventSubscriptionRecord subscriptionRecord =
+            new MessageStartEventSubscriptionRecord();
+        subscriptionRecord
+            .setMessageName(startEvent.getMessage().getMessageName())
+            .setWorkflowKey(workflowKey)
+            .setStartEventId(startEvent.getId());
+        streamWriter.appendNewCommand(MessageStartEventSubscriptionIntent.OPEN, subscriptionRecord);
+      }
+    }
+  }
+}
diff --git a/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionMultiplePartitionsTest.java b/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionMultiplePartitionsTest.java
new file mode 100644
index 0000000..6edac62
--- /dev/null
+++ b/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionMultiplePartitionsTest.java
@@ -0,0 +1,88 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message;
+
+import static io.zeebe.broker.test.EmbeddedBrokerConfigurator.setPartitionCount;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
+
+import io.zeebe.broker.test.EmbeddedBrokerRule;
+import io.zeebe.exporter.record.Record;
+import io.zeebe.exporter.record.value.MessageStartEventSubscriptionRecordValue;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
+import io.zeebe.test.broker.protocol.clientapi.ClientApiRule;
+import io.zeebe.test.broker.protocol.clientapi.PartitionTestClient;
+import io.zeebe.test.util.record.RecordingExporter;
+import java.util.List;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+
+public class MessageStartEventSubscriptionMultiplePartitionsTest {
+  private static final String MESSAGE_NAME1 = ""startMessage1"";
+  private static final String EVENT_ID1 = ""startEventId1"";
+
+  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule(setPartitionCount(3));
+
+  public ClientApiRule apiRule = new ClientApiRule(brokerRule::getClientAddress);
+
+  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(apiRule);
+
+  private PartitionTestClient testClient;
+
+  @Before
+  public void init() {
+    testClient = apiRule.partitionClient();
+  }
+
+  @Test
+  public void shouldOpenMessageStartEventSubscriptionOnAllPartitions() {
+
+    testClient.deploy(createWorkflowWithOneMessageStartEvent());
+
+    final List<Record<MessageStartEventSubscriptionRecordValue>> subscriptions =
+        RecordingExporter.messageStartEventSubscriptionRecords(
+                MessageStartEventSubscriptionIntent.OPENED)
+            .limit(3)
+            .asList();
+
+    assertThat(subscriptions)
+        .hasSize(3)
+        .extracting(Record::getValue)
+        .extracting(v -> tuple(v.getStartEventId(), v.getMessageName()))
+        .containsOnly(tuple(EVENT_ID1, MESSAGE_NAME1));
+
+    assertThat(subscriptions)
+        .extracting(r -> r.getMetadata().getPartitionId())
+        .containsExactlyInAnyOrder(0, 1, 2);
+  }
+
+  private static BpmnModelInstance createWorkflowWithOneMessageStartEvent() {
+    final BpmnModelInstance modelInstance =
+        Bpmn.createExecutableProcess(""processId"")
+            .startEvent(EVENT_ID1)
+            .message(m -> m.name(MESSAGE_NAME1).id(""startmsgId""))
+            .endEvent()
+            .done();
+
+    return modelInstance;
+  }
+}
diff --git a/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionTest.java b/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionTest.java
new file mode 100644
index 0000000..f49ed0a
--- /dev/null
+++ b/broker-core/src/test/java/io/zeebe/broker/subscription/message/MessageStartEventSubscriptionTest.java
@@ -0,0 +1,147 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
+
+import io.zeebe.broker.test.EmbeddedBrokerRule;
+import io.zeebe.exporter.record.Record;
+import io.zeebe.exporter.record.value.MessageStartEventSubscriptionRecordValue;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.model.bpmn.builder.ProcessBuilder;
+import io.zeebe.protocol.intent.Intent;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
+import io.zeebe.test.broker.protocol.clientapi.ClientApiRule;
+import io.zeebe.test.broker.protocol.clientapi.PartitionTestClient;
+import io.zeebe.test.util.record.RecordingExporter;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+
+public class MessageStartEventSubscriptionTest {
+  private static final String MESSAGE_NAME1 = ""startMessage1"";
+  private static final String EVENT_ID1 = ""startEventId1"";
+
+  private static final String MESSAGE_NAME2 = ""startMessage2"";
+  private static final String EVENT_ID2 = ""startEventId2"";
+
+  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule();
+
+  public ClientApiRule apiRule = new ClientApiRule(brokerRule::getClientAddress);
+
+  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(apiRule);
+
+  private PartitionTestClient testClient;
+
+  @Before
+  public void init() {
+    testClient = apiRule.partitionClient();
+  }
+
+  @Test
+  public void shouldOpenMessageSubscriptionOnDeployment() {
+
+    // when
+    testClient.deploy(createWorkflowWithOneMessageStartEvent());
+
+    final Record<MessageStartEventSubscriptionRecordValue> subscription =
+        RecordingExporter.messageStartEventSubscriptionRecords(
+                MessageStartEventSubscriptionIntent.OPENED)
+            .getFirst();
+
+    // then
+    assertThat(subscription.getValue().getStartEventId()).isEqualTo(EVENT_ID1);
+    assertThat(subscription.getValue().getMessageName()).isEqualTo(MESSAGE_NAME1);
+  }
+
+  @Test
+  public void shouldOpenSubscriptionsForAllMessageStartEvents() {
+
+    // when
+    testClient.deploy(createWorkflowWithTwoMessageStartEvent());
+
+    final List<Record<MessageStartEventSubscriptionRecordValue>> subscriptions =
+        RecordingExporter.messageStartEventSubscriptionRecords(
+                MessageStartEventSubscriptionIntent.OPENED)
+            .limit(2)
+            .asList();
+
+    // then
+    assertThat(subscriptions.size()).isEqualTo(2);
+
+    assertThat(subscriptions)
+        .hasSize(2)
+        .extracting(Record::getValue)
+        .extracting(s -> tuple(s.getMessageName(), s.getStartEventId()))
+        .containsExactlyInAnyOrder(
+            tuple(MESSAGE_NAME1, EVENT_ID1), tuple(MESSAGE_NAME2, EVENT_ID2));
+  }
+
+  @Test
+  public void shouldCloseSubscriptionForOldVersions() {
+
+    // given
+    testClient.deploy(createWorkflowWithOneMessageStartEvent());
+    // when
+    testClient.deploy(createWorkflowWithOneMessageStartEvent());
+    // then
+
+    final List<Record<MessageStartEventSubscriptionRecordValue>> subscriptions =
+        RecordingExporter.messageStartEventSubscriptionRecords().limit(6).asList();
+
+    final List<Intent> intents =
+        subscriptions.stream().map(s -> s.getMetadata().getIntent()).collect(Collectors.toList());
+
+    assertThat(intents)
+        .containsExactly(
+            MessageStartEventSubscriptionIntent.OPEN,
+            MessageStartEventSubscriptionIntent.OPENED,
+            MessageStartEventSubscriptionIntent.CLOSE, // close old version
+            MessageStartEventSubscriptionIntent.OPEN, // open new
+            MessageStartEventSubscriptionIntent.CLOSED,
+            MessageStartEventSubscriptionIntent.OPENED);
+
+    final long closingWorkflowKey = subscriptions.get(2).getValue().getWorkflowKey();
+    assertThat(closingWorkflowKey).isEqualTo(subscriptions.get(0).getValue().getWorkflowKey());
+  }
+
+  private static BpmnModelInstance createWorkflowWithOneMessageStartEvent() {
+    final BpmnModelInstance modelInstance =
+        Bpmn.createExecutableProcess(""processId"")
+            .startEvent(EVENT_ID1)
+            .message(m -> m.name(MESSAGE_NAME1).id(""startmsgId""))
+            .endEvent()
+            .done();
+
+    return modelInstance;
+  }
+
+  private static BpmnModelInstance createWorkflowWithTwoMessageStartEvent() {
+    final ProcessBuilder process = Bpmn.createExecutableProcess(""processId"");
+    process.startEvent(EVENT_ID1).message(m -> m.name(MESSAGE_NAME1).id(""startmsgId1"")).endEvent();
+    process.startEvent(EVENT_ID2).message(m -> m.name(MESSAGE_NAME2).id(""startmsgId2"")).endEvent();
+
+    final BpmnModelInstance modelInstance = process.done();
+    return modelInstance;
+  }
+}
diff --git a/broker-core/src/test/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionStateTest.java b/broker-core/src/test/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionStateTest.java
new file mode 100644
index 0000000..e99c37d
--- /dev/null
+++ b/broker-core/src/test/java/io/zeebe/broker/subscription/message/state/MessageStartEventSubscriptionStateTest.java
@@ -0,0 +1,139 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.subscription.message.state;
+
+import static io.zeebe.util.buffer.BufferUtil.bufferAsString;
+import static io.zeebe.util.buffer.BufferUtil.wrapString;
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
+import io.zeebe.broker.util.ZeebeStateRule;
+import java.util.ArrayList;
+import java.util.List;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+public class MessageStartEventSubscriptionStateTest {
+
+  @Rule public ZeebeStateRule stateRule = new ZeebeStateRule();
+
+  private MessageStartEventSubscriptionState state;
+
+  @Before
+  public void setUp() {
+    state = stateRule.getZeebeState().getMessageStartEventSubscriptionState();
+  }
+
+  @Test
+  public void shouldExistAfterPut() {
+    final MessageStartEventSubscriptionRecord subscription =
+        createSubscription(""messageName"", ""startEventID"", 1);
+    state.put(subscription);
+    assertThat(state.exists(subscription)).isTrue();
+  }
+
+  @Test
+  public void shouldNotExistForDifferentKey() {
+    final MessageStartEventSubscriptionRecord subscription =
+        createSubscription(""messageName"", ""startEventID"", 1);
+    state.put(subscription);
+
+    subscription.setWorkflowKey(2);
+    assertThat(state.exists(subscription)).isFalse();
+  }
+
+  @Test
+  public void shouldVisitForMessageNames() {
+    final MessageStartEventSubscriptionRecord subscription1 =
+        createSubscription(""message"", ""startEvent1"", 1);
+    state.put(subscription1);
+
+    // more subscriptions for same message
+    final MessageStartEventSubscriptionRecord subscription2 =
+        createSubscription(""message"", ""startEvent2"", 2);
+    state.put(subscription2);
+
+    final MessageStartEventSubscriptionRecord subscription3 =
+        createSubscription(""message"", ""startEvent3"", 3);
+    state.put(subscription3);
+
+    // should not visit other message
+    final MessageStartEventSubscriptionRecord subscription4 =
+        createSubscription(""message-other"", ""startEvent4"", 3);
+    state.put(subscription4);
+
+    final List<String> visitedStartEvents = new ArrayList<>();
+
+    state.visitSubscriptionsByMessageName(
+        wrapString(""message""),
+        subscription -> {
+          visitedStartEvents.add(bufferAsString(subscription.getStartEventId()));
+        });
+
+    assertThat(visitedStartEvents.size()).isEqualTo(3);
+    assertThat(visitedStartEvents)
+        .containsExactlyInAnyOrder(""startEvent1"", ""startEvent2"", ""startEvent3"");
+  }
+
+  @Test
+  public void shouldNotExistAfterRemove() {
+    final MessageStartEventSubscriptionRecord subscription1 =
+        createSubscription(""message1"", ""startEvent1"", 1);
+    state.put(subscription1);
+
+    // more subscriptions for same workflow
+    final MessageStartEventSubscriptionRecord subscription2 =
+        createSubscription(""message2"", ""startEvent2"", 1);
+    state.put(subscription2);
+
+    final MessageStartEventSubscriptionRecord subscription3 =
+        createSubscription(""message3"", ""startEvent3"", 1);
+    state.put(subscription3);
+
+    state.removeSubscriptionsOfWorkflow(1);
+
+    assertThat(state.exists(subscription1)).isFalse();
+    assertThat(state.exists(subscription2)).isFalse();
+    assertThat(state.exists(subscription3)).isFalse();
+  }
+
+  @Test
+  public void shouldNotRemoveOtherKeys() {
+    final MessageStartEventSubscriptionRecord subscription1 =
+        createSubscription(""message1"", ""startEvent1"", 1);
+    state.put(subscription1);
+
+    final MessageStartEventSubscriptionRecord subscription2 =
+        createSubscription(""message1"", ""startEvent1"", 4);
+    state.put(subscription2);
+
+    state.removeSubscriptionsOfWorkflow(1);
+
+    assertThat(state.exists(subscription1)).isFalse();
+    assertThat(state.exists(subscription2)).isTrue();
+  }
+
+  private MessageStartEventSubscriptionRecord createSubscription(
+      String messageName, String startEventId, long key) {
+    return new MessageStartEventSubscriptionRecord()
+        .setStartEventId(wrapString(startEventId))
+        .setMessageName(wrapString(messageName))
+        .setWorkflowKey(key);
+  }
+}
diff --git a/broker-core/src/test/java/io/zeebe/broker/util/RecordStream.java b/broker-core/src/test/java/io/zeebe/broker/util/RecordStream.java
index cb9eb00..5ab4881 100644
--- a/broker-core/src/test/java/io/zeebe/broker/util/RecordStream.java
+++ b/broker-core/src/test/java/io/zeebe/broker/util/RecordStream.java
@@ -17,6 +17,7 @@
  */
 package io.zeebe.broker.util;
 
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.MessageSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.WorkflowInstanceSubscriptionRecord;
 import io.zeebe.broker.workflow.data.TimerRecord;
@@ -82,6 +83,13 @@ public class RecordStream extends StreamWrapper<LoggedEvent, RecordStream> {
             .map(e -> CopiedTypedEvent.toTypedEvent(e, MessageSubscriptionRecord.class)));
   }
 
+  public TypedRecordStream<MessageStartEventSubscriptionRecord>
+      onlyMessageStartEventSubscriptionRecords() {
+    return new TypedRecordStream<>(
+        filter(Records::isMessageStartEventSubscriptionRecord)
+            .map(e -> CopiedTypedEvent.toTypedEvent(e, MessageStartEventSubscriptionRecord.class)));
+  }
+
   public TypedRecordStream<WorkflowInstanceSubscriptionRecord>
       onlyWorkflowInstanceSubscriptionRecords() {
     return new TypedRecordStream<>(
diff --git a/broker-core/src/test/java/io/zeebe/broker/util/Records.java b/broker-core/src/test/java/io/zeebe/broker/util/Records.java
index 7b1af3a..51616be 100644
--- a/broker-core/src/test/java/io/zeebe/broker/util/Records.java
+++ b/broker-core/src/test/java/io/zeebe/broker/util/Records.java
@@ -73,6 +73,10 @@ public class Records {
     return isRecordOfType(event, ValueType.MESSAGE_SUBSCRIPTION);
   }
 
+  public static boolean isMessageStartEventSubscriptionRecord(final LoggedEvent event) {
+    return isRecordOfType(event, ValueType.MESSAGE_START_EVENT_SUBSCRIPTION);
+  }
+
   public static boolean isWorkflowInstanceSubscriptionRecord(final LoggedEvent event) {
     return isRecordOfType(event, ValueType.WORKFLOW_INSTANCE_SUBSCRIPTION);
   }
diff --git a/broker-core/src/test/java/io/zeebe/broker/util/TestStreams.java b/broker-core/src/test/java/io/zeebe/broker/util/TestStreams.java
index 7b9fed1..4598481 100644
--- a/broker-core/src/test/java/io/zeebe/broker/util/TestStreams.java
+++ b/broker-core/src/test/java/io/zeebe/broker/util/TestStreams.java
@@ -22,6 +22,7 @@ import static io.zeebe.test.util.TestUtil.doRepeatedly;
 import io.zeebe.broker.exporter.stream.ExporterRecord;
 import io.zeebe.broker.logstreams.processor.TypedRecord;
 import io.zeebe.broker.logstreams.state.StateStorageFactory;
+import io.zeebe.broker.subscription.message.data.MessageStartEventSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.MessageSubscriptionRecord;
 import io.zeebe.broker.subscription.message.data.WorkflowInstanceSubscriptionRecord;
 import io.zeebe.broker.workflow.data.TimerRecord;
@@ -80,6 +81,8 @@ public class TestStreams {
     VALUE_TYPES.put(MessageRecord.class, ValueType.MESSAGE);
     VALUE_TYPES.put(MessageSubscriptionRecord.class, ValueType.MESSAGE_SUBSCRIPTION);
     VALUE_TYPES.put(
+        MessageStartEventSubscriptionRecord.class, ValueType.MESSAGE_START_EVENT_SUBSCRIPTION);
+    VALUE_TYPES.put(
         WorkflowInstanceSubscriptionRecord.class, ValueType.WORKFLOW_INSTANCE_SUBSCRIPTION);
     VALUE_TYPES.put(ExporterRecord.class, ValueType.EXPORTER);
     VALUE_TYPES.put(RaftConfigurationEvent.class, ValueType.RAFT);
diff --git a/broker-core/src/test/java/io/zeebe/broker/workflow/CreateDeploymentTest.java b/broker-core/src/test/java/io/zeebe/broker/workflow/CreateDeploymentTest.java
index b5e1fd7..bbe8e08 100644
--- a/broker-core/src/test/java/io/zeebe/broker/workflow/CreateDeploymentTest.java
+++ b/broker-core/src/test/java/io/zeebe/broker/workflow/CreateDeploymentTest.java
@@ -27,6 +27,7 @@ import io.zeebe.exporter.record.Record;
 import io.zeebe.exporter.record.value.DeploymentRecordValue;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.model.bpmn.builder.ProcessBuilder;
 import io.zeebe.model.bpmn.instance.Message;
 import io.zeebe.protocol.Protocol;
 import io.zeebe.protocol.clientapi.ExecuteCommandResponseDecoder;
@@ -214,6 +215,38 @@ public class CreateDeploymentTest {
   }
 
   @Test
+  public void shouldCreateDeploymentWithMessageStartEvent() throws IOException {
+    // given
+    final ProcessBuilder processBuilder = Bpmn.createExecutableProcess();
+    final BpmnModelInstance process =
+        processBuilder.startEvent().message(m -> m.name(""startMessage"")).endEvent().done();
+
+    // when
+    final ExecuteCommandResponse resp = apiRule.partitionClient().deployWithResponse(process);
+
+    // then
+    assertThat(resp.getRecordType()).isEqualTo(RecordType.EVENT);
+    assertThat(resp.getIntent()).isEqualTo(DeploymentIntent.CREATED);
+  }
+
+  @Test
+  public void shouldCreateDeploymentWithMultipleMessageStartEvent() throws IOException {
+    // given
+    final ProcessBuilder processBuilder =
+        Bpmn.createExecutableProcess(""processWithMulitpleMsgStartEvent"");
+    processBuilder.startEvent().message(m -> m.name(""startMessage1"")).endEvent().done();
+    final BpmnModelInstance process =
+        processBuilder.startEvent().message(m -> m.name(""startMessage2"")).endEvent().done();
+
+    // when
+    final ExecuteCommandResponse resp = apiRule.partitionClient().deployWithResponse(process);
+
+    // then
+    assertThat(resp.getRecordType()).isEqualTo(RecordType.EVENT);
+    assertThat(resp.getIntent()).isEqualTo(DeploymentIntent.CREATED);
+  }
+
+  @Test
   public void shouldRejectDeploymentIfUsedInvalidMessage() throws IOException {
     // given
     final BpmnModelInstance process =
diff --git a/exporter-api/src/main/java/io/zeebe/exporter/record/value/MessageStartEventSubscriptionRecordValue.java b/exporter-api/src/main/java/io/zeebe/exporter/record/value/MessageStartEventSubscriptionRecordValue.java
new file mode 100644
index 0000000..454858f
--- /dev/null
+++ b/exporter-api/src/main/java/io/zeebe/exporter/record/value/MessageStartEventSubscriptionRecordValue.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.exporter.record.value;
+
+import io.zeebe.exporter.record.RecordValue;
+
+/**
+ * Represents message start event subscription commands and events
+ *
+ * <p>See {@link io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent} for intents.
+ */
+public interface MessageStartEventSubscriptionRecordValue extends RecordValue {
+
+  /** @return the workflow key tied to the subscription */
+  long getWorkflowKey();
+
+  /** @return the id of the start event tied to the subscription */
+  String getStartEventId();
+
+  /** @return the name of the message */
+  String getMessageName();
+}
diff --git a/protocol/src/main/java/io/zeebe/protocol/intent/Intent.java b/protocol/src/main/java/io/zeebe/protocol/intent/Intent.java
index 1c27bb6..5606a72 100644
--- a/protocol/src/main/java/io/zeebe/protocol/intent/Intent.java
+++ b/protocol/src/main/java/io/zeebe/protocol/intent/Intent.java
@@ -70,6 +70,8 @@ public interface Intent {
         return MessageIntent.from(intent);
       case MESSAGE_SUBSCRIPTION:
         return MessageSubscriptionIntent.from(intent);
+      case MESSAGE_START_EVENT_SUBSCRIPTION:
+        return MessageStartEventSubscriptionIntent.from(intent);
       case WORKFLOW_INSTANCE_SUBSCRIPTION:
         return WorkflowInstanceSubscriptionIntent.from(intent);
       case EXPORTER:
@@ -104,6 +106,8 @@ public interface Intent {
         return WorkflowInstanceIntent.valueOf(intent);
       case MESSAGE_SUBSCRIPTION:
         return MessageSubscriptionIntent.valueOf(intent);
+      case MESSAGE_START_EVENT_SUBSCRIPTION:
+        return MessageStartEventSubscriptionIntent.valueOf(intent);
       case WORKFLOW_INSTANCE_SUBSCRIPTION:
         return WorkflowInstanceSubscriptionIntent.valueOf(intent);
       case EXPORTER:
diff --git a/protocol/src/main/java/io/zeebe/protocol/intent/MessageStartEventSubscriptionIntent.java b/protocol/src/main/java/io/zeebe/protocol/intent/MessageStartEventSubscriptionIntent.java
new file mode 100644
index 0000000..2714b3f
--- /dev/null
+++ b/protocol/src/main/java/io/zeebe/protocol/intent/MessageStartEventSubscriptionIntent.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.protocol.intent;
+
+public enum MessageStartEventSubscriptionIntent implements Intent {
+  OPEN((short) 0),
+  OPENED((short) 1),
+
+  CLOSE((short) 2),
+  CLOSED((short) 3);
+
+  private short value;
+
+  MessageStartEventSubscriptionIntent(short value) {
+    this.value = value;
+  }
+
+  @Override
+  public short value() {
+    return value;
+  }
+
+  public static Intent from(short value) {
+    switch (value) {
+      case 0:
+        return OPEN;
+      case 1:
+        return OPENED;
+      case 2:
+        return CLOSE;
+      case 3:
+        return CLOSED;
+      default:
+        return Intent.UNKNOWN;
+    }
+  }
+}
diff --git a/protocol/src/main/resources/protocol.xml b/protocol/src/main/resources/protocol.xml
index b258413..ef74308 100644
--- a/protocol/src/main/resources/protocol.xml
+++ b/protocol/src/main/resources/protocol.xml
@@ -43,6 +43,7 @@
       <validValue name=""EXPORTER"">13</validValue>
       <validValue name=""JOB_BATCH"">14</validValue>
       <validValue name=""TIMER"">15</validValue>
+      <validValue name=""MESSAGE_START_EVENT_SUBSCRIPTION"">16</validValue>
     </enum>
 
     <enum name=""ControlMessageType"" encodingType=""uint8""
diff --git a/test-util/src/main/java/io/zeebe/test/util/record/MessageStartEventSubscriptionRecordStream.java b/test-util/src/main/java/io/zeebe/test/util/record/MessageStartEventSubscriptionRecordStream.java
new file mode 100644
index 0000000..954b7c2
--- /dev/null
+++ b/test-util/src/main/java/io/zeebe/test/util/record/MessageStartEventSubscriptionRecordStream.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.test.util.record;
+
+import io.zeebe.exporter.record.Record;
+import io.zeebe.exporter.record.value.MessageStartEventSubscriptionRecordValue;
+import java.util.stream.Stream;
+
+public class MessageStartEventSubscriptionRecordStream
+    extends ExporterRecordStream<
+        MessageStartEventSubscriptionRecordValue, MessageStartEventSubscriptionRecordStream> {
+
+  public MessageStartEventSubscriptionRecordStream(
+      Stream<Record<MessageStartEventSubscriptionRecordValue>> wrappedStream) {
+    super(wrappedStream);
+  }
+
+  @Override
+  protected MessageStartEventSubscriptionRecordStream supply(
+      Stream<Record<MessageStartEventSubscriptionRecordValue>> wrappedStream) {
+    return new MessageStartEventSubscriptionRecordStream((wrappedStream));
+  }
+
+  public MessageStartEventSubscriptionRecordStream withWorkfloKey(long workflowKey) {
+    return valueFilter(v -> v.getWorkflowKey() == workflowKey);
+  }
+
+  public MessageStartEventSubscriptionRecordStream withStartEventId(String startEventId) {
+    return valueFilter(v -> startEventId.equals(v.getStartEventId()));
+  }
+
+  public MessageStartEventSubscriptionRecordStream withMessageName(String messageName) {
+    return valueFilter(v -> messageName.equals(v.getMessageName()));
+  }
+}
diff --git a/test-util/src/main/java/io/zeebe/test/util/record/RecordingExporter.java b/test-util/src/main/java/io/zeebe/test/util/record/RecordingExporter.java
index 0ea507b..fd93e0e 100644
--- a/test-util/src/main/java/io/zeebe/test/util/record/RecordingExporter.java
+++ b/test-util/src/main/java/io/zeebe/test/util/record/RecordingExporter.java
@@ -22,6 +22,7 @@ import io.zeebe.exporter.record.value.IncidentRecordValue;
 import io.zeebe.exporter.record.value.JobBatchRecordValue;
 import io.zeebe.exporter.record.value.JobRecordValue;
 import io.zeebe.exporter.record.value.MessageRecordValue;
+import io.zeebe.exporter.record.value.MessageStartEventSubscriptionRecordValue;
 import io.zeebe.exporter.record.value.MessageSubscriptionRecordValue;
 import io.zeebe.exporter.record.value.RaftRecordValue;
 import io.zeebe.exporter.record.value.TimerRecordValue;
@@ -34,6 +35,7 @@ import io.zeebe.protocol.intent.IncidentIntent;
 import io.zeebe.protocol.intent.JobBatchIntent;
 import io.zeebe.protocol.intent.JobIntent;
 import io.zeebe.protocol.intent.MessageIntent;
+import io.zeebe.protocol.intent.MessageStartEventSubscriptionIntent;
 import io.zeebe.protocol.intent.MessageSubscriptionIntent;
 import io.zeebe.protocol.intent.RaftIntent;
 import io.zeebe.protocol.intent.TimerIntent;
@@ -99,6 +101,18 @@ public class RecordingExporter implements Exporter {
     return messageSubscriptionRecords().withIntent(intent);
   }
 
+  public static MessageStartEventSubscriptionRecordStream messageStartEventSubscriptionRecords() {
+    return new MessageStartEventSubscriptionRecordStream(
+        records(
+            ValueType.MESSAGE_START_EVENT_SUBSCRIPTION,
+            MessageStartEventSubscriptionRecordValue.class));
+  }
+
+  public static MessageStartEventSubscriptionRecordStream messageStartEventSubscriptionRecords(
+      final MessageStartEventSubscriptionIntent intent) {
+    return messageStartEventSubscriptionRecords().withIntent(intent);
+  }
+
   public static DeploymentRecordStream deploymentRecords() {
     return new DeploymentRecordStream(records(ValueType.DEPLOYMENT, DeploymentRecordValue.class));
   }

diff --git a/transport/src/main/java/org/camunda/tngp/transport/protocol/TransportHeaderDescriptor.java b/transport/src/main/java/org/camunda/tngp/transport/protocol/TransportHeaderDescriptor.java
index ad0015f..68624d8 100644
--- a/transport/src/main/java/org/camunda/tngp/transport/protocol/TransportHeaderDescriptor.java
+++ b/transport/src/main/java/org/camunda/tngp/transport/protocol/TransportHeaderDescriptor.java
@@ -50,4 +50,9 @@ public class TransportHeaderDescriptor
         return this;
     }
 
+    public int protocolId()
+    {
+        return buffer.getShort(PROTOCOL_ID_OFFSET);
+    }
+
 }

diff --git a/util/src/main/java/io/zeebe/util/collection/Tuple.java b/util/src/main/java/io/zeebe/util/collection/Tuple.java
index 895f5f2..06a4736 100644
--- a/util/src/main/java/io/zeebe/util/collection/Tuple.java
+++ b/util/src/main/java/io/zeebe/util/collection/Tuple.java
@@ -58,4 +58,55 @@ public class Tuple<L, R>
         return builder.toString();
     }
 
+    @Override
+    public int hashCode()
+    {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((left == null) ? 0 : left.hashCode());
+        result = prime * result + ((right == null) ? 0 : right.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj)
+        {
+            return true;
+        }
+        if (obj == null)
+        {
+            return false;
+        }
+        if (getClass() != obj.getClass())
+        {
+            return false;
+        }
+        final Tuple<?, ?> other = (Tuple<?, ?>) obj;
+        if (left == null)
+        {
+            if (other.left != null)
+            {
+                return false;
+            }
+        }
+        else if (!left.equals(other.left))
+        {
+            return false;
+        }
+        if (right == null)
+        {
+            if (other.right != null)
+            {
+                return false;
+            }
+        }
+        else if (!right.equals(other.right))
+        {
+            return false;
+        }
+        return true;
+    }
+
 }
diff --git a/util/src/main/java/io/zeebe/util/sched/ActorControl.java b/util/src/main/java/io/zeebe/util/sched/ActorControl.java
index 341a091..0a2fa05 100644
--- a/util/src/main/java/io/zeebe/util/sched/ActorControl.java
+++ b/util/src/main/java/io/zeebe/util/sched/ActorControl.java
@@ -15,10 +15,6 @@
  */
 package io.zeebe.util.sched;
 
-import io.zeebe.util.sched.channel.ChannelConsumerCondition;
-import io.zeebe.util.sched.channel.ConsumableChannel;
-import io.zeebe.util.sched.future.ActorFuture;
-
 import java.time.Duration;
 import java.util.Collection;
 import java.util.concurrent.Callable;
@@ -26,6 +22,11 @@ import java.util.concurrent.TimeUnit;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 
+import io.zeebe.util.sched.channel.ChannelConsumerCondition;
+import io.zeebe.util.sched.channel.ConsumableChannel;
+import io.zeebe.util.sched.future.ActorFuture;
+import io.zeebe.util.sched.future.FirstSuccessfullyCompletedFutureConsumer;
+
 public class ActorControl
 {
     private final ZbActor actor;
@@ -208,7 +209,7 @@ public class ActorControl
      */
     public <T> void runOnCompletion(ActorFuture<T> f, BiConsumer<T, Throwable> callback)
     {
-        final ActorJob currentJob = ensureCalledFromWithinActor(""await(...)"");
+        final ActorJob currentJob = ensureCalledFromWithinActor(""runOnCompletion(...)"");
 
         final ActorJob continuationJob = new ActorJob();
         final FutureContinuationRunnable<T> continuationRunnable = new FutureContinuationRunnable<>(task, f, callback, false);
@@ -227,6 +228,16 @@ public class ActorControl
         currentJob.appendChild(registerJob);
     }
 
+    public <T> void runOnFirstCompletion(Collection<ActorFuture<T>> futures, BiConsumer<T, Throwable> callback)
+    {
+        final BiConsumer<T, Throwable> futureConsumer = new FirstSuccessfullyCompletedFutureConsumer<>(futures.size(), callback);
+
+        for (ActorFuture<T> future : futures)
+        {
+            runOnCompletion(future, futureConsumer);
+        }
+    }
+
     public <T> void await(ActorFuture<T> f, BiConsumer<T, Throwable> callback)
     {
         final ActorJob currentJob = ensureCalledFromWithinActor(""await(...)"");
diff --git a/util/src/main/java/io/zeebe/util/sched/future/FirstSuccessfullyCompletedFutureConsumer.java b/util/src/main/java/io/zeebe/util/sched/future/FirstSuccessfullyCompletedFutureConsumer.java
new file mode 100644
index 0000000..730a2ce
--- /dev/null
+++ b/util/src/main/java/io/zeebe/util/sched/future/FirstSuccessfullyCompletedFutureConsumer.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.util.sched.future;
+
+import java.util.function.BiConsumer;
+
+public class FirstSuccessfullyCompletedFutureConsumer<T> implements BiConsumer<T, Throwable>
+{
+    private final BiConsumer<T, Throwable> callback;
+    private boolean isCompleted = false;
+    private int pendingFutures;
+
+    public FirstSuccessfullyCompletedFutureConsumer(int pendingFutures, BiConsumer<T, Throwable> callback)
+    {
+        this.pendingFutures = pendingFutures;
+        this.callback = callback;
+    }
+
+    @Override
+    public void accept(T result, Throwable failure)
+    {
+        pendingFutures -= 1;
+
+        if (failure == null)
+        {
+            if (!isCompleted)
+            {
+                isCompleted = true;
+
+                callback.accept(result, null);
+            }
+        }
+        else
+        {
+            if (pendingFutures == 0)
+            {
+                callback.accept(null, failure);
+            }
+        }
+    }
+}
diff --git a/util/src/test/java/io/zeebe/util/sched/ActorFutureTest.java b/util/src/test/java/io/zeebe/util/sched/ActorFutureTest.java
index 791df65..e0db791 100644
--- a/util/src/test/java/io/zeebe/util/sched/ActorFutureTest.java
+++ b/util/src/test/java/io/zeebe/util/sched/ActorFutureTest.java
@@ -18,18 +18,19 @@ package io.zeebe.util.sched;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.junit.Ignore;
-import org.junit.Rule;
-import org.junit.Test;
-
+import io.zeebe.util.collection.Tuple;
 import io.zeebe.util.sched.future.ActorFuture;
 import io.zeebe.util.sched.future.CompletableActorFuture;
 import io.zeebe.util.sched.future.CompletedActorFuture;
 import io.zeebe.util.sched.testing.ControlledActorSchedulerRule;
+import org.junit.Ignore;
+import org.junit.Rule;
+import org.junit.Test;
 
 public class ActorFutureTest
 {
@@ -55,6 +56,7 @@ public class ActorFutureTest
 
         final ZbActor completingActor = new ZbActor()
         {
+            @Override
             protected void onActorStarted()
             {
                 future.complete(null);
@@ -73,6 +75,125 @@ public class ActorFutureTest
     }
 
     @Test
+    public void shouldInvokeCallbackOnFirstFutureCompletion()
+    {
+        // given
+        final CompletableActorFuture<String> future1 = new CompletableActorFuture<>();
+        final CompletableActorFuture<String> future2 = new CompletableActorFuture<>();
+
+        final List<Tuple<String, Throwable>> invocations = new ArrayList<>();
+
+        final ZbActor waitingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                actor.runOnFirstCompletion(Arrays.asList(future1, future2), (r, t) -> invocations.add(new Tuple<>(r, t)));
+            }
+        };
+
+        final ZbActor completingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                future1.complete(""foo"");
+                future2.complete(""bar"");
+            }
+        };
+
+        schedulerRule.submitActor(waitingActor);
+        schedulerRule.workUntilDone();
+
+        // when
+        schedulerRule.submitActor(completingActor);
+        schedulerRule.workUntilDone();
+
+        // then
+        assertThat(invocations).hasSize(1).contains(new Tuple<>(""foo"", null));
+    }
+
+    @Test
+    public void shouldInvokeCallbackOnlyOnSuccessfullyFutureCompletion()
+    {
+        // given
+        final CompletableActorFuture<String> future1 = new CompletableActorFuture<>();
+        final CompletableActorFuture<String> future2 = new CompletableActorFuture<>();
+
+        final List<Tuple<String, Throwable>> invocations = new ArrayList<>();
+
+        final ZbActor waitingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                actor.runOnFirstCompletion(Arrays.asList(future1, future2), (r, t) -> invocations.add(new Tuple<>(r, t)));
+            }
+        };
+
+        final ZbActor completingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                future1.completeExceptionally(new RuntimeException(""foo""));
+                future2.complete(""bar"");
+            }
+        };
+
+        schedulerRule.submitActor(waitingActor);
+        schedulerRule.workUntilDone();
+
+        // when
+        schedulerRule.submitActor(completingActor);
+        schedulerRule.workUntilDone();
+
+        // then
+        assertThat(invocations).hasSize(1).contains(new Tuple<>(""bar"", null));
+    }
+
+    @Test
+    public void shouldInvokeCallbackOnLastExceptionallyFutureCompletion()
+    {
+        // given
+        final CompletableActorFuture<String> future1 = new CompletableActorFuture<>();
+        final CompletableActorFuture<String> future2 = new CompletableActorFuture<>();
+
+        final List<Tuple<String, Throwable>> invocations = new ArrayList<>();
+
+        final ZbActor waitingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                actor.runOnFirstCompletion(Arrays.asList(future1, future2), (r, t) -> invocations.add(new Tuple<>(r, t)));
+            }
+        };
+
+        final ZbActor completingActor = new ZbActor()
+        {
+            @Override
+            protected void onActorStarted()
+            {
+                future1.completeExceptionally(new RuntimeException(""foo""));
+                future2.completeExceptionally(new RuntimeException(""bar""));
+            }
+        };
+
+        schedulerRule.submitActor(waitingActor);
+        schedulerRule.workUntilDone();
+
+        // when
+        schedulerRule.submitActor(completingActor);
+        schedulerRule.workUntilDone();
+
+        // then
+        assertThat(invocations).hasSize(1);
+        assertThat(invocations.get(0).getLeft()).isNull();
+        assertThat(invocations.get(0).getRight().getMessage()).isEqualTo(""bar"");
+    }
+
+    @Test
     public void shouldNotBlockExecutionWhenRegisteredOnFuture()
     {
         // given
@@ -153,6 +274,7 @@ public class ActorFutureTest
         actor.actor.call(() -> lifecycle.add(""call""));
         schedulerRule.submitActor(new ZbActor()
         {
+            @Override
             protected void onActorStarted()
             {
                 future.complete(null);

diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftConfigurationMetadata.java b/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftConfigurationMetadata.java
index 938343c..1bfd230 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftConfigurationMetadata.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftConfigurationMetadata.java
@@ -33,7 +33,10 @@ public class RaftConfigurationMetadata
     private int term;
     private String votedForHost;
     private int votedForPort;
-    @JsonProperty(""segmentSize"") private long logSegmentSize;
+
+    @JsonProperty(""segmentSize"")
+    private long logSegmentSize;
+
     private List<RaftConfigurationMetadataMember> members;
 
     public RaftConfigurationMetadata()
diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftPersistentConfiguration.java b/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftPersistentConfiguration.java
index a2120c4..9b33dfd 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftPersistentConfiguration.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/base/raft/RaftPersistentConfiguration.java
@@ -183,7 +183,7 @@ public class RaftPersistentConfiguration implements RaftPersistentStorage
     {
         if (file.exists())
         {
-            RaftConfigurationMetadata metadata;
+            final RaftConfigurationMetadata metadata;
 
             try (InputStream is = new FileInputStream(file))
             {
diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/base/topology/TopologyManagerImpl.java b/broker-core/src/main/java/io/zeebe/broker/clustering/base/topology/TopologyManagerImpl.java
index bd532e5..2e323de 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/base/topology/TopologyManagerImpl.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/base/topology/TopologyManagerImpl.java
@@ -135,7 +135,8 @@ public class TopologyManagerImpl extends Actor implements TopologyManager, RaftS
     @Override
     public void onStateChange(Raft raft, RaftState raftState)
     {
-        actor.run(() -> {
+        actor.run(() ->
+        {
             final NodeInfo memberInfo = topology.getLocal();
 
             updatePartition(raft.getPartitionId(),
diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/ReplicationFactorService.java b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/ReplicationFactorService.java
index 82da5f8..63524cb 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/ReplicationFactorService.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/ReplicationFactorService.java
@@ -125,7 +125,8 @@ public class ReplicationFactorService extends Actor implements Service<Replicati
     {
         final ActorFuture<List<PartitionNodes>> requiredInvitationsFuture = knownTopics.queryTopics(topics -> computeRequiredInvitations(topics, currentState));
 
-        actor.runOnCompletion(requiredInvitationsFuture, (requiredInvitations, error) -> {
+        actor.runOnCompletion(requiredInvitationsFuture, (requiredInvitations, error) ->
+        {
             if (error == null)
             {
                 for (final PartitionNodes requiredInvitation : requiredInvitations)
diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/RequestPartitionsMessageHandler.java b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/RequestPartitionsMessageHandler.java
index 5bbba4b..2c7ba76 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/RequestPartitionsMessageHandler.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/RequestPartitionsMessageHandler.java
@@ -93,7 +93,8 @@ public class RequestPartitionsMessageHandler extends AbstractControlMessageHandl
         {
             final ActorFuture<PartitionsResponse> responseFuture = knownTopics.queryTopics(this::createResponse);
 
-            actor.runOnCompletion(responseFuture, (partitionsResponse, throwable) -> {
+            actor.runOnCompletion(responseFuture, (partitionsResponse, throwable) ->
+            {
                 if (throwable == null)
                 {
                     sendResponse(actor, requestStreamId, requestId, partitionsResponse);
diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/TopicCreationService.java b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/TopicCreationService.java
index 679747a..7989e28 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/TopicCreationService.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/orchestration/topic/TopicCreationService.java
@@ -147,7 +147,8 @@ public class TopicCreationService extends Actor implements Service<TopicCreation
     {
         final ActorFuture<List<PendingTopic>> pendingTopicsFuture = knownTopics.queryTopics(topics -> computePendingTopics(topics, currentState));
 
-        actor.runOnCompletion(pendingTopicsFuture, (pendingTopics, error) -> {
+        actor.runOnCompletion(pendingTopicsFuture, (pendingTopics, error) ->
+        {
             if (error == null)
             {
                 for (final PendingTopic pendingTopic : pendingTopics)
@@ -229,7 +230,8 @@ public class TopicCreationService extends Actor implements Service<TopicCreation
     private void createPartition(final PendingTopic pendingTopic)
     {
         final ActorFuture<Integer> idFuture = idGenerator.nextId();
-        actor.runOnCompletion(idFuture, (id, error) -> {
+        actor.runOnCompletion(idFuture, (id, error) ->
+        {
             if (error == null)
             {
                 LOG.debug(""Creating partition with id {} for topic {}"", id, pendingTopic.getTopicName());
diff --git a/broker-core/src/main/java/io/zeebe/broker/system/deployment/handler/RemoteWorkflowsManager.java b/broker-core/src/main/java/io/zeebe/broker/system/deployment/handler/RemoteWorkflowsManager.java
index 1bba232..3b4c7e0 100644
--- a/broker-core/src/main/java/io/zeebe/broker/system/deployment/handler/RemoteWorkflowsManager.java
+++ b/broker-core/src/main/java/io/zeebe/broker/system/deployment/handler/RemoteWorkflowsManager.java
@@ -131,7 +131,8 @@ public class RemoteWorkflowsManager implements StreamProcessorLifecycleAware
         final ActorFuture<Map<Integer, NodeInfo>> partitionLeaders = topologyManager.query((toplogy) ->
         {
             final Map<Integer, NodeInfo> leaders = new HashMap<>();
-            partitionIds.forEach((partitionId) -> {
+            partitionIds.forEach((partitionId) ->
+            {
                 final NodeInfo leader = toplogy.getLeader(partitionId);
                 if (leader != null && leader.getManagementApiAddress() != null)
                 {

diff --git a/broker-core/src/main/java/io/zeebe/broker/system/threads/ActorSchedulerService.java b/broker-core/src/main/java/io/zeebe/broker/system/threads/ActorSchedulerService.java
index b5ed314..073dd6f 100644
--- a/broker-core/src/main/java/io/zeebe/broker/system/threads/ActorSchedulerService.java
+++ b/broker-core/src/main/java/io/zeebe/broker/system/threads/ActorSchedulerService.java
@@ -5,11 +5,6 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 
 import io.zeebe.broker.Loggers;
-import org.agrona.ErrorHandler;
-import org.agrona.concurrent.BackoffIdleStrategy;
-import org.agrona.concurrent.BusySpinIdleStrategy;
-import org.agrona.concurrent.IdleStrategy;
-import org.agrona.concurrent.status.AtomicCounter;
 import io.zeebe.broker.system.ConfigurationManager;
 import io.zeebe.broker.system.threads.cfg.ThreadingCfg;
 import io.zeebe.broker.system.threads.cfg.ThreadingCfg.BrokerIdleStrategy;
@@ -18,6 +13,11 @@ import io.zeebe.servicecontainer.ServiceStartContext;
 import io.zeebe.servicecontainer.ServiceStopContext;
 import io.zeebe.util.actor.ActorScheduler;
 import io.zeebe.util.actor.ActorSchedulerBuilder;
+import org.agrona.ErrorHandler;
+import org.agrona.concurrent.BackoffIdleStrategy;
+import org.agrona.concurrent.BusySpinIdleStrategy;
+import org.agrona.concurrent.IdleStrategy;
+import org.agrona.concurrent.status.AtomicCounter;
 import org.slf4j.Logger;
 
 public class ActorSchedulerService implements Service<ActorScheduler>
@@ -43,7 +43,7 @@ public class ActorSchedulerService implements Service<ActorScheduler>
 
         if (numberOfThreads > maxThreadCount)
         {
-            LOG.warn(""WARNING: configured thread count {} is larger than maxThreadCount {}. Falling back max thread count."", numberOfThreads, maxThreadCount);
+            LOG.warn(""Configured thread count {} is larger than maxThreadCount {}. Falling back max thread count."", numberOfThreads, maxThreadCount);
             numberOfThreads = maxThreadCount;
         }
         else if (numberOfThreads < 1)

diff --git a/parent/pom.xml b/parent/pom.xml
index d475131..6290e66 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -35,6 +35,7 @@
     <version.mockito>1.8.5</version.mockito>
     <version.assertj>3.8.0</version.assertj>
     <version.msgpack>0.8.13</version.msgpack>
+    <version.jackson>2.9.0</version.jackson>
     <version.jmh>1.11.2</version.jmh>
     <version.sbe>1.5.6</version.sbe>
     <version.slf4j>1.7.23</version.slf4j>
@@ -64,6 +65,18 @@
       </dependency>
 
       <dependency>
+        <groupId>com.fasterxml.jackson.core</groupId>
+        <artifactId>jackson-databind</artifactId>
+        <version>${version.jackson}</version>
+      </dependency>
+
+      <dependency>
+        <groupId>com.fasterxml.jackson.dataformat</groupId>
+        <artifactId>jackson-dataformat-yaml</artifactId>
+        <version>${version.jackson}</version>
+      </dependency>
+
+      <dependency>
         <groupId>org.msgpack</groupId>
         <artifactId>msgpack-core</artifactId>
         <version>${version.msgpack}</version>

diff --git a/.ci/scripts/distribution/it-java.sh b/.ci/scripts/distribution/it-java.sh
index 679674b..ee150c2 100755
--- a/.ci/scripts/distribution/it-java.sh
+++ b/.ci/scripts/distribution/it-java.sh
@@ -5,7 +5,7 @@ export JAVA_TOOL_OPTIONS=""$JAVA_TOOL_OPTIONS -XX:MaxRAMFraction=$((LIMITS_CPU))""
 
 tmpfile=$(mktemp)
 
-mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -P skip-unstable-ci,parallel-tests -pl qa/integration-tests -pl upgrade-tests -DtestMavenId=2 -Dsurefire.rerunFailingTestsCount=5 | tee ${tmpfile}
+mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -P skip-unstable-ci,parallel-tests -pl qa/integration-tests -pl upgrade-tests -DtestMavenId=2 -Dsurefire.rerunFailingTestsCount=7 | tee ${tmpfile}
 
 status=${PIPESTATUS[0]}
 
diff --git a/.ci/scripts/distribution/test-java.sh b/.ci/scripts/distribution/test-java.sh
index 43e4947..768c965 100755
--- a/.ci/scripts/distribution/test-java.sh
+++ b/.ci/scripts/distribution/test-java.sh
@@ -4,7 +4,7 @@ export JAVA_TOOL_OPTIONS=""$JAVA_TOOL_OPTIONS -XX:MaxRAMFraction=$((LIMITS_CPU))""
 
 tmpfile=$(mktemp)
 
-mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -P skip-unstable-ci,parallel-tests -Dzeebe.it.skip -DtestMavenId=1 -Dsurefire.rerunFailingTestsCount=5 | tee ${tmpfile}
+mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -P skip-unstable-ci,parallel-tests -Dzeebe.it.skip -DtestMavenId=1 -Dsurefire.rerunFailingTestsCount=7 | tee ${tmpfile}
 
 status=${PIPESTATUS[0]}
 
diff --git a/.ci/scripts/distribution/test-java8.sh b/.ci/scripts/distribution/test-java8.sh
index d56cccb..0f20f95 100755
--- a/.ci/scripts/distribution/test-java8.sh
+++ b/.ci/scripts/distribution/test-java8.sh
@@ -6,7 +6,7 @@ mvn -v
 
 tmpfile=$(mktemp)
 
-mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -pl clients/java -DtestMavenId=3 -Dsurefire.rerunFailingTestsCount=5 | tee ${tmpfile}
+mvn -o -B --fail-never -T$LIMITS_CPU -s ${MAVEN_SETTINGS_XML} verify -pl clients/java -DtestMavenId=3 -Dsurefire.rerunFailingTestsCount=7 | tee ${tmpfile}
 
 status=${PIPESTATUS[0]}
 

diff --git a/transport/src/main/java/io/zeebe/transport/impl/ClientRequestPool.java b/transport/src/main/java/io/zeebe/transport/impl/ClientRequestPool.java
index becb0df..0b38f1e 100644
--- a/transport/src/main/java/io/zeebe/transport/impl/ClientRequestPool.java
+++ b/transport/src/main/java/io/zeebe/transport/impl/ClientRequestPool.java
@@ -15,15 +15,19 @@
  */
 package io.zeebe.transport.impl;
 
+import io.zeebe.transport.Loggers;
 import org.agrona.BitUtil;
 import org.agrona.concurrent.ManyToManyConcurrentArrayQueue;
 
 import io.zeebe.dispatcher.Dispatcher;
 import io.zeebe.transport.RemoteAddress;
 import io.zeebe.util.buffer.BufferWriter;
+import org.slf4j.Logger;
 
 public class ClientRequestPool implements AutoCloseable
 {
+    private static final Logger LOG = Loggers.TRANSPORT_LOGGER;
+
     private final int capacity;
     private final ManyToManyConcurrentArrayQueue<ClientRequestImpl> availableRequests;
     private ClientRequestImpl[] requests;
@@ -119,8 +123,7 @@ public class ClientRequestPool implements AutoCloseable
             }
             catch (Exception e)
             {
-                // ignore
-                e.printStackTrace();
+                LOG.debug(""Failed to close client request {}"", clientRequestImpl, e);
             }
         }
     }
diff --git a/transport/src/main/java/io/zeebe/transport/impl/ServerSocketBinding.java b/transport/src/main/java/io/zeebe/transport/impl/ServerSocketBinding.java
index 5ee9c29..fdb51c8 100644
--- a/transport/src/main/java/io/zeebe/transport/impl/ServerSocketBinding.java
+++ b/transport/src/main/java/io/zeebe/transport/impl/ServerSocketBinding.java
@@ -27,8 +27,13 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import io.zeebe.transport.Loggers;
+import org.slf4j.Logger;
+
 public class ServerSocketBinding
 {
+    private static final Logger LOG = Loggers.TRANSPORT_LOGGER;
+
     protected final List<Selector> registeredSelectors = Collections.synchronizedList(new ArrayList<>());
     protected final InetSocketAddress bindAddress;
 
@@ -82,7 +87,7 @@ public class ServerSocketBinding
             }
             catch (IOException e)
             {
-                e.printStackTrace();
+                LOG.debug(""Failed to remove selector {}"", selector, e);
             }
         }
     }
@@ -113,7 +118,7 @@ public class ServerSocketBinding
         }
         catch (Exception e)
         {
-            e.printStackTrace();
+            LOG.debug(""Failed to close selectors"", e);
         }
         try
         {
@@ -121,7 +126,7 @@ public class ServerSocketBinding
         }
         catch (IOException e)
         {
-            e.printStackTrace();
+            LOG.debug(""Failed to close media"", e);
         }
     }
 }
diff --git a/transport/src/main/java/io/zeebe/transport/impl/TransportChannel.java b/transport/src/main/java/io/zeebe/transport/impl/TransportChannel.java
index f40d655..0deccf1 100644
--- a/transport/src/main/java/io/zeebe/transport/impl/TransportChannel.java
+++ b/transport/src/main/java/io/zeebe/transport/impl/TransportChannel.java
@@ -27,6 +27,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
+import io.zeebe.transport.Loggers;
 import org.agrona.DirectBuffer;
 import org.agrona.LangUtil;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -35,9 +36,11 @@ import io.zeebe.dispatcher.FragmentHandler;
 import io.zeebe.dispatcher.impl.log.DataFrameDescriptor;
 import io.zeebe.util.allocation.AllocatedBuffer;
 import io.zeebe.util.allocation.BufferAllocators;
+import org.slf4j.Logger;
 
 public class TransportChannel
 {
+    private static final Logger LOG = Loggers.TRANSPORT_LOGGER;
     private static final AtomicIntegerFieldUpdater<TransportChannel> STATE_FIELD = AtomicIntegerFieldUpdater.newUpdater(TransportChannel.class, ""state"");
 
     private static final int CLOSED = 1;
@@ -147,7 +150,7 @@ public class TransportChannel
         }
         catch (Exception e)
         {
-            e.printStackTrace();
+            LOG.trace(""Failed to handle message"", e);
             return true;
         }
     }
@@ -227,7 +230,7 @@ public class TransportChannel
             }
             catch (Exception e)
             {
-                e.printStackTrace();
+                LOG.trace(""Failed to begin connect to {}"", remoteAddress, e);
                 doClose();
                 return false;
             }
@@ -250,7 +253,7 @@ public class TransportChannel
         }
         catch (IOException e)
         {
-            e.printStackTrace();
+            LOG.trace(""Failed to finish connect to {}"", remoteAddress, e);
             doClose();
         }
     }
@@ -290,8 +293,7 @@ public class TransportChannel
         }
         catch (Exception e)
         {
-            e.printStackTrace();
-            // ignore
+            LOG.debug(""Failed to close channel"", e);
         }
         finally
         {
diff --git a/transport/src/main/java/io/zeebe/transport/impl/actor/Conductor.java b/transport/src/main/java/io/zeebe/transport/impl/actor/Conductor.java
index 75dca68..4c99e19 100644
--- a/transport/src/main/java/io/zeebe/transport/impl/actor/Conductor.java
+++ b/transport/src/main/java/io/zeebe/transport/impl/actor/Conductor.java
@@ -20,6 +20,7 @@ import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import io.zeebe.transport.Loggers;
 import org.agrona.nio.TransportPoller;
 
 import io.zeebe.transport.TransportListener;
@@ -31,9 +32,12 @@ import io.zeebe.transport.impl.TransportChannelFactory;
 import io.zeebe.transport.impl.TransportContext;
 import io.zeebe.util.DeferredCommandContext;
 import io.zeebe.util.actor.Actor;
+import org.slf4j.Logger;
 
 public abstract class Conductor implements Actor, ChannelLifecycleListener
 {
+    private static final Logger LOG = Loggers.TRANSPORT_LOGGER;
+
     protected final DeferredCommandContext deferred = new DeferredCommandContext();
     protected final RemoteAddressListImpl remoteAddressList;
     protected final TransportContext transportContext;
@@ -105,7 +109,7 @@ public abstract class Conductor implements Actor, ChannelLifecycleListener
                 }
                 catch (Exception e)
                 {
-                    e.printStackTrace();
+                    LOG.debug(""Failed to call transport listener {} on channel connect"", l, e);
                 }
             });
         });
@@ -143,7 +147,7 @@ public abstract class Conductor implements Actor, ChannelLifecycleListener
                 }
                 catch (Exception e)
                 {
-                    e.printStackTrace();
+                    LOG.debug(""Failed to call transport listener {} on disconnect"", l, e);
                 }
             });
         });
diff --git a/transport/src/main/java/io/zeebe/transport/impl/selector/ReadTransportPoller.java b/transport/src/main/java/io/zeebe/transport/impl/selector/ReadTransportPoller.java
index 436f910..2b871b0 100644
--- a/transport/src/main/java/io/zeebe/transport/impl/selector/ReadTransportPoller.java
+++ b/transport/src/main/java/io/zeebe/transport/impl/selector/ReadTransportPoller.java
@@ -21,13 +21,17 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.function.ToIntFunction;
 
+import io.zeebe.transport.Loggers;
 import org.agrona.LangUtil;
 import org.agrona.nio.TransportPoller;
 
 import io.zeebe.transport.impl.TransportChannel;
+import org.slf4j.Logger;
 
 public class ReadTransportPoller extends TransportPoller
 {
+    private static final Logger LOG = Loggers.TRANSPORT_LOGGER;
+
     protected final List<TransportChannel> channels = new ArrayList<>();
 
     protected final ToIntFunction<SelectionKey> processKeyFn = this::processKey;
@@ -86,7 +90,7 @@ public class ReadTransportPoller extends TransportPoller
         }
         catch (Exception e)
         {
-            e.printStackTrace();
+            LOG.debug(""Failed to add channel {}"", channel, e);
         }
     }
 
diff --git a/transport/src/test/resources/log4j2-test.xml b/transport/src/test/resources/log4j2-test.xml
index 7aafcd6..2a6b5be 100644
--- a/transport/src/test/resources/log4j2-test.xml
+++ b/transport/src/test/resources/log4j2-test.xml
@@ -9,6 +9,7 @@
 
   <Loggers>
     <Logger name=""io.zeebe"" level=""debug""/>
+    <Logger name=""io.zeebe.transport"" level=""trace""/>
 
     <Root level=""info"">
       <AppenderRef ref=""Console""/>

diff --git a/dispatcher/src/main/java/io/zeebe/dispatcher/Dispatcher.java b/dispatcher/src/main/java/io/zeebe/dispatcher/Dispatcher.java
index 9e1aebb..1127e3e 100644
--- a/dispatcher/src/main/java/io/zeebe/dispatcher/Dispatcher.java
+++ b/dispatcher/src/main/java/io/zeebe/dispatcher/Dispatcher.java
@@ -30,10 +30,17 @@ import io.zeebe.util.sched.ActorCondition;
 import io.zeebe.util.sched.FutureUtil;
 import io.zeebe.util.sched.future.ActorFuture;
 import java.util.Arrays;
+import java.util.function.BiFunction;
 import org.agrona.DirectBuffer;
 
 /** Component for sending and receiving messages between different threads. */
 public class Dispatcher extends Actor implements AutoCloseable {
+
+  private static final String ERROR_MESSAGE_CLAIM_FAILED =
+      ""Expected to claim segment of size %d, but can't claim more then %d bytes."";
+  private static final String ERROR_MESSAGE_SUBSCRIPTION_NOT_FOUND =
+      ""Expected to find subscription with name '%s', but was not registered."";
+
   public static final int MODE_PUB_SUB = 1;
   public static final int MODE_PIPELINE = 2;
 
@@ -57,7 +64,7 @@ public class Dispatcher extends Actor implements AutoCloseable {
 
   private ActorCondition dataConsumed;
 
-  private Runnable backgroundTask = this::runBackgroundTask;
+  private final Runnable backgroundTask = this::runBackgroundTask;
 
   private final Runnable onClaimComplete = this::signalSubsciptions;
 
@@ -168,39 +175,10 @@ public class Dispatcher extends Actor implements AutoCloseable {
    *     return value is negative.
    */
   public long offer(DirectBuffer msg, int start, int length, int streamId) {
-    long newPosition = -1;
-
-    if (!isClosed) {
-      final long limit = publisherLimit.get();
-
-      final int activePartitionId = logBuffer.getActivePartitionIdVolatile();
-      final LogBufferPartition partition = logBuffer.getPartition(activePartitionId);
-
-      final int partitionOffset = partition.getTailCounterVolatile();
-      final long position = position(activePartitionId, partitionOffset);
-
-      if (position < limit) {
-        final int newOffset;
-
-        if (length < maxFrameLength) {
-          newOffset =
-              logAppender.appendFrame(partition, activePartitionId, msg, start, length, streamId);
-        } else {
-          final String exceptionMessage =
-              String.format(
-                  ""Message length of %s is larger than max frame length of %s"",
-                  length, maxFrameLength);
-          throw new RuntimeException(exceptionMessage);
-        }
-
-        newPosition = updatePublisherPosition(activePartitionId, newOffset);
-
-        publisherPosition.proposeMaxOrdered(newPosition);
-        signalSubsciptions();
-      }
-    }
-
-    return newPosition;
+    return offer(
+        (partition, activePartitionId) ->
+            logAppender.appendFrame(partition, activePartitionId, msg, start, length, streamId),
+        length);
   }
 
   private void signalSubsciptions() {
@@ -233,45 +211,34 @@ public class Dispatcher extends Actor implements AutoCloseable {
    *     return value is negative.
    */
   public long claim(ClaimedFragment claim, int length, int streamId) {
-    final long limit = publisherLimit.get();
-
-    final int activePartitionId = logBuffer.getActivePartitionIdVolatile();
-    final LogBufferPartition partition = logBuffer.getPartition(activePartitionId);
-
-    final int partitionOffset = partition.getTailCounterVolatile();
-    final long position = position(activePartitionId, partitionOffset);
-
-    long newPosition = -1;
-
-    if (position < limit) {
-      final int newOffset;
-
-      if (length < maxFrameLength) {
-        newOffset =
+    return offer(
+        (partition, activePartitionId) ->
             logAppender.claim(
-                partition, activePartitionId, claim, length, streamId, onClaimComplete);
-      } else {
-        throw new RuntimeException(""Cannot claim more than "" + maxFrameLength + "" bytes."");
-      }
-
-      newPosition = updatePublisherPosition(activePartitionId, newOffset);
-      publisherPosition.proposeMaxOrdered(newPosition);
-      signalSubsciptions();
-    }
-    return newPosition;
+                partition, activePartitionId, claim, length, streamId, onClaimComplete),
+        length);
   }
 
   /**
-   * Claim a batch of fragments on the buffer with the given length. Use {@link #nextFragment(int,
-   * int)} to add a new fragment to the batch. Write the fragment message using {@link #getBuffer()}
-   * and {@link #getFragmentOffset()} to get the buffer offset of this fragment. Complete the whole
-   * batch operation by calling either {@link #commit()} or {@link #abort()}. Note that the claim
-   * operation can fail if the publisher limit or the buffer partition size is reached.
+   * Claim a batch of fragments on the buffer with the given length. Use {@link
+   * ClaimedFragmentBatch#nextFragment(int, int)} to add a new fragment to the batch. Write the
+   * fragment message using {@link ClaimedFragmentBatch#getBuffer()} and {@link
+   * ClaimedFragmentBatch#getFragmentOffset()} to get the buffer offset of this fragment. Complete
+   * the whole batch operation by calling either {@link ClaimedFragmentBatch#commit()} or {@link
+   * ClaimedFragmentBatch#abort()}. Note that the claim operation can fail if the publisher limit or
+   * the buffer partition size is reached.
    *
    * @return the new publisher position if the batch was claimed successfully. Otherwise, the return
    *     value is negative.
    */
   public long claim(ClaimedFragmentBatch batch, int fragmentCount, int batchLength) {
+    return offer(
+        (partition, activePartitionId) ->
+            logAppender.claim(
+                partition, activePartitionId, batch, fragmentCount, batchLength, onClaimComplete),
+        batchLength);
+  }
+
+  private long offer(BiFunction<LogBufferPartition, Integer, Integer> claimer, int length) {
     long newPosition = -1;
 
     if (!isClosed) {
@@ -286,12 +253,11 @@ public class Dispatcher extends Actor implements AutoCloseable {
       if (position < limit) {
         final int newOffset;
 
-        if (batchLength < maxFrameLength) {
-          newOffset =
-              logAppender.claim(
-                  partition, activePartitionId, batch, fragmentCount, batchLength, onClaimComplete);
+        if (length < maxFrameLength) {
+          newOffset = claimer.apply(partition, activePartitionId);
         } else {
-          throw new RuntimeException(""Cannot claim more than "" + maxFrameLength + "" bytes."");
+          throw new IllegalArgumentException(
+              String.format(ERROR_MESSAGE_CLAIM_FAILED, length, maxFrameLength));
         }
 
         newPosition = updatePublisherPosition(activePartitionId, newOffset);
@@ -512,13 +478,14 @@ public class Dispatcher extends Actor implements AutoCloseable {
    * Returns the subscription with the given name.
    *
    * @return the subscription
-   * @throws exception if no such subscription is opened
+   * @throws RuntimeException if no such subscription was opened
    */
   private Subscription getSubscriptionByName(String subscriptionName) {
     final Subscription subscription = findSubscriptionByName(subscriptionName);
 
     if (subscription == null) {
-      throw new RuntimeException(""Subscription with name "" + subscriptionName + "" not registered"");
+      throw new IllegalStateException(
+          String.format(ERROR_MESSAGE_SUBSCRIPTION_NOT_FOUND, subscriptionName));
     } else {
       return subscription;
     }
@@ -576,10 +543,6 @@ public class Dispatcher extends Actor implements AutoCloseable {
     }
   }
 
-  public int getSubscriberCount() {
-    return subscriptions.length;
-  }
-
   @Override
   public String toString() {
     return ""Dispatcher ["" + name + ""]"";
diff --git a/dispatcher/src/test/java/io/zeebe/dispatcher/DispatcherPipelineModeTest.java b/dispatcher/src/test/java/io/zeebe/dispatcher/DispatcherPipelineModeTest.java
index 02f26a3..87cf42a 100644
--- a/dispatcher/src/test/java/io/zeebe/dispatcher/DispatcherPipelineModeTest.java
+++ b/dispatcher/src/test/java/io/zeebe/dispatcher/DispatcherPipelineModeTest.java
@@ -96,7 +96,6 @@ public class DispatcherPipelineModeTest {
     // then
     assertThatThrownBy(() -> future.get())
         .isInstanceOf(ExecutionException.class)
-        .hasMessage(""Subscription with name nonExisting not registered"")
         .hasCauseInstanceOf(RuntimeException.class);
   }
 

diff --git a/zb-db/src/main/java/io/zeebe/db/ZeebeDbTransaction.java b/zb-db/src/main/java/io/zeebe/db/ZeebeDbTransaction.java
index 7874f67..ff6f969 100644
--- a/zb-db/src/main/java/io/zeebe/db/ZeebeDbTransaction.java
+++ b/zb-db/src/main/java/io/zeebe/db/ZeebeDbTransaction.java
@@ -29,7 +29,7 @@ public interface ZeebeDbTransaction {
    * @throws ZeebeDbException is thrown on an unexpected error in the database layer
    * @throws RuntimeException is thrown on an unexpected error in executing the operations
    */
-  void run(TransactionOperation operations);
+  void run(TransactionOperation operations) throws Exception;
 
   /**
    * Commits the transaction and writes the data into the database.
diff --git a/zb-db/src/main/java/io/zeebe/db/impl/rocksdb/transaction/ZeebeTransaction.java b/zb-db/src/main/java/io/zeebe/db/impl/rocksdb/transaction/ZeebeTransaction.java
index e0decca..8c27282 100644
--- a/zb-db/src/main/java/io/zeebe/db/impl/rocksdb/transaction/ZeebeTransaction.java
+++ b/zb-db/src/main/java/io/zeebe/db/impl/rocksdb/transaction/ZeebeTransaction.java
@@ -72,12 +72,15 @@ public class ZeebeTransaction implements ZeebeDbTransaction, AutoCloseable {
   }
 
   @Override
-  public void run(TransactionOperation operations) {
+  public void run(TransactionOperation operations) throws Exception {
     try {
       operations.run();
-    } catch (Exception ex) {
-      throw new RuntimeException(
-          ""Unexpected error occurred during zeebe db transaction operation."", ex);
+    } catch (RocksDBException rdbex) {
+      final String errorMessage = ""Unexpected error occurred during RocksDB transaction commit."";
+      if (isRocksDbExceptionRecoverable(rdbex)) {
+        throw new ZeebeDbException(errorMessage, rdbex);
+      }
+      throw rdbex;
     }
   }
 
diff --git a/zb-db/src/test/java/io/zeebe/db/impl/DbTransactionTest.java b/zb-db/src/test/java/io/zeebe/db/impl/DbTransactionTest.java
index 0134386..c8541cb 100644
--- a/zb-db/src/test/java/io/zeebe/db/impl/DbTransactionTest.java
+++ b/zb-db/src/test/java/io/zeebe/db/impl/DbTransactionTest.java
@@ -105,7 +105,7 @@ public class DbTransactionTest {
   }
 
   @Test
-  public void shouldStartNewTransaction() {
+  public void shouldStartNewTransaction() throws Exception {
     // given
     oneKey.wrapLong(1);
     oneValue.wrapLong(-1);
@@ -134,7 +134,7 @@ public class DbTransactionTest {
   }
 
   @Test
-  public void shouldAccessOnOpenTransaction() {
+  public void shouldAccessOnOpenTransaction() throws Exception {
     // given
     oneKey.wrapLong(1);
     oneValue.wrapLong(-1);
@@ -164,7 +164,7 @@ public class DbTransactionTest {
   }
 
   @Test
-  public void shouldNotReopenTransaction() {
+  public void shouldNotReopenTransaction() throws Exception {
     // given
     final ZeebeDbTransaction transaction = dbContext.getCurrentTransaction();
 
@@ -219,7 +219,7 @@ public class DbTransactionTest {
   }
 
   @Test
-  public void shouldRollbackTransaction() {
+  public void shouldRollbackTransaction() throws Exception {
     // given
     oneKey.wrapLong(1);
     oneValue.wrapLong(-1);

diff --git a/dist/src/main/config/zeebe.cfg.toml b/dist/src/main/config/zeebe.cfg.toml
index 1206e36..3d97361 100644
--- a/dist/src/main/config/zeebe.cfg.toml
+++ b/dist/src/main/config/zeebe.cfg.toml
@@ -29,7 +29,7 @@ receiveBufferSize = 16
 # System Configuration --------------------------------
 
 [threading]
-numberOfThreads = 2
+#numberOfThreads = 2
 maxIdleTimeMs = 100
 idleStrategy = ""BACKOFF""
 
@@ -42,4 +42,4 @@ defaultLogSegmentSize = 512
 
 [workflow]
 cacheSize = 1024
-maxPayloadSize = 4096
\ No newline at end of file
+maxPayloadSize = 4096

diff --git a/gateway-protocol-impl/pom.xml b/gateway-protocol-impl/pom.xml
index 6c54a4a..d7f9c77 100644
--- a/gateway-protocol-impl/pom.xml
+++ b/gateway-protocol-impl/pom.xml
@@ -80,9 +80,19 @@
       <plugin>
         <groupId>org.xolstice.maven.plugins</groupId>
         <artifactId>protobuf-maven-plugin</artifactId>
-        <configuration>
-          <protoSourceRoot>${proto.dir}</protoSourceRoot>
-        </configuration>
+        <executions>
+          <execution>
+            <phase>compile</phase>
+            <goals>
+              <goal>compile</goal>
+              <goal>compile-custom</goal>
+              <goal>test-compile</goal>
+            </goals>
+            <configuration>
+              <protoSourceRoot>${proto.dir}</protoSourceRoot>
+            </configuration>
+          </execution>
+        </executions>
       </plugin>
 
       <plugin>

diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/base/snapshots/SnapshotReplicationService.java b/broker-core/src/main/java/io/zeebe/broker/clustering/base/snapshots/SnapshotReplicationService.java
index f2162da..481452e 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/base/snapshots/SnapshotReplicationService.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/base/snapshots/SnapshotReplicationService.java
@@ -105,7 +105,7 @@ public class SnapshotReplicationService extends Actor
             partition.getInfo().getTopicName(), partition.getInfo().getPartitionId());
 
     LOG.debug(""Starting replication for partition {}"", partition.getInfo());
-    startContext.async(startContext.getScheduler().submitActor(this));
+    startContext.async(startContext.getScheduler().submitActor(this), true);
   }
 
   @Override

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
index 0139637..135cd06 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
@@ -143,7 +143,7 @@ public class BrokerReprocessingTest {
 
   @Rule public ExpectedException exception = ExpectedException.none();
 
-  @Rule public Timeout timeout = new Timeout(30, TimeUnit.SECONDS);
+  @Rule public Timeout timeout = new Timeout(120, TimeUnit.SECONDS);
 
   private Runnable restartAction = () -> {};
 

diff --git a/clients/go/pkg/pb/gateway.pb.go b/clients/go/pkg/pb/gateway.pb.go
index aa426ee..c0fc6fe 100644
--- a/clients/go/pkg/pb/gateway.pb.go
+++ b/clients/go/pkg/pb/gateway.pb.go
@@ -1,7 +1,7 @@
 // Code generated by protoc-gen-go. DO NOT EDIT.
 // versions:
-// 	protoc-gen-go v1.25.0-devel
-// 	protoc        v3.14.0
+// 	protoc-gen-go v1.25.0
+// 	protoc        v3.15.5
 // source: gateway.proto
 
 package pb
@@ -2174,320 +2174,324 @@ var file_gateway_proto_rawDesc = []byte{
 	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
 	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
 	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f,
-	0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
+	0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
 	0x76, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
 	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
-	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
-	0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
-	0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72,
-	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
-	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
-	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f,
-	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
-	0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
-	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66,
-	0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
-	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
-	0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66,
-	0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
-	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65,
-	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
-	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
-	0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
-	0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65,
-	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73,
-	0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f,
-	0x72, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b,
-	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
-	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
-	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
-	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
-	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
-	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
-	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66,
-	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01,
-	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
-	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x61, 0x6e,
-	0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61,
-	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x43,
-	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
-	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
-	0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
-	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61,
-	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
-	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f,
-	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
-	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
-	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x18,
-	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b,
-	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
-	0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
-	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
-	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
-	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
-	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
-	0x22, 0xb4, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
-	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
-	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b,
-	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
-	0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f,
-	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70,
-	0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
-	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
-	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
-	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
-	0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74,
-	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61,
-	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
-	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
-	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
-	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
-	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
-	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
-	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
-	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
-	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56,
-	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
-	0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xdc,
-	0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
-	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73,
-	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77,
-	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
-	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
+	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
+	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
+	0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63,
+	0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24,
+	0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
+	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
+	0x73, 0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
+	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
+	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
+	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
+	0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e,
+	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
+	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
+	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
+	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
+	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
+	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
+	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b,
+	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
+	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
+	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b,
+	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
+	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
+	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
+	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65,
+	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
+	0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
+	0x62, 0x6c, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
+	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
+	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
+	0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
+	0x65, 0x4b, 0x65, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
+	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
+	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a,
+	0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62,
+	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
+	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
+	0x73, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
+	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
+	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
+	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f,
+	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
+	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
+	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
 	0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02,
 	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
 	0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
-	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
-	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
-	0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b,
-	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
-	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
-	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x5e, 0x0a,
-	0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
-	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x61, 0x74, 0x65,
-	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
-	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
-	0x63, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xcb, 0x01,
-	0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
-	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
-	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x74,
-	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x61, 0x74, 0x65,
-	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72,
-	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
-	0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
-	0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66,
-	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64,
-	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0c, 0x52, 0x65, 0x73,
-	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c,
-	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x50, 0x4d, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a,
-	0x04, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x6c, 0x0a, 0x16, 0x44,
-	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
-	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
-	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66,
-	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x74,
-	0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f,
-	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09,
-	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x57, 0x6f,
-	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
+	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
+	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
+	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1d,
+	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
+	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
+	0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
+	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f,
+	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
+	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
+	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
+	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
+	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
+	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
+	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
+	0x79, 0x22, 0xc2, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
+	0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52,
+	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07,
+	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
+	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
+	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
+	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
+	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26,
+	0x0a, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
+	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x72,
+	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74,
+	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
+	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
+	0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66,
+	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
+	0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
+	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
+	0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
+	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
+	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
+	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
+	0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
+	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
+	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
+	0x62, 0x6c, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x09,
+	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
+	0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
+	0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
+	0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
+	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
+	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
+	0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
+	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
+	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
+	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
+	0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
+	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
+	0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0c,
+	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
+	0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x50, 0x4d, 0x4e, 0x10, 0x01,
+	0x12, 0x0c, 0x0a, 0x04, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x6a,
+	0x0a, 0x15, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
+	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
+	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x72, 0x6f,
+	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
+	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
+	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
+	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x50,
+	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
 	0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
 	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
 	0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
-	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
-	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
-	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4b, 0x65, 0x79,
-	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
-	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
-	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79,
-	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18,
-	0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
-	0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
-	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
-	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x11, 0x0a, 0x0f,
-	0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
-	0x6d, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71,
-	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01,
-	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
-	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
-	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
+	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
+	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
+	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
+	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
+	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
+	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f,
+	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b,
+	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79,
+	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
+	0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72,
 	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
-	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14,
-	0x0a, 0x12, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
-	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
-	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
-	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
-	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
-	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72,
-	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69,
-	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
-	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
-	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
-	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
-	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72,
-	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
-	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
-	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
-	0x65, 0x79, 0x22, 0x3a, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63,
-	0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
-	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
-	0x03, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x19,
-	0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
-	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x54, 0x6f, 0x70,
-	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a,
-	0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
-	0x65, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
-	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f,
-	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
-	0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75,
-	0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
-	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70,
-	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
-	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
-	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
-	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
-	0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63,
-	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65,
-	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x74,
-	0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x0a,
-	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
-	0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
-	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
-	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
-	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61,
-	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
-	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72,
-	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
-	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
-	0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
-	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
-	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
-	0x64, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
-	0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
-	0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72,
-	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
-	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
-	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
-	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
-	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f,
-	0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
-	0x68, 0x22, 0x3d, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72,
-	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44,
-	0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52,
-	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
-	0x22, 0x33, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f,
-	0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41,
-	0x4c, 0x54, 0x48, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c,
-	0x54, 0x48, 0x59, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
-	0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
-	0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
-	0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72,
-	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69,
-	0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
-	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79,
-	0x0a, 0x13, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
-	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
-	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
-	0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
-	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
-	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
-	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
-	0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x65, 0x74,
-	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
-	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
-	0x6b, 0x65, 0x79, 0x32, 0xee, 0x0a, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
-	0x61, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12,
-	0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
-	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
-	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
-	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
-	0x30, 0x01, 0x12, 0x7d, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
-	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x67,
-	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
-	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
-	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
+	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x11,
+	0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
+	0x65, 0x22, 0x6d, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79,
+	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c,
+	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
+	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
+	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
+	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
+	0x22, 0x14, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
+	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69,
+	0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
+	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
+	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
+	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
+	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
+	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
+	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
+	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
+	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61,
+	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
+	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c,
+	0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
+	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
+	0x03, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49,
+	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
+	0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
+	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
+	0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64,
+	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x54,
+	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xec,
+	0x01, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
+	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01,
+	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e,
+	0x66, 0x6f, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
+	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
+	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a,
+	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
+	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
+	0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
+	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
+	0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
+	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
+	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
+	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01,
+	0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
+	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f,
+	0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
+	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
+	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
+	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
+	0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
+	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
+	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
+	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
+	0x69, 0x6f, 0x6e, 0x22, 0xb1, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
+	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
+	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
+	0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
+	0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
+	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f,
+	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c,
+	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
+	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74,
+	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
+	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61,
+	0x6c, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
+	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45,
+	0x41, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
+	0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
+	0x10, 0x02, 0x22, 0x33, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
+	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x48,
+	0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45,
+	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
+	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
+	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
+	0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
+	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
+	0x72, 0x69, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
+	0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
+	0x22, 0x79, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
+	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65,
+	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
+	0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
+	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
+	0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
+	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03,
+	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x28, 0x0a, 0x14, 0x53,
+	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
+	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
+	0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xe2, 0x0a, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
+	0x79, 0x12, 0x61, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
+	0x73, 0x12, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
+	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
+	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69,
+	0x76, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
+	0x22, 0x00, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72,
+	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e,
+	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
+	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
+	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
 	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
-	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
-	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
-	0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
-	0x12, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
-	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
-	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
-	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
-	0x7d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
-	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65,
-	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65,
-	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61,
-	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x61, 0x74,
-	0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72,
-	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74,
-	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b,
-	0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
-	0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73,
-	0x75, 0x6c, 0x74, 0x12, 0x39, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72,
-	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
-	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74,
-	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
+	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e,
+	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
+	0x12, 0x5c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12,
+	0x24, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
+	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
+	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
+	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
+	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a,
+	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
+	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
+	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
+	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
+	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
+	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
+	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
+	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1f, 0x43,
+	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
+	0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
 	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
-	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75,
-	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e,
-	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x27,
+	0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
+	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
+	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
+	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
+	0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
+	0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
+	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50,
+	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
+	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
+	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
 	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
-	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
-	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
-	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
-	0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x20,
+	0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
+	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x07, 0x46, 0x61, 0x69,
+	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52,
+	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
+	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f,
+	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x54,
+	0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x65,
+	0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x68, 0x72,
+	0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
 	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
-	0x1a, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
-	0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
-	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72,
-	0x72, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72,
-	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f,
-	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
-	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f,
-	0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
-	0x12, 0x65, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
-	0x67, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f,
-	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73,
-	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x61,
-	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
-	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
-	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c,
-	0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x74,
+	0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
+	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
+	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
+	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c,
+	0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
+	0x74, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73,
+	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
+	0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
+	0x12, 0x28, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
+	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64,
+	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x74,
 	0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65,
-	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
-	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
-	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49,
-	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
-	0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
-	0x73, 0x12, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
-	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
-	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
-	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x56,
-	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
-	0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x21,
+	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
+	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x56, 0x61,
+	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
+	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61,
+	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
 	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
-	0x74, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
-	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73,
-	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
-	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x61,
-	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
-	0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
-	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
-	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
-	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
-	0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x0a, 0x19, 0x69, 0x6f, 0x2e, 0x7a, 0x65, 0x65, 0x62, 0x65,
-	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
-	0x6c, 0x50, 0x00, 0x5a, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
+	0x6c, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
+	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f,
+	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
+	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
+	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
+	0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
+	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
+	0x73, 0x12, 0x29, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74,
+	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
+	0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67,
+	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
+	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
+	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x0a, 0x19, 0x69, 0x6f,
+	0x2e, 0x7a, 0x65, 0x65, 0x62, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x00, 0x5a, 0x02, 0x70, 0x62, 0x62, 0x06, 0x70,
+	0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
@@ -2506,15 +2510,15 @@ var file_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
 var file_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
 var file_gateway_proto_goTypes = []interface{}{
 	(ProcessRequestObject_ResourceType)(0),          // 0: gateway_protocol.ProcessRequestObject.ResourceType
-	(Partition_PartitionBrokerRole)(0),               // 1: gateway_protocol.Partition.PartitionBrokerRole
-	(Partition_PartitionBrokerHealth)(0),             // 2: gateway_protocol.Partition.PartitionBrokerHealth
-	(*ActivateJobsRequest)(nil),                      // 3: gateway_protocol.ActivateJobsRequest
-	(*ActivateJobsResponse)(nil),                     // 4: gateway_protocol.ActivateJobsResponse
-	(*ActivatedJob)(nil),                             // 5: gateway_protocol.ActivatedJob
+	(Partition_PartitionBrokerRole)(0),              // 1: gateway_protocol.Partition.PartitionBrokerRole
+	(Partition_PartitionBrokerHealth)(0),            // 2: gateway_protocol.Partition.PartitionBrokerHealth
+	(*ActivateJobsRequest)(nil),                     // 3: gateway_protocol.ActivateJobsRequest
+	(*ActivateJobsResponse)(nil),                    // 4: gateway_protocol.ActivateJobsResponse
+	(*ActivatedJob)(nil),                            // 5: gateway_protocol.ActivatedJob
 	(*CancelProcessInstanceRequest)(nil),            // 6: gateway_protocol.CancelProcessInstanceRequest
 	(*CancelProcessInstanceResponse)(nil),           // 7: gateway_protocol.CancelProcessInstanceResponse
-	(*CompleteJobRequest)(nil),                       // 8: gateway_protocol.CompleteJobRequest
-	(*CompleteJobResponse)(nil),                      // 9: gateway_protocol.CompleteJobResponse
+	(*CompleteJobRequest)(nil),                      // 8: gateway_protocol.CompleteJobRequest
+	(*CompleteJobResponse)(nil),                     // 9: gateway_protocol.CompleteJobResponse
 	(*CreateProcessInstanceRequest)(nil),            // 10: gateway_protocol.CreateProcessInstanceRequest
 	(*CreateProcessInstanceResponse)(nil),           // 11: gateway_protocol.CreateProcessInstanceResponse
 	(*CreateProcessInstanceWithResultRequest)(nil),  // 12: gateway_protocol.CreateProcessInstanceWithResultRequest
@@ -2523,22 +2527,22 @@ var file_gateway_proto_goTypes = []interface{}{
 	(*ProcessRequestObject)(nil),                    // 15: gateway_protocol.ProcessRequestObject
 	(*DeployProcessResponse)(nil),                   // 16: gateway_protocol.DeployProcessResponse
 	(*ProcessMetadata)(nil),                         // 17: gateway_protocol.ProcessMetadata
-	(*FailJobRequest)(nil),                           // 18: gateway_protocol.FailJobRequest
-	(*FailJobResponse)(nil),                          // 19: gateway_protocol.FailJobResponse
-	(*ThrowErrorRequest)(nil),                        // 20: gateway_protocol.ThrowErrorRequest
-	(*ThrowErrorResponse)(nil),                       // 21: gateway_protocol.ThrowErrorResponse
-	(*PublishMessageRequest)(nil),                    // 22: gateway_protocol.PublishMessageRequest
-	(*PublishMessageResponse)(nil),                   // 23: gateway_protocol.PublishMessageResponse
-	(*ResolveIncidentRequest)(nil),                   // 24: gateway_protocol.ResolveIncidentRequest
-	(*ResolveIncidentResponse)(nil),                  // 25: gateway_protocol.ResolveIncidentResponse
-	(*TopologyRequest)(nil),                          // 26: gateway_protocol.TopologyRequest
-	(*TopologyResponse)(nil),                         // 27: gateway_protocol.TopologyResponse
-	(*BrokerInfo)(nil),                               // 28: gateway_protocol.BrokerInfo
-	(*Partition)(nil),                                // 29: gateway_protocol.Partition
-	(*UpdateJobRetriesRequest)(nil),                  // 30: gateway_protocol.UpdateJobRetriesRequest
-	(*UpdateJobRetriesResponse)(nil),                 // 31: gateway_protocol.UpdateJobRetriesResponse
-	(*SetVariablesRequest)(nil),                      // 32: gateway_protocol.SetVariablesRequest
-	(*SetVariablesResponse)(nil),                     // 33: gateway_protocol.SetVariablesResponse
+	(*FailJobRequest)(nil),                          // 18: gateway_protocol.FailJobRequest
+	(*FailJobResponse)(nil),                         // 19: gateway_protocol.FailJobResponse
+	(*ThrowErrorRequest)(nil),                       // 20: gateway_protocol.ThrowErrorRequest
+	(*ThrowErrorResponse)(nil),                      // 21: gateway_protocol.ThrowErrorResponse
+	(*PublishMessageRequest)(nil),                   // 22: gateway_protocol.PublishMessageRequest
+	(*PublishMessageResponse)(nil),                  // 23: gateway_protocol.PublishMessageResponse
+	(*ResolveIncidentRequest)(nil),                  // 24: gateway_protocol.ResolveIncidentRequest
+	(*ResolveIncidentResponse)(nil),                 // 25: gateway_protocol.ResolveIncidentResponse
+	(*TopologyRequest)(nil),                         // 26: gateway_protocol.TopologyRequest
+	(*TopologyResponse)(nil),                        // 27: gateway_protocol.TopologyResponse
+	(*BrokerInfo)(nil),                              // 28: gateway_protocol.BrokerInfo
+	(*Partition)(nil),                               // 29: gateway_protocol.Partition
+	(*UpdateJobRetriesRequest)(nil),                 // 30: gateway_protocol.UpdateJobRetriesRequest
+	(*UpdateJobRetriesResponse)(nil),                // 31: gateway_protocol.UpdateJobRetriesResponse
+	(*SetVariablesRequest)(nil),                     // 32: gateway_protocol.SetVariablesRequest
+	(*SetVariablesResponse)(nil),                    // 33: gateway_protocol.SetVariablesResponse
 }
 var file_gateway_proto_depIdxs = []int32{
 	5,  // 0: gateway_protocol.ActivateJobsResponse.jobs:type_name -> gateway_protocol.ActivatedJob

diff --git a/logstreams/src/main/java/io/zeebe/logstreams/impl/LogStreamController.java b/logstreams/src/main/java/io/zeebe/logstreams/impl/LogStreamController.java
index dfb7029..19f27ac 100644
--- a/logstreams/src/main/java/io/zeebe/logstreams/impl/LogStreamController.java
+++ b/logstreams/src/main/java/io/zeebe/logstreams/impl/LogStreamController.java
@@ -199,6 +199,7 @@ public class LogStreamController implements Actor
         @Override
         public void work(LogContext context)
         {
+            LOG.debug(""Failing for first event position: {}"", context.getFirstEventPosition());
             for (int i = 0; i < failureListeners.size(); i++)
             {
                 final LogStreamFailureListener logStreamWriteErrorListener = failureListeners.get(i);

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
index 2db7155..a571628 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
@@ -699,12 +699,12 @@ public final class ClusteringRule extends ExternalResource {
   }
 
   public Path getSegmentsDirectory(final Broker broker) {
-    final String dataDir = broker.getConfig().getData().getDirectories().get(0);
+    final String dataDir = broker.getConfig().getData().getDirectory();
     return Paths.get(dataDir).resolve(RAFT_PARTITION_PATH);
   }
 
   public File getSnapshotsDirectory(final Broker broker) {
-    final String dataDir = broker.getConfig().getData().getDirectories().get(0);
+    final String dataDir = broker.getConfig().getData().getDirectory();
     return new File(dataDir, RAFT_PARTITION_PATH + ""/snapshots"");
   }
 
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
index ab591f2..c8c3c52 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
@@ -680,8 +680,6 @@ public final class BrokerReprocessingTest {
   }
 
   protected void deleteSnapshotsAndRestart() {
-    brokerRule.getBroker().getBrokerContext().getBrokerConfiguration().getData().getDirectories();
-
     brokerRule.stopBroker();
 
     // delete snapshot files to trigger recovery

diff --git a/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/Workflow.java b/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/Workflow.java
deleted file mode 100644
index ed19ba5..0000000
--- a/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/Workflow.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.0. You may not use this file
- * except in compliance with the Zeebe Community License 1.0.
- */
-package io.zeebe.protocol.impl.record.value.deployment;
-
-import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_BPMN_PROCESS_ID;
-import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_KEY;
-import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_VERSION;
-
-import com.fasterxml.jackson.annotation.JsonIgnore;
-import io.zeebe.msgpack.UnpackedObject;
-import io.zeebe.msgpack.property.IntegerProperty;
-import io.zeebe.msgpack.property.LongProperty;
-import io.zeebe.msgpack.property.StringProperty;
-import io.zeebe.protocol.record.value.deployment.DeployedWorkflow;
-import io.zeebe.util.buffer.BufferUtil;
-import org.agrona.DirectBuffer;
-
-public final class Workflow extends UnpackedObject implements DeployedWorkflow {
-  private final StringProperty bpmnProcessIdProp =
-      new StringProperty(PROP_WORKFLOW_BPMN_PROCESS_ID);
-  private final IntegerProperty versionProp = new IntegerProperty(PROP_WORKFLOW_VERSION);
-  private final LongProperty keyProp = new LongProperty(PROP_WORKFLOW_KEY);
-  private final StringProperty resourceNameProp = new StringProperty(""resourceName"");
-
-  public Workflow() {
-    declareProperty(bpmnProcessIdProp)
-        .declareProperty(versionProp)
-        .declareProperty(keyProp)
-        .declareProperty(resourceNameProp);
-  }
-
-  @Override
-  public String getBpmnProcessId() {
-    return BufferUtil.bufferAsString(bpmnProcessIdProp.getValue());
-  }
-
-  public int getVersion() {
-    return versionProp.getValue();
-  }
-
-  @Override
-  public long getWorkflowKey() {
-    return getKey();
-  }
-
-  @Override
-  public String getResourceName() {
-    return BufferUtil.bufferAsString(resourceNameProp.getValue());
-  }
-
-  public Workflow setResourceName(final String resourceName) {
-    resourceNameProp.setValue(resourceName);
-    return this;
-  }
-
-  public Workflow setResourceName(final DirectBuffer resourceName) {
-    resourceNameProp.setValue(resourceName);
-    return this;
-  }
-
-  public Workflow setVersion(final int version) {
-    versionProp.setValue(version);
-    return this;
-  }
-
-  public Workflow setBpmnProcessId(final String bpmnProcessId) {
-    bpmnProcessIdProp.setValue(bpmnProcessId);
-    return this;
-  }
-
-  public Workflow setBpmnProcessId(final DirectBuffer bpmnProcessId) {
-    bpmnProcessIdProp.setValue(bpmnProcessId);
-    return this;
-  }
-
-  @JsonIgnore
-  public long getKey() {
-    return keyProp.getValue();
-  }
-
-  public Workflow setKey(final long key) {
-    keyProp.setValue(key);
-    return this;
-  }
-
-  @JsonIgnore
-  public DirectBuffer getBpmnProcessIdBuffer() {
-    return bpmnProcessIdProp.getValue();
-  }
-
-  @Override
-  @JsonIgnore
-  public int getEncodedLength() {
-    return super.getEncodedLength();
-  }
-
-  @Override
-  @JsonIgnore
-  public int getLength() {
-    return super.getLength();
-  }
-
-  @JsonIgnore
-  public DirectBuffer getResourceNameBuffer() {
-    return resourceNameProp.getValue();
-  }
-
-  public Workflow setBpmnProcessId(
-      final DirectBuffer bpmnProcessId, final int offset, final int length) {
-    bpmnProcessIdProp.setValue(bpmnProcessId, offset, length);
-    return this;
-  }
-}
diff --git a/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/WorkflowRecord.java b/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/WorkflowRecord.java
new file mode 100644
index 0000000..ed19ba5
--- /dev/null
+++ b/protocol-impl/src/main/java/io/zeebe/protocol/impl/record/value/deployment/WorkflowRecord.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.protocol.impl.record.value.deployment;
+
+import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_BPMN_PROCESS_ID;
+import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_KEY;
+import static io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord.PROP_WORKFLOW_VERSION;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import io.zeebe.msgpack.UnpackedObject;
+import io.zeebe.msgpack.property.IntegerProperty;
+import io.zeebe.msgpack.property.LongProperty;
+import io.zeebe.msgpack.property.StringProperty;
+import io.zeebe.protocol.record.value.deployment.DeployedWorkflow;
+import io.zeebe.util.buffer.BufferUtil;
+import org.agrona.DirectBuffer;
+
+public final class Workflow extends UnpackedObject implements DeployedWorkflow {
+  private final StringProperty bpmnProcessIdProp =
+      new StringProperty(PROP_WORKFLOW_BPMN_PROCESS_ID);
+  private final IntegerProperty versionProp = new IntegerProperty(PROP_WORKFLOW_VERSION);
+  private final LongProperty keyProp = new LongProperty(PROP_WORKFLOW_KEY);
+  private final StringProperty resourceNameProp = new StringProperty(""resourceName"");
+
+  public Workflow() {
+    declareProperty(bpmnProcessIdProp)
+        .declareProperty(versionProp)
+        .declareProperty(keyProp)
+        .declareProperty(resourceNameProp);
+  }
+
+  @Override
+  public String getBpmnProcessId() {
+    return BufferUtil.bufferAsString(bpmnProcessIdProp.getValue());
+  }
+
+  public int getVersion() {
+    return versionProp.getValue();
+  }
+
+  @Override
+  public long getWorkflowKey() {
+    return getKey();
+  }
+
+  @Override
+  public String getResourceName() {
+    return BufferUtil.bufferAsString(resourceNameProp.getValue());
+  }
+
+  public Workflow setResourceName(final String resourceName) {
+    resourceNameProp.setValue(resourceName);
+    return this;
+  }
+
+  public Workflow setResourceName(final DirectBuffer resourceName) {
+    resourceNameProp.setValue(resourceName);
+    return this;
+  }
+
+  public Workflow setVersion(final int version) {
+    versionProp.setValue(version);
+    return this;
+  }
+
+  public Workflow setBpmnProcessId(final String bpmnProcessId) {
+    bpmnProcessIdProp.setValue(bpmnProcessId);
+    return this;
+  }
+
+  public Workflow setBpmnProcessId(final DirectBuffer bpmnProcessId) {
+    bpmnProcessIdProp.setValue(bpmnProcessId);
+    return this;
+  }
+
+  @JsonIgnore
+  public long getKey() {
+    return keyProp.getValue();
+  }
+
+  public Workflow setKey(final long key) {
+    keyProp.setValue(key);
+    return this;
+  }
+
+  @JsonIgnore
+  public DirectBuffer getBpmnProcessIdBuffer() {
+    return bpmnProcessIdProp.getValue();
+  }
+
+  @Override
+  @JsonIgnore
+  public int getEncodedLength() {
+    return super.getEncodedLength();
+  }
+
+  @Override
+  @JsonIgnore
+  public int getLength() {
+    return super.getLength();
+  }
+
+  @JsonIgnore
+  public DirectBuffer getResourceNameBuffer() {
+    return resourceNameProp.getValue();
+  }
+
+  public Workflow setBpmnProcessId(
+      final DirectBuffer bpmnProcessId, final int offset, final int length) {
+    bpmnProcessIdProp.setValue(bpmnProcessId, offset, length);
+    return this;
+  }
+}

diff --git a/broker-core/src/main/java/io/zeebe/broker/clustering/management/memberList/ClusterMemberListManager.java b/broker-core/src/main/java/io/zeebe/broker/clustering/management/memberList/ClusterMemberListManager.java
index 8139a9c..9a35980 100644
--- a/broker-core/src/main/java/io/zeebe/broker/clustering/management/memberList/ClusterMemberListManager.java
+++ b/broker-core/src/main/java/io/zeebe/broker/clustering/management/memberList/ClusterMemberListManager.java
@@ -210,19 +210,19 @@ public class ClusterMemberListManager implements RaftStateListener, OnOpenLogStr
             final SocketAddress savedSocketAddress = new SocketAddress(socketAddress);
             actor.call(() ->
             {
-                LOG.debug(""Received raft state change event for member {}"", savedSocketAddress);
+                LOG.trace(""Received raft state change event for member {}"", savedSocketAddress);
                 final MemberRaftComposite member = context.getMemberListService()
                                                           .getMember(savedSocketAddress);
 
                 if (member == null)
                 {
-                    LOG.debug(""Member {} does not exist. Maybe dead? List of dead members: {}"", savedSocketAddress, deadMembers);
+                    LOG.trace(""Member {} does not exist. Maybe dead? List of dead members: {}"", savedSocketAddress, deadMembers);
                 }
                 else
                 {
                     updateMemberWithNewRaftState(member, savedBuffer);
 
-                    LOG.debug(""Handled raft state change event for member {} - local member state: {}"", savedSocketAddress, context.getMemberListService());
+                    LOG.trace(""Handled raft state change event for member {} - local member state: {}"", savedSocketAddress, context.getMemberListService());
                 }
             });
         }
diff --git a/broker-core/src/main/java/io/zeebe/broker/event/processor/TopicSubscriptionManagementProcessor.java b/broker-core/src/main/java/io/zeebe/broker/event/processor/TopicSubscriptionManagementProcessor.java
index bb6fc0e..18694ab 100644
--- a/broker-core/src/main/java/io/zeebe/broker/event/processor/TopicSubscriptionManagementProcessor.java
+++ b/broker-core/src/main/java/io/zeebe/broker/event/processor/TopicSubscriptionManagementProcessor.java
@@ -382,7 +382,7 @@ public class TopicSubscriptionManagementProcessor implements StreamProcessor
 
             if (responseWritten)
             {
-                Loggers.SERVICES_LOGGER.debug(""Get processor by name"");
+                Loggers.SERVICES_LOGGER.debug(""Topic push processor for partition {} successfully opened. Send response for request {}"", logStreamPartitionId, metadata.getRequestId());
                 final TopicSubscriptionPushProcessor pushProcessor = subscriptionRegistry.getProcessorByName(subscriberEvent.getName());
                 pushProcessor.enable();
             }
diff --git a/broker-core/src/main/java/io/zeebe/broker/system/SystemContext.java b/broker-core/src/main/java/io/zeebe/broker/system/SystemContext.java
index 6312063..898fc32 100644
--- a/broker-core/src/main/java/io/zeebe/broker/system/SystemContext.java
+++ b/broker-core/src/main/java/io/zeebe/broker/system/SystemContext.java
@@ -73,12 +73,12 @@ public class SystemContext implements AutoCloseable
 
         this.configurationManager = configurationManager;
         // TODO: submit diagnosticContext to actor scheduler once supported
-        this.scheduler = initScheduler(clock);
+        this.scheduler = initScheduler(clock, brokerId);
         this.serviceContainer = new ServiceContainerImpl(this.scheduler);
         this.scheduler.start();
     }
 
-    private ActorScheduler initScheduler(ActorClock clock)
+    private ActorScheduler initScheduler(ActorClock clock, String brokerId)
     {
         final ThreadingCfg cfg = configurationManager.readEntry(""threading"", ThreadingCfg.class);
         int numberOfThreads = cfg.numberOfThreads;
@@ -108,6 +108,7 @@ public class SystemContext implements AutoCloseable
                              .setCountersManager(countersManager)
                              .setCpuBoundActorThreadCount(cpuBoundThreads)
                              .setIoBoundActorThreadCount(ioBoundThreads)
+                             .setSchedulerName(brokerId)
                              .build();
     }
 
diff --git a/client-java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java b/client-java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
index f1b3f53..478d154 100644
--- a/client-java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
+++ b/client-java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
@@ -103,6 +103,7 @@ public class ZeebeClientImpl implements ZeebeClient
                                        .setCpuBoundActorThreadCount(numSchedulerThreads)
                                        .setIoBoundActorThreadCount(0)
                                        .setActorClock(actorClock)
+                                       .setSchedulerName(""client"")
                                        .build();
         this.scheduler.start();
 

diff --git a/broker/src/main/java/io/zeebe/broker/exporter/debug/DebugLogExporter.java b/broker/src/main/java/io/zeebe/broker/exporter/debug/DebugLogExporter.java
index 1777425..8505b9c 100644
--- a/broker/src/main/java/io/zeebe/broker/exporter/debug/DebugLogExporter.java
+++ b/broker/src/main/java/io/zeebe/broker/exporter/debug/DebugLogExporter.java
@@ -88,12 +88,24 @@ public class DebugLogExporter implements Exporter {
   }
 
   public static class DebugExporterConfiguration {
-    private final String logLevel = ""debug"";
-    private final boolean prettyPrint = false;
+    private String logLevel = ""debug"";
+    private boolean prettyPrint = false;
 
     LogLevel getLogLevel() {
       return LogLevel.valueOf(logLevel.trim().toUpperCase());
     }
+
+    public void setLogLevel(String logLevel) {
+      this.logLevel = logLevel;
+    }
+
+    public boolean isPrettyPrint() {
+      return prettyPrint;
+    }
+
+    public void setPrettyPrint(boolean prettyPrint) {
+      this.prettyPrint = prettyPrint;
+    }
   }
 
   private interface LogFunctionSupplier {
diff --git a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java
index cd261b4..b4f681a 100755
--- a/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java
+++ b/broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java
@@ -155,10 +155,10 @@ public class ExporterDirectorTest {
     waitUntil(() -> PojoConfigurationExporter.configuration != null);
     final PojoExporterConfiguration configuration = PojoConfigurationExporter.configuration;
 
-    assertThat(configuration.foo).isEqualTo(foo);
-    assertThat(configuration.x).isEqualTo(x);
-    assertThat(configuration.nested.bar).isEqualTo(bar);
-    assertThat(configuration.nested.y).isEqualTo(y);
+    assertThat(configuration.getFoo()).isEqualTo(foo);
+    assertThat(configuration.getX()).isEqualTo(x);
+    assertThat(configuration.getNested().getBar()).isEqualTo(bar);
+    assertThat(configuration.getNested().getY()).isEqualTo(y);
   }
 
   @Test
diff --git a/broker/src/test/java/io/zeebe/broker/exporter/util/PojoConfigurationExporter.java b/broker/src/test/java/io/zeebe/broker/exporter/util/PojoConfigurationExporter.java
index 9562b47..2d406ba 100644
--- a/broker/src/test/java/io/zeebe/broker/exporter/util/PojoConfigurationExporter.java
+++ b/broker/src/test/java/io/zeebe/broker/exporter/util/PojoConfigurationExporter.java
@@ -29,13 +29,53 @@ public class PojoConfigurationExporter implements Exporter {
 
   public class PojoExporterConfiguration {
 
-    public String foo;
-    public int x;
-    public PojoExporterConfigurationPart nested;
+    private String foo = """";
+    private int x;
+    private PojoExporterConfigurationPart nested;
+
+    public String getFoo() {
+      return foo;
+    }
+
+    public void setFoo(String foo) {
+      this.foo = foo;
+    }
+
+    public int getX() {
+      return x;
+    }
+
+    public void setX(int x) {
+      this.x = x;
+    }
+
+    public PojoExporterConfigurationPart getNested() {
+      return nested;
+    }
+
+    public void setNested(PojoExporterConfigurationPart nested) {
+      this.nested = nested;
+    }
   }
 
   public class PojoExporterConfigurationPart {
-    public String bar;
-    public double y;
+    private String bar;
+    private double y;
+
+    public String getBar() {
+      return bar;
+    }
+
+    public void setBar(String bar) {
+      this.bar = bar;
+    }
+
+    public double getY() {
+      return y;
+    }
+
+    public void setY(double y) {
+      this.y = y;
+    }
   }
 }
"
camunda/zeebe,ci,"diff --git a/Jenkinsfile b/Jenkinsfile
index 13e6ee6..a8d0667 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -73,7 +73,7 @@ pipeline {
         stage('Trigger Performance Tests') {
             when { branch 'develop' }
             steps {
-                build job: 'zeebe-cluster-long-running-tests', wait: false
+                build job: 'zeebe-cluster-performance-tests', wait: false
             }
         }
     }

diff --git a/.github/workflows/publish-test-results.yml b/.github/workflows/publish-test-results.yml
index b884fc0..95111b4 100644
--- a/.github/workflows/publish-test-results.yml
+++ b/.github/workflows/publish-test-results.yml
@@ -44,3 +44,4 @@ jobs:
           junit_files: |
             artifacts/**/surefire-reports/*.xml
             artifacts/**/failsafe-reports/TEST-*.xml
+          comment_mode: off

diff --git a/Jenkinsfile b/Jenkinsfile
index 224b53d..56ffa7e 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -70,6 +70,25 @@ pipeline {
                     }
                 }
 
+                stage('2 - JMH') {
+                    // delete this line to also run JMH on feature branch
+                    when { anyOf { branch 'master'; branch 'develop' } }
+                    agent { node { label 'ubuntu' } }
+
+                    steps {
+                        withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
+                            sh 'mvn -B integration-test -DskipTests -P jmh'
+                        }
+                    }
+
+                    post {
+                        success {
+                            sh joinJmhResults
+                            jmhReport 'target/jmh-result.json'
+                        }
+                    }
+                }
+
                 stage('3 - Go Tests') {
                     agent { node { label 'ubuntu' } }
 

diff --git a/Jenkinsfile b/Jenkinsfile
index 87b063b..ca89cfb 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -72,6 +72,12 @@ pipeline {
                 }
             }
         }
+
+        stage('Trigger Perfomance Tests') {
+            steps {
+                build job: 'zeebe-cluster-long-running-tests', wait: false
+            }
+        }
     }
 
     post {

diff --git a/Jenkinsfile b/Jenkinsfile
index bead402..c9590a8 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -27,9 +27,9 @@ def longTimeoutMinutes = 45
 itAgentUnstashDirectory = '.tmp/it'
 itFlakyTestStashName = 'it-flakyTests'
 
-// the latest stable branch should be run at midnight to do a nightly build including QA test run
-// todo: run develop branch at midnight using new testbench version
-def cronTrigger = isLatestStable ? '0 0 * * *' : ''
+// the develop branch should be run at midnight to do a nightly build including QA test run
+// the latest stable branch is run an hour later at 01:00 AM.
+def cronTrigger = isDevelopBranch ? '0 0 * * *' : isLatestStable ? '0 1 * * *' : ''
 
 pipeline {
     agent {
@@ -315,7 +315,10 @@ pipeline {
                 anyOf {
                     expression { params.RUN_QA }
                     allOf {
-                        branch latestStableBranchName
+                        anyOf {
+                            branch developBranchName
+                            branch latestStableBranchName
+                        }
                         triggeredBy 'TimerTrigger'
                     }
                 }

diff --git a/Jenkinsfile b/Jenkinsfile
index ca89cfb..ca143aa 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -22,7 +22,7 @@ pipeline {
         stage('Install') {
             steps {
                 withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
-                    sh 'mvn -B clean com.mycila:license-maven-plugin:check com.coveo:fmt-maven-plugin:check install -DskipTests'
+                    sh 'mvn -B -T 1C clean com.mycila:license-maven-plugin:check com.coveo:fmt-maven-plugin:check install -DskipTests'
                 }
             }
         }
@@ -68,7 +68,7 @@ pipeline {
             when { branch 'develop' }
             steps {
                 withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
-                    sh 'mvn -B generate-sources source:jar javadoc:jar deploy -DskipTests'
+                    sh 'mvn -B -T 1C generate-sources source:jar javadoc:jar deploy -DskipTests'
                 }
             }
         }

diff --git a/.ci/distro_release.dsl b/.ci/distro_release.dsl
index 987c932..fad6c65 100644
--- a/.ci/distro_release.dsl
+++ b/.ci/distro_release.dsl
@@ -103,6 +103,7 @@ mavenJob(jobName)
     triggers
     {
         githubPush()
+        snapshotDependencies true
     }
     label 'ubuntu-large'
     jdk 'jdk-8-latest'

diff --git a/Jenkinsfile b/Jenkinsfile
index 399f8b8..c3f8fde 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -120,6 +120,12 @@ pipeline {
             }
         }
 
+        stage('Trigger Performance Tests') {
+            when { branch 'develop' }
+            steps {
+                build job: 'zeebe-cluster-performance-tests', wait: false
+            }
+        }
     }
 
     post {

diff --git a/.ci/long_running_tests.dsl b/.ci/long_running_tests.dsl
index f425949..73a0490 100644
--- a/.ci/long_running_tests.dsl
+++ b/.ci/long_running_tests.dsl
@@ -99,6 +99,7 @@ mavenJob(jobName)
     }
 
     blockOnUpstreamProjects()
-    logRotator(-1, 5, -1, 5)
+    logRotator(-1, 3, -1, 3)
+    compressBuildLog()
 
 }

diff --git a/.github/workflows/e2e-testbench.yaml b/.github/workflows/e2e-testbench.yaml
index 708f97f..fd0b918 100644
--- a/.github/workflows/e2e-testbench.yaml
+++ b/.github/workflows/e2e-testbench.yaml
@@ -31,6 +31,11 @@ on:
         default: null
         required: false
         type: string
+      maxInstanceDuration:
+        description: 'If an instance takes longer than the given duration to complete, test will fail.'
+        default: '15m'
+        required: false
+        type: string
 
   workflow_call:
     inputs:
@@ -59,6 +64,11 @@ on:
         default: null
         required: false
         type: string
+      maxInstanceDuration:
+        description: 'If an instance takes longer than the given duration to complete, test will fail.'
+        default: '15m'
+        required: false
+        type: string
 
 jobs:
   e2e:
@@ -81,7 +91,7 @@ jobs:
         {
         \""maxTestDuration\"": \""${{ inputs.maxTestDuration || 'P5D' }}\"",
         \""starter\"": [ {\""rate\"": 50, \""processId\"": \""one-task-one-timer\"" } ],
-        \""verifier\"" : { \""maxInstanceDuration\"" : \""15m\"" },
+        \""verifier\"" : { \""maxInstanceDuration\"" : \""${{ inputs.maxInstanceDuration }}\"" },
         \""fault\"": ${{ inputs.fault || 'null' }}
         }
         }
diff --git a/.github/workflows/weekly-e2e.yml b/.github/workflows/weekly-e2e.yml
index 93aaeb5..4bd0afd 100644
--- a/.github/workflows/weekly-e2e.yml
+++ b/.github/workflows/weekly-e2e.yml
@@ -31,4 +31,5 @@ jobs:
       maxTestDuration: P1D
       clusterPlan: Multiregion test simulation
       fault: \""2-region-dataloss-failover\""
+      maxInstanceDuration: 40m
     secrets: inherit

diff --git a/.ci/release_docs.sh b/.ci/release_docs.sh
index dd2b10b..09c7bbf 100755
--- a/.ci/release_docs.sh
+++ b/.ci/release_docs.sh
@@ -1,12 +1,12 @@
 #!/bin/bash -xue
 
-MDBOOK_VERSION=0.1.5
+MDBOOK_VERSION=v0.1.5
 
 # go to docs folder
 cd docs/
 
 # dowload mdbook
-curl -sL https://github.com/azerupi/mdBook/releases/download/${MDBOOK_VERSION}/mdBook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xzvf -
+curl -sL https://github.com/rust-lang-nursery/mdBook/releases/download/${MDBOOK_VERSION}/mdbook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xzvf -
 
 # build docs
 ./mdbook build
diff --git a/.ci/stage_docs.sh b/.ci/stage_docs.sh
index f10101a..7e91adb 100755
--- a/.ci/stage_docs.sh
+++ b/.ci/stage_docs.sh
@@ -1,12 +1,12 @@
 #!/bin/bash -xue
 
-MDBOOK_VERSION=0.1.5
+MDBOOK_VERSION=v0.1.5
 
 # go to docs folder
 cd docs/
 
 # dowload mdbook
-curl -sL https://github.com/azerupi/mdBook/releases/download/${MDBOOK_VERSION}/mdBook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xzvf -
+curl -sL https://github.com/rust-lang-nursery/mdBook/releases/download/${MDBOOK_VERSION}/mdbook-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz | tar xzvf -
 
 # build docs
 ./mdbook build

diff --git a/Jenkinsfile b/Jenkinsfile
index 9fbd3a1..3e4f052 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -29,7 +29,7 @@ pipeline {
 
         stage('Verify') {
             parallel {
-                stage('Tests') {
+                stage('1 - Java Tests') {
                     steps {
                         withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
                             sh 'mvn -B verify -P skip-unstable-ci'
@@ -42,7 +42,9 @@ pipeline {
                     }
                 }
 
-                stage('JMH') {
+                stage('2 - JMH') {
+                    // delete this line to also run JMH on feature branch
+                    when { anyOf { branch 'master'; branch 'develop' } }
                     agent { node { label 'ubuntu-large' } }
 
                     steps {

diff --git a/Jenkinsfile b/Jenkinsfile
index abce263..000ca8e 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -110,13 +110,14 @@ pipeline {
             }
         }
 
-        stage('Build Docker Image')
-        {
+        stage('Build Docker Image') {
             when { branch 'develop' }
-            build job: 'zeebe-DISTRO-docker', parameters: [
-                string(name: 'RELEASE_VERSION', value: ""SNAPSHOT""),
-                booleanParam(name: 'IS_LATEST', value: false)
-            ]
+            steps {
+                build job: 'zeebe-DISTRO-docker', parameters: [
+                    string(name: 'RELEASE_VERSION', value: ""SNAPSHOT""),
+                    booleanParam(name: 'IS_LATEST', value: false)
+                ]
+            }
         }
 
     }

diff --git a/Jenkinsfile b/Jenkinsfile
index 2c58f61..9daa38f 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -4,9 +4,17 @@
 
 def buildName = ""${env.JOB_BASE_NAME.replaceAll(""%2F"", ""-"").replaceAll(""\\."", ""-"").take(20)}-${env.BUILD_ID}""
 
+def masterBranchName = 'master'
+def isMasterBranch = env.BRANCH_NAME == masterBranchName
+def developBranchName = 'develop'
+def isDevelopBranch = env.BRANCH_NAME == developBranchName
+
 //for develop branch keep builds for 7 days to be able to analyse build errors, for all other branches, keep the last 10 builds
-def daysToKeep = (env.BRANCH_NAME=='develop') ? '7' : '-1'
-def numToKeep = (env.BRANCH_NAME=='develop') ? '-1' : '10'
+def daysToKeep = isDevelopBranch ? '7' : '-1'
+def numToKeep = isDevelopBranch ? '-1' : '10'
+
+//the develop branch should be run hourly to detect flaky tests and instability, other branches only on commit
+def cronTrigger = isDevelopBranch ? '@hourly' : ''
 
 pipeline {
     agent {
@@ -23,6 +31,10 @@ pipeline {
       SONARCLOUD_TOKEN = credentials('zeebe-sonarcloud-token')
     }
 
+    triggers {
+      cron(cronTrigger)
+    }
+
     options {
         buildDiscarder(logRotator(daysToKeepStr: daysToKeep, numToKeepStr: numToKeep))
         timestamps()
@@ -201,7 +213,7 @@ pipeline {
         }
 
         stage('Upload') {
-            when { branch 'develop' }
+            when { allOf { branch developBranchName ; not {  triggeredBy 'TimerTrigger' } } }
             steps {
                 retry(3) {
                     container('maven') {
@@ -214,9 +226,11 @@ pipeline {
         }
 
         stage('Post') {
+            when { not { triggeredBy 'TimerTrigger' } }
+
             parallel {
                 stage('Docker') {
-                    when { branch 'develop' }
+                    when { branch developBranchName }
 
                     environment {
                         VERSION = readMavenPom(file: 'parent/pom.xml').getVersion()
@@ -227,20 +241,20 @@ pipeline {
                             build job: 'zeebe-docker', parameters: [
                                 string(name: 'BRANCH', value: env.BRANCH_NAME),
                                 string(name: 'VERSION', value: env.VERSION),
-                                booleanParam(name: 'IS_LATEST', value: env.BRANCH_NAME == 'master'),
-                                booleanParam(name: 'PUSH', value: env.BRANCH_NAME == 'develop')
+                                booleanParam(name: 'IS_LATEST', value: isMasterBranch),
+                                booleanParam(name: 'PUSH', value: isDevelopBranch)
                             ]
                         }
                     }
                 }
 
                 stage('Docs') {
-                    when { anyOf { branch 'master'; branch 'develop' } }
+                    when { anyOf { branch masterBranchName; branch developBranchName } }
                     steps {
                         retry(3) {
                             build job: 'zeebe-docs', parameters: [
                                 string(name: 'BRANCH', value: env.BRANCH_NAME),
-                                booleanParam(name: 'LIVE', value: env.BRANCH_NAME == 'master')
+                                booleanParam(name: 'LIVE', value: isMasterBranch)
                             ]
                         }
                     }

diff --git a/transport/.ci/job.dsl b/transport/.ci/job.dsl
index 9edd4ff..2ce0813 100644
--- a/transport/.ci/job.dsl
+++ b/transport/.ci/job.dsl
@@ -70,6 +70,7 @@ mavenJob(jobName) {
   }
   triggers {
     githubPush()
+    snapshotDependencies true
   }
   label 'ubuntu'
   jdk 'jdk-8-latest'

diff --git a/Jenkinsfile b/Jenkinsfile
index de4cad7..204bbaa 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -330,7 +330,7 @@ pipeline {
                 TAG = ""${env.VERSION}-${env.GIT_COMMIT}""
                 DOCKER_GCR = credentials(""zeebe-gcr-serviceaccount-json"")
                 ZEEBE_AUTHORIZATION_SERVER_URL = 'https://login.cloud.ultrawombat.com/oauth/token'
-                ZEEBE_CLIENT_ID = 'ELL8eP0qDkl6dxXVps0t51x2VkCkWf~p'
+                ZEEBE_CLIENT_ID = '6WIMz9KT7076gBWmfV7QJK0zGNotmF04'
                 QA_RUN_VARIABLES = ""{\""zeebeImage\"": \""${env.IMAGE}:${env.TAG}\"", \""generationTemplate\"": \""${params.GENERATION_TEMPLATE}\"", "" +
                                     ""\""channel\"": \""Internal Dev\"", \""branch\"": \""${env.BRANCH_NAME}\"", \""build\"": \""${currentBuild.absoluteUrl}\"", "" +
                                     ""\""businessKey\"": \""${currentBuild.absoluteUrl}\"", \""processId\"": \""qa-protocol\""}""

diff --git a/Jenkinsfile b/Jenkinsfile
index c9590a8..6e9f084 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -10,7 +10,7 @@ def masterBranchName = 'master'
 def isMasterBranch = env.BRANCH_NAME == masterBranchName
 def developBranchName = 'develop'
 def isDevelopBranch = env.BRANCH_NAME == developBranchName
-def latestStableBranchName = 'stable/0.26'
+def latestStableBranchName = 'stable/1.0'
 def isLatestStable = env.BRANCH_NAME == latestStableBranchName
 
 //for develop branch keep builds for 7 days to be able to analyse build errors, for all other branches, keep the last 10 builds

diff --git a/.ci/docker.dsl b/.ci/docker.dsl
index 035565c..2ddec2f 100644
--- a/.ci/docker.dsl
+++ b/.ci/docker.dsl
@@ -55,10 +55,6 @@ freeStyleJob(jobName)
 
     label 'dind'
 
-    triggers {
-        githubPush()
-    }
-
     parameters
     {
         stringParam('RELEASE_VERSION', 'SNAPSHOT', 'Docker image tag')

diff --git a/.ci/distro_release.dsl b/.ci/distro_release.dsl
deleted file mode 100644
index 9439b95..0000000
--- a/.ci/distro_release.dsl
+++ /dev/null
@@ -1,262 +0,0 @@
-// vim: set filetype=groovy:
-
-def jobName = 'zeebe-DISTRO-maven-deploy'
-def repository = 'zeebe'
-def gitBranch = 'master'
-
-def pom = 'pom.xml'
-def mvnGoals = 'clean generate-sources license:check source:jar javadoc:jar deploy -B -P jmh'
-
-def mavenVersion = 'maven-3.3-latest'
-def mavenSettingsId = 'camunda-maven-settings'
-
-// script to set access rights on ssh keys
-// and configure git user name and email
-def setupGitConfig = '''\
-#!/bin/bash -xe
-
-chmod 600 ~/.ssh/id_rsa
-chmod 600 ~/.ssh/id_rsa.pub
-
-git config --global user.email ""ci@camunda.com""
-git config --global user.name ""camunda-jenkins""
-'''
-
-def mavenGpgKeys = '''\
-#!/bin/bash
-
-if [ -e ""${MVN_CENTRAL_GPG_KEY_SEC}"" ]
-then
-  gpg -q --allow-secret-key-import --import ${MVN_CENTRAL_GPG_KEY_SEC} || echo 'Private GPG Sign Key is already imported!.'
-  rm ${MVN_CENTRAL_GPG_KEY_SEC}
-else
-  echo 'Private GPG Key not found.'
-fi
-
-if [ -e ""${MVN_CENTRAL_GPG_KEY_PUB}"" ]
-then
-  gpg -q --import ${MVN_CENTRAL_GPG_KEY_PUB} || echo 'Public GPG Sign Key is already imported!.'
-  rm ${MVN_CENTRAL_GPG_KEY_PUB}
-else
-  echo 'Public GPG Key not found.'
-fi
-'''
-
-def githubRelease = '''\
-#!/bin/bash
-
-cd dist/target
-
-# create checksum files
-sha1sum zeebe-distribution-${RELEASE_VERSION}.tar.gz > zeebe-distribution-${RELEASE_VERSION}.tar.gz.sha1sum
-sha1sum zeebe-distribution-${RELEASE_VERSION}.zip > zeebe-distribution-${RELEASE_VERSION}.zip.sha1sum
-
-# do github release
-curl -sL https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2 | tar xjvf - --strip 3
-
-./github-release release --user zeebe-io --repo zeebe --tag ${RELEASE_VERSION} --name ""Zeebe ${RELEASE_VERSION}"" --description """"
-
-for f in zeebe-distribution-${RELEASE_VERSION}.{tar.gz,zip}{,.sha1sum}; do
-    ./github-release upload --user zeebe-io --repo zeebe --tag ${RELEASE_VERSION} --name ""${f}"" --file ""${f}""
-done
-'''
-
-// properties used by the release build
-def releaseProperties = [
-    resume: 'false',
-    tag: '${RELEASE_VERSION}',
-    releaseVersion: '${RELEASE_VERSION}',
-    developmentVersion: '${DEVELOPMENT_VERSION}',
-    pushChanges: '${PUSH_CHANGES}',
-    remoteTagging: '${PUSH_CHANGES}',
-    localCheckout: '${USE_LOCAL_CHECKOUT}',
-    arguments: '--settings=${NEXUS_SETTINGS} -DskipTests=true -Dgpg.passphrase=""${GPG_PASSPHRASE}"" -Dskip.central.release=${SKIP_DEPLOY_TO_MAVEN_CENTRAL} -Dskip.camunda.release=${SKIP_DEPLOY_TO_CAMUNDA_NEXUS}',
-]
-
-def joinJmhResults = '''\
-#!/bin/bash -x
-
-cat **/*/jmh-result.json | jq -s add > target/jmh-result.json
-'''
-
-mavenJob(jobName)
-{
-    scm
-    {
-        git
-        {
-            remote
-            {
-                github 'zeebe-io/' + repository, 'ssh'
-                credentials 'camunda-jenkins-github-ssh'
-            }
-            branch gitBranch
-            extensions
-            {
-                localBranch gitBranch
-                pathRestriction {
-                    includedRegions ''
-                    excludedRegions 'docs/.*\n\\.ci/.*'
-                }
-            }
-        }
-    }
-    triggers
-    {
-        githubPush()
-        snapshotDependencies true
-    }
-    label 'ubuntu-large'
-    jdk 'jdk-8-latest'
-
-    rootPOM pom
-    goals mvnGoals
-    localRepository LocalRepositoryLocation.LOCAL_TO_WORKSPACE
-    providedSettings mavenSettingsId
-    mavenInstallation mavenVersion
-
-    postBuildSteps
-    {
-        shell joinJmhResults
-    }
-
-    wrappers
-    {
-        timestamps()
-
-        timeout
-        {
-            absolute 60
-        }
-
-        configFiles
-        {
-            // jenkins github public ssh key needed to push to github
-            custom('Jenkins CI GitHub SSH Public Key')
-            {
-                targetLocation '/home/camunda/.ssh/id_rsa.pub'
-            }
-            // jenkins github private ssh key needed to push to github
-            custom('Jenkins CI GitHub SSH Private Key')
-            {
-                targetLocation '/home/camunda/.ssh/id_rsa'
-            }
-            // nexus settings xml
-            mavenSettings(mavenSettingsId)
-            {
-                variable('NEXUS_SETTINGS')
-            }
-        }
-
-        credentialsBinding {
-          // maven central signing credentials
-          string('GPG_PASSPHRASE', 'password_maven_central_gpg_signing_key')
-          file('MVN_CENTRAL_GPG_KEY_SEC', 'maven_central_gpg_signing_key')
-          file('MVN_CENTRAL_GPG_KEY_PUB', 'maven_central_gpg_signing_key_pub')
-          // github token for release upload
-          string('GITHUB_TOKEN', 'github-camunda-jenkins-token')
-        }
-
-        release
-        {
-            doNotKeepLog false
-            overrideBuildParameters true
-
-            parameters
-            {
-                stringParam('RELEASE_VERSION', '0.1.0', 'Version to release')
-                stringParam('DEVELOPMENT_VERSION', '0.2.0-SNAPSHOT', 'Next development version')
-                booleanParam('PUSH_CHANGES', true, 'If <strong>TRUE</strong>, push the changes to remote repositories.  If <strong>FALSE</strong>, do not push changes to remote repositories. Must be used in conjunction with USE_LOCAL_CHECKOUT = <strong>TRUE</strong> to test the release!')
-                booleanParam('USE_LOCAL_CHECKOUT', false, 'If <strong>TRUE</strong>, uses the local git repository to checkout the release tag to build.  If <strong>FALSE</strong>, checks out the release tag from the remote repositoriy. Must be used in conjunction with PUSH_CHANGES = <strong>FALSE</strong> to test the release!')
-                booleanParam('SKIP_DEPLOY_TO_MAVEN_CENTRAL', false, 'If <strong>TRUE</strong>, skip the deployment to maven central. Should be used when testing the release.')
-                booleanParam('SKIP_DEPLOY_TO_CAMUNDA_NEXUS', false, 'If <strong>TRUE</strong>, skip the deployment to camunda nexus. Should be used when testing the release.')
-            }
-
-            preBuildSteps
-            {
-                // setup git configuration to push to github
-                shell setupGitConfig
-                shell mavenGpgKeys
-
-                // execute maven release
-                maven
-                {
-                    mavenInstallation mavenVersion
-                    providedSettings mavenSettingsId
-                    goals 'release:prepare release:perform -Dgpg.passphrase=""${GPG_PASSPHRASE}"" -DignoreSnapshots -B'
-
-                    properties releaseProperties
-                    localRepository LocalRepositoryLocation.LOCAL_TO_WORKSPACE
-                }
-
-                shell githubRelease
-
-            }
-
-            postBuildPublishers
-            {
-                downstreamParameterized
-                {
-                    trigger('zeebe-DISTRO-docker, zeebe-docs')
-                    {
-                        condition('SUCCESS')
-                        parameters {
-                            currentBuild()
-                            booleanParam('IS_LATEST', true)
-                        }
-                    }
-                }
-            }
-
-        }
-
-    }
-
-    publishers
-    {
-
-        deployArtifacts
-        {
-            repositoryId 'central'
-            repositoryUrl 'https://oss.sonatype.org/content/repositories/snapshots'
-            uniqueVersion true
-            evenIfUnstable false
-        }
-
-        archiveJunit('**/target/surefire-reports/*.xml')
-        {
-            retainLongStdout()
-        }
-
-        jmhReport
-        {
-            resultPath 'target/jmh-result.json'
-        }
-
-        extendedEmail
-        {
-          triggers
-          {
-              firstFailure
-              {
-                  sendTo
-                  {
-                      culprits()
-                  }
-              }
-              fixed
-              {
-                  sendTo
-                  {
-                      culprits()
-                  }
-              }
-          }
-        }
-
-    }
-
-    blockOnUpstreamProjects()
-    logRotator(-1, 5, -1, 1)
-
-}

diff --git a/.github/workflows/e2e-testbench.yaml b/.github/workflows/e2e-testbench.yaml
index b7301b3..cb86d1d 100644
--- a/.github/workflows/e2e-testbench.yaml
+++ b/.github/workflows/e2e-testbench.yaml
@@ -18,6 +18,34 @@ on:
         default: 'main'
         required: false
         type: string
+      clusterPlan:
+        description: `Cluster plan used by testbench to create the test cluster`
+        default: 'Production - M'
+        required: false
+        type: string
+  workflow_call:
+    inputs:
+      maxTestDuration:
+        description: 'Test duration (Eg: PT2H, P3D)'
+        required: false
+        default: 'P5D'
+        type: string
+      generation:
+        description: 'Specifies the generation template which should be used by the testbench run'
+        required: false
+        default: 'Zeebe SNAPSHOT'
+        type: string
+      branch:
+        description: 'Specifies the branch, for which the E2E run should be executed'
+        default: 'main'
+        required: false
+        type: string
+      clusterPlan:
+        description: `Cluster plan used by testbench to create the test cluster`
+        default: 'Production - M'
+        required: false
+        type: string
+
   schedule:
     # Run at 7:00 on every monday
     - cron:  '0 7 * * 1'
@@ -35,7 +63,7 @@ jobs:
         \""channel\"": \""Internal Dev\"",
         \""branch\"": \""${{ inputs.branch || 'main' }}\"",
         \""build\"":  \""${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"",
-        \""clusterPlan\"":\""Production - M\"",
+        \""clusterPlan\"":\""${{ input.clusterPlan }}\"",
         \""region\"":\""new chaos\"",
         \""properties\"":[\""allInstancesAreCompleted\""],
         \""testProcessId\"": \""e2e-test\"",

diff --git a/.ci/docker.dsl b/.ci/docker.dsl
index 4768cb8..9f6a4c9 100644
--- a/.ci/docker.dsl
+++ b/.ci/docker.dsl
@@ -8,6 +8,9 @@ def dockerHubUpload =
 '''\
 #!/bin/bash -xeu
 
+# clear docker host env set by jenkins job
+unset DOCKER_HOST
+
 VERSION=${RELEASE_VERSION}
 
 if [ ""${RELEASE_VERSION}"" = ""SNAPSHOT"" ]; then
@@ -26,9 +29,6 @@ docker login --username ${DOCKER_HUB_USERNAME} --password ${DOCKER_HUB_PASSWORD}
 docker push camunda/zeebe:${RELEASE_VERSION}
 
 if [ ""${IS_LATEST}"" = ""true"" ]; then
-    # to make sure we can tag latest, there were problems before
-    docker rmi camunda/zeebe:latest
-
     docker tag -f camunda/zeebe:${RELEASE_VERSION} camunda/zeebe:latest
     docker push camunda/zeebe:latest
 fi

diff --git a/service-container/.travis.yml b/service-container/.travis.yml
new file mode 100644
index 0000000..c08cc34
--- /dev/null
+++ b/service-container/.travis.yml
@@ -0,0 +1,11 @@
+sudo: false
+
+language: java
+jdk: oraclejdk8
+
+branches:
+    only:
+        - master
+
+notifications:
+    email: false

diff --git a/.ci/docker.dsl b/.ci/docker.dsl
index 751f12b..9f6a4c9 100644
--- a/.ci/docker.dsl
+++ b/.ci/docker.dsl
@@ -59,8 +59,6 @@ freeStyleJob(jobName)
 
     label 'dind'
 
-    disabled()
-
     triggers {
         cron('@midnight')
     }

diff --git a/gossip/.ci/distro_release.dsl b/gossip/.ci/distro_release.dsl
index ea8120e..1259ede 100644
--- a/gossip/.ci/distro_release.dsl
+++ b/gossip/.ci/distro_release.dsl
@@ -70,6 +70,7 @@ mavenJob(jobName) {
   }
   triggers {
     githubPush()
+    snapshotDependencies true
   }
   label 'ubuntu'
   jdk 'jdk-8-latest'

diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
index bf797a4..be0e62f 100644
--- a/.github/workflows/test.yml
+++ b/.github/workflows/test.yml
@@ -82,16 +82,11 @@ jobs:
     steps:
       - uses: actions/checkout@v3
       - run: sudo apt-get -y install jq
-      - uses: actions/setup-java@v3.3.0
-        with:
-          distribution: 'temurin'
-          java-version: '17'
-          cache: 'maven'
       - name: Get Project List
         id: list-projects
         # Build a json array of module names that can be used for the matrix in `unit-tests`
         run: >
-          echo ""::set-output name=projects::$(mvn -pl !:zeebe-workflow-engine -Dexec.executable='echo' -Dexec.args='${project.artifactId}' exec:exec -q |  jq -cnR [inputs])""
+          echo '::set-output name=projects::$(find -not -path ""./engine/pom.xml"" -wholename ""./*/pom.xml"" -exec dirname {} \; | jq -cnR [inputs])'
     outputs:
       projects: ${{ steps.list-projects.outputs.projects }}
   unit-tests:

diff --git a/Jenkinsfile b/Jenkinsfile
index 34e6e88..adba4c3 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -58,7 +58,7 @@ pipeline {
                     }
                     post {
                         failure {
-                            archiveArtifacts artifacts: '**/target/*-reports/**/*-output.txt,**/**/*.dumpstream', allowEmptyArchive: true
+                            archiveArtifacts artifacts: '**/target/*-reports/**/*-output.txt,**/**/*.dumpstream,**/**/hs_err_*.log', allowEmptyArchive: true
                         }
                     }
                 }

diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index c08cc34..0000000
--- a/.travis.yml
+++ /dev/null
@@ -1,11 +0,0 @@
-sudo: false
-
-language: java
-jdk: oraclejdk8
-
-branches:
-    only:
-        - master
-
-notifications:
-    email: false
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 0000000..383bf9b
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,74 @@
+// vim: set filetype=groovy:
+
+def jdkVersion = 'jdk-8-latest'
+def mavenVersion = 'maven-3.3-latest'
+def mavenSettingsConfig = 'camunda-maven-settings'
+
+def joinJmhResults = '''\
+#!/bin/bash -x
+cat **/*/jmh-result.json | jq -s add > target/jmh-result.json
+'''
+
+pipeline {
+    agent { node { label 'ubuntu-large' } }
+
+    options {
+        buildDiscarder(logRotator(daysToKeepStr:'14', numToKeepStr:'50'))
+            timestamps()
+            timeout(time: 30, unit: 'MINUTES')
+    }
+
+    stages {
+        stage('Install') {
+            steps {
+                withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
+                    sh 'mvn -B clean com.mycila:license-maven-plugin:check install -DskipTests'
+                }
+            }
+        }
+
+        stage('Tests') {
+            steps {
+                withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
+                    sh 'mvn -B generate-sources source:jar javadoc:jar deploy'
+                }
+            }
+        }
+
+        stage('JMH') {
+            steps {
+                withMaven(jdk: jdkVersion, maven: mavenVersion, mavenSettingsConfig: mavenSettingsConfig) {
+                    sh 'mvn -B integration-test -DskipTests -P jmh'
+                }
+            }
+
+            post {
+                success {
+                    sh joinJmhResults
+                    jmhReport 'target/jmh-result.json'
+                }
+            }
+        }
+    }
+
+    post {
+        changed {
+            sendBuildStatusNotificationToDevelopers(currentBuild.result)
+        }
+        always {
+            junit testResults: '**/target/*-reports/**/*.xml', allowEmptyResults: true
+        }
+    }
+}
+
+void sendBuildStatusNotificationToDevelopers(String buildStatus = 'SUCCESS') {
+    def buildResult = buildStatus ?: 'SUCCESS'
+    def subject = ""${buildResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'""
+    def details = ""${buildResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' see console output at ${env.BUILD_URL}'""
+
+    emailext (
+        subject: subject,
+        body: details,
+        recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
+    )
+}
diff --git a/parent/pom.xml b/parent/pom.xml
index 1935321..97a6920 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -221,6 +221,7 @@
             <includeTestSourceDirectory>true</includeTestSourceDirectory>
             <encoding>UTF-8</encoding>
             <failOnViolation>true</failOnViolation>
+            <sourceDirectories>${project.build.sourceDirectory},${project.build.testSourceDirectory},${project.basedir}/src/test/jmh</sourceDirectories>
           </configuration>
           <executions>
             <execution>

diff --git a/Jenkinsfile b/Jenkinsfile
index 176ab58..bead402 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -326,7 +326,7 @@ pipeline {
                 TAG = ""${env.VERSION}-${env.GIT_COMMIT}""
                 DOCKER_GCR = credentials(""zeebe-gcr-serviceaccount-json"")
                 ZEEBE_AUTHORIZATION_SERVER_URL = 'https://login.cloud.ultrawombat.com/oauth/token'
-                ZEEBE_CLIENT_ID = 'W5a4JUc3I1NIetNnodo3YTvdsRIFb12w'
+                ZEEBE_CLIENT_ID = 'ELL8eP0qDkl6dxXVps0t51x2VkCkWf~p'
                 QA_RUN_VARIABLES = ""{\""zeebeImage\"": \""${env.IMAGE}:${env.TAG}\"", \""generationTemplate\"": \""${params.GENERATION_TEMPLATE}\"", "" +
                                     ""\""channel\"": \""Internal Dev\"", \""branch\"": \""${env.BRANCH_NAME}\"", \""build\"": \""${currentBuild.absoluteUrl}\"", "" +
                                     ""\""businessKey\"": \""${currentBuild.absoluteUrl}\"", \""processId\"": \""qa-protocol\""}""
@@ -341,7 +341,7 @@ pipeline {
                     withVault(
                         [vaultSecrets:
                              [
-                                 [path        : 'secret/common/ci-zeebe/testbench-secrets-int',
+                                 [path        : 'secret/common/ci-zeebe/testbench-secrets-1.x-prod',
                                   secretValues:
                                       [
                                           [envVar: 'ZEEBE_CLIENT_SECRET', vaultKey: 'clientSecret'],

diff --git a/.github/workflows/deploy.yml b/.github/workflows/deploy.yml
index a1e1ca2..dcc92ed 100644
--- a/.github/workflows/deploy.yml
+++ b/.github/workflows/deploy.yml
@@ -10,6 +10,7 @@ jobs:
   tests:
     name: Tests
     uses: ./.github/workflows/test.yml
+
   deploy-snapshots:
     name: Deploy snapshot artifacts
     needs: [ tests ]
@@ -44,3 +45,49 @@ jobs:
         env:
           MAVEN_USERNAME: ${{ steps.secrets.outputs.ARTIFACTS_USR }}
           MAVEN_PASSWORD: ${{ steps.secrets.outputs.ARTIFACTS_PSW }}
+
+  deploy-docker-snapshot:
+    name: Deploy snapshot Docker image
+    needs: [ tests ]
+    runs-on: ubuntu-latest
+    if: github.repository == 'camunda/zeebe'
+    steps:
+      - uses: actions/checkout@v3
+      - name: Import Secrets
+        id: secrets
+        uses: hashicorp/vault-action@v2.4.1
+        with:
+          url: ${{ secrets.VAULT_ADDR }}
+          method: approle
+          roleId: ${{ secrets.VAULT_ROLE_ID }}
+          secretId: ${{ secrets.VAULT_SECRET_ID }}
+          secrets: |
+            secret/data/common/github.com/actions/camunda/zeebe REGISTRY_HUB_DOCKER_COM_USR;
+            secret/data/common/github.com/actions/camunda/zeebe REGISTRY_HUB_DOCKER_COM_PSW;
+      - uses: actions/setup-java@v3.3.0
+        with:
+          distribution: 'temurin'
+          java-version: '17'
+          cache: 'maven'
+      - uses: actions/setup-go@v3
+        with:
+          go-version: ""1.15""
+      - name: Build Go
+        run: ./build.sh
+        working-directory: clients/go/cmd/zbctl
+      - name: Package Zeebe
+        run: mvn -B -DskipTests -DskipChecks package
+      - name: Login to DockerHub
+        uses: docker/login-action@v2
+        with:
+          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
+          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
+      - name: Build and push Docker image
+        uses: docker/build-push-action@v3
+        with:
+          context: .
+          tags: camunda/zeebe:SNAPSHOT
+          push: true
+          no-cache: true
+          build-args: DISTBALL=dist/target/camunda-zeebe-*-SNAPSHOT.tar.gz
+          target: app
diff --git a/Jenkinsfile b/Jenkinsfile
index 425e2ef..e5e56c1 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -397,33 +397,6 @@ pipeline {
                 }
             }
         }
-
-        stage('Post') {
-            when { not { triggeredBy 'TimerTrigger' } }
-
-            parallel {
-                stage('Docker') {
-                    when { branch mainBranchName }
-
-                    environment {
-                        VERSION = readMavenPom(file: 'bom/pom.xml').getVersion()
-                    }
-
-                    steps {
-                        retry(3) {
-                            timeout(time: shortTimeoutMinutes, unit: 'MINUTES') {
-                                build job: 'zeebe-docker', parameters: [
-                                    string(name: 'BRANCH', value: env.BRANCH_NAME),
-                                    string(name: 'VERSION', value: env.VERSION),
-                                    booleanParam(name: 'IS_LATEST', value: false),
-                                    booleanParam(name: 'PUSH', value: isMainBranch)
-                                ]
-                            }
-                        }
-                    }
-                }
-            }
-        }
     }
 
     post {

diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..c08cc34
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,11 @@
+sudo: false
+
+language: java
+jdk: oraclejdk8
+
+branches:
+    only:
+        - master
+
+notifications:
+    email: false

diff --git a/.ci/distro_release.dsl b/.ci/distro_release.dsl
index f2fd819..9439b95 100644
--- a/.ci/distro_release.dsl
+++ b/.ci/distro_release.dsl
@@ -73,6 +73,11 @@ def releaseProperties = [
     arguments: '--settings=${NEXUS_SETTINGS} -DskipTests=true -Dgpg.passphrase=""${GPG_PASSPHRASE}"" -Dskip.central.release=${SKIP_DEPLOY_TO_MAVEN_CENTRAL} -Dskip.camunda.release=${SKIP_DEPLOY_TO_CAMUNDA_NEXUS}',
 ]
 
+def joinJmhResults = '''\
+#!/bin/bash -x
+
+cat **/*/jmh-result.json | jq -s add > target/jmh-result.json
+'''
 
 mavenJob(jobName)
 {
@@ -110,6 +115,11 @@ mavenJob(jobName)
     providedSettings mavenSettingsId
     mavenInstallation mavenVersion
 
+    postBuildSteps
+    {
+        shell joinJmhResults
+    }
+
     wrappers
     {
         timestamps()
@@ -218,6 +228,11 @@ mavenJob(jobName)
             retainLongStdout()
         }
 
+        jmhReport
+        {
+            resultPath 'target/jmh-result.json'
+        }
+
         extendedEmail
         {
           triggers

diff --git a/Jenkinsfile b/Jenkinsfile
index 168f446..a4da961 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -28,6 +28,7 @@ pipeline {
         }
 
         stage('Verify') {
+            failFast true
             parallel {
                 stage('Tests') {
                     steps {
"
camunda/zeebe,docs,"diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java b/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
index ea636aa..9d53a54 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
@@ -242,7 +242,8 @@ public final class EngineRule extends ExternalResource {
       // the due date checker is scheduled through a post-commit task. When the engine has reached
       // the end of the log, all post-commit tasks have also been applied, because the state machine
       // will have executed them before switching the hasReachEnd flag.
-      Awaitility.await().until(this::hasReachedEnd);
+      Awaitility.await(""Expect that engine reaches the end of the log before increasing the time"")
+          .until(this::hasReachedEnd);
     }
 
     environmentRule.getClock().addTime(duration);

diff --git a/docs/src/SUMMARY.md b/docs/src/SUMMARY.md
index 31bc2b6..a3b3e95 100755
--- a/docs/src/SUMMARY.md
+++ b/docs/src/SUMMARY.md
@@ -56,6 +56,8 @@
     * [Testing](java-client/testing.md)
 * [Go Client](go-client/README.md)
     * [Get Started](go-client/get-started.md)
+* [gRPC API](grpc/README.md)
+    * [Reference](grpc/reference.md)
 * [Operations](operations/README.md)
     * [The zeebe.cfg.toml file](operations/the-zeebecfgtoml-file.md)
     * [Setting up a cluster](operations/setting-up-a-cluster.md)
diff --git a/docs/src/grpc/README.md b/docs/src/grpc/README.md
new file mode 100644
index 0000000..e782f99
--- /dev/null
+++ b/docs/src/grpc/README.md
@@ -0,0 +1,29 @@
+# gRPC in Zeebe
+
+Zeebe clients connect to brokers via a stateless gateway. For the communication
+between client and gateway gRPC is used. The communication protocol is defined using
+Protocol Buffers v3 (proto3), and you can find it in the
+[Zeebe repository](https://github.com/zeebe-io/zeebe/tree/develop/gateway-protocol).
+
+
+## What is gRPC?
+gRPC was first developed by Google and is now an open-source project and part of the Cloud Native Computing Foundation.
+If you’re new to gRPC, the [“What is gRPC”](https://grpc.io/docs/guides/index.html) page on the project website provides a good introduction to it.
+
+
+## Why gRPC?
+gRPC has many nice features that make it a good fit for Zeebe. It:
+
+  - supports bi-directional streaming for opening a persistent connection and sending or receiving a stream of messages between client and server
+  - uses the common http2 protocol by default
+  - uses Protocol Buffers as an interface definition and data serialization mechanism–specifically, Zeebe uses proto3, which supports easy client generation in ten different programming languages
+
+## Supported clients
+
+At the moment, Zeebe officially supports two gRPC clients: one in [Java](java-client/README.md), and one in [Golang](go-client/README.md).
+
+If Zeebe does not provide an officially-supported client in your target language, you can read the official [Quick Start](https://grpc.io/docs/quickstart/) page to find out how
+to create a very basic one.
+
+You can find a list of existing clients in the [Awesome Zeebe repository](https://github.com/zeebe-io/awesome-zeebe#clients).
+Additionally, a [blog post](https://zeebe.io/blog/2018/11/grpc-generating-a-zeebe-python-client/) was published with a short tutorial on how to write a new client from scratch in Python.
diff --git a/docs/src/grpc/reference.md b/docs/src/grpc/reference.md
new file mode 100644
index 0000000..13337b9
--- /dev/null
+++ b/docs/src/grpc/reference.md
@@ -0,0 +1,681 @@
+# gRPC API Reference
+
+* [Error handling](#error-handling)
+* [Gateway service](#gateway-service)
+  * [ActivateJobs RPC](#activatejobs-rpc)
+  * [CancelWorkflowInstance RPC](#cancelworkflowinstance-rpc)
+  * [CompleteJob RPC](#completejob-rpc)
+  * [CreateWorkflowInstance RPC](#createworkflowinstance-rpc)
+  * [DeployWorkflow RPC](#deployworkflow-rpc)
+  * [FailJob RPC](#failjob-rpc)
+  * [GetWorkflow RPC](#getworkflow-rpc)
+  * [ListWorkflows RPC](#listworkflows-rpc)
+  * [PublishMessage RPC](#publishmessage-rpc)
+  * [ResolveIncident RPC](#resolveincident-rpc)
+  * [Topology RPC](#topology-rpc)
+  * [UpdateJobRetries RPC](#updatejobretries-rpc)
+  * [UpdateWorkflowInstancePayload RPC](#updateworkflowinstancepayload-rpc)
+
+
+## Error handling
+
+The gRPC API for Zeebe is exposed through the gateway, which acts as a proxy
+for the broker. Generally, this means that the client executes an remote call on the gateway,
+which is then translated to special binary protocol that the gateway uses to
+communicate with the broker.
+
+As a result of this proxying, any errors which occur between the gateway and the broker
+*for which the client is not at fault* (e.g. the gateway cannot deserialize the broker response,
+the broker is unavailable, etc.) are reported to the client as internal errors
+using the `GRPC_STATUS_INTERNAL` code. One exception to this is if the gateway itself is in
+an invalid state (e.g. out of memory), at which point it will return `GRPC_STATUS_UNAVAILABLE`.
+
+This behavior applies to every single possible RPC; in these cases, it is possible that retrying
+would succeed, but it is recommended to do so with an appropriate retry policy
+(e.g. a combination of exponential backoff or jitter wrapped in a circuit breaker).
+
+In the documentation below, the documented errors are business logic errors, meaning
+errors which are a result of request processing logic, and not serialization, network, or
+other more general errors.
+
+> As the gRPC server/client is based on generated code, keep in mind that
+any call made to the server can return errors as described by the spec
+[here](https://grpc.io/docs/guides/error.html#error-status-codes).
+
+
+## Gateway service
+
+The Zeebe gRPC API is exposed through a single gateway service.
+
+### ActivateJobs RPC
+
+Iterates through all known partitions in a round-robin and activates up to the requested amount
+of jobs and streams them back to the client as they are activated.
+
+#### Input: ActivateJobsRequest
+
+```protobuf
+message ActivateJobsRequest {
+  // the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
+  // type=""payment-service"" />)
+  string type = 1;
+  // the name of the worker activating the jobs, mostly used for logging purposes
+  string worker = 2;
+  // a job returned after this call will not be activated by another call until the
+  // timeout has been reached
+  int64 timeout = 3;
+  // the maximum number of jobs to fetch in a single call
+  int32 amount = 4;
+  // a list of variables to fetch as the job payload; if empty, all visible variables at
+  // the time of activation for the scope of the job will be returned as the job payload
+  repeated string fetchVariable = 5;
+}
+```
+
+#### Output: ActivateJobsResponse
+
+```protobuf
+message ActivateJobsResponse {
+  // list of activated jobs
+  repeated ActivatedJob jobs = 1;
+}
+
+message ActivatedJob {
+  // the key, a unique identifier for the job
+  int64 key = 1;
+  // the type of the job (should match what was requested)
+  string type = 2;
+  // a set of headers tying the job to a workflow instance/task instance
+  JobHeaders jobHeaders = 3;
+  // a set of custom headers defined during modelling; returned as a serialized
+  // JSON document
+  string customHeaders = 4;
+  // the name of the worker which activated this job
+  string worker = 5;
+  // the amount of retries left to this job (should always be positive)
+  int32 retries = 6;
+  // when the job can be activated again, sent as a UNIX epoch timestamp
+  int64 deadline = 7;
+  // JSON document, computed at activation time, consisting of all visible variables to
+  // the task scope
+  string payload = 8;
+}
+
+message JobHeaders {
+  // the job's workflow instance key
+  int64 workflowInstanceKey = 1;
+  // the bpmn process ID of the job workflow definition
+  string bpmnProcessId = 2;
+  // the version of the job workflow definition
+  int32 workflowDefinitionVersion = 3;
+  // the key of the job workflow definition
+  int64 workflowKey = 4;
+  // the associated task element ID
+  string elementId = 5;
+  // the unique key identifying the associated task, unique within the scope of the
+  // workflow instance
+  int64 elementInstanceKey = 6;
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_INVALID_ARGUMENT
+
+Returned if:
+
+  - type is blank (empty string, null)
+  - worker is blank (empty string, null)
+  - timeout less than 1
+  - amount is less than 1
+
+
+### CancelWorkflowInstance RPC
+
+Cancels a running workflow instance
+
+#### Input: CancelWorkflowInstanceRequest
+
+```protobuf
+message CancelWorkflowInstanceRequest {
+  // the workflow instance key (as, for example, obtained from
+  // CreateWorkflowInstanceResponse)
+  int64 workflowInstanceKey = 1;
+}
+```
+
+#### Output: CancelWorkflowInstanceResponse
+
+```protobuf
+message CancelWorkflowInstanceResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no workflow instance exists with the given key. Note that since workflow instances
+    are removed once their are finished, it could mean the instance did exist at some point.
+
+
+### CompleteJob RPC
+
+Completes a job with the given payload, which allows completing the associated service task.
+
+#### Input: CompleteJobRequest
+
+```protobuf
+message CompleteJobRequest {
+  // the unique job identifier, as obtained from ActivateJobsResponse
+  int64 jobKey = 1;
+  // a JSON document representing the variables in the current task scope
+  string payload = 2;
+}
+```
+
+#### Output: CompleteJobResponse
+
+```protobuf
+message CompleteJobResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no job exists with the given job key. Note that since jobs are removed once completed,
+    it could be that this job did exist at some point.
+
+##### GRPC_STATUS_FAILED_PRECONDITION
+
+Returned if:
+
+  - the job was marked as failed. In that case, the related incident must be resolved before
+    the job can be activated again and completed.
+
+
+### CreateWorkflowInstance RPC
+
+Creates and starts an instance of the specified workflow. The workflow definition to use
+to create the instance can be specified either using its unique key (as returned by
+DeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to
+use the latest deployed version.
+
+Note that only workflows with none start events can be started through this command.
+
+#### Input: CreateWorkflowInstanceRequest
+
+```protobuf
+message CreateWorkflowInstanceRequest {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow
+  // in the DeployWorkflowResponse message)
+  int64 workflowKey = 1;
+  // the BPMN process ID of the workflow definition
+  string bpmnProcessId = 2;
+  // the version of the process; set to -1 to use the latest version
+  int32 version = 3;
+  // JSON document that will instantiate the variables for the root variable scope of the
+  // workflow instance; it must be a JSON object, as variables will be mapped in a
+  // key-value fashion. e.g. { ""a"": 1, ""b"": 2 } will create two variables, named ""a"" and
+  // ""b"" respectively, with their associated values. [{ ""a"": 1, ""b"": 2 }] would not be a
+  // valid payload, as the root of the JSON document is an array and not an object.
+  string payload = 4;
+}
+```
+
+#### Output: CreateWorkflowInstanceResponse
+
+```protobuf
+message CreateWorkflowInstanceResponse {
+  // the key of the workflow definition which was used to create the workflow instance
+  int64 workflowKey = 1;
+  // the BPMN process ID of the workflow definition which was used to create the workflow
+  // instance
+  string bpmnProcessId = 2;
+  // the version of the workflow definition which was used to create the workflow instance
+  int32 version = 3;
+  // the unique identifier of the created workflow instance; to be used wherever a request
+  // needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)
+  int64 workflowInstanceKey = 5;
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no workflow with the given key exists (if workflowKey was given)
+  - no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)
+  - no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)
+
+##### GRPC_STATUS_FAILED_PRECONDITION
+
+Returned if:
+
+  - the workflow definition does not contain a none start event; only workflows with none
+    start event can be started manually.
+
+##### GRPC_STATUS_INVALID_ARGUMENT
+
+Returned if:
+
+  - the given payload is not a valid JSON document; all payloads are expected to be
+    valid JSON documents where the root node is an object.
+
+
+### DeployWorkflow RPC
+
+Deploys one or more workflows to Zeebe. Note that this is an atomic call,
+i.e. either all workflows are deployed, or none of them are.
+
+#### Input: DeployWorkflowRequest
+
+```protobuf
+message DeployWorkflowRequest {
+  // List of workflow resources to deploy
+  repeated WorkflowRequestObject workflows = 1;
+}
+
+message WorkflowRequestObject {
+  enum ResourceType {
+    // FILE type means the gateway will try to detect the resource type
+    // using the file extension of the name field
+    FILE = 0;
+    BPMN = 1; // extension 'bpmn'
+    YAML = 2; // extension 'yaml'
+  }
+
+  // the resource basename, e.g. myProcess.bpmn
+  string name = 1;
+  // the resource type; if set to BPMN or YAML then the file extension
+  // is ignored
+  ResourceType type = 2;
+  // the process definition as a UTF8-encoded string
+  bytes definition = 3;
+}
+```
+
+#### Output: DeployWorkflowResponse
+
+```protobuf
+message DeployWorkflowResponse {
+  // the unique key identifying the deployment
+  int64 key = 1;
+  // a list of deployed workflows
+  repeated WorkflowMetadata workflows = 2;
+}
+
+message WorkflowMetadata {
+  // the bpmn process ID, as parsed during deployment; together with the version forms a
+  // unique identifier for a specific workflow definition
+  string bpmnProcessId = 1;
+  // the assigned process version
+  int32 version = 2;
+  // the assigned key, which acts as a unique identifier for this workflow
+  int64 workflowKey = 3;
+  // the resource name (see: WorkflowRequestObject.name) from which this workflow was
+  // parsed
+  string resourceName = 4;
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_INVALID_ARGUMENT
+
+Returned if:
+
+  - no resources given.
+  - if at least one resource is invalid. A resource is considered invalid if:
+    * it is not a BPMN or YAML file (currently detected through the file extension)
+    * the resource data is not deserializable (e.g. detected as BPMN, but it's broken XML)
+    * the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)
+
+
+### FailJob RPC
+
+Marks the job as failed; if the retries argument is positive, then the job will be immediately
+activatable again, and a worker could try again to process it. If it is zero or negative however,
+an incident will be raised, tagged with the given errorMessage, and the job will not be
+activatable until the incident is resolved.
+
+#### Input: FailJobRequest
+
+```protobuf
+message FailJobRequest {
+  // the unique job identifier, as obtained when activating the job
+  int64 jobKey = 1;
+  // the amount of retries the job should have left
+  int32 retries = 2;
+  // an optional message describing why the job failed
+  // this is particularly useful if a job runs out of retries and an incident is raised,
+  // as it this message can help explain why an incident was raised
+  string errorMessage = 3;
+}
+```
+
+#### Output: FailJobResponse
+
+```protobuf
+message FailJobResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no job was found with the given key
+
+##### GRPC_STATUS_FAILED_PRECONDITION
+
+Returned if:
+
+  - the job was not activated
+  - the job is already in a failed state, i.e. ran out of retries
+
+
+### GetWorkflow RPC
+
+Fetches the workflow definition either by workflow key, or BPMN process ID and version.
+At least one of `workflowKey` or `bpmnProcessId` must be specified.
+
+#### Input: Request
+
+```protobuf
+message GetWorkflowRequest {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow in
+  // the DeployWorkflowResponse message)
+  int64 workflowKey = 1;
+  // the version of the process; set to -1 to use the latest version
+  int32 version = 2;
+  // the BPMN process ID of the workflow definition
+  string bpmnProcessId = 3;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message GetWorkflowResponse {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow in
+  // the DeployWorkflowResponse message)
+  int64 workflowKey = 1;
+  // the version of the process
+  int32 version = 2;
+  // the BPMN process ID of the workflow definition
+  string bpmnProcessId = 3;
+  // the name of the resource used to deployed the workflow
+  string resourceName = 4;
+  // a BPMN XML representation of the workflow
+  string bpmnXml = 5;
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no workflow with the given key exists (if workflowKey was given)
+  - no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)
+  - no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)
+
+### ListWorkflows RPC
+
+Lists all workflows matching the request criteria currently deployed in the cluster.
+
+#### Input: Request
+
+```protobuf
+message ListWorkflowsRequest {
+  // optional filter: if specified, only the workflows with this given process ID will be
+  // returned
+  string bpmnProcessId = 1;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message ListWorkflowsResponse {
+  // a list of deployed workflows matching the request criteria (if any)
+  repeated WorkflowMetadata workflows = 1;
+}
+
+message WorkflowMetadata {
+  // the bpmn process ID, as parsed during deployment; together with the version forms a
+  // unique identifier for a specific workflow definition
+  string bpmnProcessId = 1;
+  // the assigned process version
+  int32 version = 2;
+  // the assigned key, which acts as a unique identifier for this workflow
+  int64 workflowKey = 3;
+  // the resource name (see: WorkflowRequestObject.name) from which this workflow was
+  //parsed
+  string resourceName = 4;
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no workflows have been deployed yet (if no bpmnProcessId was given)
+  - no workflow with the given process ID exists (if bpmnProcessId was given)
+
+### PublishMessage RPC
+
+Publishes a single message. Messages are published to specific partitions computed from their
+correlation keys.
+
+#### Input: Request
+
+```protobuf
+message PublishMessageRequest {
+  // the name of the message
+  string name = 1;
+  // the correlation key of the message
+  string correlationKey = 2;
+  // how long the message should be buffered on the broker, in milliseconds
+  int64 timeToLive = 3;
+  // the unique ID of the message; can be omitted. only useful to ensure only one message
+  // with the given ID will ever be published (during its lifetime)
+  string messageId = 4;
+  // the message payload as a JSON document; see CreateWorkflowInstanceRequest for the
+  // rules about payloads
+  string payload = 5;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message PublishMessageResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_ALREADY_EXISTS
+
+Returned if:
+
+  - a message with the same ID was previously published (and is still alive)
+
+
+### ResolveIncident RPC
+
+Resolves a given incident. This simply marks the incident as resolved; most likely a call to
+UpdateJobRetries or UpdateWorkflowInstancePayload will be necessary to actually resolve the
+problem, following by this call.
+
+#### Input: Request
+
+```protobuf
+message ResolveIncidentRequest {
+  // the unique ID of the incident to resolve
+  int64 incidentKey = 1;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message ResolveIncidentResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no incident with the given key exists
+
+
+### Topology RPC
+
+Obtains the current topology of the cluster the gateway is part of.
+
+#### Input: TopologyRequest
+
+```protobuf
+message TopologyRequest {
+}
+```
+
+#### Output: TopologyResponse
+
+```protobuf
+message TopologyResponse {
+  // list of brokers part of this cluster
+  repeated BrokerInfo brokers = 1;
+  // how many nodes are in the cluster
+  int32 clusterSize = 2;
+  // how many partitions are spread across the cluster
+  int32 partitionsCount = 3;
+  // configured replication factor for this cluster
+  int32 replicationFactor = 4;
+}
+
+message BrokerInfo {
+  // unique (within a cluster) node ID for the broker
+  int32 nodeId = 1;
+  // hostname of the broker
+  string host = 2;
+  // port for the broker
+  int32 port = 3;
+  // list of partitions managed or replicated on this broker
+  repeated Partition partitions = 4;
+}
+
+message Partition {
+  // Describes the Raft role of the broker for a given partition
+  enum PartitionBrokerRole {
+    LEADER = 0;
+    FOLLOWER = 1;
+  }
+
+  // the unique ID of this partition
+  int32 partitionId = 1;
+  // the role of the broker for this partition
+  PartitionBrokerRole role = 3;
+}
+```
+
+#### Errors
+
+No specific errors
+
+### UpdateJobRetries RPC
+
+Updates the number of retries a job has left. This is mostly useful for jobs that have run out of
+retries, should the underlying problem be solved.
+
+#### Input: Request
+
+```protobuf
+message UpdateJobRetriesRequest {
+  // the unique job identifier, as obtained through ActivateJobs
+  int64 jobKey = 1;
+  // the new amount of retries for the job; must be positive
+  int32 retries = 2;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message UpdateJobRetriesResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no job exists with the given key
+
+##### GRPC_STATUS_INVALID_ARGUMENT
+
+Returned if:
+
+  - retries is not greater than 0
+
+
+### UpdateWorkflowInstancePayload RPC
+
+Updates all the variables in the workflow instance scope from the given JSON document.
+
+#### Input: Request
+
+```protobuf
+message UpdateWorkflowInstancePayloadRequest {
+  // the unique identifier of a particular element; can be the workflow instance key (as
+  // obtained during instance creation), or a given element, such as a service task (see
+  // elementInstanceKey on the JobHeaders message)
+  int64 elementInstanceKey = 1;
+  // the new payload as a JSON document; see CreateWorkflowInstanceRequest for the rules
+  // about payloads
+  string payload = 2;
+}
+```
+
+#### Output: Response
+
+```protobuf
+message UpdateWorkflowInstancePayloadResponse {
+}
+```
+
+#### Errors
+
+##### GRPC_STATUS_NOT_FOUND
+
+Returned if:
+
+  - no element with the given `elementInstanceKey` was exists
+
+##### GRPC_STATUS_INVALID_ARGUMENT
+
+Returned if:
+
+  - the given payload is not a valid JSON document; all payloads are expected to be
+    valid JSON documents where the root node is an object.
diff --git a/gateway-protocol/src/main/proto/gateway.proto b/gateway-protocol/src/main/proto/gateway.proto
index c023cd7..4d1786b 100644
--- a/gateway-protocol/src/main/proto/gateway.proto
+++ b/gateway-protocol/src/main/proto/gateway.proto
@@ -5,92 +5,80 @@ option java_multiple_files = false;
 option java_package = ""io.zeebe.gateway.protocol"";
 option go_package = ""pb"";
 
-message TopologyRequest {
-}
-
-message Partition {
-  int32 partitionId = 1;
-  enum PartitionBrokerRole {
-    LEADER = 0;
-    FOLLOWER = 1;
-  }
-  PartitionBrokerRole role = 3;
-}
-
-message BrokerInfo {
-  int32 nodeId = 1;
-  string host = 2;
-  int32 port = 3;
-  repeated Partition partitions = 4;
-}
-
-message TopologyResponse {
-  repeated BrokerInfo brokers = 1;
-  int32 clusterSize = 2;
-  int32 partitionsCount = 3;
-  int32 replicationFactor = 4;
-}
+// For a more complete documentation, refer to Zeebe documentation at:
+// https://docs.zeebe.io/grpc/reference.html
 
-message WorkflowRequestObject {
-  string name = 1;
-  enum ResourceType {
-    // FILE type means the gateway will try to detect the resource type using the file extension of the name
-    FILE = 0;
-    BPMN = 1;
-    YAML = 2;
-  }
-  ResourceType type = 2;
-  bytes definition = 3;
-}
-
-message DeployWorkflowRequest {
-  repeated WorkflowRequestObject workflows = 1;
+message ActivateJobsRequest {
+  // the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition
+  // type=""payment-service"" />)
+  string type = 1;
+  // the name of the worker activating the jobs, mostly used for logging purposes
+  string worker = 2;
+  // a job returned after this call will not be activated by another call until the
+  // timeout has been reached
+  int64 timeout = 3;
+  // the maximum number of jobs to fetch in a single call
+  int32 amount = 4;
+  // a list of variables to fetch as the job payload; if empty, all visible variables at
+  // the time of activation for the scope of the job will be returned as the job payload
+  repeated string fetchVariable = 5;
 }
 
-message WorkflowMetadata {
-  string bpmnProcessId = 1;
-  int32 version = 2;
-  int64 workflowKey = 3;
-  string resourceName = 4;
+message ActivateJobsResponse {
+  // list of activated jobs
+  repeated ActivatedJob jobs = 1;
 }
 
-message DeployWorkflowResponse {
+message ActivatedJob {
+  // the key, a unique identifier for the job
   int64 key = 1;
-  repeated WorkflowMetadata workflows = 2;
-}
-
-message PublishMessageRequest {
-  string name = 1;
-  string correlationKey = 2;
-  int64 timeToLive = 3;
-  string messageId = 4;
-  /* payload has to be a valid json object as string */
-  string payload = 5;
-}
-
-message PublishMessageResponse {
-}
-
-message UpdateJobRetriesRequest {
-  int64 jobKey = 1;
-  int32 retries = 2;
+  // the type of the job (should match what was requested)
+  string type = 2;
+  // a set of headers tying the job to a workflow instance/task instance
+  JobHeaders jobHeaders = 3;
+  // a set of custom headers defined during modelling; returned as a serialized
+  // JSON document
+  string customHeaders = 4;
+  // the name of the worker which activated this job
+  string worker = 5;
+  // the amount of retries left to this job (should always be positive)
+  int32 retries = 6;
+  // when the job can be activated again, sent as a UNIX epoch timestamp
+  int64 deadline = 7;
+  // JSON document, computed at activation time, consisting of all visible variables to
+  // the task scope
+  string payload = 8;
 }
 
-message UpdateJobRetriesResponse {
+message JobHeaders {
+  // the job's workflow instance key
+  int64 workflowInstanceKey = 1;
+  // the bpmn process ID of the job workflow definition
+  string bpmnProcessId = 2;
+  // the version of the job workflow definition
+  int32 workflowDefinitionVersion = 3;
+  // the key of the job workflow definition
+  int64 workflowKey = 4;
+  // the associated task element ID
+  string elementId = 5;
+  // the unique key identifying the associated task, unique within the scope of the
+  // workflow instance
+  int64 elementInstanceKey = 6;
 }
 
-message FailJobRequest {
-  int64 jobKey = 1;
-  int32 retries = 2;
-  string errorMessage = 3;
+message CancelWorkflowInstanceRequest {
+  // the workflow instance key (as, for example, obtained from
+  // CreateWorkflowInstanceResponse)
+  int64 workflowInstanceKey = 1;
 }
 
-message FailJobResponse {
+message CancelWorkflowInstanceResponse {
 }
 
 message CompleteJobRequest {
+  // the unique job identifier, as obtained from ActivateJobsResponse
   int64 jobKey = 1;
-  /* payload has to be a valid json object as string */
+  // a JSON document representing the variables in the current task scope
   string payload = 2;
 }
 
@@ -98,129 +86,385 @@ message CompleteJobResponse {
 }
 
 message CreateWorkflowInstanceRequest {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow
+  // in the DeployWorkflowResponse message)
   int64 workflowKey = 1;
+  // the BPMN process ID of the workflow definition
   string bpmnProcessId = 2;
-  /* if bpmnProcessId is set version = -1 indicates to use the latest version */
+  // the version of the process; set to -1 to use the latest version
   int32 version = 3;
-  /* payload has to be a valid json object as string */
+  // JSON document that will instantiate the variables for the root variable scope of the
+  // workflow instance; it must be a JSON object, as variables will be mapped in a
+  // key-value fashion. e.g. { ""a"": 1, ""b"": 2 } will create two variables, named ""a"" and
+  // ""b"" respectively, with their associated values. [{ ""a"": 1, ""b"": 2 }] would not be a
+  // valid payload, as the root of the JSON document is an array and not an object.
   string payload = 4;
 }
 
 message CreateWorkflowInstanceResponse {
+  // the key of the workflow definition which was used to create the workflow instance
   int64 workflowKey = 1;
+  // the BPMN process ID of the workflow definition which was used to create the workflow
+  // instance
   string bpmnProcessId = 2;
+  // the version of the workflow definition which was used to create the workflow instance
   int32 version = 3;
+  // the unique identifier of the created workflow instance; to be used wherever a request
+  // needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)
   int64 workflowInstanceKey = 5;
 }
 
-message CancelWorkflowInstanceRequest {
-  int64 workflowInstanceKey = 1;
+message DeployWorkflowRequest {
+  // List of workflow resources to deploy
+  repeated WorkflowRequestObject workflows = 1;
 }
 
-message CancelWorkflowInstanceResponse {
-}
+message WorkflowRequestObject {
+  enum ResourceType {
+    // FILE type means the gateway will try to detect the resource type
+    // using the file extension of the name field
+    FILE = 0;
+    BPMN = 1; // extension 'bpmn'
+    YAML = 2; // extension 'yaml'
+  }
 
-message UpdateWorkflowInstancePayloadRequest {
-  int64 elementInstanceKey = 1;
-  /* payload has to be a valid json object as string */
-  string payload = 2;
+  // the resource basename, e.g. myProcess.bpmn
+  string name = 1;
+  // the resource type; if set to BPMN or YAML then the file extension
+  // is ignored
+  ResourceType type = 2;
+  // the process definition as a UTF8-encoded string
+  bytes definition = 3;
 }
 
-message UpdateWorkflowInstancePayloadResponse {
+message DeployWorkflowResponse {
+  // the unique key identifying the deployment
+  int64 key = 1;
+  // a list of deployed workflows
+  repeated WorkflowMetadata workflows = 2;
 }
 
-message ListWorkflowsRequest {
-  /* optional filter by BPMN process id, if empty all workflows are returned */
+message WorkflowMetadata {
+  // the bpmn process ID, as parsed during deployment; together with the version forms a
+  // unique identifier for a specific workflow definition
   string bpmnProcessId = 1;
+  // the assigned process version
+  int32 version = 2;
+  // the assigned key, which acts as a unique identifier for this workflow
+  int64 workflowKey = 3;
+  // the resource name (see: WorkflowRequestObject.name) from which this workflow was
+  // parsed
+  string resourceName = 4;
 }
 
-message ListWorkflowsResponse {
-  repeated WorkflowMetadata workflows = 1;
+message FailJobRequest {
+  // the unique job identifier, as obtained when activating the job
+  int64 jobKey = 1;
+  // the amount of retries the job should have left
+  int32 retries = 2;
+  // an optional message describing why the job failed
+  // this is particularly useful if a job runs out of retries and an incident is raised,
+  // as it this message can help explain why an incident was raised
+  string errorMessage = 3;
+}
+
+message FailJobResponse {
 }
 
-/* either workflow key or bpmn process id and version has to be specified*/
 message GetWorkflowRequest {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow in
+  // the DeployWorkflowResponse message)
   int64 workflowKey = 1;
-  /* if bpmnProcessId is set version = -1 indicates to use the latest version */
+  // the version of the process; set to -1 to use the latest version
   int32 version = 2;
+  // the BPMN process ID of the workflow definition
   string bpmnProcessId = 3;
 }
 
 message GetWorkflowResponse {
+  // the unique key identifying the workflow definition (e.g. returned from a workflow in
+  // the DeployWorkflowResponse message)
   int64 workflowKey = 1;
+  // the version of the process
   int32 version = 2;
+  // the BPMN process ID of the workflow definition
   string bpmnProcessId = 3;
+  // the name of the resource used to deployed the workflow
   string resourceName = 4;
+  // a BPMN XML representation of the workflow
   string bpmnXml = 5;
 }
 
-message ActivateJobsRequest {
-  string type = 1;
-  string worker = 2;
-  int64 timeout = 3;
-  int32 amount = 4;
-  repeated string fetchVariable = 5;
+message ListWorkflowsRequest {
+  // optional filter: if specified, only the workflows with this given process ID will be
+  // returned
+  string bpmnProcessId = 1;
 }
 
-message JobHeaders {
-  int64 workflowInstanceKey = 1;
-  string bpmnProcessId = 2;
-  int32 workflowDefinitionVersion = 3;
-  int64 workflowKey = 4;
-  string elementId = 5;
-  int64 elementInstanceKey = 6;
+message ListWorkflowsResponse {
+  // a list of deployed workflows matching the request criteria (if any)
+  repeated WorkflowMetadata workflows = 1;
 }
 
-message ActivatedJob {
-  int64 key = 1;
-  string type = 2;
-  JobHeaders jobHeaders = 3;
-  // json object as string
-  string customHeaders = 4;
-  string worker = 5;
-  int32 retries = 6;
-  // epoch milliseconds
-  int64 deadline = 7;
-  /* json object as string */
-  string payload = 8;
+message PublishMessageRequest {
+  // the name of the message
+  string name = 1;
+  // the correlation key of the message
+  string correlationKey = 2;
+  // how long the message should be buffered on the broker, in milliseconds
+  int64 timeToLive = 3;
+  // the unique ID of the message; can be omitted. only useful to ensure only one message
+  // with the given ID will ever be published (during its lifetime)
+  string messageId = 4;
+  // the message payload as a JSON document; see CreateWorkflowInstanceRequest for the
+  // rules about payloads
+  string payload = 5;
 }
 
-message ActivateJobsResponse {
-  repeated ActivatedJob jobs = 1;
+message PublishMessageResponse {
 }
 
 message ResolveIncidentRequest {
+  // the unique ID of the incident to resolve
   int64 incidentKey = 1;
 }
 
 message ResolveIncidentResponse {
 }
 
-service Gateway {
-  rpc Topology (TopologyRequest) returns (TopologyResponse) {
-  }
-  rpc DeployWorkflow (DeployWorkflowRequest) returns (DeployWorkflowResponse) {
-  }
-  rpc PublishMessage (PublishMessageRequest) returns (PublishMessageResponse) {
+message TopologyRequest {
+}
+message TopologyResponse {
+  // list of brokers part of this cluster
+  repeated BrokerInfo brokers = 1;
+  // how many nodes are in the cluster
+  int32 clusterSize = 2;
+  // how many partitions are spread across the cluster
+  int32 partitionsCount = 3;
+  // configured replication factor for this cluster
+  int32 replicationFactor = 4;
+}
+
+message BrokerInfo {
+  // unique (within a cluster) node ID for the broker
+  int32 nodeId = 1;
+  // hostname of the broker
+  string host = 2;
+  // port for the broker
+  int32 port = 3;
+  // list of partitions managed or replicated on this broker
+  repeated Partition partitions = 4;
+}
+
+message Partition {
+  // Describes the Raft role of the broker for a given partition
+  enum PartitionBrokerRole {
+    LEADER = 0;
+    FOLLOWER = 1;
   }
-  rpc UpdateJobRetries (UpdateJobRetriesRequest) returns (UpdateJobRetriesResponse) {
+
+  // the unique ID of this partition
+  int32 partitionId = 1;
+  // the role of the broker for this partition
+  PartitionBrokerRole role = 3;
+}
+
+message UpdateJobRetriesRequest {
+  // the unique job identifier, as obtained through ActivateJobs
+  int64 jobKey = 1;
+  // the new amount of retries for the job; must be positive
+  int32 retries = 2;
+}
+
+message UpdateJobRetriesResponse {
+}
+
+message UpdateWorkflowInstancePayloadRequest {
+  // the unique identifier of a particular element; can be the workflow instance key (as
+  // obtained during instance creation), or a given element, such as a service task (see
+  // elementInstanceKey on the JobHeaders message)
+  int64 elementInstanceKey = 1;
+  // the new payload as a JSON document; see CreateWorkflowInstanceRequest for the rules
+  // about payloads
+  string payload = 2;
+}
+
+message UpdateWorkflowInstancePayloadResponse {
+}
+
+service Gateway {
+  /*
+    Iterates through all known partitions in a round-robin and activates up to the requested amount
+    of jobs and streams them back to the client as they are activated.
+
+    Errors:
+     INVALID_ARGUMENT:
+      - type is blank (empty string, null)
+      - worker is blank (empty string, null)
+      - timeout less than 1
+      - amount is less than 1
+   */
+  rpc ActivateJobs (ActivateJobsRequest) returns (stream ActivateJobsResponse) {
   }
-  rpc FailJob (FailJobRequest) returns (FailJobResponse) {
+
+  /*
+    Cancels a running workflow instance
+
+    Errors:
+      NOT_FOUND:
+        - no workflow instance exists with the given key
+   */
+  rpc CancelWorkflowInstance (CancelWorkflowInstanceRequest) returns (CancelWorkflowInstanceResponse) {
   }
+
+  /*
+    Completes a job with the given payload, which allows completing the associated service task.
+
+    Errors:
+      NOT_FOUND:
+        - no job exists with the given job key. Note that since jobs are removed once completed,
+          it could be that this job did exist at some point.
+
+      FAILED_PRECONDITION:
+        - the job was marked as failed. In that case, the related incident must be resolved before
+          the job can be activated again and completed.
+   */
   rpc CompleteJob (CompleteJobRequest) returns (CompleteJobResponse) {
   }
+
+  /*
+    Creates and starts an instance of the specified workflow. The workflow definition to use to
+    create the instance can be specified either using its unique key (as returned by
+    DeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to use the
+    latest deployed version. Note that only workflows with none start events can be started through
+    this command.
+
+    Errors:
+      NOT_FOUND:
+        - no workflow with the given key exists (if workflowKey was given)
+        - no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)
+        - no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)
+
+      FAILED_PRECONDITION:
+        - the workflow definition does not contain a none start event; only workflows with none
+          start event can be started manually.
+
+      INVALID_ARGUMENT:
+        - the given payload is not a valid JSON document; all payloads are expected to be
+          valid JSON documents where the root node is an object.
+   */
   rpc CreateWorkflowInstance (CreateWorkflowInstanceRequest) returns (CreateWorkflowInstanceResponse) {
   }
-  rpc CancelWorkflowInstance (CancelWorkflowInstanceRequest) returns (CancelWorkflowInstanceResponse) {
+
+  /*
+    Deploys one or more workflows to Zeebe. Note that this is an atomic call,
+    i.e. either all workflows are deployed, or none of them are.
+
+    Errors:
+      INVALID_ARGUMENT:
+        - no resources given.
+        - if at least one resource is invalid. A resource is considered invalid if:
+          - it is not a BPMN or YAML file (currently detected through the file extension)
+          - the resource data is not deserializable (e.g. detected as BPMN, but it's broken XML)
+          - the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)
+   */
+  rpc DeployWorkflow (DeployWorkflowRequest) returns (DeployWorkflowResponse) {
   }
-  rpc UpdateWorkflowInstancePayload (UpdateWorkflowInstancePayloadRequest) returns (UpdateWorkflowInstancePayloadResponse) {
+
+  /*
+    Marks the job as failed; if the retries argument is positive, then the job will be immediately
+    activatable again, and a worker could try again to process it. If it is zero or negative however,
+    an incident will be raised, tagged with the given errorMessage, and the job will not be
+    activatable until the incident is resolved.
+
+    Errors:
+      NOT_FOUND:
+        - no job was found with the given key
+
+      FAILED_PRECONDITION:
+        - the job was not activated
+        - the job is already in a failed state, i.e. ran out of retries
+   */
+  rpc FailJob (FailJobRequest) returns (FailJobResponse) {
   }
-  rpc ActivateJobs (ActivateJobsRequest) returns (stream ActivateJobsResponse) {
+
+  /*
+    Fetches the workflow definition either by workflow key, or BPMN process ID and version.
+    At least one of workflowKey or bpmnProcessId must be specified.
+
+    Errors:
+      NOT_FOUND:
+        - no workflow with the given key exists (if workflowKey was given)
+        - no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)
+        - no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)
+   */
+  rpc GetWorkflow (GetWorkflowRequest) returns (GetWorkflowResponse) {
   }
+
+  /*
+    Lists all workflows matching the request criteria currently deployed in the cluster.
+
+    Errors:
+      NOT_FOUND:
+        - no workflows have been deployed yet (if no bpmnProcessId was given)
+        - no workflow with the given process ID exists (if bpmnProcessId was given)
+   */
   rpc ListWorkflows (ListWorkflowsRequest) returns (ListWorkflowsResponse) {
   }
-  rpc GetWorkflow (GetWorkflowRequest) returns (GetWorkflowResponse) {
+
+  /*
+    Publishes a single message. Messages are published to specific partitions computed from their
+    correlation keys.
+
+    Errors:
+      ALREADY_EXISTS:
+        - a message with the same ID was previously published (and is still alive)
+   */
+  rpc PublishMessage (PublishMessageRequest) returns (PublishMessageResponse) {
   }
+
+  /*
+    Resolves a given incident. This simply marks the incident as resolved; most likely a call to
+    UpdateJobRetries or UpdateWorkflowInstancePayload will be necessary to actually resolve the
+    problem, following by this call.
+
+    Errors:
+      NOT_FOUND:
+        - no incident with the given key exists
+   */
   rpc ResolveIncident (ResolveIncidentRequest) returns (ResolveIncidentResponse) {
   }
+
+  /*
+    Obtains the current topology of the cluster the gateway is part of.
+   */
+  rpc Topology (TopologyRequest) returns (TopologyResponse) {
+  }
+
+  /*
+    Updates the number of retries a job has left. This is mostly useful for jobs that have run out of
+    retries, should the underlying problem be solved.
+
+    Errors:
+      NOT_FOUND:
+        - no job exists with the given key
+
+      INVALID_ARGUMENT:
+        - retries is not greater than 0
+   */
+  rpc UpdateJobRetries (UpdateJobRetriesRequest) returns (UpdateJobRetriesResponse) {
+  }
+
+  /*
+    Updates all the variables in the workflow instance scope from the given JSON document.
+
+    Errors:
+      NOT_FOUND:
+        - no element with the given elementInstanceKey exists
+      INVALID_ARGUMENT:
+        - the given payload is not a valid JSON document; all payloads are expected to be
+          valid JSON documents where the root node is an object.
+   */
+  rpc UpdateWorkflowInstancePayload (UpdateWorkflowInstancePayloadRequest) returns (UpdateWorkflowInstancePayloadResponse) {
+  }
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/message/DbMessageSubscriptionState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/message/DbMessageSubscriptionState.java
index 099832b..9587269 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/message/DbMessageSubscriptionState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/message/DbMessageSubscriptionState.java
@@ -40,7 +40,7 @@ public final class DbMessageSubscriptionState
   private final ColumnFamily<DbCompositeKey<DbLong, DbString>, MessageSubscription>
       subscriptionColumnFamily;
 
-  // (messageName, correlationKey, elementInstanceKey) => \0
+  // (tenant aware messageName, correlationKey, elementInstanceKey) => \0
   private final DbString tenantIdKey;
   private final DbString correlationKey;
   private final DbTenantAwareKey<DbCompositeKey<DbString, DbString>>

diff --git a/docs/src/java-client/get-started.md b/docs/src/java-client/get-started.md
index efd3182..f531cd0 100755
--- a/docs/src/java-client/get-started.md
+++ b/docs/src/java-client/get-started.md
@@ -262,7 +262,6 @@ public class Application
                 // ...
 
                 jobClient.newCompleteCommand(job)
-                    .withoutPayload()
                     .send()
                     .join();
             })
@@ -323,6 +322,10 @@ public class Application
     public static void main(String[] args)
     {
         // after the workflow is deployed
+        
+        final Map<String, Object> data = new HashMap<>();
+        data.put(""orderId"", 31243);
+        data.put(""orderItems"", Arrays.asList(435, 182, 376));
 
         final WorkflowInstanceEvent wfInstance = client.topicClient().workflowClient()
             .newCreateInstanceCommand()
@@ -342,15 +345,17 @@ public class Application
                 final Map<String, Object> headers = job.getCustomHeaders();
                 final String method = (String) headers.get(""method"");
 
-                final String orderId = job.getPayload();
+                final Map<String, Object> payload = job.getPayloadAsMap();
 
-                System.out.println(""Process order: "" + orderId);
+                System.out.println(""Process order: "" + payload.get(""orderId""));
                 System.out.println(""Collect money using payment method: "" + method);
 
                 // ...
 
+                payload.put(""totalPrice"", 46.50);
+
                 jobClient.newCompleteCommand(job)
-                    .payload(""{ \""totalPrice\"": 46.50 }"")
+                    .payload(payload)
                     .send()
                     .join();
             })

diff --git a/docs/events.md b/docs/events.md
index eda4cb8..5242d49 100644
--- a/docs/events.md
+++ b/docs/events.md
@@ -26,7 +26,9 @@ According to the spec, there are multiple ways to **forward a trigger**:
 - cancellation, e.g. a termination of the process instance
 - compensation, not yet available in zeebe
 
-When triggered, events can **interrupt** an active flow. The following events are able to interrupt:
+When a trigger is forwarded to an event, it has some effect in the process. Depending on the type of event, the event is activated (e.g. start event) or completed (if already active, e.g. non-boundary intermediate event) and the process execution can continue.
+
+In addition, events that had a trigger forwarded can **interrupt** an active flow. The following events are able to interrupt:
 - start event of event sub-processes, i.e. when triggered it terminates the (sub-)process encompassing the event sub-process
 - boundary event, i.e. when triggered it terminates the activity to which it is attached
 

diff --git a/benchmarks/project/release.sh b/benchmarks/project/release.sh
index 7b95c32..836cf1c 100755
--- a/benchmarks/project/release.sh
+++ b/benchmarks/project/release.sh
@@ -1,4 +1,15 @@
 #!/bin/bash -eu
+# Usage: ./release.sh [-p] VERSION
+# Example usage:
+#   $ ./release.sh 1.2.4
+# This script will build the Docker images for the worker and starter applications in this project,
+# for the given version. The `VERSION` should be the semantic version, and match the tag that you
+# want to build. The script will checkout that tag in a temporary worktree, and run the docker
+# commands from that worktree.
+#
+# By default, the script is interactive, and it will ask the user whether or not to push the images.
+# You can specify the `-p` flag to automatically push, or the environment variable PUSH=1, e.g.:
+#   $ ./release.sh -p 1.2.4
 
 WORKTREE=""$(pwd)/.release""
 function cleanup() {

diff --git a/dist/src/main/config/broker.standalone.yaml.template b/dist/src/main/config/broker.standalone.yaml.template
index aef5c41..cd7c210 100644
--- a/dist/src/main/config/broker.standalone.yaml.template
+++ b/dist/src/main/config/broker.standalone.yaml.template
@@ -518,6 +518,65 @@
       # This setting can also be overridden using the environment variable ZEEBE_BROKER_EXPERIMENTAL_ENABLEPRIORITYELECTION
       # enablePriorityElection = false;
 
+      # This setting allows you to configure how partitions are distributed amongst the node of the
+      # clusters. It currently supports to partitioning schemes: ROUND_ROBIN, and FIXED.
+      #
+      # ROUND_ROBIN is the default partitioning scheme. To enable it, set `scheme` to `ROUND_ROBIN`;
+      # not extra configuration is required. To understand how it will distribute the partitions,
+      # refer to the documentation:
+      #   https://docs.camunda.io/docs/product-manuals/zeebe/technical-concepts/partitions#partition-distribution
+      #
+      # The FIXED partitioning scheme allows users with non-traditional deployments to manual
+      # distribute the partitions across their set of brokers. This can be useful, for example, if
+      # you want to deploy a cluster across multiple data centers with some replication guarantees.
+      # See below for details on how to configure it.
+      #
+      # This setting can also be overridden using the environment variable ZEEBE_BROKER_EXPERIMENTAL_PARTITIONING
+      # partitioning:
+        # The partitioning scheme to use. Can be one of: ROUND_ROBIN, FIXED. Defaults to
+        # ROUND_ROBIN.
+        # scheme: ROUND_ROBIN
+        #
+        # The FIXED partitioning scheme configuration. This must be an exhaustive mapping of all
+        # partitions to a set of brokers. If any partitions are not configured, the broker will not
+        # start.
+        #
+        # For each partition, you must specify its partition ID (ranging from 1 to
+        # partitionCount), and the set of nodes which will manage it. This must be a subset
+        # of nodes whose IDs are valid within your cluster. This means with node IDs ranging from 0
+        # to the (clusterSize - 1), without any repeated IDs. This subset must have the same amount
+        # of nodes as the replication factor, otherwise the broker will not start.
+        #
+        # If you are using priority election, then you can also specify the priorities for each
+        # nodes. Note that for a given partition, the priorities of each member must be different,
+        # otherwise the broker will fail to start.
+        #
+        # fixed:
+        #   - partitionId: 1
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 1
+        #       - nodeId: 1
+        #         priority: 2
+        #       - nodeId: 2
+        #         priority: 3
+        #   - partitionId: 2
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 3
+        #       - nodeId: 1
+        #         priority: 2
+        #       - nodeId: 2
+        #         priority: 1
+        #   - partitionId: 3
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 2
+        #       - nodeId: 1
+        #         priority: 3
+        #       - nodeId: 2
+        #         priority: 2
+
       # Allows to configure specific raft properties
       # raft:
         # Sets the timeout for all requests send by raft leaders and followers.
diff --git a/dist/src/main/config/broker.yaml.template b/dist/src/main/config/broker.yaml.template
index b5c2dc0..21d0520 100644
--- a/dist/src/main/config/broker.yaml.template
+++ b/dist/src/main/config/broker.yaml.template
@@ -479,6 +479,65 @@
       # This setting can also be overridden using the environment variable ZEEBE_BROKER_EXPERIMENTAL_ENABLEPRIORITYELECTION
       # enablePriorityElection = false;
 
+      # This setting allows you to configure how partitions are distributed amongst the node of the
+      # clusters. It currently supports to partitioning schemes: ROUND_ROBIN, and FIXED.
+      #
+      # ROUND_ROBIN is the default partitioning scheme. To enable it, set `scheme` to `ROUND_ROBIN`;
+      # not extra configuration is required. To understand how it will distribute the partitions,
+      # refer to the documentation:
+      #   https://docs.camunda.io/docs/product-manuals/zeebe/technical-concepts/partitions#partition-distribution
+      #
+      # The FIXED partitioning scheme allows users with non-traditional deployments to manual
+      # distribute the partitions across their set of brokers. This can be useful, for example, if
+      # you want to deploy a cluster across multiple data centers with some replication guarantees.
+      # See below for details on how to configure it.
+      #
+      # This setting can also be overridden using the environment variable ZEEBE_BROKER_EXPERIMENTAL_PARTITIONING
+      # partitioning:
+        # The partitioning scheme to use. Can be one of: ROUND_ROBIN, FIXED. Defaults to
+        # ROUND_ROBIN.
+        # scheme: ROUND_ROBIN
+        #
+        # The FIXED partitioning scheme configuration. This must be an exhaustive mapping of all
+        # partitions to a set of brokers. If any partitions are not configured, the broker will not
+        # start.
+        #
+        # For each partition, you must specify its partition ID (ranging from 1 to
+        # partitionCount), and the set of nodes which will manage it. This must be a subset
+        # of nodes whose IDs are valid within your cluster. This means with node IDs ranging from 0
+        # to the (clusterSize - 1), without any repeated IDs. This subset must have the same amount
+        # of nodes as the replication factor, otherwise the broker will not start.
+        #
+        # If you are using priority election, then you can also specify the priorities for each
+        # nodes. Note that for a given partition, the priorities of each member must be different,
+        # otherwise the broker will fail to start.
+        #
+        # fixed:
+        #   - partitionId: 1
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 1
+        #       - nodeId: 1
+        #         priority: 2
+        #       - nodeId: 2
+        #         priority: 3
+        #   - partitionId: 2
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 3
+        #       - nodeId: 1
+        #         priority: 2
+        #       - nodeId: 2
+        #         priority: 1
+        #   - partitionId: 3
+        #     nodes:
+        #       - nodeId: 0
+        #         priority: 2
+        #       - nodeId: 1
+        #         priority: 3
+        #       - nodeId: 2
+        #         priority: 2
+
       # Allows to configure specific raft properties
       # raft:
         # Sets the timeout for all requests send by raft leaders and followers.

diff --git a/docs/src/go-client/get-started.md b/docs/src/go-client/get-started.md
index 7512c39..ca71b67 100755
--- a/docs/src/go-client/get-started.md
+++ b/docs/src/go-client/get-started.md
@@ -80,7 +80,7 @@ func roleToString(role pb.Partition_PartitionBrokerRole) string {
 	switch role {
 	case  pb.Partition_LEADER:
 		return ""Leader""
-	case pb.Partition_FOLLOW:
+	case pb.Partition_FOLLOWER:
 		return ""Follower""
 	default:
 		return ""Unknown""
@@ -98,7 +98,6 @@ You should see similar output:
 ```
 Broker 0.0.0.0 : 26501
   Partition 0 : Leader
-}
 ```
 
 ## Model a workflow

diff --git a/docs/src/go-client/get-started.md b/docs/src/go-client/get-started.md
index 4f4405f..a792e0e 100755
--- a/docs/src/go-client/get-started.md
+++ b/docs/src/go-client/get-started.md
@@ -199,14 +199,12 @@ workflowKey:1 bpmnProcessId:""order-process"" version:1 workflowInstanceKey:6
 
 You did it! You want to see how the workflow instance is executed?
 
-Start the Zeebe Monitor using `java -jar zeebe-simple-monitor.jar`.
+Start the Zeebe Monitor using `java -jar zeebe-simple-monitor-app-*.jar`.
 
 Open a web browser and go to <http://localhost:8080/>.
 
-Connect to the broker and switch to the workflow instances view.
-Here, you see the current state of the workflow instance which includes active jobs, completed activities, the payload and open incidents.
-
-![zeebe-monitor-step-1](/java-client/zeebe-monitor-1.png)
+Here, you see the current state of the workflow instance.
+![zeebe-monitor-step-1](/java-client/java-get-started-monitor-1.gif)
 
 
 ## Work on a task
@@ -322,7 +320,7 @@ it encounters a problem while processing the job.
 
 When you have a look at the Zeebe Monitor, then you can see that the workflow instance moved from the first service task to the next one:
 
-![zeebe-monitor-step-2](/go-client/zeebe-monitor-2.png)
+![zeebe-monitor-step-2](/java-client/java-get-started-monitor-2.gif)
 
 When you run the above example you should see similar output:
 
diff --git a/docs/src/go-client/java-get-started-monitor-1.gif b/docs/src/go-client/java-get-started-monitor-1.gif
new file mode 100644
index 0000000..b86803a
Binary files /dev/null and b/docs/src/go-client/java-get-started-monitor-1.gif differ
diff --git a/docs/src/go-client/java-get-started-monitor-2.gif b/docs/src/go-client/java-get-started-monitor-2.gif
new file mode 100644
index 0000000..8f0f2a4
Binary files /dev/null and b/docs/src/go-client/java-get-started-monitor-2.gif differ
diff --git a/docs/src/go-client/zeebe-monitor-1.png b/docs/src/go-client/zeebe-monitor-1.png
deleted file mode 100644
index 0075f3d..0000000
Binary files a/docs/src/go-client/zeebe-monitor-1.png and /dev/null differ
diff --git a/docs/src/go-client/zeebe-monitor-2.png b/docs/src/go-client/zeebe-monitor-2.png
deleted file mode 100644
index 6687bb0..0000000
Binary files a/docs/src/go-client/zeebe-monitor-2.png and /dev/null differ
diff --git a/docs/src/go-client/zeebe-monitor-3.png b/docs/src/go-client/zeebe-monitor-3.png
deleted file mode 100644
index bc15659..0000000
Binary files a/docs/src/go-client/zeebe-monitor-3.png and /dev/null differ
diff --git a/docs/src/introduction/quickstart.md b/docs/src/introduction/quickstart.md
index 70abacf..68be28b 100644
--- a/docs/src/introduction/quickstart.md
+++ b/docs/src/introduction/quickstart.md
@@ -215,7 +215,7 @@ and completed by a [job worker](/basics/job-workers.html). A job worker is a
 long living process which repeatedly tries to activate jobs for a given job
 type and completes them after executing its business logic. The `zbctl` also
 provides a command to spawn simple job workers using an external command or
-script. The job worker will receive for every job the payload as JSON object on
+script. The job worker will receive for every job the workflow instance variables as JSON object on
 `stdin` and has to return its result also as JSON object on `stdout` if it
 handled the job successfully.
 
diff --git a/docs/src/java-client/get-started.md b/docs/src/java-client/get-started.md
index 54d2208..afc1fd4 100755
--- a/docs/src/java-client/get-started.md
+++ b/docs/src/java-client/get-started.md
@@ -21,9 +21,9 @@ You will be guided through the following steps:
 * [Zeebe Modeler](https://github.com/zeebe-io/zeebe-modeler/releases)
 * [Zeebe Monitor](https://github.com/zeebe-io/zeebe-simple-monitor/releases)
 
-Before you begin to setup your project please start the broker, i.e. by running the start up script 
-`bin/broker` or `bin/broker.bat` in the distribution. Per default the broker is binding to the 
-address `localhost:26500`, which is used as contact point in this guide. In case your broker is 
+Before you begin to setup your project please start the broker, i.e. by running the start up script
+`bin/broker` or `bin/broker.bat` in the distribution. Per default the broker is binding to the
+address `localhost:26500`, which is used as contact point in this guide. In case your broker is
 available under another address please adjust the broker contact point when building the client.
 
 ## Set up a project
@@ -182,14 +182,12 @@ Workflow instance created. Key: 6
 
 You did it! You want to see how the workflow instance is executed?
 
-Start the Zeebe Monitor using `java -jar zeebe-simple-monitor.jar`.
+Start the Zeebe Monitor using `java -jar zeebe-simple-monitor-app-*.jar`.
 
 Open a web browser and go to <http://localhost:8080/>.
 
-Connect to the broker and switch to the workflow instances view.
-Here, you see the current state of the workflow instance which includes active jobs, completed activities, the payload and open incidents.
-
-![zeebe-monitor-step-1](/java-client/zeebe-monitor-1.png)
+Here, you see the current state of the workflow instance.
+![zeebe-monitor-step-1](/java-client/java-get-started-monitor-1.gif)
 
 ## Work on a job
 
@@ -205,12 +203,9 @@ Insert a few service tasks between the start and the end event.
 You need to set the type of each task, which identifies the nature of the work to be performed.
 Set the type of the first task to 'payment-service'.
 
-Optionally, you can define parameters of the task by adding headers.
-Add the header `method = VISA` to the first task.
-
 Save the BPMN diagram and switch back to the main class.
 
-Add the following lines to create a [job worker][] for the first jobs type:
+Add the following lines to create a job worker for the first jobs type:
 
 ```java
 package io.zeebe;
@@ -227,10 +222,7 @@ public class Application
             .jobType(""payment-service"")
             .handler((jobClient, job) ->
             {
-                final Map<String, Object> headers = job.getCustomHeaders();
-                final String method = (String) headers.get(""method"");
-
-                System.out.println(""Collect money using payment method: "" + method);
+                System.out.println(""Collect money"");
 
                 // ...
 
@@ -252,40 +244,29 @@ public class Application
 Run the program and verify that the job is processed. You should see the output:
 
 ```
-Collect money using payment method: VISA
+Collect money
 ```
 
 When you have a look at the Zeebe Monitor, then you can see that the workflow instance moved from the first service task to the next one:
 
-![zeebe-monitor-step-2](/java-client/zeebe-monitor-2.png)
+![zeebe-monitor-step-2](/java-client/java-get-started-monitor-2.gif)
 
 ## Work with data
 
-Usually, a workflow is more than just tasks, there is also data flow.
-The tasks need data as input and in order to produce data.
+Usually, a workflow is more than just tasks, there is also a data flow. The worker gets the data from the workflow instance to do its work and send the result back to the workflow instance.
 
-In Zeebe, the data is represented as a JSON document.
-When you create a workflow instance, then you can pass the data as payload.
-Within the workflow, you can use input and output mappings on tasks to control the data flow.
+In Zeebe, the data is stored as key-value-pairs in form of variables. Variables can be set when the workflow instance is created. Within the workflow, variables can be read and modified by workers.
 
-In our example, we want to create a workflow instance with the following data:
+In our example, we want to create a workflow instance with the following variables:
 
 ```json
-{
-  ""orderId"": 31243,
-  ""orderItems"": [435, 182, 376]
-}
+""orderId"": 31243
+""orderItems"": [435, 182, 376]
 ```
 
-The first task should take `orderId` as input and return `totalPrice` as result.
-
-Open the BPMN diagram and switch to the input-output-mappings of the first task.
-Add the input mapping `$.orderId : $.orderId` and the output mapping `$.totalPrice : $.totalPrice`.
+The first task should read `orderId` as input and return `totalPrice` as result.
 
-Save the BPMN diagram and go back to the main class.
-
-Modify the create command and pass the data as variables.
-Also, modify the job worker to read the jobs payload and complete the job with payload.
+Modify the workflow instance create command and pass the data as variables. Also, modify the job worker to read the job variables and complete the job with a result.
 
 ```java
 package io.zeebe;
@@ -313,23 +294,22 @@ public class Application
             .jobType(""payment-service"")
             .handler((jobClient, job) ->
             {
-                final Map<String, Object> headers = job.getCustomHeaders();
-                final String method = (String) headers.get(""method"");
-
-                final Map<String, Object> payload = job.getPayloadAsMap();
+                final Map<String, Object> variables = job.getVariablesAsMap();
 
-                System.out.println(""Process order: "" + payload.get(""orderId""));
-                System.out.println(""Collect money using payment method: "" + method);
+                System.out.println(""Process order: "" + variables.get(""orderId""));
+                System.out.println(""Collect money"");
 
                 // ...
 
-                payload.put(""totalPrice"", 46.50);
+                final Map<String, Object> result = new HashMap<>();
+                result.put(""totalPrice"", 46.50);
 
                 jobClient.newCompleteCommand(job.getKey())
-                    .payload(payload)
+                    .variables(result)
                     .send()
                     .join();
             })
+            .fetchVariables(""orderId"")
             .open();
 
         // ...
@@ -337,16 +317,16 @@ public class Application
 }
 ```
 
-Run the program and verify that the payload is mapped into the job. You should see the output:
+Run the program and verify that the variable is read. You should see the output:
 
 ```
-Process order: {""orderId"":31243}
-Collect money using payment method: VISA
+Process order: 31243
+Collect money
 ```
 
-When we have a look at the Zeebe Monitor, then we can see how the payload is modified after the activity:
+When we have a look at the Zeebe Monitor, then we can see that the variable `totalPrice` is set:
 
-![zeebe-monitor-step-3](/java-client/zeebe-monitor-3.png)
+![zeebe-monitor-step-3](/java-client/java-get-started-monitor-3.gif)
 
 ## What's next?
 
diff --git a/docs/src/java-client/java-get-started-monitor-1.gif b/docs/src/java-client/java-get-started-monitor-1.gif
new file mode 100644
index 0000000..b86803a
Binary files /dev/null and b/docs/src/java-client/java-get-started-monitor-1.gif differ
diff --git a/docs/src/java-client/java-get-started-monitor-2.gif b/docs/src/java-client/java-get-started-monitor-2.gif
new file mode 100644
index 0000000..8f0f2a4
Binary files /dev/null and b/docs/src/java-client/java-get-started-monitor-2.gif differ
diff --git a/docs/src/java-client/java-get-started-monitor-3.gif b/docs/src/java-client/java-get-started-monitor-3.gif
new file mode 100644
index 0000000..1f6cb56
Binary files /dev/null and b/docs/src/java-client/java-get-started-monitor-3.gif differ
diff --git a/docs/src/java-client/zeebe-monitor-1.png b/docs/src/java-client/zeebe-monitor-1.png
deleted file mode 100644
index 0075f3d..0000000
Binary files a/docs/src/java-client/zeebe-monitor-1.png and /dev/null differ
diff --git a/docs/src/java-client/zeebe-monitor-2.png b/docs/src/java-client/zeebe-monitor-2.png
deleted file mode 100644
index 6687bb0..0000000
Binary files a/docs/src/java-client/zeebe-monitor-2.png and /dev/null differ
diff --git a/docs/src/java-client/zeebe-monitor-3.png b/docs/src/java-client/zeebe-monitor-3.png
deleted file mode 100644
index bc15659..0000000
Binary files a/docs/src/java-client/zeebe-monitor-3.png and /dev/null differ

diff --git a/samples/README.md b/samples/README.md
new file mode 100644
index 0000000..708f1bf
--- /dev/null
+++ b/samples/README.md
@@ -0,0 +1,3 @@
+# Zeebe Examples
+
+The examples have been moved to https://github.com/camunda-community-hub/camunda-8-examples/tree/main/zeebe-client-plain-java

diff --git a/exporters/elasticsearch-exporter/README.md b/exporters/elasticsearch-exporter/README.md
index 6b5da46..86a1785 100644
--- a/exporters/elasticsearch-exporter/README.md
+++ b/exporters/elasticsearch-exporter/README.md
@@ -1,19 +1,20 @@
 # Zeebe Elasticsearch Exporter
 
 The Zeebe Elasticsearch Exporter acts as a bridge between
-[Zeebe](https://zeebe.io/) and [Elasticsearch](https://www.elastic.co/products/elasticsearch),
-by exporting records written to Zeebe streams as documents into several indices.
+[Zeebe](https://zeebe.io/) and [Elasticsearch](https://www.elastic.co/products/elasticsearch), by
+exporting records written to Zeebe streams as documents into several indices.
 
 ## Concept
 
-The exporter operates on the idea that it should perform as little as possible on the Zeebe side
-of things. In other words, you can think of the indexes into which the records are exported as a staging data
-warehouse: any enrichment or transformation on the exported data should be performed by your own ETL jobs.
+The exporter operates on the idea that it should perform as little as possible on the Zeebe side of
+things. In other words, you can think of the indexes into which the records are exported as a
+staging data warehouse: any enrichment or transformation on the exported data should be performed by
+your own ETL jobs.
 
 To simplify things, when configured to do so, the exporter will automatically create an index per
-record value type (see the value type in the Zeebe protocol). Each of these indexes has a corresponding
-pre-defined mapping to facilitate data ingestion for your own ETL jobs. You can find those as templates
-in this module's resources folder.
+record value type (see the value type in the Zeebe protocol). Each of these indexes has a
+corresponding pre-defined mapping to facilitate data ingestion for your own ETL jobs. You can find
+those as templates in this module's resources folder.
 
 > **Note:** the indexes are created as required, and will not be created twice if they already exist. However,
 > once disabled, they will not be deleted, that is up to the administrator. Similarly, data is never deleted by
@@ -25,141 +26,148 @@ in this module's resources folder.
 
 You can configure the Elasticsearch Exporter with the following arguments:
 
-* `url` (`string`): a valid URLs as comma-separated string (e.g. `http://localhost:9200,http://localhost:9201`)
+* `url` (`string`): a valid URLs as comma-separated string (
+  e.g. `http://localhost:9200,http://localhost:9201`)
 
 All other options fall under a two categories, both expressed as nested maps: `bulk` and `index`.
 
 ### Bulk
 
-To avoid doing too many expensive requests to the Elasticsearch cluster, the exporter
-performs batch updates by default. The size of the batch, along with how often
-it should be flushed (regardless of size) can be controlled by configuration.
+To avoid doing too many expensive requests to the Elasticsearch cluster, the exporter performs batch
+updates by default. The size of the batch, along with how often it should be flushed (regardless of
+size) can be controlled by configuration.
 
 For example:
 
 ```yaml
 ...
-  exporters:
-    elasticsearch:
-      args:
-        delay: 5
-        size: 1000
-        memoryLimit: 10485760
+exporters:
+  elasticsearch:
+    args:
+      delay: 5
+      size: 1000
+      memoryLimit: 10485760
 ```
 
-With the above example, the exporter would aggregate records and flush them to Elasticsearch
-either:
-  1. when it has aggregated 1000 records
-  2. when the batch memory size exceeds 10 MB
-  3. 5 seconds have elapsed since the last flush (regardless of how many records were aggregated)
+With the above example, the exporter would aggregate records and flush them to Elasticsearch either:
+
+1. when it has aggregated 1000 records
+2. when the batch memory size exceeds 10 MB
+3. 5 seconds have elapsed since the last flush (regardless of how many records were aggregated)
 
 More specifically, each option configures the following:
 
-* `delay` (`integer`): a specific delay, in seconds, before we force flush the current batch. This ensures
-that even when we have low traffic of records we still export every once in a while.
+* `delay` (`integer`): a specific delay, in seconds, before we force flush the current batch. This
+  ensures that even when we have low traffic of records we still export every once in a while.
 * `size` (`integer`): how many records a batch should have before we export.
 * `memoryLimit` (`integer`): the size of the bulk, in bytes, before we export.
 
 ### Index
 
-In most cases, you will not be interested in exporting every single record produced by a
-Zeebe cluster, but rather only a subset of them. This can also be configured to limit the
-kinds of records being exported (e.g. only events, no commands), and the value type of these
-records (e.g. only job and process values).
+In most cases, you will not be interested in exporting every single record produced by a Zeebe
+cluster, but rather only a subset of them. This can also be configured to limit the kinds of records
+being exported (e.g. only events, no commands), and the value type of these records (e.g. only job
+and process values).
 
 For example:
 
 ```yaml
 ...
-  exporters:
-    elasticsearch:
-      args:
-        index:
-          prefix: zeebe-record
-          createTemplate: true
-
-          command: false
-          event: true
-          rejection: false
-
-          deployment: false
-          incident: true
-          job: false
-          jobBatch: false
-          message: false
-          messageSubscription: false
-          processInstance: false
-          processMessageSubscription: false
+exporters:
+  elasticsearch:
+    args:
+      index:
+        prefix: zeebe-record
+        createTemplate: true
+
+        command: false
+        event: true
+        rejection: false
+
+        deployment: false
+        incident: true
+        job: false
+        jobBatch: false
+        message: false
+        messageSubscription: false
+        processInstance: false
+        processMessageSubscription: false
 ```
 
 The given example would only export incident events, and nothing else.
 
 More specifically, each option configures the following:
 
-* `prefix` (`string`): this prefix will be appended to every index created by the exporter; must not contain `_` (underscore).
+* `prefix` (`string`): this prefix will be appended to every index created by the exporter; must not
+  contain `_` (underscore).
 * `createTemplate` (`boolean`): if true, missing indexes will be created as needed.
 * `command` (`boolean`): if true, command records will be exported; if false, ignored.
 * `event` (`boolean`): if true, event records will be exported; if false, ignored.
 * `rejection` (`boolean`): if true, rejection records will be exported; if false, ignored.
-* `deployment` (`boolean`): if true, records related to deployments will be exported; if false, ignored.
+* `deployment` (`boolean`): if true, records related to deployments will be exported; if false,
+  ignored.
 * `incident` (`boolean`): if true, records related to incidents will be exported; if false, ignored.
 * `job` (`boolean`): if true, records related to jobs will be exported; if false, ignored.
-* `jobBatch` (`boolean`): if true, records related to job batches will be exported; if false, ignored.
+* `jobBatch` (`boolean`): if true, records related to job batches will be exported; if false,
+  ignored.
 * `message` (`boolean`): if true, records related to messages will be exported; if false, ignored.
-* `messageSubscription` (`boolean`): if true, records related to message subscriptions will be exported; if false, ignored.
-* `processInstance` (`boolean`): if true, records related to process instances will be exported; if false, ignored.
-* `processMessageSubscription` (`boolean`): if true, records related to process message subscriptions will be exported; if false, ignored.
+* `messageSubscription` (`boolean`): if true, records related to message subscriptions will be
+  exported; if false, ignored.
+* `processInstance` (`boolean`): if true, records related to process instances will be exported; if
+  false, ignored.
+* `processMessageSubscription` (`boolean`): if true, records related to process message
+  subscriptions will be exported; if false, ignored.
 
 Here is a complete, default configuration example:
 
 ```yaml
 ...
-  exporters:
-    elasticsearch:
-      # Elasticsearch Exporter ----------
-      # An example configuration for the elasticsearch exporter:
-      #
-      # These setting can also be overridden using the environment variables ""ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_...""
-      #
-
-      className: io.camunda.zeebe.exporter.ElasticsearchExporter
-
-      args:
-        # A comma separated list of URLs pointing to the Elasticsearch instances you wish to export to.
-        # For example, if you want to connect to multiple nodes for redundancy:
-        # url: http://localhost:9200,http://localhost:9201
-        url: http://localhost:9200
-
-        bulk:
-          delay: 5
-          size: 1000
-          memoryLimit: 10485760
-
-        authentication:
-          username: elastic
-          password: changeme
-
-        index:
-          prefix: zeebe-record
-          createTemplate: true
-
-          command: false
-          event: true
-          rejection: false
-
-          deployment: true
-          error: true
-          incident: true
-          job: true
-          jobBatch: false
-          message: false
-          messageSubscription: false
-          variable: true
-          variableDocument: true
-          processInstance: true
-          processInstanceCreation: false
-          processMessageSubscription: false
-
-          ignoreVariablesAbove: 32677
+exporters:
+  elasticsearch:
+    # Elasticsearch Exporter ----------
+    # An example configuration for the elasticsearch exporter:
+    #
+    # These setting can also be overridden using the environment variables ""ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_...""
+    #
+
+    className: io.camunda.zeebe.exporter.ElasticsearchExporter
+
+    args:
+      # A comma separated list of URLs pointing to the Elasticsearch instances you wish to export to.
+      # For example, if you want to connect to multiple nodes for redundancy:
+      # url: http://localhost:9200,http://localhost:9201
+      url: http://localhost:9200
+
+      bulk:
+        delay: 5
+        size: 1000
+        memoryLimit: 10485760
 
+      authentication:
+        username: elastic
+        password: changeme
+
+      index:
+        prefix: zeebe-record
+        createTemplate: true
+
+        command: false
+        event: true
+        rejection: false
+
+        deployment: false
+        process: true
+        error: true
+        incident: true
+        job: true
+        jobBatch: false
+        message: false
+        messageSubscription: false
+        variable: true
+        variableDocument: true
+        processInstance: true
+        processInstanceCreation: false
+        processMessageSubscription: false
+
+        ignoreVariablesAbove: 32677
 ```
"
camunda/zeebe,feat,"diff --git a/util/src/main/java/org/camunda/tngp/util/actor/ActorSchedulerBuilder.java b/util/src/main/java/org/camunda/tngp/util/actor/ActorSchedulerBuilder.java
new file mode 100644
index 0000000..e6647ad
--- /dev/null
+++ b/util/src/main/java/org/camunda/tngp/util/actor/ActorSchedulerBuilder.java
@@ -0,0 +1,135 @@
+/* Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.camunda.tngp.util.actor;
+
+import static org.camunda.tngp.util.EnsureUtil.*;
+
+import java.time.Duration;
+import java.util.concurrent.TimeUnit;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+import org.agrona.ErrorHandler;
+import org.agrona.concurrent.BackoffIdleStrategy;
+import org.agrona.concurrent.IdleStrategy;
+
+public final class ActorSchedulerBuilder
+{
+    private int threadCount = 1;
+    private int baseIterationsPerActor = 1;
+    private IdleStrategy runnerIdleStrategy = new BackoffIdleStrategy(100, 10, TimeUnit.MICROSECONDS.toNanos(1), TimeUnit.MILLISECONDS.toNanos(1));
+    private ErrorHandler runnerErrorHandler = Throwable::printStackTrace;
+
+    private double imbalanceRunnerThreshold = 0.25;
+    private Duration schedulerInitialBackoff = Duration.ofSeconds(1);
+    private Duration schedulerMaxBackoff = Duration.ofSeconds(5);
+
+    private Duration durationSamplePeriod = Duration.ofMillis(1);
+    private int durationSampleCount = 128;
+
+    public ActorSchedulerBuilder threadCount(int threadCount)
+    {
+        this.threadCount = threadCount;
+        return this;
+    }
+
+    public ActorSchedulerBuilder baseIterationsPerActor(int baseIterationsPerActor)
+    {
+        this.baseIterationsPerActor = baseIterationsPerActor;
+        return this;
+    }
+
+    public ActorSchedulerBuilder runnerIdleStrategy(IdleStrategy idleStrategy)
+    {
+        this.runnerIdleStrategy = idleStrategy;
+        return this;
+    }
+
+    public ActorSchedulerBuilder runnerErrorHander(ErrorHandler errorHandler)
+    {
+        this.runnerErrorHandler = errorHandler;
+        return this;
+    }
+
+    public ActorSchedulerBuilder imbalanceThreshold(double imbalanceThreshold)
+    {
+        this.imbalanceRunnerThreshold = imbalanceThreshold;
+        return this;
+    }
+
+    public ActorSchedulerBuilder schedulerInitialBackoff(Duration initialBackoff)
+    {
+        this.schedulerInitialBackoff = initialBackoff;
+        return this;
+    }
+
+    public ActorSchedulerBuilder schedulerMaxBackoff(Duration maxBackoff)
+    {
+        this.schedulerMaxBackoff = maxBackoff;
+        return this;
+    }
+
+    public ActorSchedulerBuilder durationSamplePeriod(Duration samplePeriod)
+    {
+        this.durationSamplePeriod = samplePeriod;
+        return this;
+    }
+
+    public ActorSchedulerBuilder durationSampleCount(int sampleCount)
+    {
+        this.durationSampleCount = sampleCount;
+        return this;
+    }
+
+    public ActorScheduler build()
+    {
+        ensureGreaterThan(""thread count"", threadCount, 0);
+        ensureGreaterThan(""base iterations per actor"", baseIterationsPerActor, 0);
+        ensureNotNull(""runner idle strategy"", runnerIdleStrategy);
+        ensureNotNull(""runner error handler"", runnerErrorHandler);
+        ensureNotNullOrGreaterThan(""duration sample period"", durationSamplePeriod, Duration.ofNanos(0));
+        ensureGreaterThan(""duration sample count"", durationSampleCount, 0);
+        ensureLessThanOrEqual(""imbalance threshold"", imbalanceRunnerThreshold, 1.0);
+        ensureGreaterThanOrEqual(""imbalance threshold"", imbalanceRunnerThreshold, 0.0);
+        ensureNotNullOrGreaterThan(""scheduler initial backoff"", schedulerInitialBackoff, Duration.ofNanos(0));
+        ensureNotNullOrGreaterThan(""scheduler max backoff"", schedulerMaxBackoff, schedulerInitialBackoff);
+
+        final Supplier<ActorRunner> runnerFactory = () -> new ActorRunner(baseIterationsPerActor, runnerIdleStrategy, runnerErrorHandler, durationSamplePeriod);
+        final Function<Actor, ActorReferenceImpl> actorRefFactory = task -> new ActorReferenceImpl(task, durationSampleCount);
+
+        final ActorScheduler actorScheduler;
+        if (threadCount > 1)
+        {
+            final Function<ActorRunner[], ActorSchedulerRunnable> schedulerFactory = runners -> new ActorSchedulerRunnable(runners, actorRefFactory, imbalanceRunnerThreshold, schedulerInitialBackoff, schedulerMaxBackoff);
+
+            actorScheduler = new DynamicActorSchedulerImpl(threadCount, runnerFactory, schedulerFactory);
+        }
+        else
+        {
+            actorScheduler = new SingleThreadActorScheduler(runnerFactory, actorRefFactory);
+        }
+
+        return actorScheduler;
+    }
+
+    public static ActorScheduler createDefaultScheduler()
+    {
+        return new ActorSchedulerBuilder().build();
+    }
+
+    public static ActorScheduler createDefaultScheduler(int threadCount)
+    {
+        return new ActorSchedulerBuilder().threadCount(threadCount).build();
+    }
+
+}
\ No newline at end of file
diff --git a/util/src/main/java/org/camunda/tngp/util/actor/SingleThreadActorScheduler.java b/util/src/main/java/org/camunda/tngp/util/actor/SingleThreadActorScheduler.java
new file mode 100644
index 0000000..febbd4a
--- /dev/null
+++ b/util/src/main/java/org/camunda/tngp/util/actor/SingleThreadActorScheduler.java
@@ -0,0 +1,70 @@
+/* Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.camunda.tngp.util.actor;
+
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+public class SingleThreadActorScheduler implements ActorScheduler
+{
+    private final ActorRunner runner;
+    private final Thread runnerThread;
+
+    private final Function<Actor, ActorReferenceImpl> actorRefFactory;
+
+    public SingleThreadActorScheduler(Supplier<ActorRunner> runnerFactory, Function<Actor, ActorReferenceImpl> actorRefFactory)
+    {
+        this.actorRefFactory = actorRefFactory;
+
+        this.runner = runnerFactory.get();
+        this.runnerThread = new Thread(runner, ""actor-runner"");
+
+        this.runnerThread.start();
+    }
+
+    @Override
+    public ActorReference schedule(Actor actor)
+    {
+        final ActorReferenceImpl actorRef = actorRefFactory.apply(actor);
+
+        runner.submitActor(actorRef);
+
+        return actorRef;
+    }
+
+    @Override
+    public void close()
+    {
+        runner.close();
+
+        try
+        {
+            runnerThread.join(5000);
+        }
+        catch (Exception e)
+        {
+            System.err.println(""Actor Runner did not exit within 5 second"");
+        }
+    }
+
+    @Override
+    public String toString()
+    {
+        final StringBuilder builder = new StringBuilder();
+        builder.append(""ActorScheduler [runner="");
+        builder.append(runner);
+        builder.append(""]"");
+        return builder.toString();
+    }
+
+}
diff --git a/util/src/test/java/org/camunda/tngp/util/actor/ActorSchedulerBuilderTest.java b/util/src/test/java/org/camunda/tngp/util/actor/ActorSchedulerBuilderTest.java
new file mode 100644
index 0000000..a602476
--- /dev/null
+++ b/util/src/test/java/org/camunda/tngp/util/actor/ActorSchedulerBuilderTest.java
@@ -0,0 +1,187 @@
+/* Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.camunda.tngp.util.actor;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.time.Duration;
+
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+
+public class ActorSchedulerBuilderTest
+{
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
+    @Test
+    public void shouldBuildSingleThreadSchedulerForSingleThread()
+    {
+        final ActorScheduler scheduler = ActorSchedulerBuilder.createDefaultScheduler();
+
+        assertThat(scheduler).isInstanceOf(SingleThreadActorScheduler.class);
+    }
+
+    @Test
+    public void shouldBuildDynamicThreadSchedulerForMultipleThreads()
+    {
+        final ActorScheduler scheduler = ActorSchedulerBuilder.createDefaultScheduler(2);
+
+        assertThat(scheduler).isInstanceOf(DynamicActorSchedulerImpl.class);
+    }
+
+    @Test
+    public void shouldVerifyThreadCount()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""thread count must be greater than 0"");
+
+        new ActorSchedulerBuilder()
+            .threadCount(0)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyBaseIterationsPerActor()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""base iterations per actor must be greater than 0"");
+
+        new ActorSchedulerBuilder()
+            .baseIterationsPerActor(0)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyDurationSampleCount()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""duration sample count must be greater than 0"");
+
+        new ActorSchedulerBuilder()
+            .durationSampleCount(0)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyDurationSamplePeriodNotNull()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""duration sample period must not be null"");
+
+        new ActorSchedulerBuilder()
+            .durationSamplePeriod(null)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyDurationSamplePeriodGreterThanZero()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""duration sample period must be greater than PT0S"");
+
+        new ActorSchedulerBuilder()
+            .durationSamplePeriod(Duration.ofNanos(0))
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyImbalanceThresholdLessThanOne()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""imbalance threshold must be less than or equal to 1.0"");
+
+        new ActorSchedulerBuilder()
+            .imbalanceThreshold(1.5)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyImbalanceThresholdGreaterThanZero()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""imbalance threshold must be greater than or equal to 0.0"");
+
+        new ActorSchedulerBuilder()
+            .imbalanceThreshold(-0.5)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyIdleStrategy()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""runner idle strategy must not be null"");
+
+        new ActorSchedulerBuilder()
+            .runnerIdleStrategy(null)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifyErrorHandler()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""runner error handler must not be null"");
+
+        new ActorSchedulerBuilder()
+            .runnerErrorHander(null)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifySchedulerInitialBackoffNotNull()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""scheduler initial backoff must not be null"");
+
+        new ActorSchedulerBuilder()
+            .schedulerInitialBackoff(null)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifySchedulerInitialBackoffGreterThanZero()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""scheduler initial backoff must be greater than PT0S"");
+
+        new ActorSchedulerBuilder()
+            .schedulerInitialBackoff(Duration.ofNanos(0))
+            .build();
+    }
+
+    @Test
+    public void shouldVerifySchedulerMaxBackoffNotNull()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""scheduler max backoff must not be null"");
+
+        new ActorSchedulerBuilder()
+            .schedulerMaxBackoff(null)
+            .build();
+    }
+
+    @Test
+    public void shouldVerifySchedulerMaxBackoffGreterThanInitialBackoff()
+    {
+        thrown.expect(RuntimeException.class);
+        thrown.expectMessage(""scheduler max backoff must be greater than PT10S"");
+
+        new ActorSchedulerBuilder()
+            .schedulerInitialBackoff(Duration.ofSeconds(10))
+            .schedulerMaxBackoff(Duration.ofNanos(5))
+            .build();
+    }
+}
diff --git a/util/src/test/java/org/camunda/tngp/util/actor/SingleThreadActorSchedulerTest.java b/util/src/test/java/org/camunda/tngp/util/actor/SingleThreadActorSchedulerTest.java
new file mode 100644
index 0000000..cbd13e3
--- /dev/null
+++ b/util/src/test/java/org/camunda/tngp/util/actor/SingleThreadActorSchedulerTest.java
@@ -0,0 +1,101 @@
+/* Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.camunda.tngp.util.actor;
+
+import static org.camunda.tngp.util.TestUtil.waitUntil;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.Timeout;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.mockito.stubbing.Answer;
+
+public class SingleThreadActorSchedulerTest
+{
+    private static final Actor DUMMY_ACTOR = () -> 1;
+
+    @Rule
+    public Timeout timeout = Timeout.seconds(5);
+
+    @Mock
+    private ActorRunner mockRunner;
+
+    private SingleThreadActorScheduler scheduler;
+
+    private ActorReferenceImpl[] actorRefs;
+    private AtomicInteger submittedActors;
+
+    @Before
+    public void init()
+    {
+        MockitoAnnotations.initMocks(this);
+
+        submittedActors = new AtomicInteger(0);
+
+        final Answer<Void> submitActorCallback = i ->
+        {
+            submittedActors.incrementAndGet();
+            return null;
+        };
+
+        doAnswer(submitActorCallback).when(mockRunner).submitActor(any());
+
+        scheduler = new SingleThreadActorScheduler(() -> mockRunner, t -> new ActorReferenceImpl(t, 16));
+
+        actorRefs = new ActorReferenceImpl[3];
+        for (int i = 0; i < 3; i++)
+        {
+            actorRefs[i] = new ActorReferenceImpl(DUMMY_ACTOR, 16);
+        }
+    }
+
+    @After
+    public void cleanUp()
+    {
+        scheduler.close();
+    }
+
+    @Test
+    public void shouldSubmitTasks()
+    {
+        // when
+        scheduler.schedule(DUMMY_ACTOR);
+        scheduler.schedule(DUMMY_ACTOR);
+        scheduler.schedule(DUMMY_ACTOR);
+
+        waitUntil(() -> submittedActors.get() >= 3);
+
+        // then
+        verify(mockRunner, times(3)).submitActor(any());
+    }
+
+    @Test
+    public void shouldCloseRunner()
+    {
+        // when
+        scheduler.close();
+
+        // then
+        verify(mockRunner).close();
+    }
+
+}

diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerClusterStateImpl.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerClusterStateImpl.java
index c9a74dc..972abcc 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerClusterStateImpl.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerClusterStateImpl.java
@@ -18,6 +18,7 @@ import org.agrona.collections.IntArrayList;
 
 public final class BrokerClusterStateImpl implements BrokerClusterState {
 
+  public static final int UNINITIALIZED_CLUSTER_SIZE = -1;
   private static final Long TERM_NONE = -1L;
   private final Int2IntHashMap partitionLeaders;
   private final Int2ObjectHashMap<Long> partitionLeaderTerms;
@@ -30,7 +31,7 @@ public final class BrokerClusterStateImpl implements BrokerClusterState {
   private final IntArrayList brokers;
   private final IntArrayList partitions;
   private final Random randomBroker;
-  private int clusterSize;
+  private int clusterSize = UNINITIALIZED_CLUSTER_SIZE;
   private int partitionsCount;
   private int replicationFactor;
 
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
index 51c84c9..87b5221 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
@@ -20,6 +20,9 @@ import io.camunda.zeebe.scheduler.Actor;
 import io.camunda.zeebe.scheduler.ActorSchedulingService;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
+import io.camunda.zeebe.topology.GatewayClusterTopologyService;
+import io.camunda.zeebe.topology.state.ClusterTopology;
+import io.camunda.zeebe.topology.state.MemberState.State;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
@@ -27,7 +30,9 @@ import java.util.function.Supplier;
 import org.slf4j.Logger;
 
 public final class BrokerTopologyManagerImpl extends Actor
-    implements BrokerTopologyManager, ClusterMembershipEventListener {
+    implements BrokerTopologyManager,
+        ClusterMembershipEventListener,
+        GatewayClusterTopologyService.Listener {
 
   private static final Logger LOG = Loggers.GATEWAY_LOGGER;
 
@@ -162,7 +167,13 @@ public final class BrokerTopologyManagerImpl extends Actor
   private void processProperties(
       final BrokerInfo distributedBrokerInfo, final BrokerClusterStateImpl newTopology) {
 
-    newTopology.setClusterSize(distributedBrokerInfo.getClusterSize());
+    // Do not overwrite clusterSize received from BrokerInfo. ClusterTopology received via
+    // GatewayClusterTopologyService.Listener. BrokerInfo contains the static clusterSize which is
+    // the initial clusterSize. However, we still have to initialize it because it should have the
+    // correct value even when the dynamic ClusterTopology is disabled.
+    if (newTopology.getClusterSize() == BrokerClusterStateImpl.UNINITIALIZED_CLUSTER_SIZE) {
+      newTopology.setClusterSize(distributedBrokerInfo.getClusterSize());
+    }
     newTopology.setPartitionsCount(distributedBrokerInfo.getPartitionsCount());
     newTopology.setReplicationFactor(distributedBrokerInfo.getReplicationFactor());
 
@@ -201,4 +212,27 @@ public final class BrokerTopologyManagerImpl extends Actor
           }
         });
   }
+
+  @Override
+  public void onClusterTopologyChanged(final ClusterTopology clusterTopology) {
+    actor.run(
+        () -> {
+          if (clusterTopology.isUninitialized()) {
+            return;
+          }
+
+          final BrokerClusterStateImpl newTopology = new BrokerClusterStateImpl(topology.get());
+          final var clusterSize =
+              (int)
+                  clusterTopology.members().entrySet().stream()
+                      .filter(entry -> entry.getValue().state() != State.LEFT)
+                      .count();
+
+          // Overwrite clusterSize. ClusterTopology is the source of truth.
+          newTopology.setClusterSize(clusterSize);
+
+          LOG.debug(""Received new cluster topology with clusterSize {}"", clusterSize);
+          topology.set(newTopology);
+        });
+  }
 }
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/topology/TopologyUpdateTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/topology/TopologyUpdateTest.java
index 80c94dc..3529edd 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/topology/TopologyUpdateTest.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/topology/TopologyUpdateTest.java
@@ -20,9 +20,13 @@ import io.camunda.zeebe.gateway.impl.broker.cluster.BrokerTopologyManagerImpl;
 import io.camunda.zeebe.protocol.impl.encoding.BrokerInfo;
 import io.camunda.zeebe.protocol.record.PartitionHealthStatus;
 import io.camunda.zeebe.scheduler.testing.ControlledActorSchedulerExtension;
+import io.camunda.zeebe.topology.state.ClusterTopology;
+import io.camunda.zeebe.topology.state.MemberState;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
+import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -380,6 +384,46 @@ final class TopologyUpdateTest {
         .contains(brokerId);
   }
 
+  @Test
+  void shouldUpdateClusterSizeFromClusterTopology() {
+    // given
+    final BrokerInfo broker = createBroker(1);
+    notifyEvent(createMemberAddedEvent(broker));
+
+    assertThat(topologyManager.getTopology().getClusterSize()).isEqualTo(3);
+
+    // when
+    final ClusterTopology clusterTopologyWithTwoBrokers =
+        ClusterTopology.init()
+            .addMember(MemberId.from(""1""), MemberState.initializeAsActive(Map.of()))
+            .addMember(MemberId.from(""2""), MemberState.initializeAsActive(Map.of()));
+    topologyManager.onClusterTopologyChanged(clusterTopologyWithTwoBrokers);
+    actorSchedulerRule.workUntilDone();
+
+    // then
+    Awaitility.await()
+        .untilAsserted(
+            () -> assertThat(topologyManager.getTopology().getClusterSize()).isEqualTo(2));
+  }
+
+  @Test
+  void shouldNotOverwriteClusterSizeFromBrokerInfo() {
+    // given
+    final ClusterTopology clusterTopologyWithTwoBrokers =
+        ClusterTopology.init()
+            .addMember(MemberId.from(""1""), MemberState.initializeAsActive(Map.of()))
+            .addMember(MemberId.from(""2""), MemberState.initializeAsActive(Map.of()));
+    topologyManager.onClusterTopologyChanged(clusterTopologyWithTwoBrokers);
+    actorSchedulerRule.workUntilDone();
+
+    // when
+    final BrokerInfo broker = createBroker(1);
+    notifyEvent(createMemberAddedEvent(broker));
+
+    // then
+    assertThat(topologyManager.getTopology().getClusterSize()).isEqualTo(2);
+  }
+
   private void addTopologyListener(final RecordingTopologyListener listener) {
     topologyManager.addTopologyListener(listener);
     actorSchedulerRule.workUntilDone();

diff --git a/test-util/pom.xml b/test-util/pom.xml
index a097651..b6518ee 100644
--- a/test-util/pom.xml
+++ b/test-util/pom.xml
@@ -20,6 +20,7 @@
     <project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
     <!-- TODO: Move to common parent -->
     <agrona.version>0.4.11</agrona.version>
+    <camunda.version>7.6.0-SNAPSHOT</camunda.version>
   </properties>
 
   <dependencies>
@@ -30,6 +31,13 @@
       <version>${agrona.version}</version>
       <scope>provided</scope>
     </dependency>
+    
+    <dependency>
+      <groupId>org.camunda.bpm.model</groupId>
+      <artifactId>camunda-bpmn-model</artifactId>
+      <version>${camunda.version}</version>
+      <scope>provided</scope>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/test-util/src/main/java/org/camunda/tngp/broker/test/util/BufferAssert.java b/test-util/src/main/java/org/camunda/tngp/broker/test/util/BufferAssert.java
index 37e3a6f..b8d9b26 100644
--- a/test-util/src/main/java/org/camunda/tngp/broker/test/util/BufferAssert.java
+++ b/test-util/src/main/java/org/camunda/tngp/broker/test/util/BufferAssert.java
@@ -14,7 +14,7 @@ public class BufferAssert extends AbstractAssert<BufferAssert, DirectBuffer>
         super(actual, BufferAssert.class);
     }
 
-    public static BufferAssert assertThat(DirectBuffer buffer)
+    public static BufferAssert assertThatBuffer(DirectBuffer buffer)
     {
         return new BufferAssert(buffer);
     }
@@ -41,4 +41,16 @@ public class BufferAssert extends AbstractAssert<BufferAssert, DirectBuffer>
         return hasBytes(expected, 0);
     }
 
+    public BufferAssert hasCapacity(int expectedCapacity)
+    {
+        isNotNull();
+
+        if (expectedCapacity != actual.capacity())
+        {
+            failWithMessage(""Expected capacity "" + expectedCapacity + "" but was "" + actual.capacity());
+        }
+
+        return this;
+    }
+
 }
diff --git a/test-util/src/main/java/org/camunda/tngp/broker/test/util/bpmn/TngpModelInstance.java b/test-util/src/main/java/org/camunda/tngp/broker/test/util/bpmn/TngpModelInstance.java
new file mode 100644
index 0000000..6f0d134
--- /dev/null
+++ b/test-util/src/main/java/org/camunda/tngp/broker/test/util/bpmn/TngpModelInstance.java
@@ -0,0 +1,121 @@
+package org.camunda.tngp.broker.test.util.bpmn;
+
+import java.util.Collection;
+
+import org.camunda.bpm.model.bpmn.BpmnModelInstance;
+import org.camunda.bpm.model.bpmn.impl.BpmnModelConstants;
+import org.camunda.bpm.model.bpmn.instance.Definitions;
+import org.camunda.bpm.model.xml.Model;
+import org.camunda.bpm.model.xml.instance.DomDocument;
+import org.camunda.bpm.model.xml.instance.ModelElementInstance;
+import org.camunda.bpm.model.xml.type.ModelElementType;
+import org.camunda.bpm.model.xml.validation.ModelElementValidator;
+import org.camunda.bpm.model.xml.validation.ValidationResults;
+
+public class TngpModelInstance implements BpmnModelInstance
+{
+    protected BpmnModelInstance wrappedInstance;
+
+    public TngpModelInstance(BpmnModelInstance wrappedInstance)
+    {
+        this.wrappedInstance = wrappedInstance;
+    }
+
+    @Override
+    public DomDocument getDocument()
+    {
+        return wrappedInstance.getDocument();
+    }
+
+    @Override
+    public ModelElementInstance getDocumentElement()
+    {
+        return wrappedInstance.getDocumentElement();
+    }
+
+    @Override
+    public void setDocumentElement(ModelElementInstance documentElement)
+    {
+        wrappedInstance.setDocumentElement(documentElement);
+    }
+
+    @Override
+    public <T extends ModelElementInstance> T newInstance(Class<T> type)
+    {
+        return wrappedInstance.newInstance(type);
+    }
+
+    @Override
+    public <T extends ModelElementInstance> T newInstance(ModelElementType type)
+    {
+        return wrappedInstance.newInstance(type);
+    }
+
+    @Override
+    public Model getModel()
+    {
+        return wrappedInstance.getModel();
+    }
+
+    @Override
+    public <T extends ModelElementInstance> T getModelElementById(String id)
+    {
+        return wrappedInstance.getModelElementById(id);
+    }
+
+    @Override
+    public Collection<ModelElementInstance> getModelElementsByType(ModelElementType referencingType)
+    {
+        return wrappedInstance.getModelElementsByType(referencingType);
+    }
+
+    @Override
+    public <T extends ModelElementInstance> Collection<T> getModelElementsByType(Class<T> referencingClass)
+    {
+        return wrappedInstance.getModelElementsByType(referencingClass);
+    }
+
+    @Override
+    public ValidationResults validate(Collection<ModelElementValidator<?>> validators)
+    {
+        return wrappedInstance.validate(validators);
+    }
+
+    @Override
+    public BpmnModelInstance clone()
+    {
+        return wrappedInstance.clone();
+    }
+
+    @Override
+    public Definitions getDefinitions()
+    {
+        return wrappedInstance.getDefinitions();
+    }
+
+    @Override
+    public void setDefinitions(Definitions arg0)
+    {
+        wrappedInstance.setDefinitions(arg0);
+    }
+
+    public TngpModelInstance taskAttributes(String taskId, String taskType, int taskQueueId)
+    {
+        final ModelElementInstance task = wrappedInstance.getModelElementById(taskId);
+
+        task.setAttributeValueNs(BpmnModelConstants.CAMUNDA_NS, ""taskType"", taskType);
+        task.setAttributeValueNs(BpmnModelConstants.CAMUNDA_NS, ""taskQueueId"", String.valueOf(taskQueueId));
+
+        return this;
+    }
+
+    public static TngpModelInstance wrap(BpmnModelInstance modelInstance)
+    {
+        return new TngpModelInstance(modelInstance);
+    }
+
+    public static TngpModelInstance wrapCopy(BpmnModelInstance modelInstance)
+    {
+        return new TngpModelInstance(modelInstance.clone());
+    }
+}

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
index 5dd5cc7..cf3a98a 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
@@ -12,29 +12,44 @@ import static io.camunda.zeebe.util.EnsureUtil.ensureNotNullOrEmpty;
 
 import io.camunda.zeebe.engine.processing.bpmn.BpmnElementContext;
 import io.camunda.zeebe.engine.processing.bpmn.BpmnElementProcessor;
-import io.camunda.zeebe.engine.processing.bpmn.BpmnProcessingException;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnBehaviors;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnEventPublicationBehavior;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnIncidentBehavior;
+import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnJobBehavior;
+import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnStateBehavior;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnStateTransitionBehavior;
+import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnVariableMappingBehavior;
+import io.camunda.zeebe.engine.processing.common.ExpressionProcessor;
 import io.camunda.zeebe.engine.processing.common.Failure;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableEndEvent;
-import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.engine.processing.deployment.model.element.JobWorkerProperties;
 import io.camunda.zeebe.util.Either;
 import io.camunda.zeebe.util.collection.Tuple;
 
 public final class EndEventProcessor implements BpmnElementProcessor<ExecutableEndEvent> {
-  private static final String TRANSITION_TO_COMPLETED_PRECONDITION_ERROR =
-      ""Expected to transition element to completed, but state is not ELEMENT_ACTIVATING"";
+
+  private final NoneEndEventBehavior noneEndEventBehavior = new NoneEndEventBehavior();
+  private final ErrorEndEventBehavior errorEndEventBehavior = new ErrorEndEventBehavior();
+  private final MessageEndEventBehavior messageEndEventBehavior = new MessageEndEventBehavior();
 
   private final BpmnEventPublicationBehavior eventPublicationBehavior;
   private final BpmnIncidentBehavior incidentBehavior;
   private final BpmnStateTransitionBehavior stateTransitionBehavior;
 
+  private final ExpressionProcessor expressionBehavior;
+  private final BpmnStateBehavior stateBehavior;
+  private final BpmnVariableMappingBehavior variableMappingBehavior;
+  private final BpmnJobBehavior jobBehavior;
+
   public EndEventProcessor(final BpmnBehaviors bpmnBehaviors) {
     eventPublicationBehavior = bpmnBehaviors.eventPublicationBehavior();
     incidentBehavior = bpmnBehaviors.incidentBehavior();
     stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();
+
+    expressionBehavior = bpmnBehaviors.expressionBehavior();
+    stateBehavior = bpmnBehaviors.stateBehavior();
+    variableMappingBehavior = bpmnBehaviors.variableMappingBehavior();
+    jobBehavior = bpmnBehaviors.jobBehavior();
   }
 
   @Override
@@ -44,50 +59,147 @@ public final class EndEventProcessor implements BpmnElementProcessor<ExecutableE
 
   @Override
   public void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating) {
-    if (!element.hasError()) {
-      transitionUntilCompleted(element, activating).ifLeft(incidentBehavior::createIncident);
-      return;
-    }
+    eventBehaviorOf(element).onActivate(element, activating);
+  }
 
-    final var error = element.getError();
-    ensureNotNull(""error"", error);
-
-    final var errorCode = error.getErrorCode();
-    ensureNotNullOrEmpty(""errorCode"", errorCode);
-
-    // the error must be caught at the parent or an upper scope (e.g. interrupting boundary event or
-    // event sub process). This is also why we don't have to transition to the completing state here
-    eventPublicationBehavior
-        .findErrorCatchEvent(errorCode, activating)
-        .ifRightOrLeft(
-            catchEvent -> {
-              stateTransitionBehavior.transitionToActivated(activating);
-              eventPublicationBehavior.throwErrorEvent(catchEvent);
-            },
-            failure -> incidentBehavior.createIncident(failure, activating));
+  @Override
+  public void onComplete(final ExecutableEndEvent element, final BpmnElementContext context) {
+    eventBehaviorOf(element).onComplete(element, context);
   }
 
   @Override
   public void onTerminate(final ExecutableEndEvent element, final BpmnElementContext terminating) {
+    eventBehaviorOf(element).onTerminate(element, terminating);
+
+    // common behavior for all end events
     incidentBehavior.resolveIncidents(terminating);
 
     final var terminated = stateTransitionBehavior.transitionToTerminated(terminating);
     stateTransitionBehavior.onElementTerminated(element, terminated);
   }
 
-  // there's some duplication here with ExclusiveGatewayProcessor where we want to short circuit and
-  // go directly from activated -> completed, which could be dry'd up
-  // TODO(npepinpe): candidate for clean up for https://github.com/camunda-cloud/zeebe/issues/6202
-  private Either<Tuple<Failure, BpmnElementContext>, BpmnElementContext> transitionUntilCompleted(
-      final ExecutableEndEvent element, final BpmnElementContext activating) {
-    if (activating.getIntent() != ProcessInstanceIntent.ELEMENT_ACTIVATING) {
-      throw new BpmnProcessingException(activating, TRANSITION_TO_COMPLETED_PRECONDITION_ERROR);
+  private EndEventBehavior eventBehaviorOf(final ExecutableEndEvent element) {
+    if (element.hasError()) {
+      return errorEndEventBehavior;
+    } else if (element.getJobWorkerProperties() != null) {
+      return messageEndEventBehavior;
+    } else {
+      return noneEndEventBehavior;
     }
+  }
+
+  /** Extract different behaviors depending on the type of event. */
+  private interface EndEventBehavior {
+    void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating);
 
-    final var activated = stateTransitionBehavior.transitionToActivated(activating);
-    final var completing = stateTransitionBehavior.transitionToCompleting(activated);
-    return stateTransitionBehavior
-        .transitionToCompleted(element, completing)
-        .mapLeft(failure -> new Tuple<>(failure, completing));
+    default void onComplete(
+        final ExecutableEndEvent element, final BpmnElementContext completing) {}
+
+    default void onTerminate(
+        final ExecutableEndEvent element, final BpmnElementContext terminating) {}
+  }
+
+  private class NoneEndEventBehavior implements EndEventBehavior {
+
+    @Override
+    public void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating) {
+      transitionUntilCompleted(element, activating).ifLeft(incidentBehavior::createIncident);
+    }
+
+    // there's some duplication here with ExclusiveGatewayProcessor where we want to short circuit
+    // and
+    // go directly from activated -> completed, which could be dry'd up
+    // TODO(npepinpe): candidate for clean up for https://github.com/camunda-cloud/zeebe/issues/6202
+    private Either<Tuple<Failure, BpmnElementContext>, BpmnElementContext> transitionUntilCompleted(
+        final ExecutableEndEvent element, final BpmnElementContext activating) {
+
+      final var activated = stateTransitionBehavior.transitionToActivated(activating);
+      final var completing = stateTransitionBehavior.transitionToCompleting(activated);
+      return stateTransitionBehavior
+          .transitionToCompleted(element, completing)
+          .mapLeft(failure -> new Tuple<>(failure, completing));
+    }
+  }
+
+  private class ErrorEndEventBehavior implements EndEventBehavior {
+
+    @Override
+    public void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating) {
+      final var error = element.getError();
+      ensureNotNull(""error"", error);
+
+      final var errorCode = error.getErrorCode();
+      ensureNotNullOrEmpty(""errorCode"", errorCode);
+
+      // the error must be caught at the parent or an upper scope (e.g. interrupting boundary event
+      // or
+      // event sub process). This is also why we don't have to transition to the completing state
+      // here
+      eventPublicationBehavior
+          .findErrorCatchEvent(errorCode, activating)
+          .ifRightOrLeft(
+              catchEvent -> {
+                stateTransitionBehavior.transitionToActivated(activating);
+                eventPublicationBehavior.throwErrorEvent(catchEvent);
+              },
+              failure -> incidentBehavior.createIncident(failure, activating));
+    }
+  }
+
+  private class MessageEndEventBehavior implements EndEventBehavior {
+
+    @Override
+    public void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating) {
+      variableMappingBehavior
+          .applyInputMappings(activating, element)
+          .flatMap(ok -> evaluateJobExpressions(element.getJobWorkerProperties(), activating))
+          .ifRightOrLeft(
+              jobTypeAndRetries -> {
+                jobBehavior.createNewJob(
+                    activating,
+                    element,
+                    jobTypeAndRetries.getLeft(),
+                    jobTypeAndRetries.getRight().intValue());
+                stateTransitionBehavior.transitionToActivated(activating);
+              },
+              failure -> incidentBehavior.createIncident(failure, activating));
+    }
+
+    private Either<Failure, Tuple<String, Long>> evaluateJobExpressions(
+        final JobWorkerProperties jobWorkerProperties, final BpmnElementContext context) {
+      final var scopeKey = context.getElementInstanceKey();
+
+      return expressionBehavior
+          .evaluateStringExpression(jobWorkerProperties.getType(), scopeKey)
+          .flatMap(
+              jobType ->
+                  expressionBehavior
+                      .evaluateLongExpression(jobWorkerProperties.getRetries(), scopeKey)
+                      .map(retries -> new Tuple<>(jobType, retries)));
+    }
+
+    @Override
+    public void onComplete(final ExecutableEndEvent element, final BpmnElementContext completing) {
+      variableMappingBehavior
+          .applyOutputMappings(completing, element)
+          .flatMap(ok -> stateTransitionBehavior.transitionToCompleted(element, completing))
+          .ifRightOrLeft(
+              completed -> stateTransitionBehavior.takeOutgoingSequenceFlows(element, completed),
+              failure -> incidentBehavior.createIncident(failure, completing));
+    }
+
+    @Override
+    public void onTerminate(
+        final ExecutableEndEvent element, final BpmnElementContext terminating) {
+
+      if (element.getJobWorkerProperties() != null) {
+        final var elementInstance = stateBehavior.getElementInstance(terminating);
+        final long jobKey = elementInstance.getJobKey();
+        if (jobKey > 0) {
+          jobBehavior.cancelJob(jobKey);
+          incidentBehavior.resolveJobIncident(jobKey);
+        }
+      }
+    }
   }
 }
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerElementTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerElementTest.java
new file mode 100644
index 0000000..c2eb324
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerElementTest.java
@@ -0,0 +1,259 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.bpmn.activity;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
+
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilder;
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilderProvider;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.model.bpmn.builder.ZeebeJobWorkerElementBuilder;
+import io.camunda.zeebe.protocol.record.Assertions;
+import io.camunda.zeebe.protocol.record.Record;
+import io.camunda.zeebe.protocol.record.RecordType;
+import io.camunda.zeebe.protocol.record.intent.JobIntent;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.intent.VariableIntent;
+import io.camunda.zeebe.protocol.record.value.BpmnElementType;
+import io.camunda.zeebe.protocol.record.value.JobRecordValue;
+import io.camunda.zeebe.protocol.record.value.ProcessInstanceRecordValue;
+import io.camunda.zeebe.test.util.record.RecordingExporter;
+import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameter;
+import org.junit.runners.Parameterized.Parameters;
+
+/**
+ * Verifies the behavior of elements that are based on jobs and should be processed by job workers.
+ * For example, service tasks.
+ */
+@RunWith(Parameterized.class)
+public final class JobWorkerElementTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  private static final String PROCESS_ID = ""process"";
+
+  @Rule
+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =
+      new RecordingExporterTestWatcher();
+
+  @Parameter public JobWorkerElementBuilder elementBuilder;
+
+  @Parameters(name = ""{0}"")
+  public static Collection<Object[]> parameters() {
+    return JobWorkerElementBuilderProvider.buildersAsParameters();
+  }
+
+  private BpmnModelInstance process(
+      final Consumer<ZeebeJobWorkerElementBuilder<?>> elementModifier) {
+    final var processBuilder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent();
+
+    final var jobWorkerElementBuilder = elementBuilder.build(processBuilder, elementModifier);
+    return jobWorkerElementBuilder.id(""task"").done();
+  }
+
+  @Test
+  public void shouldActivateTask() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobType(""test""))).deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    // then
+    assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(processInstanceKey)
+                .withElementType(elementBuilder.getElementType())
+                .limit(3))
+        .extracting(Record::getRecordType, Record::getIntent)
+        .containsSequence(
+            tuple(RecordType.COMMAND, ProcessInstanceIntent.ACTIVATE_ELEMENT),
+            tuple(RecordType.EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(RecordType.EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATED));
+
+    final Record<ProcessInstanceRecordValue> taskActivating =
+        RecordingExporter.processInstanceRecords()
+            .withProcessInstanceKey(processInstanceKey)
+            .withIntent(ProcessInstanceIntent.ELEMENT_ACTIVATING)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    Assertions.assertThat(taskActivating.getValue())
+        .hasElementId(""task"")
+        .hasBpmnElementType(elementBuilder.getElementType())
+        .hasFlowScopeKey(processInstanceKey)
+        .hasBpmnProcessId(""process"")
+        .hasProcessInstanceKey(processInstanceKey);
+  }
+
+  @Test
+  public void shouldCreateJob() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(process(t -> t.zeebeJobType(""test"").zeebeJobRetries(""5"")))
+        .deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    // then
+    final Record<ProcessInstanceRecordValue> taskActivated =
+        RecordingExporter.processInstanceRecords()
+            .withProcessInstanceKey(processInstanceKey)
+            .withIntent(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    final Record<JobRecordValue> jobCreated =
+        RecordingExporter.jobRecords(JobIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(jobCreated.getValue())
+        .hasType(""test"")
+        .hasRetries(5)
+        .hasElementInstanceKey(taskActivated.getKey())
+        .hasElementId(taskActivated.getValue().getElementId())
+        .hasProcessDefinitionKey(taskActivated.getValue().getProcessDefinitionKey())
+        .hasBpmnProcessId(taskActivated.getValue().getBpmnProcessId())
+        .hasProcessDefinitionVersion(taskActivated.getValue().getVersion());
+  }
+
+  @Test
+  public void shouldCreateJobWithCustomHeaders() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            process(
+                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""a"", ""b"").zeebeTaskHeader(""c"", ""d"")))
+        .deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    // then
+    final Record<JobRecordValue> jobCreated =
+        RecordingExporter.jobRecords(JobIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    final Map<String, String> customHeaders = jobCreated.getValue().getCustomHeaders();
+    assertThat(customHeaders).hasSize(2).containsEntry(""a"", ""b"").containsEntry(""c"", ""d"");
+  }
+
+  @Test
+  public void shouldCreateJobWithVariables() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            process(t -> t.zeebeInputExpression(""x"", ""y"").zeebeJobType(""taskWithVariables"")))
+        .deploy();
+
+    // when
+    final long processInstanceKey =
+        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""x"", 1).create();
+
+    // then
+    final var variableCreated =
+        RecordingExporter.variableRecords(VariableIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .withName(""y"")
+            .getFirst();
+
+    Assertions.assertThat(variableCreated.getValue()).hasValue(""1"");
+
+    RecordingExporter.jobRecords(JobIntent.CREATED)
+        .withProcessInstanceKey(processInstanceKey)
+        .await();
+
+    final List<JobRecordValue> activatedJobs =
+        ENGINE.jobs().withType(""taskWithVariables"").activate().getValue().getJobs();
+
+    assertThat(activatedJobs)
+        .hasSize(1)
+        .allSatisfy(
+            job -> assertThat(job.getVariables()).containsEntry(""x"", 1).containsEntry(""y"", 1));
+  }
+
+  @Test
+  public void shouldCompleteTask() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobType(""test""))).deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    ENGINE.job().ofInstance(processInstanceKey).withType(""test"").complete();
+
+    // then
+    assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(processInstanceKey)
+                .limitToProcessInstanceCompleted())
+        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSubsequence(
+            tuple(elementBuilder.getElementType(), ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(elementBuilder.getElementType(), ProcessInstanceIntent.ELEMENT_COMPLETED),
+            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
+  }
+
+  @Test
+  public void shouldCreateJobWithJobTypeExpression() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""type""))).deploy();
+
+    // when
+    final long processInstanceKey =
+        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""type"", ""test"").create();
+
+    // then
+    final Record<JobRecordValue> jobCreated =
+        RecordingExporter.jobRecords(JobIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(jobCreated.getValue()).hasType(""test"");
+  }
+
+  @Test
+  public void shouldCreateJobWithJobRetriesExpression() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(process(t -> t.zeebeJobType(""test"").zeebeJobRetriesExpression(""retries"")))
+        .deploy();
+
+    // when
+    final long processInstanceKey =
+        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""retries"", 8).create();
+
+    // then
+    final Record<JobRecordValue> jobCreated =
+        RecordingExporter.jobRecords(JobIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(jobCreated.getValue()).hasRetries(8);
+  }
+}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerTaskTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerTaskTest.java
deleted file mode 100644
index 124b9f0..0000000
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/JobWorkerTaskTest.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.bpmn.activity;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.tuple;
-
-import io.camunda.zeebe.engine.util.EngineRule;
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilder;
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilderProvider;
-import io.camunda.zeebe.model.bpmn.Bpmn;
-import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
-import io.camunda.zeebe.model.bpmn.builder.AbstractJobWorkerTaskBuilder;
-import io.camunda.zeebe.protocol.record.Assertions;
-import io.camunda.zeebe.protocol.record.Record;
-import io.camunda.zeebe.protocol.record.RecordType;
-import io.camunda.zeebe.protocol.record.intent.JobIntent;
-import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
-import io.camunda.zeebe.protocol.record.intent.VariableIntent;
-import io.camunda.zeebe.protocol.record.value.BpmnElementType;
-import io.camunda.zeebe.protocol.record.value.JobRecordValue;
-import io.camunda.zeebe.protocol.record.value.ProcessInstanceRecordValue;
-import io.camunda.zeebe.test.util.record.RecordingExporter;
-import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
-import java.util.Collection;
-import java.util.List;
-import java.util.Map;
-import java.util.function.Consumer;
-import org.junit.ClassRule;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-/**
- * Verifies the behavior of tasks that are based on jobs and should be processed by job workers. For
- * example, service tasks.
- */
-@RunWith(Parameterized.class)
-public final class JobWorkerTaskTest {
-
-  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
-
-  private static final String PROCESS_ID = ""process"";
-
-  @Rule
-  public final RecordingExporterTestWatcher recordingExporterTestWatcher =
-      new RecordingExporterTestWatcher();
-
-  @Parameter public JobWorkerTaskBuilder taskBuilder;
-
-  @Parameters(name = ""{0}"")
-  public static Collection<Object[]> parameters() {
-    return JobWorkerTaskBuilderProvider.buildersAsParameters();
-  }
-
-  private BpmnModelInstance process(
-      final Consumer<AbstractJobWorkerTaskBuilder<?, ?>> taskModifier) {
-    final var processBuilder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent();
-
-    final var jobWorkerTaskBuilder = taskBuilder.build(processBuilder).id(""task"");
-    taskModifier.accept(jobWorkerTaskBuilder);
-
-    return jobWorkerTaskBuilder.endEvent().done();
-  }
-
-  @Test
-  public void shouldActivateTask() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobType(""test""))).deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    // then
-    assertThat(
-            RecordingExporter.processInstanceRecords()
-                .withProcessInstanceKey(processInstanceKey)
-                .withElementType(taskBuilder.getTaskType())
-                .limit(3))
-        .extracting(Record::getRecordType, Record::getIntent)
-        .containsSequence(
-            tuple(RecordType.COMMAND, ProcessInstanceIntent.ACTIVATE_ELEMENT),
-            tuple(RecordType.EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATING),
-            tuple(RecordType.EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATED));
-
-    final Record<ProcessInstanceRecordValue> taskActivating =
-        RecordingExporter.processInstanceRecords()
-            .withProcessInstanceKey(processInstanceKey)
-            .withIntent(ProcessInstanceIntent.ELEMENT_ACTIVATING)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    Assertions.assertThat(taskActivating.getValue())
-        .hasElementId(""task"")
-        .hasBpmnElementType(taskBuilder.getTaskType())
-        .hasFlowScopeKey(processInstanceKey)
-        .hasBpmnProcessId(""process"")
-        .hasProcessInstanceKey(processInstanceKey);
-  }
-
-  @Test
-  public void shouldCreateJob() {
-    // given
-    ENGINE
-        .deployment()
-        .withXmlResource(process(t -> t.zeebeJobType(""test"").zeebeJobRetries(""5"")))
-        .deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    // then
-    final Record<ProcessInstanceRecordValue> taskActivated =
-        RecordingExporter.processInstanceRecords()
-            .withProcessInstanceKey(processInstanceKey)
-            .withIntent(ProcessInstanceIntent.ELEMENT_ACTIVATED)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    final Record<JobRecordValue> jobCreated =
-        RecordingExporter.jobRecords(JobIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(jobCreated.getValue())
-        .hasType(""test"")
-        .hasRetries(5)
-        .hasElementInstanceKey(taskActivated.getKey())
-        .hasElementId(taskActivated.getValue().getElementId())
-        .hasProcessDefinitionKey(taskActivated.getValue().getProcessDefinitionKey())
-        .hasBpmnProcessId(taskActivated.getValue().getBpmnProcessId())
-        .hasProcessDefinitionVersion(taskActivated.getValue().getVersion());
-  }
-
-  @Test
-  public void shouldCreateJobWithCustomHeaders() {
-    // given
-    ENGINE
-        .deployment()
-        .withXmlResource(
-            process(
-                t -> t.zeebeJobType(""test"").zeebeTaskHeader(""a"", ""b"").zeebeTaskHeader(""c"", ""d"")))
-        .deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    // then
-    final Record<JobRecordValue> jobCreated =
-        RecordingExporter.jobRecords(JobIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    final Map<String, String> customHeaders = jobCreated.getValue().getCustomHeaders();
-    assertThat(customHeaders).hasSize(2).containsEntry(""a"", ""b"").containsEntry(""c"", ""d"");
-  }
-
-  @Test
-  public void shouldCreateJobWithVariables() {
-    // given
-    ENGINE
-        .deployment()
-        .withXmlResource(
-            process(t -> t.zeebeJobType(""taskWithVariables"").zeebeInputExpression(""x"", ""y"")))
-        .deploy();
-
-    // when
-    final long processInstanceKey =
-        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""x"", 1).create();
-
-    // then
-    final var variableCreated =
-        RecordingExporter.variableRecords(VariableIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .withName(""y"")
-            .getFirst();
-
-    Assertions.assertThat(variableCreated.getValue()).hasValue(""1"");
-
-    RecordingExporter.jobRecords(JobIntent.CREATED)
-        .withProcessInstanceKey(processInstanceKey)
-        .await();
-
-    final List<JobRecordValue> activatedJobs =
-        ENGINE.jobs().withType(""taskWithVariables"").activate().getValue().getJobs();
-
-    assertThat(activatedJobs)
-        .hasSize(1)
-        .allSatisfy(
-            job -> assertThat(job.getVariables()).containsEntry(""x"", 1).containsEntry(""y"", 1));
-  }
-
-  @Test
-  public void shouldCompleteTask() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobType(""test""))).deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    ENGINE.job().ofInstance(processInstanceKey).withType(""test"").complete();
-
-    // then
-    assertThat(
-            RecordingExporter.processInstanceRecords()
-                .withProcessInstanceKey(processInstanceKey)
-                .limitToProcessInstanceCompleted())
-        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
-        .containsSubsequence(
-            tuple(taskBuilder.getTaskType(), ProcessInstanceIntent.ELEMENT_COMPLETING),
-            tuple(taskBuilder.getTaskType(), ProcessInstanceIntent.ELEMENT_COMPLETED),
-            tuple(BpmnElementType.SEQUENCE_FLOW, ProcessInstanceIntent.SEQUENCE_FLOW_TAKEN),
-            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
-  }
-
-  @Test
-  public void shouldCreateJobWithJobTypeExpression() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""type""))).deploy();
-
-    // when
-    final long processInstanceKey =
-        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""type"", ""test"").create();
-
-    // then
-    final Record<JobRecordValue> jobCreated =
-        RecordingExporter.jobRecords(JobIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(jobCreated.getValue()).hasType(""test"");
-  }
-
-  @Test
-  public void shouldCreateJobWithJobRetriesExpression() {
-    // given
-    ENGINE
-        .deployment()
-        .withXmlResource(process(t -> t.zeebeJobType(""test"").zeebeJobRetriesExpression(""retries"")))
-        .deploy();
-
-    // when
-    final long processInstanceKey =
-        ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).withVariable(""retries"", 8).create();
-
-    // then
-    final Record<JobRecordValue> jobCreated =
-        RecordingExporter.jobRecords(JobIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(jobCreated.getValue()).hasRetries(8);
-  }
-}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerElementValidationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerElementValidationTest.java
new file mode 100644
index 0000000..335ae99
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerElementValidationTest.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.deployment.model.validation;
+
+import static io.camunda.zeebe.engine.processing.deployment.model.validation.ExpectedValidationResult.expect;
+
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilder;
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilderProvider;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.model.bpmn.builder.ZeebeJobWorkerElementBuilder;
+import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeTaskDefinition;
+import java.util.function.Consumer;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ArgumentsSource;
+
+public class JobWorkerElementValidationTest {
+
+  @ParameterizedTest
+  @ArgumentsSource(JobWorkerElementBuilderProvider.class)
+  @DisplayName(""element with invalid job type expression"")
+  void invalidJobTypeExpression(final JobWorkerElementBuilder elementBuilder) {
+
+    final var process =
+        processWithElement(elementBuilder, element -> element.zeebeJobTypeExpression(""invalid!""));
+
+    ProcessValidationUtil.validateProcess(
+        process, expect(ZeebeTaskDefinition.class, ""failed to parse expression 'invalid!'""));
+  }
+
+  @ParameterizedTest
+  @ArgumentsSource(JobWorkerElementBuilderProvider.class)
+  @DisplayName(""element with invalid job retries expression"")
+  void invalidJobRetriesExpression(final JobWorkerElementBuilder elementBuilder) {
+
+    final var process =
+        processWithElement(
+            elementBuilder,
+            element -> element.zeebeJobType(""task"").zeebeJobRetriesExpression(""invalid!""));
+
+    ProcessValidationUtil.validateProcess(
+        process, expect(ZeebeTaskDefinition.class, ""failed to parse expression 'invalid!'""));
+  }
+
+  private BpmnModelInstance processWithElement(
+      final JobWorkerElementBuilder elementBuilder,
+      final Consumer<ZeebeJobWorkerElementBuilder<?>> taskModifier) {
+
+    final var processBuilder = Bpmn.createExecutableProcess(""process"").startEvent();
+    final var jobWorkerElementBuilder = elementBuilder.build(processBuilder, taskModifier);
+    return jobWorkerElementBuilder.done();
+  }
+}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerTaskValidationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerTaskValidationTest.java
deleted file mode 100644
index 2a2e693..0000000
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/JobWorkerTaskValidationTest.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.deployment.model.validation;
-
-import static io.camunda.zeebe.engine.processing.deployment.model.validation.ExpectedValidationResult.expect;
-
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilder;
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilderProvider;
-import io.camunda.zeebe.model.bpmn.Bpmn;
-import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
-import io.camunda.zeebe.model.bpmn.builder.AbstractJobWorkerTaskBuilder;
-import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeTaskDefinition;
-import java.util.function.Consumer;
-import org.junit.jupiter.api.DisplayName;
-import org.junit.jupiter.params.ParameterizedTest;
-import org.junit.jupiter.params.provider.ArgumentsSource;
-
-public class JobWorkerTaskValidationTest {
-
-  @ParameterizedTest
-  @ArgumentsSource(JobWorkerTaskBuilderProvider.class)
-  @DisplayName(""task with invalid job type expression"")
-  void invalidJobTypeExpression(final JobWorkerTaskBuilder taskBuilder) {
-
-    final var process =
-        processWithTask(taskBuilder, task -> task.zeebeJobTypeExpression(""invalid!""));
-
-    ProcessValidationUtil.validateProcess(
-        process, expect(ZeebeTaskDefinition.class, ""failed to parse expression 'invalid!'""));
-  }
-
-  @ParameterizedTest
-  @ArgumentsSource(JobWorkerTaskBuilderProvider.class)
-  @DisplayName(""task with invalid job retries expression"")
-  void invalidJobRetriesExpression(final JobWorkerTaskBuilder taskBuilder) {
-
-    final var process =
-        processWithTask(
-            taskBuilder, task -> task.zeebeJobType(""task"").zeebeJobRetriesExpression(""invalid!""));
-
-    ProcessValidationUtil.validateProcess(
-        process, expect(ZeebeTaskDefinition.class, ""failed to parse expression 'invalid!'""));
-  }
-
-  private BpmnModelInstance processWithTask(
-      final JobWorkerTaskBuilder taskBuilder,
-      final Consumer<AbstractJobWorkerTaskBuilder<?, ?>> taskModifier) {
-
-    final var processBuilder = Bpmn.createExecutableProcess(""process"").startEvent();
-    final var jobWorkerTaskBuilder = taskBuilder.build(processBuilder);
-    taskModifier.accept(jobWorkerTaskBuilder);
-    return jobWorkerTaskBuilder.endEvent().done();
-  }
-}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerElementIncidentTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerElementIncidentTest.java
new file mode 100644
index 0000000..7643cd4
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerElementIncidentTest.java
@@ -0,0 +1,338 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.incident;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.entry;
+
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilder;
+import io.camunda.zeebe.engine.util.JobWorkerElementBuilderProvider;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.model.bpmn.builder.ZeebeJobWorkerElementBuilder;
+import io.camunda.zeebe.protocol.record.Assertions;
+import io.camunda.zeebe.protocol.record.Record;
+import io.camunda.zeebe.protocol.record.intent.IncidentIntent;
+import io.camunda.zeebe.protocol.record.intent.JobIntent;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.value.ErrorType;
+import io.camunda.zeebe.test.util.collection.Maps;
+import io.camunda.zeebe.test.util.record.RecordingExporter;
+import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
+import java.util.Collection;
+import java.util.function.Consumer;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameter;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public class JobWorkerElementIncidentTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  private static final String PROCESS_ID = ""process"";
+  private static final String TASK_ELEMENT_ID = ""task"";
+
+  @Rule
+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =
+      new RecordingExporterTestWatcher();
+
+  @Parameter public JobWorkerElementBuilder elementBuilder;
+
+  @Parameters(name = ""{0}"")
+  public static Collection<Object[]> parameters() {
+    return JobWorkerElementBuilderProvider.buildersAsParameters();
+  }
+
+  private BpmnModelInstance process(
+      final Consumer<ZeebeJobWorkerElementBuilder<?>> elementModifier) {
+    final var processBuilder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent();
+
+    // default job type, can be overridden by elementModifier
+    final var jobWorkerElementBuilder =
+        elementBuilder.build(
+            processBuilder, element -> elementModifier.accept(element.zeebeJobType(""test"")));
+
+    return jobWorkerElementBuilder.id(""task"").done();
+  }
+
+  // ----- JobType related tests
+  // --------------------------------------------------------------------------
+
+  @Test
+  public void shouldCreateIncidentIfJobTypeExpressionEvaluationFailed() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var recordThatLeadsToIncident =
+        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
+            .withProcessInstanceKey(processInstanceKey)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    // then
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(incidentCreated.getValue())
+        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
+        .hasErrorMessage(""failed to evaluate expression 'x': no variable found for name 'x'"")
+        .hasElementId(TASK_ELEMENT_ID)
+        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
+        .hasJobKey(-1L)
+        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
+  }
+
+  @Test
+  public void shouldCreateIncidentIfJobTypeExpressionOfInvalidType() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""false""))).deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var recordThatLeadsToIncident =
+        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
+            .withProcessInstanceKey(processInstanceKey)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    // then
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(incidentCreated.getValue())
+        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
+        .hasErrorMessage(
+            ""Expected result of the expression 'false' to be 'STRING', but was 'BOOLEAN'."")
+        .hasElementId(TASK_ELEMENT_ID)
+        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
+        .hasJobKey(-1L)
+        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
+  }
+
+  @Test
+  public void shouldResolveIncidentAfterJobTypeExpressionEvaluationFailed() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
+
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    // when
+
+    // ... update state to resolve issue
+    ENGINE
+        .variables()
+        .ofScope(incidentCreated.getValue().getElementInstanceKey())
+        .withDocument(Maps.of(entry(""x"", ""test"")))
+        .update();
+
+    // ... resolve incident
+    final var incidentResolved =
+        ENGINE
+            .incident()
+            .ofInstance(processInstanceKey)
+            .withKey(incidentCreated.getKey())
+            .resolve();
+
+    // then
+    assertThat(
+            RecordingExporter.jobRecords(JobIntent.CREATED)
+                .withProcessInstanceKey(processInstanceKey)
+                .withElementId(TASK_ELEMENT_ID)
+                .exists())
+        .isTrue();
+
+    assertThat(incidentResolved.getKey()).isEqualTo(incidentCreated.getKey());
+  }
+
+  // ----- JobRetries related tests
+  // --------------------------------------------------------------------------
+
+  @Test
+  public void shouldCreateIncidentIfJobRetriesExpressionEvaluationFailed() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobRetriesExpression(""x""))).deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var recordThatLeadsToIncident =
+        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
+            .withProcessInstanceKey(processInstanceKey)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    // then
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(incidentCreated.getValue())
+        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
+        .hasErrorMessage(""failed to evaluate expression 'x': no variable found for name 'x'"")
+        .hasElementId(TASK_ELEMENT_ID)
+        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
+        .hasJobKey(-1L)
+        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
+  }
+
+  @Test
+  public void shouldCreateIncidentIfJobRetriesExpressionOfInvalidType() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(process(t -> t.zeebeJobRetriesExpression(""false"")))
+        .deploy();
+
+    // when
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var recordThatLeadsToIncident =
+        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
+            .withProcessInstanceKey(processInstanceKey)
+            .withElementType(elementBuilder.getElementType())
+            .getFirst();
+
+    // then
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    Assertions.assertThat(incidentCreated.getValue())
+        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
+        .hasErrorMessage(
+            ""Expected result of the expression 'false' to be 'NUMBER', but was 'BOOLEAN'."")
+        .hasElementId(TASK_ELEMENT_ID)
+        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
+        .hasJobKey(-1L)
+        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
+  }
+
+  @Test
+  public void shouldResolveIncidentAfterJobRetriesExpressionEvaluationFailed() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobRetriesExpression(""x""))).deploy();
+
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    // when
+
+    // ... update state to resolve issue
+    ENGINE
+        .variables()
+        .ofScope(incidentCreated.getValue().getElementInstanceKey())
+        .withDocument(Maps.of(entry(""x"", 3)))
+        .update();
+
+    // ... resolve incident
+    final var incidentResolved =
+        ENGINE
+            .incident()
+            .ofInstance(processInstanceKey)
+            .withKey(incidentCreated.getKey())
+            .resolve();
+
+    // then
+    assertThat(
+            RecordingExporter.jobRecords(JobIntent.CREATED)
+                .withProcessInstanceKey(processInstanceKey)
+                .withElementId(TASK_ELEMENT_ID)
+                .exists())
+        .isTrue();
+
+    assertThat(incidentResolved.getKey()).isEqualTo(incidentCreated.getKey());
+  }
+
+  @Test
+  public void shouldResolveIncidentAndCreateNewIncidentWhenContinuationFails() {
+    // given a deployed process with a service task with an input expression
+    ENGINE
+        .deployment()
+        .withXmlResource(process(t -> t.zeebeInputExpression(""unknown_var"", ""input"")))
+        .deploy();
+
+    // and an instance of that process is created without a variable for the input expression
+    final var processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    // and an incident created
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    // when we try to resolve the incident
+    ENGINE.incident().ofInstance(processInstanceKey).withKey(incidentCreated.getKey()).resolve();
+
+    // then
+    assertThat(
+            RecordingExporter.incidentRecords(IncidentIntent.RESOLVED)
+                .withProcessInstanceKey(processInstanceKey)
+                .withRecordKey(incidentCreated.getKey())
+                .exists())
+        .describedAs(""original incident is resolved"")
+        .isTrue();
+
+    assertThat(
+            RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+                .withProcessInstanceKey(processInstanceKey)
+                .filter(i -> i.getKey() != incidentCreated.getKey())
+                .exists())
+        .describedAs(""a new incident is created"")
+        .isTrue();
+  }
+
+  @Test
+  public void shouldResolveIncidentIfTaskIsTerminated() {
+    // given
+    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
+
+    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+
+    final var incidentCreated =
+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .getFirst();
+
+    // when
+    ENGINE.processInstance().withInstanceKey(processInstanceKey).cancel();
+
+    // then
+    assertThat(
+            RecordingExporter.records()
+                .limitToProcessInstance(processInstanceKey)
+                .incidentRecords()
+                .withRecordKey(incidentCreated.getKey()))
+        .extracting(Record::getIntent)
+        .containsExactly(IncidentIntent.CREATED, IncidentIntent.RESOLVED);
+  }
+}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerTaskIncidentTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerTaskIncidentTest.java
deleted file mode 100644
index 6a4076c..0000000
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/JobWorkerTaskIncidentTest.java
+++ /dev/null
@@ -1,338 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.incident;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.entry;
-
-import io.camunda.zeebe.engine.util.EngineRule;
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilder;
-import io.camunda.zeebe.engine.util.JobWorkerTaskBuilderProvider;
-import io.camunda.zeebe.model.bpmn.Bpmn;
-import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
-import io.camunda.zeebe.model.bpmn.builder.AbstractJobWorkerTaskBuilder;
-import io.camunda.zeebe.protocol.record.Assertions;
-import io.camunda.zeebe.protocol.record.Record;
-import io.camunda.zeebe.protocol.record.intent.IncidentIntent;
-import io.camunda.zeebe.protocol.record.intent.JobIntent;
-import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
-import io.camunda.zeebe.protocol.record.value.ErrorType;
-import io.camunda.zeebe.test.util.collection.Maps;
-import io.camunda.zeebe.test.util.record.RecordingExporter;
-import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
-import java.util.Collection;
-import java.util.function.Consumer;
-import org.junit.ClassRule;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class JobWorkerTaskIncidentTest {
-
-  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
-
-  private static final String PROCESS_ID = ""process"";
-  private static final String TASK_ELEMENT_ID = ""task"";
-
-  @Rule
-  public final RecordingExporterTestWatcher recordingExporterTestWatcher =
-      new RecordingExporterTestWatcher();
-
-  @Parameter public JobWorkerTaskBuilder taskBuilder;
-
-  @Parameters(name = ""{0}"")
-  public static Collection<Object[]> parameters() {
-    return JobWorkerTaskBuilderProvider.buildersAsParameters();
-  }
-
-  private BpmnModelInstance process(
-      final Consumer<AbstractJobWorkerTaskBuilder<?, ?>> taskModifier) {
-    final var processBuilder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent();
-
-    // default job type, can be overridden by taskModifier
-    final var jobWorkerTaskBuilder =
-        taskBuilder.build(processBuilder).id(""task"").zeebeJobType(""test"");
-    taskModifier.accept(jobWorkerTaskBuilder);
-
-    return jobWorkerTaskBuilder.endEvent().done();
-  }
-
-  // ----- JobType related tests
-  // --------------------------------------------------------------------------
-
-  @Test
-  public void shouldCreateIncidentIfJobTypeExpressionEvaluationFailed() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var recordThatLeadsToIncident =
-        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
-            .withProcessInstanceKey(processInstanceKey)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    // then
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(incidentCreated.getValue())
-        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
-        .hasErrorMessage(""failed to evaluate expression 'x': no variable found for name 'x'"")
-        .hasElementId(TASK_ELEMENT_ID)
-        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
-        .hasJobKey(-1L)
-        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
-  }
-
-  @Test
-  public void shouldCreateIncidentIfJobTypeExpressionOfInvalidType() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""false""))).deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var recordThatLeadsToIncident =
-        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
-            .withProcessInstanceKey(processInstanceKey)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    // then
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(incidentCreated.getValue())
-        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
-        .hasErrorMessage(
-            ""Expected result of the expression 'false' to be 'STRING', but was 'BOOLEAN'."")
-        .hasElementId(TASK_ELEMENT_ID)
-        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
-        .hasJobKey(-1L)
-        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
-  }
-
-  @Test
-  public void shouldResolveIncidentAfterJobTypeExpressionEvaluationFailed() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
-
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    // when
-
-    // ... update state to resolve issue
-    ENGINE
-        .variables()
-        .ofScope(incidentCreated.getValue().getElementInstanceKey())
-        .withDocument(Maps.of(entry(""x"", ""test"")))
-        .update();
-
-    // ... resolve incident
-    final var incidentResolved =
-        ENGINE
-            .incident()
-            .ofInstance(processInstanceKey)
-            .withKey(incidentCreated.getKey())
-            .resolve();
-
-    // then
-    assertThat(
-            RecordingExporter.jobRecords(JobIntent.CREATED)
-                .withProcessInstanceKey(processInstanceKey)
-                .withElementId(TASK_ELEMENT_ID)
-                .exists())
-        .isTrue();
-
-    assertThat(incidentResolved.getKey()).isEqualTo(incidentCreated.getKey());
-  }
-
-  // ----- JobRetries related tests
-  // --------------------------------------------------------------------------
-
-  @Test
-  public void shouldCreateIncidentIfJobRetriesExpressionEvaluationFailed() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobRetriesExpression(""x""))).deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var recordThatLeadsToIncident =
-        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
-            .withProcessInstanceKey(processInstanceKey)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    // then
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(incidentCreated.getValue())
-        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
-        .hasErrorMessage(""failed to evaluate expression 'x': no variable found for name 'x'"")
-        .hasElementId(TASK_ELEMENT_ID)
-        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
-        .hasJobKey(-1L)
-        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
-  }
-
-  @Test
-  public void shouldCreateIncidentIfJobRetriesExpressionOfInvalidType() {
-    // given
-    ENGINE
-        .deployment()
-        .withXmlResource(process(t -> t.zeebeJobRetriesExpression(""false"")))
-        .deploy();
-
-    // when
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var recordThatLeadsToIncident =
-        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATING)
-            .withProcessInstanceKey(processInstanceKey)
-            .withElementType(taskBuilder.getTaskType())
-            .getFirst();
-
-    // then
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    Assertions.assertThat(incidentCreated.getValue())
-        .hasErrorType(ErrorType.EXTRACT_VALUE_ERROR)
-        .hasErrorMessage(
-            ""Expected result of the expression 'false' to be 'NUMBER', but was 'BOOLEAN'."")
-        .hasElementId(TASK_ELEMENT_ID)
-        .hasElementInstanceKey(recordThatLeadsToIncident.getKey())
-        .hasJobKey(-1L)
-        .hasVariableScopeKey(recordThatLeadsToIncident.getKey());
-  }
-
-  @Test
-  public void shouldResolveIncidentAfterJobRetriesExpressionEvaluationFailed() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobRetriesExpression(""x""))).deploy();
-
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    // when
-
-    // ... update state to resolve issue
-    ENGINE
-        .variables()
-        .ofScope(incidentCreated.getValue().getElementInstanceKey())
-        .withDocument(Maps.of(entry(""x"", 3)))
-        .update();
-
-    // ... resolve incident
-    final var incidentResolved =
-        ENGINE
-            .incident()
-            .ofInstance(processInstanceKey)
-            .withKey(incidentCreated.getKey())
-            .resolve();
-
-    // then
-    assertThat(
-            RecordingExporter.jobRecords(JobIntent.CREATED)
-                .withProcessInstanceKey(processInstanceKey)
-                .withElementId(TASK_ELEMENT_ID)
-                .exists())
-        .isTrue();
-
-    assertThat(incidentResolved.getKey()).isEqualTo(incidentCreated.getKey());
-  }
-
-  @Test
-  public void shouldResolveIncidentAndCreateNewIncidentWhenContinuationFails() {
-    // given a deployed process with a service task with an input expression
-    ENGINE
-        .deployment()
-        .withXmlResource(process(t -> t.zeebeInputExpression(""unknown_var"", ""input"")))
-        .deploy();
-
-    // and an instance of that process is created without a variable for the input expression
-    final var processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    // and an incident created
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    // when we try to resolve the incident
-    ENGINE.incident().ofInstance(processInstanceKey).withKey(incidentCreated.getKey()).resolve();
-
-    // then
-    assertThat(
-            RecordingExporter.incidentRecords(IncidentIntent.RESOLVED)
-                .withProcessInstanceKey(processInstanceKey)
-                .withRecordKey(incidentCreated.getKey())
-                .exists())
-        .describedAs(""original incident is resolved"")
-        .isTrue();
-
-    assertThat(
-            RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-                .withProcessInstanceKey(processInstanceKey)
-                .filter(i -> i.getKey() != incidentCreated.getKey())
-                .exists())
-        .describedAs(""a new incident is created"")
-        .isTrue();
-  }
-
-  @Test
-  public void shouldResolveIncidentIfTaskIsTerminated() {
-    // given
-    ENGINE.deployment().withXmlResource(process(t -> t.zeebeJobTypeExpression(""x""))).deploy();
-
-    final long processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
-
-    final var incidentCreated =
-        RecordingExporter.incidentRecords(IncidentIntent.CREATED)
-            .withProcessInstanceKey(processInstanceKey)
-            .getFirst();
-
-    // when
-    ENGINE.processInstance().withInstanceKey(processInstanceKey).cancel();
-
-    // then
-    assertThat(
-            RecordingExporter.records()
-                .limitToProcessInstance(processInstanceKey)
-                .incidentRecords()
-                .withRecordKey(incidentCreated.getKey()))
-        .extracting(Record::getIntent)
-        .containsExactly(IncidentIntent.CREATED, IncidentIntent.RESOLVED);
-  }
-}

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java b/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
index a524554..61e1512 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
@@ -17,6 +17,7 @@ import io.camunda.zeebe.topology.state.ClusterTopology;
 import io.camunda.zeebe.topology.state.PartitionState;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.MemberJoinOperation;
+import io.camunda.zeebe.topology.state.TopologyChangeOperation.MemberLeaveOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.PartitionChangeOperation.PartitionJoinOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.PartitionChangeOperation.PartitionLeaveOperation;
 import java.util.Map;
@@ -206,6 +207,8 @@ public class ProtoBufSerializer implements ClusterTopologySerializer {
               .setPartitionId(leaveOperation.partitionId()));
     } else if (operation instanceof MemberJoinOperation) {
       builder.setMemberJoin(Topology.MemberJoinOperation.newBuilder().build());
+    } else if (operation instanceof MemberLeaveOperation) {
+      builder.setMemberLeave(Topology.MemberLeaveOperation.newBuilder().build());
     } else {
       throw new IllegalArgumentException(
           ""Unknown operation type: "" + operation.getClass().getSimpleName());
@@ -235,6 +238,8 @@ public class ProtoBufSerializer implements ClusterTopologySerializer {
           topologyChangeOperation.getPartitionLeave().getPartitionId());
     } else if (topologyChangeOperation.hasMemberJoin()) {
       return new MemberJoinOperation(MemberId.from(topologyChangeOperation.getMemberId()));
+    } else if (topologyChangeOperation.hasMemberLeave()) {
+      return new MemberLeaveOperation(MemberId.from(topologyChangeOperation.getMemberId()));
     } else {
       // If the node does not know of a type, the exception thrown will prevent
       // ClusterTopologyGossiper from processing the incoming topology. This helps to prevent any
diff --git a/topology/src/main/resources/proto/topology.proto b/topology/src/main/resources/proto/topology.proto
index 8e8d7f9..a56df7a 100644
--- a/topology/src/main/resources/proto/topology.proto
+++ b/topology/src/main/resources/proto/topology.proto
@@ -36,6 +36,7 @@ message TopologyChangeOperation {
     PartitionJoinOperation partitionJoin = 2;
     PartitionLeaveOperation partitionLeave = 3;
     MemberJoinOperation memberJoin = 4;
+    MemberLeaveOperation memberLeave = 5;
   }
 }
 
@@ -50,6 +51,8 @@ message PartitionLeaveOperation {
 
 message MemberJoinOperation {}
 
+message MemberLeaveOperation {}
+
 enum State {
   UNKNOWN = 0;
   JOINING = 1;

diff --git a/dist/pom.xml b/dist/pom.xml
index 87bff4e..b636e3a 100644
--- a/dist/pom.xml
+++ b/dist/pom.xml
@@ -49,6 +49,11 @@
     </dependency>
 
     <dependency>
+      <groupId>io.prometheus</groupId>
+      <artifactId>simpleclient_httpserver</artifactId>
+    </dependency>
+
+    <dependency>
       <groupId>org.slf4j</groupId>
       <artifactId>slf4j-api</artifactId>
     </dependency>
@@ -63,7 +68,6 @@
       <artifactId>log4j-core</artifactId>
     </dependency>
   </dependencies>
-
   <build>
     <plugins>
       <plugin>
diff --git a/dist/src/main/config/gateway.cfg.toml b/dist/src/main/config/gateway.cfg.toml
index 4012002..9fc559f 100644
--- a/dist/src/main/config/gateway.cfg.toml
+++ b/dist/src/main/config/gateway.cfg.toml
@@ -36,7 +36,7 @@
 # This setting can also be overridden using the environment variable ZEEBE_GATEWAY_HOST.
 # host = ""0.0.0.0""
 #
-# Sets the port the embedded gateway binds to
+# Sets the port the gateway binds to
 # This setting can also be overridden using the environment variable ZEEBE_GATEWAY_PORT.
 # port = 26500
 
@@ -73,3 +73,10 @@
 # Sets the number of threads the gateway will use to communicate with the broker cluster
 # This setting can also be overridden using the environment variable ZEEBE_GATEWAY_MANAGEMENT_THREADS.
 # managementThreads = 1
+
+[monitoring]
+# Sets the host the monitoring binds to
+# host = ""0.0.0.0""
+#
+# Sets the port the monitoring binds to
+# port = 9600
diff --git a/dist/src/main/java/io/zeebe/gateway/StandaloneGateway.java b/dist/src/main/java/io/zeebe/gateway/StandaloneGateway.java
index 5030f51..dffae7d 100644
--- a/dist/src/main/java/io/zeebe/gateway/StandaloneGateway.java
+++ b/dist/src/main/java/io/zeebe/gateway/StandaloneGateway.java
@@ -18,6 +18,7 @@ package io.zeebe.gateway;
 import io.atomix.cluster.AtomixCluster;
 import io.atomix.cluster.discovery.BootstrapDiscoveryProvider;
 import io.atomix.utils.net.Address;
+import io.prometheus.client.exporter.HTTPServer;
 import io.zeebe.gateway.impl.configuration.ClusterCfg;
 import io.zeebe.gateway.impl.configuration.GatewayCfg;
 import io.zeebe.util.TomlConfigurationReader;
@@ -28,10 +29,12 @@ public class StandaloneGateway {
 
   private final AtomixCluster atomixCluster;
   private final Gateway gateway;
+  private final GatewayCfg gatewayCfg;
 
   public StandaloneGateway(GatewayCfg gatewayCfg) {
     atomixCluster = createAtomixCluster(gatewayCfg.getCluster());
     gateway = new Gateway(gatewayCfg, atomixCluster);
+    this.gatewayCfg = gatewayCfg;
   }
 
   private AtomixCluster createAtomixCluster(ClusterCfg clusterCfg) {
@@ -52,8 +55,19 @@ public class StandaloneGateway {
   }
 
   public void run() throws IOException, InterruptedException {
+    HTTPServer monitoringServer = null;
+    if (gatewayCfg.getMonitoring().isEnabled()) {
+      monitoringServer =
+          new HTTPServer(
+              gatewayCfg.getMonitoring().getHost(), gatewayCfg.getMonitoring().getPort());
+    }
+
     gateway.listenAndServe();
     atomixCluster.stop();
+
+    if (monitoringServer != null) {
+      monitoringServer.stop();
+    }
   }
 
   public static void main(String args[]) throws Exception {
diff --git a/gateway/pom.xml b/gateway/pom.xml
index de782f5..164018e 100644
--- a/gateway/pom.xml
+++ b/gateway/pom.xml
@@ -1,4 +1,6 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
 
   <modelVersion>4.0.0</modelVersion>
   <name>Zeebe Gateway</name>
@@ -105,6 +107,11 @@
     </dependency>
 
     <dependency>
+      <groupId>me.dinowernli</groupId>
+      <artifactId>java-grpc-prometheus</artifactId>
+    </dependency>
+
+    <dependency>
       <groupId>io.zeebe</groupId>
       <artifactId>zeebe-protocol-test-util</artifactId>
       <scope>test</scope>
diff --git a/gateway/src/main/java/io/zeebe/gateway/Gateway.java b/gateway/src/main/java/io/zeebe/gateway/Gateway.java
index b48c67c..3f73223 100644
--- a/gateway/src/main/java/io/zeebe/gateway/Gateway.java
+++ b/gateway/src/main/java/io/zeebe/gateway/Gateway.java
@@ -18,6 +18,7 @@ package io.zeebe.gateway;
 import io.atomix.cluster.AtomixCluster;
 import io.grpc.Server;
 import io.grpc.ServerBuilder;
+import io.grpc.ServerInterceptors;
 import io.grpc.netty.NettyServerBuilder;
 import io.zeebe.gateway.impl.broker.BrokerClient;
 import io.zeebe.gateway.impl.broker.BrokerClientImpl;
@@ -25,6 +26,8 @@ import io.zeebe.gateway.impl.configuration.GatewayCfg;
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.util.function.Function;
+import me.dinowernli.grpc.prometheus.Configuration;
+import me.dinowernli.grpc.prometheus.MonitoringServerInterceptor;
 import org.slf4j.Logger;
 
 public class Gateway {
@@ -47,7 +50,6 @@ public class Gateway {
 
   private Server server;
   private BrokerClient brokerClient;
-  private EndpointManager endpointManager;
 
   public Gateway(GatewayCfg gatewayCfg, AtomixCluster atomixCluster) {
     this(
@@ -83,8 +85,20 @@ public class Gateway {
 
     brokerClient = buildBrokerClient();
 
-    endpointManager = new EndpointManager(brokerClient);
-    server = serverBuilderFactory.apply(gatewayCfg).addService(endpointManager).build();
+    final EndpointManager endpointManager = new EndpointManager(brokerClient);
+
+    final ServerBuilder serverBuilder = serverBuilderFactory.apply(gatewayCfg);
+
+    if (gatewayCfg.getMonitoring().isEnabled()) {
+      final MonitoringServerInterceptor monitoringInterceptor =
+          MonitoringServerInterceptor.create(Configuration.allMetrics());
+      serverBuilder.addService(
+          ServerInterceptors.intercept(endpointManager, monitoringInterceptor));
+    } else {
+      serverBuilder.addService(endpointManager);
+    }
+
+    server = serverBuilder.build();
 
     server.start();
   }
diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/ConfigurationDefaults.java b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/ConfigurationDefaults.java
index 779946a..504cf16 100644
--- a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/ConfigurationDefaults.java
+++ b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/ConfigurationDefaults.java
@@ -28,4 +28,6 @@ public class ConfigurationDefaults {
   public static final String DEFAULT_CLUSTER_MEMBER_ID = ""gateway"";
   public static final String DEFAULT_CLUSTER_HOST = ""0.0.0.0"";
   public static final int DEFAULT_CLUSTER_PORT = 26502;
+  public static final boolean DEFAULT_MONITORING_ENABLED = false;
+  public static final int DEFAULT_MONITORING_PORT = 9600;
 }
diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/EnvironmentConstants.java b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/EnvironmentConstants.java
index 188e352..adf4487 100644
--- a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/EnvironmentConstants.java
+++ b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/EnvironmentConstants.java
@@ -27,4 +27,7 @@ public class EnvironmentConstants {
   public static final String ENV_GATEWAY_CLUSTER_MEMBER_ID = ""ZEEBE_GATEWAY_CLUSTER_MEMBER_ID"";
   public static final String ENV_GATEWAY_CLUSTER_HOST = ""ZEEBE_GATEWAY_CLUSTER_HOST"";
   public static final String ENV_GATEWAY_CLUSTER_PORT = ""ZEEBE_GATEWAY_CLUSTER_PORT"";
+  public static final String ENV_GATEWAY_MONITORING_ENABLED = ""ZEEBE_GATEWAY_MONITORING_ENABLED"";
+  public static final String ENV_GATEWAY_MONITORING_HOST = ""ZEEBE_GATEWAY_MONITORING_HOST"";
+  public static final String ENV_GATEWAY_MONITORING_PORT = ""ZEEBE_GATEWAY_MONITORING_PORT"";
 }
diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/GatewayCfg.java b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/GatewayCfg.java
index 635df75..7652177 100644
--- a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/GatewayCfg.java
+++ b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/GatewayCfg.java
@@ -24,6 +24,7 @@ public class GatewayCfg {
   private NetworkCfg network = new NetworkCfg();
   private ClusterCfg cluster = new ClusterCfg();
   private ThreadsCfg threads = new ThreadsCfg();
+  private MonitoringCfg monitoring = new MonitoringCfg();
 
   public void init() {
     init(new Environment());
@@ -37,6 +38,7 @@ public class GatewayCfg {
     network.init(environment, defaultHost);
     cluster.init(environment);
     threads.init(environment);
+    monitoring.init(environment, defaultHost);
   }
 
   public NetworkCfg getNetwork() {
@@ -66,6 +68,15 @@ public class GatewayCfg {
     return this;
   }
 
+  public MonitoringCfg getMonitoring() {
+    return monitoring;
+  }
+
+  public GatewayCfg setMonitoring(MonitoringCfg monitoring) {
+    this.monitoring = monitoring;
+    return this;
+  }
+
   @Override
   public boolean equals(Object o) {
     if (this == o) {
@@ -77,12 +88,13 @@ public class GatewayCfg {
     final GatewayCfg that = (GatewayCfg) o;
     return Objects.equals(network, that.network)
         && Objects.equals(cluster, that.cluster)
-        && Objects.equals(threads, that.threads);
+        && Objects.equals(threads, that.threads)
+        && Objects.equals(monitoring, that.monitoring);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(network, cluster, threads);
+    return Objects.hash(network, cluster, threads, monitoring);
   }
 
   @Override
@@ -94,6 +106,8 @@ public class GatewayCfg {
         + cluster
         + "", threadsCfg=""
         + threads
+        + "", monitoringCfg=""
+        + monitoring
         + '}';
   }
 
diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/configuration/MonitoringCfg.java b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/MonitoringCfg.java
new file mode 100644
index 0000000..642ab95
--- /dev/null
+++ b/gateway/src/main/java/io/zeebe/gateway/impl/configuration/MonitoringCfg.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.gateway.impl.configuration;
+
+import static io.zeebe.gateway.impl.configuration.ConfigurationDefaults.DEFAULT_MONITORING_ENABLED;
+import static io.zeebe.gateway.impl.configuration.ConfigurationDefaults.DEFAULT_MONITORING_PORT;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_ENABLED;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_HOST;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_PORT;
+
+import io.zeebe.transport.SocketAddress;
+import io.zeebe.util.Environment;
+import java.util.Objects;
+
+public class MonitoringCfg {
+
+  private boolean enabled = DEFAULT_MONITORING_ENABLED;
+
+  private String host;
+  private int port = DEFAULT_MONITORING_PORT;
+
+  public void init(Environment environment, String defaultHost) {
+    environment.getBool(ENV_GATEWAY_MONITORING_ENABLED).ifPresent(this::setEnabled);
+    environment.get(ENV_GATEWAY_MONITORING_HOST).ifPresent(this::setHost);
+    environment.getInt(ENV_GATEWAY_MONITORING_PORT).ifPresent(this::setPort);
+
+    if (host == null) {
+      host = defaultHost;
+    }
+  }
+
+  public boolean isEnabled() {
+    return enabled;
+  }
+
+  public MonitoringCfg setEnabled(boolean enabled) {
+    this.enabled = enabled;
+    return this;
+  }
+
+  public String getHost() {
+    return host;
+  }
+
+  public MonitoringCfg setHost(String host) {
+    this.host = host;
+    return this;
+  }
+
+  public int getPort() {
+    return port;
+  }
+
+  public MonitoringCfg setPort(int port) {
+    this.port = port;
+    return this;
+  }
+
+  public SocketAddress toSocketAddress() {
+    return new SocketAddress(host, port);
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    final MonitoringCfg that = (MonitoringCfg) o;
+    return enabled == that.enabled && port == that.port && Objects.equals(host, that.host);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(enabled, host, port);
+  }
+
+  @Override
+  public String toString() {
+    return ""MonitoringCfg{""
+        + ""enabled=""
+        + enabled
+        + "", host='""
+        + host
+        + '\''
+        + "", port=""
+        + port
+        + '}';
+  }
+}
diff --git a/gateway/src/test/java/io/zeebe/gateway/configuration/GatewayCfgTest.java b/gateway/src/test/java/io/zeebe/gateway/configuration/GatewayCfgTest.java
index b6e81d7..05523e5 100644
--- a/gateway/src/test/java/io/zeebe/gateway/configuration/GatewayCfgTest.java
+++ b/gateway/src/test/java/io/zeebe/gateway/configuration/GatewayCfgTest.java
@@ -22,6 +22,9 @@ import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEW
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_CONTACT_POINT;
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_HOST;
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MANAGEMENT_THREADS;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_ENABLED;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_HOST;
+import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_MONITORING_PORT;
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_PORT;
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_REQUEST_TIMEOUT;
 import static io.zeebe.gateway.impl.configuration.EnvironmentConstants.ENV_GATEWAY_TRANSPORT_BUFFER;
@@ -40,6 +43,7 @@ public class GatewayCfgTest {
 
   private static final String DEFAULT_CFG_FILENAME = ""/configuration/gateway.default.toml"";
   private static final GatewayCfg DEFAULT_CFG = new GatewayCfg();
+  private static final String EMPTY_CFG_FILENAME = ""/configuration/gateway.empty.toml"";
   private static final String CUSTOM_CFG_FILENAME = ""/configuration/gateway.custom.toml"";
   private static final GatewayCfg CUSTOM_CFG = new GatewayCfg();
 
@@ -71,6 +75,15 @@ public class GatewayCfgTest {
   }
 
   @Test
+  public void shouldLoadEmptyConfig() {
+    // when
+    final GatewayCfg gatewayCfg = readEmptyConfig();
+
+    // then
+    assertThat(gatewayCfg).isEqualTo(DEFAULT_CFG);
+  }
+
+  @Test
   public void shouldLoadCustomConfig() {
     // when
     final GatewayCfg gatewayCfg = readCustomConfig();
@@ -92,6 +105,9 @@ public class GatewayCfgTest {
     setEnv(ENV_GATEWAY_CLUSTER_MEMBER_ID, ""envMember"");
     setEnv(ENV_GATEWAY_CLUSTER_HOST, ""envHost"");
     setEnv(ENV_GATEWAY_CLUSTER_PORT, ""12345"");
+    setEnv(ENV_GATEWAY_MONITORING_ENABLED, ""true"");
+    setEnv(ENV_GATEWAY_MONITORING_HOST, ""monitorHost"");
+    setEnv(ENV_GATEWAY_MONITORING_PORT, ""231"");
 
     final GatewayCfg expected = new GatewayCfg();
     expected.getNetwork().setHost(""zeebe"").setPort(5432);
@@ -105,6 +121,7 @@ public class GatewayCfgTest {
         .setHost(""envHost"")
         .setPort(12345);
     expected.getThreads().setManagementThreads(32);
+    expected.getMonitoring().setEnabled(true).setHost(""monitorHost"").setPort(231);
 
     // when
     final GatewayCfg gatewayCfg = readCustomConfig();
@@ -121,6 +138,10 @@ public class GatewayCfgTest {
     return readConfig(DEFAULT_CFG_FILENAME);
   }
 
+  private GatewayCfg readEmptyConfig() {
+    return readConfig(EMPTY_CFG_FILENAME);
+  }
+
   private GatewayCfg readCustomConfig() {
     return readConfig(CUSTOM_CFG_FILENAME);
   }
diff --git a/gateway/src/test/resources/configuration/gateway.default.toml b/gateway/src/test/resources/configuration/gateway.default.toml
index e69de29..12843b1 100644
--- a/gateway/src/test/resources/configuration/gateway.default.toml
+++ b/gateway/src/test/resources/configuration/gateway.default.toml
@@ -0,0 +1,4 @@
+[network]
+[cluster]
+[threads]
+[monitoring]
diff --git a/gateway/src/test/resources/configuration/gateway.empty.toml b/gateway/src/test/resources/configuration/gateway.empty.toml
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/gateway/src/test/resources/configuration/gateway.empty.toml
diff --git a/parent/pom.xml b/parent/pom.xml
index 16565d7..05587f9 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -1,4 +1,6 @@
-<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0""
+  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
 
   <modelVersion>4.0.0</modelVersion>
   <name>Zeebe Parent</name>
@@ -45,6 +47,7 @@
     <version.httpclient>4.5.9</version.httpclient>
     <version.httpcomponents>4.4.11</version.httpcomponents>
     <version.jackson>2.9.9</version.jackson>
+    <version.java-grpc-prometheus>0.3.0</version.java-grpc-prometheus>
     <version.jmh>1.21</version.jmh>
     <version.junit>4.12</version.junit>
     <version.log4j>2.11.2</version.log4j>
@@ -299,6 +302,12 @@
 
       <dependency>
         <groupId>io.grpc</groupId>
+        <artifactId>grpc-protobuf-lite</artifactId>
+        <version>${version.grpc}</version>
+      </dependency>
+
+      <dependency>
+        <groupId>io.grpc</groupId>
         <artifactId>grpc-stub</artifactId>
         <version>${version.grpc}</version>
       </dependency>
@@ -479,6 +488,24 @@
         <version>${version.prometheus}</version>
       </dependency>
 
+      <dependency>
+        <groupId>io.prometheus</groupId>
+        <artifactId>simpleclient_httpserver</artifactId>
+        <version>${version.prometheus}</version>
+      </dependency>
+
+      <dependency>
+        <groupId>me.dinowernli</groupId>
+        <artifactId>java-grpc-prometheus</artifactId>
+        <version>${version.java-grpc-prometheus}</version>
+        <exclusions>
+          <exclusion>
+            <groupId>io.grpc</groupId>
+            <artifactId>grpc-all</artifactId>
+          </exclusion>
+        </exclusions>
+      </dependency>
+
     </dependencies>
   </dependencyManagement>
 
@@ -724,7 +751,7 @@
                     </goals>
                   </pluginExecutionFilter>
                   <action>
-                    <ignore />
+                    <ignore/>
                   </action>
                 </pluginExecution>
               </pluginExecutions>
@@ -822,7 +849,7 @@
               </goals>
               <configuration>
                 <rules>
-                  <dependencyConvergence />
+                  <dependencyConvergence/>
                 </rules>
               </configuration>
             </execution>

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/EmbeddedGatewayService.java b/broker/src/main/java/io/camunda/zeebe/broker/system/EmbeddedGatewayService.java
index 1049678..80681ea 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/EmbeddedGatewayService.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/EmbeddedGatewayService.java
@@ -39,6 +39,7 @@ public final class EmbeddedGatewayService implements AutoCloseable {
             clusterServices.getMessagingService(),
             clusterServices.getMembershipService(),
             clusterServices.getEventService(),
+            clusterServices.getCommunicationService(),
             actorScheduler);
     this.jobStreamClient = jobStreamClient;
     gateway =
diff --git a/dist/src/main/java/io/camunda/zeebe/broker/BrokerClientConfiguration.java b/dist/src/main/java/io/camunda/zeebe/broker/BrokerClientConfiguration.java
index c07abaa..029dce2 100644
--- a/dist/src/main/java/io/camunda/zeebe/broker/BrokerClientConfiguration.java
+++ b/dist/src/main/java/io/camunda/zeebe/broker/BrokerClientConfiguration.java
@@ -37,6 +37,7 @@ final class BrokerClientConfiguration {
         cluster.getMessagingService(),
         cluster.getMembershipService(),
         cluster.getEventService(),
+        cluster.getCommunicationService(),
         scheduler);
   }
 }
diff --git a/dist/src/main/java/io/camunda/zeebe/gateway/BrokerClientComponent.java b/dist/src/main/java/io/camunda/zeebe/gateway/BrokerClientComponent.java
index fd3f4e3..f73a42f 100644
--- a/dist/src/main/java/io/camunda/zeebe/gateway/BrokerClientComponent.java
+++ b/dist/src/main/java/io/camunda/zeebe/gateway/BrokerClientComponent.java
@@ -41,6 +41,7 @@ public final class BrokerClientComponent {
         atomixCluster.getMessagingService(),
         atomixCluster.getMembershipService(),
         atomixCluster.getEventService(),
+        atomixCluster.getCommunicationService(),
         actorScheduler);
   }
 }
diff --git a/gateway/pom.xml b/gateway/pom.xml
index 768a928..ec45516 100644
--- a/gateway/pom.xml
+++ b/gateway/pom.xml
@@ -142,6 +142,11 @@
     </dependency>
 
     <dependency>
+      <groupId>io.camunda</groupId>
+      <artifactId>zeebe-cluster-topology</artifactId>
+    </dependency>
+
+    <dependency>
       <groupId>me.dinowernli</groupId>
       <artifactId>java-grpc-prometheus</artifactId>
     </dependency>
@@ -305,6 +310,7 @@
       <artifactId>bcprov-jdk15on</artifactId>
       <scope>test</scope>
     </dependency>
+
   </dependencies>
 
   <repositories>
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/BrokerClientImpl.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/BrokerClientImpl.java
index 19853aa..799511b 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/BrokerClientImpl.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/BrokerClientImpl.java
@@ -8,6 +8,7 @@
 package io.camunda.zeebe.gateway.impl.broker;
 
 import io.atomix.cluster.ClusterMembershipService;
+import io.atomix.cluster.messaging.ClusterCommunicationService;
 import io.atomix.cluster.messaging.ClusterEventService;
 import io.atomix.cluster.messaging.MessagingService;
 import io.atomix.cluster.messaging.Subscription;
@@ -18,6 +19,8 @@ import io.camunda.zeebe.gateway.impl.broker.request.BrokerRequest;
 import io.camunda.zeebe.gateway.impl.broker.response.BrokerResponse;
 import io.camunda.zeebe.scheduler.ActorSchedulingService;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
+import io.camunda.zeebe.topology.GatewayClusterTopologyService;
+import io.camunda.zeebe.topology.gossip.ClusterTopologyGossiperConfig;
 import io.camunda.zeebe.transport.impl.AtomixClientTransportAdapter;
 import java.time.Duration;
 import java.util.Collection;
@@ -31,6 +34,8 @@ public final class BrokerClientImpl implements BrokerClient {
 
   private final BrokerTopologyManagerImpl topologyManager;
   private final BrokerRequestManager requestManager;
+
+  private final GatewayClusterTopologyService clusterTopologyService;
   private boolean isClosed;
   private Subscription jobAvailableSubscription;
   private final ClusterEventService eventService;
@@ -42,12 +47,19 @@ public final class BrokerClientImpl implements BrokerClient {
       final MessagingService messagingService,
       final ClusterMembershipService membershipService,
       final ClusterEventService eventService,
+      final ClusterCommunicationService communicationService,
       final ActorSchedulingService schedulingService) {
     this.eventService = eventService;
     this.schedulingService = schedulingService;
 
     topologyManager = new BrokerTopologyManagerImpl(membershipService::getMembers);
     membershipService.addListener(topologyManager);
+    clusterTopologyService =
+        new GatewayClusterTopologyService(
+            communicationService,
+            membershipService,
+            new ClusterTopologyGossiperConfig(
+                false, Duration.ofSeconds(10), Duration.ofSeconds(1), 2));
 
     atomixTransportAdapter = new AtomixClientTransportAdapter(messagingService);
     requestManager =
@@ -60,10 +72,25 @@ public final class BrokerClientImpl implements BrokerClient {
 
   @Override
   public Collection<ActorFuture<Void>> start() {
+    final var clusterTopologyServiceStarted = schedulingService.submitActor(clusterTopologyService);
     final var topologyManagerStarted = topologyManager.start(schedulingService);
     final var transportStarted = schedulingService.submitActor(atomixTransportAdapter);
     final var requestManagerStarted = schedulingService.submitActor(requestManager);
-    return List.of(topologyManagerStarted, transportStarted, requestManagerStarted);
+    clusterTopologyServiceStarted.onComplete(
+        (ignoreServiceStated, clusterTopologyServiceError) -> {
+          if (clusterTopologyServiceError == null) {
+            topologyManagerStarted.onComplete(
+                (ignoreTopologyManagerStarted, topologyManagerError) ->
+                    clusterTopologyService.registerClusterTopologyChangeListener(topologyManager),
+                Runnable::run); // The caller is not an actor.
+          }
+        },
+        Runnable::run); // The caller is sometimes an actor, sometimes not. So provide an executor.
+    return List.of(
+        topologyManagerStarted,
+        transportStarted,
+        requestManagerStarted,
+        clusterTopologyServiceStarted);
   }
 
   @Override
@@ -84,6 +111,9 @@ public final class BrokerClientImpl implements BrokerClient {
     doAndLogException(topologyManager::close);
     LOG.debug(""topology manager closed"");
 
+    doAndLogException(clusterTopologyService::closeAsync);
+    LOG.debug(""cluster topology service closed"");
+
     if (jobAvailableSubscription != null) {
       jobAvailableSubscription.close();
     }
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/api/UnavailableBrokersTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/api/UnavailableBrokersTest.java
index 7061041..86bd036 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/api/UnavailableBrokersTest.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/api/UnavailableBrokersTest.java
@@ -68,6 +68,7 @@ class UnavailableBrokersTest {
             cluster.getMessagingService(),
             cluster.getMembershipService(),
             cluster.getEventService(),
+            cluster.getCommunicationService(),
             actorScheduler);
     jobStreamClient = new JobStreamClientImpl(actorScheduler, cluster.getCommunicationService());
     jobStreamClient.start().join();
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/broker/BrokerClientTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/broker/BrokerClientTest.java
index c39503c..4b2b15e 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/broker/BrokerClientTest.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/broker/BrokerClientTest.java
@@ -98,6 +98,7 @@ public final class BrokerClientTest {
             atomixCluster.getMessagingService(),
             atomixCluster.getMembershipService(),
             atomixCluster.getEventService(),
+            atomixCluster.getCommunicationService(),
             actorScheduler.get());
 
     client.start().forEach(ActorFuture::join);
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/interceptors/InterceptorIT.java b/gateway/src/test/java/io/camunda/zeebe/gateway/interceptors/InterceptorIT.java
index 4630759..88060c7 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/interceptors/InterceptorIT.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/interceptors/InterceptorIT.java
@@ -72,6 +72,7 @@ final class InterceptorIT {
             cluster.getMessagingService(),
             cluster.getMembershipService(),
             cluster.getEventService(),
+            cluster.getCommunicationService(),
             scheduler);
     jobStreamClient = new JobStreamClientImpl(scheduler, cluster.getCommunicationService());
     gateway = new Gateway(config, brokerClient, scheduler, jobStreamClient.streamer());
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/security/SecurityTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/security/SecurityTest.java
index 7277239..bc8e007 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/security/SecurityTest.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/security/SecurityTest.java
@@ -159,6 +159,7 @@ final class SecurityTest {
             atomix.getMessagingService(),
             atomix.getMembershipService(),
             atomix.getEventService(),
+            atomix.getCommunicationService(),
             actorScheduler);
     jobStreamClient = new JobStreamClientImpl(actorScheduler, atomix.getCommunicationService());
     jobStreamClient.start().join();
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/GatewayClusterTopologyService.java b/topology/src/main/java/io/camunda/zeebe/topology/GatewayClusterTopologyService.java
index 70f0369..743990b 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/GatewayClusterTopologyService.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/GatewayClusterTopologyService.java
@@ -81,7 +81,9 @@ public class GatewayClusterTopologyService extends Actor {
     actor.run(
         () -> {
           topologyChangeListeners.add(listener);
-          listener.onClusterTopologyChanged(clusterTopology);
+          if (!clusterTopology.isUninitialized()) {
+            listener.onClusterTopologyChanged(clusterTopology);
+          }
         });
   }
 

diff --git a/util/src/main/java/io/zeebe/util/StreamUtil.java b/util/src/main/java/io/zeebe/util/StreamUtil.java
index e2c2253..b37ec0a 100644
--- a/util/src/main/java/io/zeebe/util/StreamUtil.java
+++ b/util/src/main/java/io/zeebe/util/StreamUtil.java
@@ -18,11 +18,20 @@ package io.zeebe.util;
 import static io.zeebe.util.StringUtil.fromBytes;
 import static io.zeebe.util.StringUtil.getBytes;
 
-import java.io.*;
-import java.security.*;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.security.DigestOutputStream;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 
 import org.agrona.BitUtil;
 import org.agrona.DirectBuffer;
+import org.agrona.MutableDirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
 
 public class StreamUtil
@@ -162,6 +171,33 @@ public class StreamUtil
         return read(input, dst, 0);
     }
 
+    public static int read(final InputStream input, final MutableDirectBuffer buffer, final int offset) throws IOException
+    {
+        int bytesRead;
+
+        if (buffer.byteArray() == null)
+        {
+            throw new RuntimeException(""Cannot be used with direct byte buffers"");
+        }
+
+        int writeOffset = offset;
+
+        do
+        {
+            buffer.checkLimit(offset + DEFAULT_BUFFER_SIZE); // for expandable buffers, this triggers expansion
+            bytesRead = input.read(buffer.byteArray(), offset, DEFAULT_BUFFER_SIZE);
+
+            if (bytesRead > 0)
+            {
+                writeOffset += bytesRead;
+            }
+
+        }
+        while (bytesRead >= 0);
+
+        return writeOffset - offset;
+    }
+
     public static int read(final InputStream input, final byte[] dst, final int offset) throws IOException
     {
         int remaining = dst.length - offset;
diff --git a/util/src/test/java/io/zeebe/util/StreamUtilTest.java b/util/src/test/java/io/zeebe/util/StreamUtilTest.java
index 6ccd131..216e21f 100644
--- a/util/src/test/java/io/zeebe/util/StreamUtilTest.java
+++ b/util/src/test/java/io/zeebe/util/StreamUtilTest.java
@@ -19,14 +19,19 @@ import static io.zeebe.util.StreamUtil.readLong;
 import static io.zeebe.util.StreamUtil.writeLong;
 import static org.assertj.core.api.Assertions.assertThat;
 
+import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 
+import org.agrona.ExpandableArrayBuffer;
+import org.agrona.ExpandableDirectByteBuffer;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.rules.TemporaryFolder;
 
 /**
@@ -37,6 +42,9 @@ public class StreamUtilTest
     @Rule
     public TemporaryFolder tempFolder = new TemporaryFolder();
 
+    @Rule
+    public ExpectedException exception = ExpectedException.none();
+
     private File file;
 
     @Before
@@ -63,4 +71,40 @@ public class StreamUtilTest
             assertThat(readValue).isEqualTo(value);
         }
     }
+
+    @Test
+    public void shouldReadStreamIntoExpandableBuffer() throws IOException
+    {
+        // given
+        final ExpandableArrayBuffer buffer = new ExpandableArrayBuffer(2);
+        final byte[] thingsToRead = new byte[] {1, 2, 3, 4};
+        final InputStream stream = new ByteArrayInputStream(thingsToRead);
+
+        // when
+        StreamUtil.read(stream, buffer, 4);
+
+        // then
+        assertThat(buffer.capacity()).isGreaterThanOrEqualTo(4 +  thingsToRead.length);
+
+        assertThat(buffer.getByte(4)).isEqualTo((byte) 1);
+        assertThat(buffer.getByte(5)).isEqualTo((byte) 2);
+        assertThat(buffer.getByte(6)).isEqualTo((byte) 3);
+        assertThat(buffer.getByte(7)).isEqualTo((byte) 4);
+    }
+
+    @Test
+    public void shouldNotReadIntoDirectBuffer() throws IOException
+    {
+        // given
+        final ExpandableDirectByteBuffer buffer = new ExpandableDirectByteBuffer(2);
+        final byte[] thingsToRead = new byte[] {1, 2, 3, 4};
+        final InputStream stream = new ByteArrayInputStream(thingsToRead);
+
+        // then
+        exception.expect(RuntimeException.class);
+        exception.expectMessage(""Cannot be used with direct byte buffers"");
+
+        // when
+        StreamUtil.read(stream, buffer, 4);
+    }
 }

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/InvalidConfigurationException.java b/broker/src/main/java/io/camunda/zeebe/broker/system/InvalidConfigurationException.java
new file mode 100644
index 0000000..35d77ab
--- /dev/null
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/InvalidConfigurationException.java
@@ -0,0 +1,14 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.system;
+
+public class InvalidConfigurationException extends RuntimeException {
+  public InvalidConfigurationException(final String message, final Exception cause) {
+    super(message, cause);
+  }
+}
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/SystemContext.java b/broker/src/main/java/io/camunda/zeebe/broker/system/SystemContext.java
index 66104ac..c91a6b0 100755
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/SystemContext.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/SystemContext.java
@@ -9,6 +9,8 @@ package io.camunda.zeebe.broker.system;
 
 import static io.camunda.zeebe.broker.system.partitions.impl.AsyncSnapshotDirector.MINIMUM_SNAPSHOT_PERIOD;
 
+import io.camunda.zeebe.backup.s3.S3BackupConfig;
+import io.camunda.zeebe.backup.s3.S3BackupStore;
 import io.camunda.zeebe.broker.Loggers;
 import io.camunda.zeebe.broker.system.configuration.BrokerCfg;
 import io.camunda.zeebe.broker.system.configuration.ClusterCfg;
@@ -192,6 +194,20 @@ public final class SystemContext {
         LOG.warn(
             ""Access credentials (accessKey, secretKey) not configured for S3 backup store. Credentials will be determined from environment (see https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/credentials.html#credentials-chain)"");
       }
+      // Create a throw away S3BackupStore to verify if all configurations are available
+      final S3BackupConfig storeConfig =
+          S3BackupConfig.from(
+              s3Config.getBucketName(),
+              s3Config.getEndpoint(),
+              s3Config.getRegion(),
+              s3Config.getAccessKey(),
+              s3Config.getSecretKey());
+      try {
+        final S3BackupStore backupStore = new S3BackupStore(storeConfig);
+        backupStore.closeAsync();
+      } catch (final Exception e) {
+        throw new InvalidConfigurationException(""Cannot configure S3 backup store."", e);
+      }
     }
   }
 
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/system/SystemContextTest.java b/broker/src/test/java/io/camunda/zeebe/broker/system/SystemContextTest.java
index b94f1cd..6f7dd8c 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/system/SystemContextTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/system/SystemContextTest.java
@@ -397,7 +397,7 @@ final class SystemContextTest {
   }
 
   @Test
-  void shouldThrowExceptionWhenS3BucketIsNotProvided() throws CertificateException {
+  void shouldThrowExceptionWhenS3BucketIsNotProvided() {
     // given
     final var brokerCfg = new BrokerCfg();
     brokerCfg.getData().getBackup().setStore(BackupStoreType.S3);
@@ -408,6 +408,20 @@ final class SystemContextTest {
         .hasMessageContaining(""bucketName must not be empty"");
   }
 
+  @Test
+  void shouldThrowExceptionWhenS3IsNotConfigured() {
+    // given
+    final var brokerCfg = new BrokerCfg();
+    final var backupCfg = brokerCfg.getData().getBackup();
+    backupCfg.setStore(BackupStoreType.S3);
+    backupCfg.getS3().setBucketName(""bucket"");
+
+    // when - then
+    assertThatCode(() -> initSystemContext(brokerCfg))
+        .isInstanceOf(InvalidConfigurationException.class)
+        .hasMessageContaining(""Cannot configure S3 backup store"");
+  }
+
   private SystemContext initSystemContext(final BrokerCfg brokerCfg) {
     final ActorScheduler scheduler =
         ActorScheduler.newActorScheduler()

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
index e5a8a66..053141e 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
@@ -53,7 +53,7 @@ public final class BpmnSignalBehavior {
     return evaluateSignalName(signal, context)
         .map(
             signalName -> {
-              triggerSignalBroadcast(signalName, variables);
+              triggerSignalBroadcast(signalName, context.getTenantId(), variables);
               return null;
             });
   }
@@ -71,13 +71,13 @@ public final class BpmnSignalBehavior {
     return Either.right(signal.getSignalName().get());
   }
 
-  private void triggerSignalBroadcast(final String signalName, final DirectBuffer variables) {
+  private void triggerSignalBroadcast(
+      final String signalName, final String tenantId, final DirectBuffer variables) {
 
     ensureNotNullOrEmpty(""signalName"", signalName);
 
     signalRecord.reset();
-    signalRecord.setSignalName(signalName);
-    signalRecord.setVariables(variables);
+    signalRecord.setSignalName(signalName).setVariables(variables).setTenantId(tenantId);
 
     final var key = keyGenerator.nextKey();
     commandWriter.appendFollowUpCommand(key, SignalIntent.BROADCAST, signalRecord);

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index f9b3e35..9a1524c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -44,7 +44,7 @@ public class Engine implements RecordProcessor {
       ""Expected to process record '%s' without errors, but exception occurred with message '%s'."";
 
   private static final EnumSet<ValueType> SUPPORTED_VALUETYPES =
-      EnumSet.range(ValueType.JOB, ValueType.RESOURCE_DELETION);
+      EnumSet.range(ValueType.JOB, ValueType.COMMAND_DISTRIBUTION);
 
   private EventApplier eventApplier;
   private RecordProcessorMap recordProcessorMap;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
index c211396..8007dd2 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
@@ -19,6 +19,7 @@ import io.camunda.zeebe.engine.processing.deployment.distribute.CompleteDeployme
 import io.camunda.zeebe.engine.processing.deployment.distribute.DeploymentDistributeProcessor;
 import io.camunda.zeebe.engine.processing.deployment.distribute.DeploymentDistributionCommandSender;
 import io.camunda.zeebe.engine.processing.deployment.distribute.DeploymentRedistributor;
+import io.camunda.zeebe.engine.processing.distribution.CommandDistributionAcknowledgeProcessor;
 import io.camunda.zeebe.engine.processing.dmn.EvaluateDecisionProcessor;
 import io.camunda.zeebe.engine.processing.incident.IncidentEventProcessors;
 import io.camunda.zeebe.engine.processing.job.JobEventProcessors;
@@ -37,6 +38,7 @@ import io.camunda.zeebe.engine.state.migration.DbMigrationController;
 import io.camunda.zeebe.engine.state.mutable.MutableProcessingState;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.ValueType;
+import io.camunda.zeebe.protocol.record.intent.CommandDistributionIntent;
 import io.camunda.zeebe.protocol.record.intent.DecisionEvaluationIntent;
 import io.camunda.zeebe.protocol.record.intent.DeploymentDistributionIntent;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
@@ -129,6 +131,7 @@ public final class EngineProcessors {
     addIncidentProcessors(processingState, bpmnStreamProcessor, typedRecordProcessors, writers);
     addResourceDeletionProcessors(typedRecordProcessors, writers, processingState);
     addSignalBroadcastProcessors(typedRecordProcessors, bpmnBehaviors, writers, processingState);
+    addCommandDistributionProcessors(typedRecordProcessors, writers, processingState);
 
     return typedRecordProcessors;
   }
@@ -277,4 +280,17 @@ public final class EngineProcessors {
     typedRecordProcessors.onCommand(
         ValueType.SIGNAL, SignalIntent.BROADCAST, signalBroadcastProcessor);
   }
+
+  private static void addCommandDistributionProcessors(
+      final TypedRecordProcessors typedRecordProcessors,
+      final Writers writers,
+      final ProcessingState processingState) {
+    final var commandDistributionAcknowledgeProcessor =
+        new CommandDistributionAcknowledgeProcessor(
+            processingState.getDistributionState(), writers);
+    typedRecordProcessors.onCommand(
+        ValueType.COMMAND_DISTRIBUTION,
+        CommandDistributionIntent.ACKNOWLEDGE,
+        commandDistributionAcknowledgeProcessor);
+  }
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/distribution/CommandDistributionAcknowledgeProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/distribution/CommandDistributionAcknowledgeProcessor.java
new file mode 100644
index 0000000..dece162
--- /dev/null
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/distribution/CommandDistributionAcknowledgeProcessor.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.distribution;
+
+import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.immutable.DistributionState;
+import io.camunda.zeebe.protocol.impl.record.value.distribution.CommandDistributionRecord;
+import io.camunda.zeebe.protocol.record.RejectionType;
+import io.camunda.zeebe.protocol.record.intent.CommandDistributionIntent;
+import io.camunda.zeebe.stream.api.records.TypedRecord;
+
+public class CommandDistributionAcknowledgeProcessor
+    implements TypedRecordProcessor<CommandDistributionRecord> {
+
+  private static final String ERROR_PENDING_DISTRIBUTION_NOT_FOUND =
+      """"""
+      Expected to find pending distribution with key %d for partition %d, but no pending \
+      distribution was found."""""";
+  private static final CommandDistributionRecord EMPTY_DISTRIBUTION_RECORD =
+      new CommandDistributionRecord();
+
+  private final DistributionState distributionState;
+  private final StateWriter stateWriter;
+  private final TypedRejectionWriter rejectionWriter;
+
+  public CommandDistributionAcknowledgeProcessor(
+      final DistributionState distributionState, final Writers writers) {
+    this.distributionState = distributionState;
+    stateWriter = writers.state();
+    rejectionWriter = writers.rejection();
+  }
+
+  @Override
+  public void processRecord(final TypedRecord<CommandDistributionRecord> record) {
+    final var distributionKey = record.getKey();
+    final var partitionId = record.getValue().getPartitionId();
+
+    if (!distributionState.hasPendingDistribution(distributionKey, partitionId)) {
+      rejectionWriter.appendRejection(
+          record,
+          RejectionType.NOT_FOUND,
+          String.format(ERROR_PENDING_DISTRIBUTION_NOT_FOUND, distributionKey, partitionId));
+    }
+
+    stateWriter.appendFollowUpEvent(
+        distributionKey, CommandDistributionIntent.ACKNOWLEDGED, record.getValue());
+
+    if (!distributionState.hasPendingDistribution(distributionKey)) {
+      // We write an empty command here as a distribution could contain a lot of data. Because of
+      // this we could exceed the max message size. As we only need the distributionKey in the
+      // FINISHED event applier an empty record will suffice here.
+      stateWriter.appendFollowUpEvent(
+          distributionKey, CommandDistributionIntent.FINISHED, EMPTY_DISTRIBUTION_RECORD);
+    }
+  }
+}

diff --git a/atomix/cluster/src/main/java/io/atomix/raft/RaftServer.java b/atomix/cluster/src/main/java/io/atomix/raft/RaftServer.java
index c599733..66ac179 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/RaftServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/RaftServer.java
@@ -323,6 +323,16 @@ public interface RaftServer {
   CompletableFuture<RaftServer> promote();
 
   /**
+   * Update priority of this server used for priority election. If priority election is not enabled,
+   * this method has no effect. To get the desired result, priority of all replicas must be updated
+   * accordingly. This method only updates the local server's priority.
+   *
+   * @param newPriority the priority to be set
+   * @return a future to be completed when the new priority is applied
+   */
+  CompletableFuture<Void> reconfigurePriority(int newPriority);
+
+  /**
    * Ensures that all records written to the log are flushed to disk
    *
    * @return a future which will be completed after the log is flushed to disk
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java
index 0ac4ef2..85e0f70 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java
@@ -99,6 +99,11 @@ public class DefaultRaftServer implements RaftServer {
   }
 
   @Override
+  public CompletableFuture<RaftServer> join(final Collection<MemberId> cluster) {
+    return start(() -> cluster().join(cluster));
+  }
+
+  @Override
   public CompletableFuture<RaftServer> leave() {
     return context.leave().thenApply(v -> this);
   }
@@ -109,6 +114,11 @@ public class DefaultRaftServer implements RaftServer {
   }
 
   @Override
+  public CompletableFuture<Void> reconfigurePriority(final int newPriority) {
+    return context.reconfigurePriority(newPriority);
+  }
+
+  @Override
   public CompletableFuture<Void> flushLog() {
     return context.flushLog();
   }
@@ -169,11 +179,6 @@ public class DefaultRaftServer implements RaftServer {
         () -> context.transition(Role.FOLLOWER), context.getThreadContext());
   }
 
-  @Override
-  public CompletableFuture<RaftServer> join(final Collection<MemberId> cluster) {
-    return start(() -> cluster().join(cluster));
-  }
-
   /** Starts the server. */
   private CompletableFuture<RaftServer> start(final Supplier<CompletableFuture<Void>> joiner) {
     if (started) {
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/PriorityElectionTimer.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/PriorityElectionTimer.java
index dd400e3..bdbe032 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/PriorityElectionTimer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/PriorityElectionTimer.java
@@ -29,7 +29,7 @@ public class PriorityElectionTimer implements ElectionTimer {
   private final Runnable triggerElection;
   private final Logger log;
   private final int initialTargetPriority;
-  private final int nodePriority;
+  private int nodePriority;
   private int targetPriority;
 
   public PriorityElectionTimer(
@@ -62,6 +62,10 @@ public class PriorityElectionTimer implements ElectionTimer {
     }
   }
 
+  public void setNodePriority(final int newPriority) {
+    nodePriority = newPriority;
+  }
+
   private void onElectionTimeout() {
     final Duration pollTimeout = electionTimeout;
 
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
index 7c0788f..d11880c 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
@@ -1306,6 +1306,21 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
     partitionConfig.setPreferSnapshotReplicationThreshold(snapshotReplicationThreshold);
   }
 
+  public CompletableFuture<Void> reconfigurePriority(final int newPriority) {
+    final CompletableFuture<Void> configureFuture = new CompletableFuture<>();
+    threadContext.execute(
+        () -> {
+          electionConfig.setNodePriority(newPriority);
+          if (role instanceof final FollowerRole followerRole
+              && followerRole.getElectionTimer()
+                  instanceof final PriorityElectionTimer priorityElectionTimer) {
+            priorityElectionTimer.setNodePriority(newPriority);
+          }
+          configureFuture.complete(null);
+        });
+    return configureFuture;
+  }
+
   public int getPartitionId() {
     return partitionId;
   }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftElectionConfig.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftElectionConfig.java
index 6eba2f3..ddf8684 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftElectionConfig.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftElectionConfig.java
@@ -19,7 +19,7 @@ public final class RaftElectionConfig {
 
   private final boolean priorityElectionEnabled;
   private final int initialTargetPriority;
-  private final int nodePriority;
+  private int nodePriority;
 
   private RaftElectionConfig(
       final boolean priorityElectionEnabled,
@@ -50,4 +50,8 @@ public final class RaftElectionConfig {
   public int getNodePriority() {
     return nodePriority;
   }
+
+  public void setNodePriority(final int nodePriority) {
+    this.nodePriority = nodePriority;
+  }
 }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
index b2f4c1e..c608a44 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
@@ -143,6 +143,10 @@ public class RaftPartitionServer implements HealthMonitorable {
     return server != null ? server.shutdown() : CompletableFuture.completedFuture(null);
   }
 
+  public CompletableFuture<Void> reconfigurePriority(final int newPriority) {
+    return server.reconfigurePriority(newPriority);
+  }
+
   private RaftServer buildServer() {
     final var partitionId = partition.id().id();
     final var electionConfig =
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/FollowerRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/FollowerRole.java
index 237a050..71c017f 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/FollowerRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/FollowerRole.java
@@ -52,6 +52,10 @@ public final class FollowerRole extends ActiveRole {
     electionTimer = electionTimerFactory.create(this::schedulePollRequests, log);
   }
 
+  public ElectionTimer getElectionTimer() {
+    return electionTimer;
+  }
+
   @Override
   public synchronized CompletableFuture<RaftRole> start() {
     raft.getMembershipService().addListener(clusterListener);

diff --git a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/message/ProcessMessageSubscriptionRecord.java b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/message/ProcessMessageSubscriptionRecord.java
index 0b07e49..790a974 100644
--- a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/message/ProcessMessageSubscriptionRecord.java
+++ b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/message/ProcessMessageSubscriptionRecord.java
@@ -37,6 +37,8 @@ public final class ProcessMessageSubscriptionRecord extends UnifiedRecordValue
   private final BooleanProperty interruptingProp = new BooleanProperty(""interrupting"", true);
   private final StringProperty correlationKeyProp = new StringProperty(""correlationKey"", """");
   private final StringProperty elementIdProp = new StringProperty(""elementId"", """");
+  private final StringProperty tenantIdProp =
+      new StringProperty(""tenantId"", TenantOwned.DEFAULT_TENANT_IDENTIFIER);
 
   public ProcessMessageSubscriptionRecord() {
     declareProperty(subscriptionPartitionIdProp)
@@ -48,7 +50,8 @@ public final class ProcessMessageSubscriptionRecord extends UnifiedRecordValue
         .declareProperty(interruptingProp)
         .declareProperty(bpmnProcessIdProp)
         .declareProperty(correlationKeyProp)
-        .declareProperty(elementIdProp);
+        .declareProperty(elementIdProp)
+        .declareProperty(tenantIdProp);
   }
 
   public void wrap(final ProcessMessageSubscriptionRecord record) {
@@ -62,6 +65,7 @@ public final class ProcessMessageSubscriptionRecord extends UnifiedRecordValue
     setBpmnProcessId(record.getBpmnProcessIdBuffer());
     setCorrelationKey(record.getCorrelationKeyBuffer());
     setElementId(record.getElementIdBuffer());
+    setTenantId(record.getTenantId());
   }
 
   @JsonIgnore
@@ -191,7 +195,11 @@ public final class ProcessMessageSubscriptionRecord extends UnifiedRecordValue
 
   @Override
   public String getTenantId() {
-    // todo(#13289): replace dummy implementation
-    return TenantOwned.DEFAULT_TENANT_IDENTIFIER;
+    return bufferAsString(tenantIdProp.getValue());
+  }
+
+  public ProcessMessageSubscriptionRecord setTenantId(final String tenantId) {
+    tenantIdProp.setValue(tenantId);
+    return this;
   }
 }

diff --git a/clients/go/commands/updatePayload_command.go b/clients/go/commands/updatePayload_command.go
new file mode 100644
index 0000000..ca0caa0
--- /dev/null
+++ b/clients/go/commands/updatePayload_command.go
@@ -0,0 +1,76 @@
+package commands
+
+import (
+	""context""
+	""fmt""
+	""github.com/zeebe-io/zeebe/clients/go/pb""
+	""github.com/zeebe-io/zeebe/clients/go/utils""
+	""time""
+)
+
+type DispatchUpdatePayloadCommand interface {
+	Send() (*pb.UpdateWorkflowInstancePayloadResponse, error)
+}
+
+type UpdatePayloadCommandStep1 interface {
+	ActivityInstanceKey(int64) UpdatePayloadCommandStep2
+}
+
+type UpdatePayloadCommandStep2 interface {
+	PayloadFromString(string) (DispatchUpdatePayloadCommand, error)
+	PayloadFromStringer(fmt.Stringer) (DispatchUpdatePayloadCommand, error)
+	PayloadFromMap(map[string]interface{}) (DispatchUpdatePayloadCommand, error)
+	PayloadFromObject(interface{}) (DispatchUpdatePayloadCommand, error)
+}
+
+type UpdatePayloadCommand struct {
+	utils.SerializerMixin
+
+	request *pb.UpdateWorkflowInstancePayloadRequest
+	gateway pb.GatewayClient
+}
+
+func (cmd *UpdatePayloadCommand) ActivityInstanceKey(activityInstanceKey int64) UpdatePayloadCommandStep2 {
+	cmd.request.ActivityInstanceKey = activityInstanceKey
+	return cmd
+}
+
+func (cmd *UpdatePayloadCommand) PayloadFromString(payload string) (DispatchUpdatePayloadCommand, error) {
+	if cmd.Validate([]byte(payload)) {
+		cmd.request.Payload = payload
+		return cmd, nil
+	}
+	return nil, utils.ErrNotValidJsonString
+}
+
+func (cmd *UpdatePayloadCommand) PayloadFromStringer(payload fmt.Stringer) (DispatchUpdatePayloadCommand, error) {
+	return cmd.PayloadFromString(payload.String())
+}
+
+func (cmd *UpdatePayloadCommand) PayloadFromObject(payload interface{}) (DispatchUpdatePayloadCommand, error) {
+	jsonString, err := cmd.ToString(payload)
+	if err != nil {
+		return nil, err
+	}
+	cmd.request.Payload = jsonString
+	return cmd, nil
+}
+
+func (cmd *UpdatePayloadCommand) PayloadFromMap(payload map[string]interface{}) (DispatchUpdatePayloadCommand, error) {
+	return cmd.PayloadFromObject(payload)
+}
+
+func (cmd *UpdatePayloadCommand) Send() (*pb.UpdateWorkflowInstancePayloadResponse, error) {
+	ctx, cancel := context.WithTimeout(context.Background(), utils.RequestTimeoutInSec*time.Second)
+	defer cancel()
+
+	return cmd.gateway.UpdateWorkflowInstancePayload(ctx, cmd.request)
+}
+
+func NewUpdatePayloadCommand(gateway pb.GatewayClient) UpdatePayloadCommandStep1 {
+	return &UpdatePayloadCommand{
+		SerializerMixin: utils.NewJsonStringSerializer(),
+		request: &pb.UpdateWorkflowInstancePayloadRequest{},
+		gateway: gateway,
+	}
+}
diff --git a/clients/go/commands/updatePayload_command_test.go b/clients/go/commands/updatePayload_command_test.go
new file mode 100644
index 0000000..39f8dbb
--- /dev/null
+++ b/clients/go/commands/updatePayload_command_test.go
@@ -0,0 +1,146 @@
+package commands
+
+import (
+    ""github.com/golang/mock/gomock""
+    ""github.com/zeebe-io/zeebe/clients/go/mock_pb""
+    ""github.com/zeebe-io/zeebe/clients/go/pb""
+    ""testing""
+)
+
+func TestUpdatePayloadCommandWithPayloadFromString(t *testing.T) {
+    ctrl := gomock.NewController(t)
+    defer ctrl.Finish()
+
+    client := mock_pb.NewMockGatewayClient(ctrl)
+
+    payload := ""{\""foo\"":\""bar\""}""
+
+    request := &pb.UpdateWorkflowInstancePayloadRequest{
+        ActivityInstanceKey: 123,
+        Payload: payload,
+    }
+    stub := &pb.UpdateWorkflowInstancePayloadResponse{}
+
+    client.EXPECT().UpdateWorkflowInstancePayload(gomock.Any(), &rpcMsg{msg: request}).Return(stub, nil)
+
+    command := NewUpdatePayloadCommand(client)
+
+    payloadCommand, err := command.ActivityInstanceKey(123).PayloadFromString(payload)
+    if err != nil {
+        t.Error(""Failed to set payload: "", err)
+    }
+
+    response, err := payloadCommand.Send()
+
+    if err != nil {
+        t.Errorf(""Failed to send request"")
+    }
+
+    if response != stub {
+        t.Errorf(""Failed to receive response"")
+    }
+}
+
+func TestUpdatePayloadCommandWithPayloadFromStringer(t *testing.T) {
+    ctrl := gomock.NewController(t)
+    defer ctrl.Finish()
+
+    client := mock_pb.NewMockGatewayClient(ctrl)
+
+    payload := ""{\""foo\"":\""bar\""}""
+
+    request := &pb.UpdateWorkflowInstancePayloadRequest{
+        ActivityInstanceKey: 123,
+        Payload: payload,
+    }
+    stub := &pb.UpdateWorkflowInstancePayloadResponse{}
+
+    client.EXPECT().UpdateWorkflowInstancePayload(gomock.Any(), &rpcMsg{msg: request}).Return(stub, nil)
+
+    command := NewUpdatePayloadCommand(client)
+
+    payloadCommand, err := command.ActivityInstanceKey(123).PayloadFromStringer(DataType{Foo: ""bar""})
+    if err != nil {
+        t.Error(""Failed to set payload: "", err)
+    }
+
+    response, err := payloadCommand.Send()
+
+    if err != nil {
+        t.Errorf(""Failed to send request"")
+    }
+
+    if response != stub {
+        t.Errorf(""Failed to receive response"")
+    }
+}
+
+func TestUpdatePayloadCommandWithPayloadFromObject(t *testing.T) {
+    ctrl := gomock.NewController(t)
+    defer ctrl.Finish()
+
+    client := mock_pb.NewMockGatewayClient(ctrl)
+
+    payload := ""{\""foo\"":\""bar\""}""
+
+    request := &pb.UpdateWorkflowInstancePayloadRequest{
+        ActivityInstanceKey: 123,
+        Payload: payload,
+    }
+    stub := &pb.UpdateWorkflowInstancePayloadResponse{}
+
+    client.EXPECT().UpdateWorkflowInstancePayload(gomock.Any(), &rpcMsg{msg: request}).Return(stub, nil)
+
+    command := NewUpdatePayloadCommand(client)
+
+    payloadCommand, err := command.ActivityInstanceKey(123).PayloadFromObject(DataType{Foo: ""bar""})
+    if err != nil {
+        t.Error(""Failed to set payload: "", err)
+    }
+
+    response, err := payloadCommand.Send()
+
+    if err != nil {
+        t.Errorf(""Failed to send request"")
+    }
+
+    if response != stub {
+        t.Errorf(""Failed to receive response"")
+    }
+}
+
+func TestUpdatePayloadCommandWithPayloadFromMap(t *testing.T) {
+    ctrl := gomock.NewController(t)
+    defer ctrl.Finish()
+
+    client := mock_pb.NewMockGatewayClient(ctrl)
+
+    payload := ""{\""foo\"":\""bar\""}""
+    payloadMap := make(map[string]interface{})
+    payloadMap[""foo""] = ""bar""
+
+    request := &pb.UpdateWorkflowInstancePayloadRequest{
+        ActivityInstanceKey: 123,
+        Payload: payload,
+    }
+    stub := &pb.UpdateWorkflowInstancePayloadResponse{}
+
+    client.EXPECT().UpdateWorkflowInstancePayload(gomock.Any(), &rpcMsg{msg: request}).Return(stub, nil)
+
+    command := NewUpdatePayloadCommand(client)
+
+    payloadCommand, err := command.ActivityInstanceKey(123).PayloadFromMap(payloadMap)
+    if err != nil {
+        t.Error(""Failed to set payload: "", err)
+    }
+
+    response, err := payloadCommand.Send()
+
+    if err != nil {
+        t.Errorf(""Failed to send request"")
+    }
+
+    if response != stub {
+        t.Errorf(""Failed to receive response"")
+    }
+}

diff --git a/parent/pom.xml b/parent/pom.xml
index 0f82b0b..da34e5d 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -369,6 +369,11 @@
         <version>${project.version}</version>
       </dependency>
 
+      <dependency>
+        <groupId>io.camunda</groupId>
+        <artifactId>zeebe-restore</artifactId>
+        <version>${project.version}</version>
+      </dependency>
       <!-- sibling projects -->
 
       <dependency>
diff --git a/pom.xml b/pom.xml
index eb29e7e..9a21ba0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -55,6 +55,7 @@
     <module>backup</module>
     <module>backup-stores/testkit</module>
     <module>backup-stores/s3</module>
+    <module>restore</module>
   </modules>
 
   <scm>
diff --git a/restore/pom.xml b/restore/pom.xml
new file mode 100644
index 0000000..ff16c76
--- /dev/null
+++ b/restore/pom.xml
@@ -0,0 +1,25 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+  ~ one or more contributor license agreements. See the NOTICE file distributed
+  ~ with this work for additional information regarding copyright ownership.
+  ~ Licensed under the Zeebe Community License 1.1. You may not use this file
+  ~ except in compliance with the Zeebe Community License 1.1.
+  -->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>io.camunda</groupId>
+    <artifactId>zeebe-parent</artifactId>
+    <version>8.1.0-SNAPSHOT</version>
+    <relativePath>../parent/pom.xml</relativePath>
+  </parent>
+
+  <artifactId>zeebe-restore</artifactId>
+  <packaging>jar</packaging>
+
+  <name>Zeebe Backup Restore</name>
+
+</project>

diff --git a/clients/zbctl/cmd/createInstance.go b/clients/zbctl/cmd/createInstance.go
index 016f115..85ac0be 100644
--- a/clients/zbctl/cmd/createInstance.go
+++ b/clients/zbctl/cmd/createInstance.go
@@ -15,13 +15,15 @@ package cmd
 
 import (
 	""github.com/zeebe-io/zeebe/clients/go/commands""
+	""strings""
 
 	""github.com/spf13/cobra""
 )
 
 var (
-	createInstanceVersionFlag   int32
-	createInstanceVariablesFlag string
+	createInstanceVersionFlag    int32
+	createInstanceVariablesFlag  string
+	createInstanceWithResultFlag []string
 )
 
 var createInstanceCmd = &cobra.Command{
@@ -39,12 +41,29 @@ var createInstanceCmd = &cobra.Command{
 			return err
 		}
 
-		response, err := zbCmd.Send()
-		if err != nil {
-			return err
-		}
+		if createInstanceWithResultFlag == nil {
+			response, err := zbCmd.Send()
+			if err != nil {
+				return err
+			}
+
+			return printJson(response)
+		} else {
+			variableNames := []string{}
+			for _, variableName := range createInstanceWithResultFlag {
+				trimedVariableName := strings.TrimSpace(variableName)
+				if trimedVariableName != """" {
+					variableNames = append(variableNames, trimedVariableName)
+				}
+			}
+			response, err := zbCmd.WithResult().FetchVariables(variableNames...).Send()
+			if err != nil {
+				return err
+			}
+
+			return printJson(response)
 
-		return printJson(response)
+		}
 	},
 }
 
@@ -58,4 +77,11 @@ func init() {
 	createInstanceCmd.
 		Flags().
 		Int32Var(&createInstanceVersionFlag, ""version"", commands.LatestVersion, ""Specify version of workflow which should be executed."")
+
+	createInstanceCmd.
+		Flags().
+		StringSliceVar(&createInstanceWithResultFlag, ""withResult"", nil, ""Specify to await result of workflow, optional a list of variable names can be provided to limit the returned variables"")
+
+	// hack to use --withResult without values
+	createInstanceCmd.Flag(""withResult"").NoOptDefVal = "" ""
 }

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirector.java b/broker/src/main/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirector.java
index 94bcc66..e73572f 100755
--- a/broker/src/main/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirector.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirector.java
@@ -78,6 +78,7 @@ public final class ExporterDirector extends Actor implements HealthMonitorable, 
   private final PartitionMessagingService partitionMessagingService;
   private final String exporterPositionsTopic;
   private final ExporterMode exporterMode;
+  private ExporterPositionsDistributionService exporterDistributionService;
 
   public ExporterDirector(final ExporterDirectorContext context, final boolean shouldPauseOnStart) {
     name = context.getName();
@@ -160,11 +161,13 @@ public final class ExporterDirector extends Actor implements HealthMonitorable, 
     try {
       LOG.debug(""Recovering exporter from snapshot"");
       recoverFromSnapshot();
+      exporterDistributionService =
+          new ExporterPositionsDistributionService(
+              state::setPosition, partitionMessagingService, exporterPositionsTopic);
 
       if (exporterMode == ExporterMode.ACTIVE) {
         initActiveExportingMode();
       }
-
     } catch (final Exception e) {
       onFailure();
       LangUtil.rethrowUnchecked(e);
@@ -177,8 +180,8 @@ public final class ExporterDirector extends Actor implements HealthMonitorable, 
     clearExporterState();
     if (exporterMode == ExporterMode.ACTIVE) {
       startActiveExportingMode();
-    } else {
-      // start passive Mode
+    } else { // PASSIVE, we consume the messages and set it in our state
+      exporterDistributionService.subscribeForExporterPositions(actor::submit);
     }
   }
 
@@ -300,9 +303,7 @@ public final class ExporterDirector extends Actor implements HealthMonitorable, 
   private void sendExporterState() {
     final var exportPositionsMessage = new ExporterPositionsMessage();
     state.visitPositions(exportPositionsMessage::putExporter);
-
-    partitionMessagingService.broadcast(
-        exporterPositionsTopic, exportPositionsMessage.toByteBuffer());
+    exporterDistributionService.publishExporterPositions(exportPositionsMessage);
   }
 
   private void skipRecord(final LoggedEvent currentEvent) {

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
index 8f5870a..fbfe67a 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
@@ -8,6 +8,7 @@
 package io.camunda.zeebe.engine.processing.processinstance;
 
 import io.camunda.zeebe.engine.api.TypedRecord;
+import io.camunda.zeebe.engine.api.records.RecordBatch.ExceededBatchRecordSizeException;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnBehaviors;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnIncidentBehavior;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnJobBehavior;
@@ -61,6 +62,9 @@ public final class ProcessInstanceModificationProcessor
   private static final String ERROR_MESSAGE_TERMINATE_ELEMENT_INSTANCE_NOT_FOUND =
       ""Expected to modify instance of process '%s' but it contains one or more terminate instructions""
           + "" with an element instance that could not be found: '%s'"";
+  private static final String ERROR_COMMAND_TOO_LARGE =
+      ""Unable to modify process instance with key '%d' as the size exceeds the maximum batch size.""
+          + "" Please reduce the size by splitting the modification into multiple commands."";
 
   private static final Set<BpmnElementType> UNSUPPORTED_ELEMENT_TYPES =
       Set.of(
@@ -184,6 +188,16 @@ public final class ProcessInstanceModificationProcessor
       responseWriter.writeRejectionOnCommand(
           typedCommand, RejectionType.INVALID_ARGUMENT, exception.getMessage());
       return ProcessingError.EXPECTED_ERROR;
+    } else if (error instanceof ExceededBatchRecordSizeException) {
+      rejectionWriter.appendRejection(
+          typedCommand,
+          RejectionType.INVALID_ARGUMENT,
+          ERROR_COMMAND_TOO_LARGE.formatted(typedCommand.getValue().getProcessInstanceKey()));
+      responseWriter.writeRejectionOnCommand(
+          typedCommand,
+          RejectionType.INVALID_ARGUMENT,
+          ERROR_COMMAND_TOO_LARGE.formatted(typedCommand.getValue().getProcessInstanceKey()));
+      return ProcessingError.EXPECTED_ERROR;
     }
     return ProcessingError.UNEXPECTED_ERROR;
   }

diff --git a/clients/go/commands/resolveIncident_command.go b/clients/go/commands/resolveIncident_command.go
new file mode 100644
index 0000000..7dd34db
--- /dev/null
+++ b/clients/go/commands/resolveIncident_command.go
@@ -0,0 +1,50 @@
+package commands
+
+import (
+	""context""
+	""time""
+
+	""github.com/zeebe-io/zeebe/clients/go/pb""
+	""github.com/zeebe-io/zeebe/clients/go/utils""
+)
+
+type DispatchResolveIncidentCommand interface {
+	Send() (*pb.ResolveIncidentResponse, error)
+}
+
+type ResolveIncidentCommandStep1 interface {
+	IncidentKey(int64) ResolveIncidentCommandStep2
+}
+
+type ResolveIncidentCommandStep2 interface {
+	DispatchResolveIncidentCommand
+}
+
+type ResolveIncidentCommand struct {
+	utils.SerializerMixin
+
+	request        *pb.ResolveIncidentRequest
+	gateway        pb.GatewayClient
+	requestTimeout time.Duration
+}
+
+func (cmd *ResolveIncidentCommand) IncidentKey(incidentKey int64) ResolveIncidentCommandStep2 {
+	cmd.request.IncidentKey = incidentKey
+	return cmd
+}
+
+func (cmd *ResolveIncidentCommand) Send() (*pb.ResolveIncidentResponse, error) {
+	ctx, cancel := context.WithTimeout(context.Background(), cmd.requestTimeout)
+	defer cancel()
+
+	return cmd.gateway.ResolveIncident(ctx, cmd.request)
+}
+
+func NewResolveIncidentCommand(gateway pb.GatewayClient, requestTimeout time.Duration) ResolveIncidentCommandStep1 {
+	return &ResolveIncidentCommand{
+		SerializerMixin: utils.NewJsonStringSerializer(),
+		request:         &pb.ResolveIncidentRequest{},
+		gateway:         gateway,
+		requestTimeout:  requestTimeout,
+	}
+}
diff --git a/clients/go/commands/resolveIncident_command_test.go b/clients/go/commands/resolveIncident_command_test.go
new file mode 100644
index 0000000..12d3a4f
--- /dev/null
+++ b/clients/go/commands/resolveIncident_command_test.go
@@ -0,0 +1,36 @@
+package commands
+
+import (
+	""testing""
+
+	""github.com/golang/mock/gomock""
+	""github.com/zeebe-io/zeebe/clients/go/mock_pb""
+	""github.com/zeebe-io/zeebe/clients/go/pb""
+	""github.com/zeebe-io/zeebe/clients/go/utils""
+)
+
+func TestResolveIncidentCommand(t *testing.T) {
+	ctrl := gomock.NewController(t)
+	defer ctrl.Finish()
+
+	client := mock_pb.NewMockGatewayClient(ctrl)
+
+	request := &pb.ResolveIncidentRequest{
+		IncidentKey: 123,
+	}
+	stub := &pb.ResolveIncidentResponse{}
+
+	client.EXPECT().ResolveIncident(gomock.Any(), &utils.RpcTestMsg{Msg: request}).Return(stub, nil)
+
+	command := NewResolveIncidentCommand(client, utils.DefaultTestTimeout)
+
+	response, err := command.IncidentKey(123).Send()
+
+	if err != nil {
+		t.Errorf(""Failed to send request"")
+	}
+
+	if response != stub {
+		t.Errorf(""Failed to receive response"")
+	}
+}
diff --git a/clients/go/zbc/api.go b/clients/go/zbc/api.go
index 0c25dde..d2c1936 100644
--- a/clients/go/zbc/api.go
+++ b/clients/go/zbc/api.go
@@ -1,9 +1,10 @@
 package zbc
 
 import (
+	""time""
+
 	""github.com/zeebe-io/zeebe/clients/go/commands""
 	""github.com/zeebe-io/zeebe/clients/go/worker""
-	""time""
 )
 
 type ZBClient interface {
@@ -13,6 +14,7 @@ type ZBClient interface {
 	NewCreateInstanceCommand() commands.CreateInstanceCommandStep1
 	NewCancelInstanceCommand() commands.CancelInstanceStep1
 	NewUpdatePayloadCommand() commands.UpdatePayloadCommandStep1
+	NewResolveIncidentCommand() commands.ResolveIncidentCommandStep1
 
 	NewPublishMessageCommand() commands.PublishMessageCommandStep1
 
diff --git a/clients/go/zbc/client.go b/clients/go/zbc/client.go
index 263be07..2651144 100644
--- a/clients/go/zbc/client.go
+++ b/clients/go/zbc/client.go
@@ -1,11 +1,12 @@
 package zbc
 
 import (
+	""time""
+
 	""github.com/zeebe-io/zeebe/clients/go/commands""
 	""github.com/zeebe-io/zeebe/clients/go/pb""
 	""github.com/zeebe-io/zeebe/clients/go/worker""
 	""google.golang.org/grpc""
-	""time""
 )
 
 const DefaultRequestTimeout = 15 * time.Second
@@ -28,6 +29,10 @@ func (client *ZBClientImpl) NewPublishMessageCommand() commands.PublishMessageCo
 	return commands.NewPublishMessageCommand(client.gateway, client.requestTimeout)
 }
 
+func (client *ZBClientImpl) NewResolveIncidentCommand() commands.ResolveIncidentCommandStep1 {
+	return commands.NewResolveIncidentCommand(client.gateway, client.requestTimeout)
+}
+
 func (client *ZBClientImpl) NewCreateInstanceCommand() commands.CreateInstanceCommandStep1 {
 	return commands.NewCreateInstanceCommand(client.gateway, client.requestTimeout)
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/CommandDistributionAcknowledgedApplier.java b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/CommandDistributionAcknowledgedApplier.java
new file mode 100644
index 0000000..4abf2e3
--- /dev/null
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/CommandDistributionAcknowledgedApplier.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.state.appliers;
+
+import io.camunda.zeebe.engine.state.TypedEventApplier;
+import io.camunda.zeebe.engine.state.mutable.MutableDistributionState;
+import io.camunda.zeebe.protocol.impl.record.value.distribution.CommandDistributionRecord;
+import io.camunda.zeebe.protocol.record.intent.CommandDistributionIntent;
+
+public final class CommandDistributionAcknowledgedApplier
+    implements TypedEventApplier<CommandDistributionIntent, CommandDistributionRecord> {
+
+  private final MutableDistributionState distributionState;
+
+  public CommandDistributionAcknowledgedApplier(final MutableDistributionState distributionState) {
+    this.distributionState = distributionState;
+  }
+
+  @Override
+  public void applyState(final long key, final CommandDistributionRecord value) {
+    distributionState.removePendingDistribution(key, value.getPartitionId());
+  }
+}
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
index a72309b..4793315 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
@@ -284,6 +284,9 @@ public final class EventAppliers implements EventApplier {
         CommandDistributionIntent.DISTRIBUTING,
         new CommandDistributionDistributingApplier(distributionState));
     register(
+        CommandDistributionIntent.ACKNOWLEDGED,
+        new CommandDistributionAcknowledgedApplier(distributionState));
+    register(
         CommandDistributionIntent.FINISHED,
         new CommandDistributionFinishedApplier(distributionState));
   }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
index 1085651..0a2198c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
@@ -37,6 +37,7 @@ public final class DbJobState implements JobState, MutableJobState {
   private final JobRecordValue jobRecordToWrite = new JobRecordValue();
 
   private final DbLong jobKey;
+  private final DbString tenantIdKey;
   private final DbForeignKey<DbLong> fkJob;
   private final ColumnFamily<DbLong, JobRecordValue> jobsColumnFamily;
 
@@ -66,6 +67,7 @@ public final class DbJobState implements JobState, MutableJobState {
       final ZeebeDb<ZbColumnFamilies> zeebeDb, final TransactionContext transactionContext) {
 
     jobKey = new DbLong();
+    tenantIdKey = new DbString();
     fkJob = new DbForeignKey<>(jobKey, ZbColumnFamilies.JOBS);
     jobsColumnFamily =
         zeebeDb.createColumnFamily(
@@ -355,6 +357,7 @@ public final class DbJobState implements JobState, MutableJobState {
 
   private void createJobRecord(final long key, final JobRecord record) {
     jobKey.wrapLong(key);
+    tenantIdKey.wrapString(record.getTenantId());
     // do not persist variables in job state
     jobRecordToWrite.setRecordWithoutVariables(record);
     jobsColumnFamily.insert(jobKey, jobRecordToWrite);
@@ -363,6 +366,7 @@ public final class DbJobState implements JobState, MutableJobState {
   /** Updates the job record without updating variables */
   private void updateJobRecord(final long key, final JobRecord updatedValue) {
     jobKey.wrapLong(key);
+    tenantIdKey.wrapString(updatedValue.getTenantId());
     // do not persist variables in job state
     jobRecordToWrite.setRecordWithoutVariables(updatedValue);
     jobsColumnFamily.update(jobKey, jobRecordToWrite);

diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
index 03eb8ad..34ea7e1 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
@@ -15,6 +15,7 @@
  */
 package io.camunda.zeebe.client;
 
+import io.camunda.zeebe.client.api.ExperimentalApi;
 import io.camunda.zeebe.client.api.command.BroadcastSignalCommandStep1;
 import io.camunda.zeebe.client.api.command.CancelProcessInstanceCommandStep1;
 import io.camunda.zeebe.client.api.command.CreateProcessInstanceCommandStep1;
@@ -22,6 +23,7 @@ import io.camunda.zeebe.client.api.command.DeleteResourceCommandStep1;
 import io.camunda.zeebe.client.api.command.DeployProcessCommandStep1;
 import io.camunda.zeebe.client.api.command.DeployResourceCommandStep1;
 import io.camunda.zeebe.client.api.command.EvaluateDecisionCommandStep1;
+import io.camunda.zeebe.client.api.command.MigrateProcessInstanceCommandStep1;
 import io.camunda.zeebe.client.api.command.ModifyProcessInstanceCommandStep1;
 import io.camunda.zeebe.client.api.command.PublishMessageCommandStep1;
 import io.camunda.zeebe.client.api.command.ResolveIncidentCommandStep1;
@@ -168,6 +170,63 @@ public interface ZeebeClient extends AutoCloseable, JobClient {
   ModifyProcessInstanceCommandStep1 newModifyProcessInstanceCommand(long processInstanceKey);
 
   /**
+   * Command to migrate a process instance to a different process definition.
+   *
+   * <p>The migration command contains a migration plan. Migration plan contains
+   * targetProcessDefinitionKey to indicate which process definition to use for the migration.
+   * Mapping instructions for the migration describe how to map elements from the source process
+   * definition to the target process definition.
+   *
+   * <p>For example, let's consider we want to migrate process instance with key {@code 1}, target
+   * process definition key {@code 2}, a source process definition with a service task with id
+   * {@code ""task1""} and the target process definition with a service task with id {@code ""task2""}.
+   * The migration command could be:
+   *
+   * <pre>{@code
+   * {
+   *  ""processInstanceKey"": 1,
+   *  ""migrationPlan"": {
+   *   ""targetProcessDefinitionKey"": 2,
+   *   ""mappingInstructions"": [
+   *    {
+   *     ""sourceElementId"": ""task1"",
+   *     ""targetElementId"": ""task2""
+   *    }
+   *   ]
+   *  }
+   * }
+   * }</pre>
+   *
+   * <pre>
+   *
+   * zeebeClient
+   *  .newMigrateProcessInstanceCommand(1L)
+   *  .migrationPlan(2L)
+   *  .addMappingInstruction(""element1"", ""element2"")
+   *  .addMappingInstruction(""element3"", ""element4"")
+   *  .send();
+   * </pre>
+   *
+   * <pre>
+   * final MigrationPlan migrationPlan =
+   *         MigrationPlan.newBuilder()
+   *             .withTargetProcessDefinitionKey(2L)
+   *             .addMappingInstruction(""element1"", ""element2"")
+   *             .addMappingInstruction(""element3"", ""element4"")
+   *             .build();
+   * zeebeClient
+   *  .newMigrateProcessInstanceCommand(1L)
+   *  .migrationPlan(migrationPlan)
+   *  .send();
+   * </pre>
+   *
+   * @param processInstanceKey the key which refers to the process instance to migrate
+   * @return a builder for the command
+   */
+  @ExperimentalApi(""https://github.com/camunda/zeebe/issues/14907"")
+  MigrateProcessInstanceCommandStep1 newMigrateProcessInstanceCommand(long processInstanceKey);
+
+  /**
    * Command to cancel a process instance.
    *
    * <pre>
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
index da9ddf9..973fccf 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
@@ -31,6 +31,7 @@ import io.camunda.zeebe.client.api.command.DeployProcessCommandStep1;
 import io.camunda.zeebe.client.api.command.DeployResourceCommandStep1;
 import io.camunda.zeebe.client.api.command.EvaluateDecisionCommandStep1;
 import io.camunda.zeebe.client.api.command.FailJobCommandStep1;
+import io.camunda.zeebe.client.api.command.MigrateProcessInstanceCommandStep1;
 import io.camunda.zeebe.client.api.command.ModifyProcessInstanceCommandStep1;
 import io.camunda.zeebe.client.api.command.PublishMessageCommandStep1;
 import io.camunda.zeebe.client.api.command.ResolveIncidentCommandStep1;
@@ -50,6 +51,7 @@ import io.camunda.zeebe.client.impl.command.DeployProcessCommandImpl;
 import io.camunda.zeebe.client.impl.command.DeployResourceCommandImpl;
 import io.camunda.zeebe.client.impl.command.EvaluateDecisionCommandImpl;
 import io.camunda.zeebe.client.impl.command.JobUpdateRetriesCommandImpl;
+import io.camunda.zeebe.client.impl.command.MigrateProcessInstanceCommandImpl;
 import io.camunda.zeebe.client.impl.command.ModifyProcessInstanceCommandImpl;
 import io.camunda.zeebe.client.impl.command.PublishMessageCommandImpl;
 import io.camunda.zeebe.client.impl.command.ResolveIncidentCommandImpl;
@@ -270,6 +272,13 @@ public final class ZeebeClientImpl implements ZeebeClient {
   }
 
   @Override
+  public MigrateProcessInstanceCommandStep1 newMigrateProcessInstanceCommand(
+      final long processInstanceKey) {
+    return new MigrateProcessInstanceCommandImpl(
+        processInstanceKey, config.getDefaultRequestTimeout());
+  }
+
+  @Override
   public CancelProcessInstanceCommandStep1 newCancelInstanceCommand(final long processInstanceKey) {
     return new CancelProcessInstanceCommandImpl(
         asyncStub,
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/command/MigrateProcessInstanceCommandImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/command/MigrateProcessInstanceCommandImpl.java
new file mode 100644
index 0000000..8092c9d
--- /dev/null
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/command/MigrateProcessInstanceCommandImpl.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.camunda.zeebe.client.impl.command;
+
+import io.camunda.zeebe.client.api.ZeebeFuture;
+import io.camunda.zeebe.client.api.command.FinalCommandStep;
+import io.camunda.zeebe.client.api.command.MigrateProcessInstanceCommandStep1;
+import io.camunda.zeebe.client.api.command.MigrateProcessInstanceCommandStep1.MigrateProcessInstanceCommandFinalStep;
+import io.camunda.zeebe.client.api.command.MigrationPlan;
+import io.camunda.zeebe.client.api.response.MigrateProcessInstanceResponse;
+import java.time.Duration;
+
+public final class MigrateProcessInstanceCommandImpl
+    implements MigrateProcessInstanceCommandStep1, MigrateProcessInstanceCommandFinalStep {
+  private final long processInstanceKey;
+  private Duration requestTimeout;
+
+  public MigrateProcessInstanceCommandImpl(
+      final long processInstanceKey, final Duration requestTimeout) {
+    this.processInstanceKey = processInstanceKey;
+    this.requestTimeout = requestTimeout;
+  }
+
+  @Override
+  public MigrateProcessInstanceCommandFinalStep migrationPlan(
+      final long targetProcessDefinitionKey) {
+    // TODO - will be implemented with https://github.com/camunda/zeebe/issues/14921
+    return this;
+  }
+
+  @Override
+  public MigrateProcessInstanceCommandFinalStep migrationPlan(final MigrationPlan migrationPlan) {
+    // TODO - will be implemented with https://github.com/camunda/zeebe/issues/14921
+    return this;
+  }
+
+  @Override
+  public MigrateProcessInstanceCommandFinalStep addMappingInstruction(
+      final String sourceElementId, final String targetElementId) {
+    // TODO - will be implemented with https://github.com/camunda/zeebe/issues/14921
+    return this;
+  }
+
+  @Override
+  public FinalCommandStep<MigrateProcessInstanceResponse> requestTimeout(
+      final Duration requestTimeout) {
+    this.requestTimeout = requestTimeout;
+    return this;
+  }
+
+  @Override
+  public ZeebeFuture<MigrateProcessInstanceResponse> send() {
+    // TODO - will be implemented with https://github.com/camunda/zeebe/issues/14921
+    throw new UnsupportedOperationException(
+        ""Migrating process instance is not supported in Java Client yet."");
+  }
+}

diff --git a/logstreams/src/main/java/io/zeebe/logstreams/impl/snapshot/fs/FsSnapshotStorageConfiguration.java b/logstreams/src/main/java/io/zeebe/logstreams/impl/snapshot/fs/FsSnapshotStorageConfiguration.java
index d8f4d89..e54e85a 100644
--- a/logstreams/src/main/java/io/zeebe/logstreams/impl/snapshot/fs/FsSnapshotStorageConfiguration.java
+++ b/logstreams/src/main/java/io/zeebe/logstreams/impl/snapshot/fs/FsSnapshotStorageConfiguration.java
@@ -23,8 +23,9 @@ public class FsSnapshotStorageConfiguration
 {
     protected static final String CHECKSUM_ALGORITHM = ""SHA1"";
 
-    protected static final String SNAPSHOT_FILE_NAME_TEMPLATE = ""%s"" + File.separatorChar + ""%s-%d.snapshot"";
-    protected static final String SNAPSHOT_FILE_NAME_PATTERN = ""%s-(\\d+).snapshot"";
+    protected static final String SNAPSHOT_FILE_NAME_TEMPLATE = ""%s-%d.snapshot"";
+    protected static final String SNAPSHOT_FILE_PATH_TEMPLATE = ""%s"" + File.separatorChar + SNAPSHOT_FILE_NAME_TEMPLATE;
+    protected static final String SNAPSHOT_FILE_NAME_PATTERN = ""%s-(\\d+)\\.snapshot"";
 
     protected static final String CHECKSUM_FILE_NAME_TEMPLATE = ""%s"" + File.separatorChar + ""%s-%d."" + CHECKSUM_ALGORITHM.toLowerCase();
 
@@ -50,7 +51,7 @@ public class FsSnapshotStorageConfiguration
 
     public String snapshotFileName(String name, long logPosition)
     {
-        return String.format(SNAPSHOT_FILE_NAME_TEMPLATE, rootPath, name, logPosition);
+        return String.format(SNAPSHOT_FILE_PATH_TEMPLATE, rootPath, name, logPosition);
     }
 
     public String checksumFileName(String name, long logPosition)
@@ -86,7 +87,7 @@ public class FsSnapshotStorageConfiguration
         return String.format(CHECKSUM_CONTENT_TEMPLATE, checksum, dataFileName);
     }
 
-    public String extractDigetsFromChecksumContent(String content)
+    public String extractDigestFromChecksumContent(String content)
     {
         final int indexOfSeparator = content.indexOf(CHECKSUM_CONTENT_SEPARATOR);
         if (indexOfSeparator < 0)
@@ -108,9 +109,18 @@ public class FsSnapshotStorageConfiguration
         return content.substring(indexOfSeparator + CHECKSUM_CONTENT_SEPARATOR.length());
     }
 
+    public String getSnapshotNameFromFileName(final String fileName)
+    {
+        final String suffixPattern = String.format(SNAPSHOT_FILE_NAME_PATTERN, """");
+        final Pattern pattern = Pattern.compile(suffixPattern);
+        final String[] parts = pattern.split(fileName);
+
+        return parts[0];
+    }
+
     public String getSnapshotFileNameTemplate()
     {
-        return SNAPSHOT_FILE_NAME_TEMPLATE;
+        return SNAPSHOT_FILE_PATH_TEMPLATE;
     }
 
     public String getChecksumFileNameTemplate()

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
index da05e13..9231df3 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/EventAppliers.java
@@ -154,6 +154,9 @@ public final class EventAppliers implements EventApplier {
     register(
         ProcessInstanceIntent.SEQUENCE_FLOW_TAKEN,
         new ProcessInstanceSequenceFlowTakenApplier(elementInstanceState, processState));
+    register(
+        ProcessInstanceIntent.ELEMENT_MIGRATED,
+        new ProcessInstanceElementMigratedApplier(elementInstanceState));
   }
 
   private void registerProcessInstanceCreationAppliers(final MutableProcessingState state) {
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/ProcessInstanceElementMigratedApplier.java b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/ProcessInstanceElementMigratedApplier.java
index e5a0f3a..d38358f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/ProcessInstanceElementMigratedApplier.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/appliers/ProcessInstanceElementMigratedApplier.java
@@ -24,5 +24,16 @@ final class ProcessInstanceElementMigratedApplier
   }
 
   @Override
-  public void applyState(final long elementInstanceKey, final ProcessInstanceRecord value) {}
+  public void applyState(final long elementInstanceKey, final ProcessInstanceRecord value) {
+    elementInstanceState.updateInstance(
+        elementInstanceKey,
+        elementInstance ->
+            elementInstance
+                .getValue()
+                .setProcessDefinitionKey(value.getProcessDefinitionKey())
+                .setBpmnProcessId(value.getBpmnProcessId())
+                .setVersion(value.getVersion())
+                .setElementId(value.getElementId())
+                .setFlowScopeKey(value.getFlowScopeKey()));
+  }
 }

diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStore.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStore.java
index d3a922c..09abcfd 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStore.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStore.java
@@ -183,16 +183,16 @@ public final class FileBasedSnapshotStore extends Actor
     try {
       final var expectedChecksum = SnapshotChecksum.read(checksumPath);
       final var actualChecksum = SnapshotChecksum.calculate(path);
-      if (expectedChecksum != actualChecksum) {
+      if (expectedChecksum.getCombinedValue() != actualChecksum.getCombinedValue()) {
         LOGGER.warn(
             ""Expected snapshot {} to have checksum {}, but the actual checksum is {}; the snapshot is most likely corrupted. The startup will fail if there is no other valid snapshot and the log has been compacted."",
             path,
-            expectedChecksum,
-            actualChecksum);
+            expectedChecksum.getCombinedValue(),
+            actualChecksum.getCombinedValue());
         return null;
       }
 
-      return new FileBasedSnapshot(path, checksumPath, actualChecksum, metadata);
+      return new FileBasedSnapshot(path, checksumPath, actualChecksum.getCombinedValue(), metadata);
     } catch (final Exception e) {
       LOGGER.warn(""Could not load snapshot in {}"", path, e);
       return null;
@@ -457,14 +457,15 @@ public final class FileBasedSnapshotStore extends Actor
     moveToSnapshotDirectory(directory, destination);
 
     final var checksumPath = buildSnapshotsChecksumPath(metadata);
-    final long actualChecksum;
+    final SfvChecksum actualChecksum;
     try {
       // computing the checksum on the final destination also lets us detect any failures during the
       // copy/move that could occur
       actualChecksum = SnapshotChecksum.calculate(destination);
-      if (actualChecksum != expectedChecksum) {
+      if (actualChecksum.getCombinedValue() != expectedChecksum) {
         rollbackPartialSnapshot(destination);
-        throw new InvalidSnapshotChecksum(directory, expectedChecksum, actualChecksum);
+        throw new InvalidSnapshotChecksum(
+            directory, expectedChecksum, actualChecksum.getCombinedValue());
       }
 
       SnapshotChecksum.persist(checksumPath, actualChecksum);
@@ -474,7 +475,8 @@ public final class FileBasedSnapshotStore extends Actor
     }
 
     final var newPersistedSnapshot =
-        new FileBasedSnapshot(destination, checksumPath, actualChecksum, metadata);
+        new FileBasedSnapshot(
+            destination, checksumPath, actualChecksum.getCombinedValue(), metadata);
     final var failed =
         !currentPersistedSnapshotRef.compareAndSet(currentPersistedSnapshot, newPersistedSnapshot);
     if (failed) {
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshot.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshot.java
index 2b44a9a..be89c8c 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshot.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshot.java
@@ -70,7 +70,7 @@ public final class FileBasedTransientSnapshot implements TransientSnapshot {
                       directory)));
 
         } else {
-          checksum = SnapshotChecksum.calculate(directory);
+          checksum = SnapshotChecksum.calculate(directory).getCombinedValue();
 
           snapshot = null;
           isValid = true;
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SfvChecksum.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SfvChecksum.java
new file mode 100644
index 0000000..963e1e2
--- /dev/null
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SfvChecksum.java
@@ -0,0 +1,172 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.snapshots.impl;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+import java.io.BufferedWriter;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.nio.ByteBuffer;
+import java.nio.channels.FileChannel;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import java.util.Map.Entry;
+import java.util.SortedMap;
+import java.util.TreeMap;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.zip.CRC32C;
+import java.util.zip.Checksum;
+import org.agrona.IoUtil;
+
+/**
+ * Supports building individual CRCs compatible with SFV file format and also supports backward
+ * compatibility with 'combinedChecksum' field.
+ * https://en.wikipedia.org/wiki/Simple_file_verification
+ */
+final class SfvChecksum {
+
+  private static final String FILE_CRC_SEPARATOR = ""   "";
+  private static final String FILE_CRC_SEPARATOR_REGEX = "" {3}"";
+  private static final Pattern FILE_CRC_PATTERN =
+      Pattern.compile(""(.*)"" + FILE_CRC_SEPARATOR_REGEX + ""([0-9a-fA-F]{1,16})"");
+  private static final String COMBINED_VALUE_PREFIX = ""; combinedValue = "";
+  private static final Pattern COMBINED_VALUE_PATTERN =
+      Pattern.compile("".*combinedValue\\s+=\\s+([0-9a-fA-F]{1,16})"");
+  private static final String SNAPSHOT_DIRECTORY_PREFIX = ""; snapshot directory = "";
+
+  private Checksum combinedChecksum;
+  private final SortedMap<String, Long> checksums = new TreeMap<>();
+  private String snapshotDirectoryComment;
+
+  /**
+   * creates an immutable and pre-defined checksum
+   *
+   * @param combinedChecksum pre-defined checksum
+   */
+  public SfvChecksum(long combinedChecksum) {
+    this.combinedChecksum = new PreDefinedImmutableChecksum(combinedChecksum);
+  }
+
+  public SfvChecksum() {
+    this.combinedChecksum = new CRC32C();
+  }
+
+  public long getCombinedValue() {
+    return combinedChecksum.getValue();
+  }
+
+  public void setSnapshotDirectoryComment(String headerComment) {
+    this.snapshotDirectoryComment = headerComment;
+  }
+
+  public void updateFromFile(final Path filePath) throws IOException {
+    final String fileName = filePath.getFileName().toString();
+    final byte[] chunkId = fileName.getBytes(UTF_8);
+    combinedChecksum.update(chunkId);
+
+    final Checksum checksum = new CRC32C();
+    final ByteBuffer readBuffer = ByteBuffer.allocate(IoUtil.BLOCK_SIZE);
+    try (final FileChannel channel = FileChannel.open(filePath, StandardOpenOption.READ)) {
+      readBuffer.clear();
+      while (channel.read(readBuffer) > 0) {
+        readBuffer.flip();
+        combinedChecksum.update(readBuffer);
+        readBuffer.flip();
+        checksum.update(readBuffer);
+        readBuffer.clear();
+      }
+    }
+    checksums.put(fileName, checksum.getValue());
+  }
+
+  public void updateFromSfvFile(String... lines) {
+    for (String line : lines) {
+      line = line.trim();
+      if (line.startsWith("";"")) {
+        final Matcher matcher = COMBINED_VALUE_PATTERN.matcher(line);
+        if (matcher.find()) {
+          final String hexString = matcher.group(1);
+          final long crc = Long.parseLong(hexString, 16);
+          combinedChecksum = new PreDefinedImmutableChecksum(crc);
+        }
+      } else {
+        final Matcher matcher = FILE_CRC_PATTERN.matcher(line);
+        if (matcher.find()) {
+          final Long crc = Long.parseLong(matcher.group(2), 16);
+          final String fileName = matcher.group(1).trim();
+          checksums.put(fileName, crc);
+        }
+      }
+    }
+  }
+
+  byte[] serializeSfvFileData() throws IOException {
+    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(baos, UTF_8));
+    writer.write(""; This is an SFC checksum file for all files in the given directory."");
+    writer.newLine();
+    writer.write(""; You might use cksfv or another tool to validate these files manually."");
+    writer.newLine();
+    writer.write(""; This is an automatically created file - please do NOT modify."");
+    writer.newLine();
+    if (snapshotDirectoryComment != null) {
+      writer.write(SNAPSHOT_DIRECTORY_PREFIX);
+      writer.write(snapshotDirectoryComment);
+      writer.newLine();
+    }
+    writer.write(COMBINED_VALUE_PREFIX);
+    writer.write(Long.toHexString(combinedChecksum.getValue()));
+    writer.newLine();
+    writer.write(""; number of files used for combined value = "" + checksums.size());
+    writer.newLine();
+    for (Entry<String, Long> entry : checksums.entrySet()) {
+      writer.write(entry.getKey());
+      writer.write(FILE_CRC_SEPARATOR);
+      writer.write(Long.toHexString(entry.getValue()));
+      writer.newLine();
+    }
+    writer.flush();
+    return baos.toByteArray();
+  }
+
+  private static class PreDefinedImmutableChecksum implements Checksum {
+
+    private final long crc;
+
+    public PreDefinedImmutableChecksum(long crc) {
+      this.crc = crc;
+    }
+
+    @Override
+    public void update(int b) {
+      throw getUnsupportedOperationException();
+    }
+
+    @Override
+    public void update(byte[] b, int off, int len) {
+      throw getUnsupportedOperationException();
+    }
+
+    @Override
+    public long getValue() {
+      return crc;
+    }
+
+    @Override
+    public void reset() {
+      throw getUnsupportedOperationException();
+    }
+
+    private static UnsupportedOperationException getUnsupportedOperationException() {
+      return new UnsupportedOperationException(""This is an immutable checksum."");
+    }
+  }
+}
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
index 37dcf40..baf810f 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
@@ -9,16 +9,10 @@ package io.camunda.zeebe.snapshots.impl;
 
 import java.io.IOException;
 import java.io.RandomAccessFile;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
 import java.util.List;
 import java.util.stream.Collectors;
-import java.util.zip.Checksum;
-import org.agrona.IoUtil;
 
 final class SnapshotChecksum {
 
@@ -26,43 +20,50 @@ final class SnapshotChecksum {
     throw new IllegalStateException(""Utility class"");
   }
 
-  public static long read(final Path checksumPath) throws IOException {
+  public static SfvChecksum read(final Path checksumPath) throws IOException {
     try (final RandomAccessFile checksumFile = new RandomAccessFile(checksumPath.toFile(), ""r"")) {
-      return checksumFile.readLong();
+      if (checksumFile.length() == 8) {
+        // compatibility mode
+        final long combinedChecksum = checksumFile.readLong();
+        return new SfvChecksum(combinedChecksum);
+      }
+      final SfvChecksum sfvChecksum = new SfvChecksum();
+      String line;
+      while ((line = checksumFile.readLine()) != null) {
+        sfvChecksum.updateFromSfvFile(line);
+      }
+      return sfvChecksum;
     }
   }
 
-  public static long calculate(final Path snapshotDirectory) throws IOException {
+  public static SfvChecksum calculate(final Path snapshotDirectory) throws IOException {
     try (final var fileStream = Files.list(snapshotDirectory).sorted()) {
-      return createCombinedChecksum(fileStream.collect(Collectors.toList()));
+      final SfvChecksum sfvChecksum =
+          createCombinedChecksum(fileStream.collect(Collectors.toList()));
+      sfvChecksum.setSnapshotDirectoryComment(snapshotDirectory.toString());
+      return sfvChecksum;
     }
   }
 
-  public static void persist(final Path checksumPath, final long checksum) throws IOException {
+  public static void persist(final Path checksumPath, final SfvChecksum checksum)
+      throws IOException {
     try (final RandomAccessFile checksumFile = new RandomAccessFile(checksumPath.toFile(), ""rwd"")) {
-      checksumFile.writeLong(checksum);
+      final byte[] data = checksum.serializeSfvFileData();
+      checksumFile.write(data);
+      checksumFile.setLength(data.length);
     }
   }
 
-  /** computes a checksum for the files, in the order they're presented */
-  private static long createCombinedChecksum(final List<Path> paths) throws IOException {
-    final Checksum checksum = SnapshotChunkUtil.newChecksum();
-    final ByteBuffer readBuffer = ByteBuffer.allocate(IoUtil.BLOCK_SIZE);
-
-    for (final var path : paths) {
-      final byte[] chunkId = path.getFileName().toString().getBytes(StandardCharsets.UTF_8);
-      checksum.update(chunkId);
-
-      try (final FileChannel channel = FileChannel.open(path, StandardOpenOption.READ)) {
-        readBuffer.clear();
-        while (channel.read(readBuffer) > 0) {
-          readBuffer.flip();
-          checksum.update(readBuffer);
-          readBuffer.clear();
-        }
-      }
+  /**
+   * computes a checksum for the files, in the order they're presented
+   *
+   * @return the SfvChecksum object
+   */
+  private static SfvChecksum createCombinedChecksum(final List<Path> files) throws IOException {
+    final SfvChecksum checksum = new SfvChecksum();
+    for (final var f : files) {
+      checksum.updateFromFile(f);
     }
-
-    return checksum.getValue();
+    return checksum;
   }
 }
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStoreTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStoreTest.java
index e234ad4..2166ac8 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStoreTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotStoreTest.java
@@ -103,7 +103,7 @@ public class FileBasedSnapshotStoreTest {
   public void shouldNotLoadCorruptedSnapshot() throws Exception {
     // given
     final var persistedSnapshot = (FileBasedSnapshot) takeTransientSnapshot().persist().join();
-    SnapshotChecksum.persist(persistedSnapshot.getChecksumFile(), 0xCAFEL);
+    SnapshotChecksum.persist(persistedSnapshot.getChecksumFile(), new SfvChecksum(0xCAFEL));
 
     // when
     snapshotStore.close();
@@ -134,7 +134,7 @@ public class FileBasedSnapshotStoreTest {
     final var otherStore = createStore(snapshotsDir, pendingSnapshotsDir);
     final var corruptOlderSnapshot =
         (FileBasedSnapshot) takeTransientSnapshot(1, otherStore).persist().join();
-    SnapshotChecksum.persist(corruptOlderSnapshot.getChecksumFile(), 0xCAFEL);
+    SnapshotChecksum.persist(corruptOlderSnapshot.getChecksumFile(), new SfvChecksum(0xCAFEL));
 
     final var newerSnapshot =
         (FileBasedSnapshot) takeTransientSnapshot(2, snapshotStore).persist().join();
@@ -182,7 +182,7 @@ public class FileBasedSnapshotStoreTest {
     final var otherStore = createStore(snapshotsDir, pendingSnapshotsDir);
 
     // when - corrupting old snapshot and adding new valid snapshot
-    SnapshotChecksum.persist(olderSnapshot.getChecksumFile(), 0xCAFEL);
+    SnapshotChecksum.persist(olderSnapshot.getChecksumFile(), new SfvChecksum(0xCAFEL));
     final var newerSnapshot =
         (FileBasedSnapshot) takeTransientSnapshot(2, otherStore).persist().join();
 
@@ -200,7 +200,7 @@ public class FileBasedSnapshotStoreTest {
     final var otherStore = createStore(snapshotsDir, pendingSnapshotsDir);
     final var corruptSnapshot =
         (FileBasedSnapshot) takeTransientSnapshot(1, otherStore).persist().join();
-    SnapshotChecksum.persist(corruptSnapshot.getChecksumFile(), 0xCAFEL);
+    SnapshotChecksum.persist(corruptSnapshot.getChecksumFile(), new SfvChecksum(0xCAFEL));
 
     // when
     snapshotStore.close();
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SfvChecksumTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SfvChecksumTest.java
new file mode 100644
index 0000000..f53bff9
--- /dev/null
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SfvChecksumTest.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.snapshots.impl;
+
+import static io.camunda.zeebe.snapshots.impl.SnapshotChecksumTest.createChunk;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+
+public class SfvChecksumTest {
+
+  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
+
+  private SfvChecksum sfvChecksum;
+
+  @Before
+  public void setUp() throws Exception {
+    sfvChecksum = new SfvChecksum();
+  }
+
+  @Test
+  public void shouldUseDefaultValueZeroWhenInitialized() {
+    // given
+    // when
+    // then
+    assertThat(sfvChecksum.getCombinedValue()).isEqualTo(0);
+  }
+
+  @Test
+  public void shouldReadCombinedValueFromComment() {
+    // given
+    final String[] sfvLines = {""; a simple comment to be ignored"", ""; combinedValue = bbaaccdd""};
+
+    // when
+    sfvChecksum.updateFromSfvFile(sfvLines);
+
+    // then
+    assertThat(sfvChecksum.getCombinedValue()).isEqualTo(0xbbaaccddL);
+  }
+
+  @Test
+  public void shouldReadAndWriteSameValues() throws IOException {
+    // given
+    final String[] givenSfvLines = {""; combinedValue = 12345678"", ""file1   aabbccdd""};
+    sfvChecksum.updateFromSfvFile(givenSfvLines);
+    final String serialized =
+        new String(sfvChecksum.serializeSfvFileData(), StandardCharsets.UTF_8);
+
+    // when
+    final String[] actualSfVlines = serialized.split(System.lineSeparator());
+
+    // then
+    assertThat(actualSfVlines).contains(givenSfvLines[0]);
+    assertThat(actualSfVlines).contains(givenSfvLines[1]);
+  }
+
+  @Test
+  public void shouldWriteSnapshotDirectoryCommentIfPresent() throws IOException {
+    // given
+    sfvChecksum.setSnapshotDirectoryComment(""/foo/bar"");
+
+    // when
+    final String serialized =
+        new String(sfvChecksum.serializeSfvFileData(), StandardCharsets.UTF_8);
+
+    // then
+    assertThat(serialized).contains(""; snapshot directory = /foo/bar"");
+  }
+
+  @Test
+  public void shouldContainHumanReadableInstructions() throws IOException {
+    // given
+
+    // when
+    final String serialized =
+        new String(sfvChecksum.serializeSfvFileData(), StandardCharsets.UTF_8);
+
+    // then
+    assertThat(serialized)
+        .contains(""; This is an SFC checksum file for all files in the given directory."");
+    assertThat(serialized)
+        .contains(""; You might use cksfv or another tool to validate these files manually."");
+    assertThat(serialized)
+        .contains(""; This is an automatically created file - please do NOT modify."");
+  }
+
+  @Test
+  public void shouldThrowExceptionWhenUsingPreDefinedChecksumFromSfv() throws IOException {
+    // given
+    final var folder = temporaryFolder.newFolder().toPath();
+    createChunk(folder, ""file1.txt"");
+
+    // when
+    sfvChecksum.updateFromSfvFile(""; combinedValue = 12341234"");
+
+    // then
+    assertThatThrownBy(() -> sfvChecksum.updateFromFile(folder))
+        .isInstanceOf(UnsupportedOperationException.class);
+  }
+}
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
index dc4a4dd..0b0e1a8 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
@@ -9,7 +9,9 @@ package io.camunda.zeebe.snapshots.impl;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import java.io.File;
 import java.io.IOException;
+import java.io.RandomAccessFile;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -47,7 +49,7 @@ public class SnapshotChecksumTest {
     createChunk(corruptedSnapshot, ""file3.txt"");
   }
 
-  private void createChunk(final Path snapshot, final String chunkName) throws IOException {
+  static void createChunk(final Path snapshot, final String chunkName) throws IOException {
     Files.writeString(
         snapshot.resolve(chunkName),
         chunkName,
@@ -58,10 +60,10 @@ public class SnapshotChecksumTest {
   @Test
   public void shouldGenerateTheSameChecksumForOneFile() throws Exception {
     // given
-    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot);
+    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot).getCombinedValue();
 
     // when
-    final var actual = SnapshotChecksum.calculate(singleFileSnapshot);
+    final var actual = SnapshotChecksum.calculate(singleFileSnapshot).getCombinedValue();
 
     // then
     assertThat(actual).isEqualTo(expectedChecksum);
@@ -70,11 +72,11 @@ public class SnapshotChecksumTest {
   @Test
   public void shouldGenerateDifferentChecksumWhenFileNameIsDifferent() throws Exception {
     // given
-    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot);
+    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot).getCombinedValue();
 
     // when
     Files.move(singleFileSnapshot.resolve(""file1.txt""), singleFileSnapshot.resolve(""renamed""));
-    final var actual = SnapshotChecksum.calculate(singleFileSnapshot);
+    final var actual = SnapshotChecksum.calculate(singleFileSnapshot).getCombinedValue();
 
     // then
     assertThat(actual).isNotEqualTo(expectedChecksum);
@@ -83,10 +85,11 @@ public class SnapshotChecksumTest {
   @Test
   public void shouldGenerateTheSameChecksumForMultipleFiles() throws Exception {
     // given
-    final var expectedChecksum = SnapshotChecksum.calculate(multipleFileSnapshot);
+    final var expectedChecksum =
+        SnapshotChecksum.calculate(multipleFileSnapshot).getCombinedValue();
 
     // when
-    final var actual = SnapshotChecksum.calculate(multipleFileSnapshot);
+    final var actual = SnapshotChecksum.calculate(multipleFileSnapshot).getCombinedValue();
 
     // then
     assertThat(actual).isEqualTo(expectedChecksum);
@@ -95,10 +98,10 @@ public class SnapshotChecksumTest {
   @Test
   public void shouldGenerateDifferentChecksumForDifferentFiles() throws Exception {
     // given
-    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot);
+    final var expectedChecksum = SnapshotChecksum.calculate(singleFileSnapshot).getCombinedValue();
 
     // when
-    final var actual = SnapshotChecksum.calculate(multipleFileSnapshot);
+    final var actual = SnapshotChecksum.calculate(multipleFileSnapshot).getCombinedValue();
 
     // then
     assertThat(actual).isNotEqualTo(expectedChecksum);
@@ -115,7 +118,7 @@ public class SnapshotChecksumTest {
     final var actual = SnapshotChecksum.read(checksumPath);
 
     // then
-    assertThat(actual).isEqualTo(expectedChecksum);
+    assertThat(actual.getCombinedValue()).isEqualTo(expectedChecksum.getCombinedValue());
   }
 
   @Test
@@ -127,7 +130,7 @@ public class SnapshotChecksumTest {
 
     // when
     Files.delete(corruptedSnapshot.resolve(""file1.txt""));
-    final var actualChecksum = SnapshotChecksum.calculate(corruptedSnapshot);
+    final var actualChecksum = SnapshotChecksum.calculate(corruptedSnapshot).getCombinedValue();
 
     // then
     assertThat(actualChecksum).isNotEqualTo(expectedChecksum);
@@ -147,9 +150,44 @@ public class SnapshotChecksumTest {
     final var expected = checksum.getValue();
 
     // when
-    final var actual = SnapshotChecksum.calculate(largeSnapshot);
+    final var actual = SnapshotChecksum.calculate(largeSnapshot).getCombinedValue();
 
     // then
     assertThat(actual).isEqualTo(expected);
   }
+
+  @Test
+  public void shouldReadFormerSimpleChecksumFile() throws IOException {
+    // given
+    final Path temp = temporaryFolder.newFolder().toPath();
+    final File tempFile = new File(temp.toFile(), ""checksum"");
+    final long expectedChecksum = 0xccaaffeeL;
+    try (final RandomAccessFile file = new RandomAccessFile(tempFile, ""rw""); ) {
+      file.writeLong(expectedChecksum);
+    }
+
+    // when
+    final SfvChecksum sfvChecksum = SnapshotChecksum.read(tempFile.toPath());
+    final long combinedValue = sfvChecksum.getCombinedValue();
+
+    // then
+    assertThat(combinedValue).isEqualTo(expectedChecksum);
+  }
+
+  @Test
+  public void shouldWriteTheNumberOfFiles() throws IOException {
+    // given
+    final var folder = temporaryFolder.newFolder().toPath();
+    createChunk(folder, ""file1.txt"");
+    createChunk(folder, ""file2.txt"");
+    createChunk(folder, ""file3.txt"");
+    final SfvChecksum sfvChecksum = SnapshotChecksum.calculate(folder);
+
+    // when
+    final String serialized =
+        new String(sfvChecksum.serializeSfvFileData(), StandardCharsets.UTF_8);
+
+    // then
+    assertThat(serialized).contains(""; number of files used for combined value = 3"");
+  }
 }

diff --git a/clients/java/src/main/java/io/zeebe/client/api/commands/CreateJobCommandStep1.java b/clients/java/src/main/java/io/zeebe/client/api/commands/CreateJobCommandStep1.java
index baa757d..3850583 100644
--- a/clients/java/src/main/java/io/zeebe/client/api/commands/CreateJobCommandStep1.java
+++ b/clients/java/src/main/java/io/zeebe/client/api/commands/CreateJobCommandStep1.java
@@ -15,7 +15,7 @@
  */
 package io.zeebe.client.api.commands;
 
-import io.zeebe.client.api.events.JobEvent;
+import io.zeebe.client.api.response.CreateJobResponse;
 import java.io.InputStream;
 import java.util.Map;
 
@@ -31,7 +31,7 @@ public interface CreateJobCommandStep1 {
    */
   CreateJobCommandStep2 jobType(String type);
 
-  public interface CreateJobCommandStep2 extends FinalCommandStep<JobEvent> {
+  public interface CreateJobCommandStep2 extends FinalCommandStep<CreateJobResponse> {
     /**
      * Add the key-value-pair to the custom headers.
      *
diff --git a/clients/java/src/main/java/io/zeebe/client/api/response/CreateJobResponse.java b/clients/java/src/main/java/io/zeebe/client/api/response/CreateJobResponse.java
new file mode 100644
index 0000000..2145620
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/api/response/CreateJobResponse.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.api.response;
+
+public interface CreateJobResponse {
+
+  /** Partition on which the job was created; */
+  int getPartitionId();
+
+  /** Unique key of the created job on the partition */
+  long getKey();
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/ArgumentUtil.java b/clients/java/src/main/java/io/zeebe/client/impl/ArgumentUtil.java
new file mode 100644
index 0000000..b1661d9
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/impl/ArgumentUtil.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.impl;
+
+public class ArgumentUtil {
+
+  public static void ensureNotNull(String property, String value) {
+    if (value == null) {
+      throw new IllegalArgumentException(property + "" must not be null"");
+    }
+  }
+
+  public static void ensureNotEmpty(String property, String value) {
+    if (value.isEmpty()) {
+      throw new IllegalArgumentException(property + "" must not be empty"");
+    }
+  }
+
+  public static void ensureNotNullNorEmpty(String property, String value) {
+    ensureNotNull(property, value);
+    ensureNotEmpty(property, value);
+  }
+
+  public static void ensureGreaterThan(String property, long testValue, long comparisonValue) {
+    if (testValue <= comparisonValue) {
+      throw new IllegalArgumentException(property + "" must be greater than "" + comparisonValue);
+    }
+  }
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/CommandWithPayload.java b/clients/java/src/main/java/io/zeebe/client/impl/CommandWithPayload.java
new file mode 100644
index 0000000..0a7ad0e
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/impl/CommandWithPayload.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.impl;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import java.io.InputStream;
+import java.util.Map;
+
+public abstract class CommandWithPayload<T> {
+
+  private final ObjectMapper jsonObjectMapper;
+
+  public CommandWithPayload() {
+    this.jsonObjectMapper = new ObjectMapper();
+  }
+
+  public T payload(final InputStream payload) {
+    try {
+      final String payloadString = jsonObjectMapper.readTree(payload).toString();
+      return setPayloadInternal(payloadString);
+    } catch (Exception ex) {
+      throw new RuntimeException(ex);
+    }
+  }
+
+  public T payload(final String payload) {
+    try {
+      final String payloadString = jsonObjectMapper.readTree(payload).toString();
+      return setPayloadInternal(payloadString);
+    } catch (Exception ex) {
+      throw new RuntimeException(ex);
+    }
+  }
+
+  public T payload(final Map<String, Object> payload) {
+    return payload((Object) payload);
+  }
+
+  public T payload(final Object payload) {
+    try {
+      return setPayloadInternal(toJson(payload));
+    } catch (Exception ex) {
+      throw new RuntimeException(ex);
+    }
+  }
+
+  protected String toJson(final Object object) {
+    try {
+      return jsonObjectMapper.writeValueAsString(object);
+    } catch (Exception ex) {
+      throw new RuntimeException(ex);
+    }
+  }
+
+  protected abstract T setPayloadInternal(String payload);
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/JobClientImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/JobClientImpl.java
new file mode 100644
index 0000000..a306dd3
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/impl/JobClientImpl.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.impl;
+
+import io.zeebe.client.api.clients.JobClient;
+import io.zeebe.client.api.commands.CompleteJobCommandStep1;
+import io.zeebe.client.api.commands.CreateJobCommandStep1;
+import io.zeebe.client.api.commands.FailJobCommandStep1;
+import io.zeebe.client.api.commands.UpdateRetriesJobCommandStep1;
+import io.zeebe.client.api.events.JobEvent;
+import io.zeebe.client.api.subscription.JobWorkerBuilderStep1;
+import io.zeebe.client.impl.job.CreateJobCommandImpl;
+import io.zeebe.gateway.protocol.GatewayGrpc.GatewayStub;
+
+public class JobClientImpl implements JobClient {
+
+  private final GatewayStub asyncStub;
+
+  public JobClientImpl(GatewayStub asyncStub) {
+    this.asyncStub = asyncStub;
+  }
+
+  @Override
+  public CreateJobCommandStep1 newCreateCommand() {
+    return new CreateJobCommandImpl(asyncStub);
+  }
+
+  @Override
+  public CompleteJobCommandStep1 newCompleteCommand(JobEvent event) {
+    return null;
+  }
+
+  @Override
+  public FailJobCommandStep1 newFailCommand(JobEvent event) {
+    return null;
+  }
+
+  @Override
+  public UpdateRetriesJobCommandStep1 newUpdateRetriesCommand(JobEvent event) {
+    return null;
+  }
+
+  @Override
+  public JobWorkerBuilderStep1 newWorker() {
+    return null;
+  }
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
index 6ca36c9..4a7d7b8 100644
--- a/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
+++ b/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientImpl.java
@@ -70,7 +70,7 @@ public class ZeebeClientImpl implements ZeebeClient {
 
   @Override
   public JobClient jobClient() {
-    return null;
+    return new JobClientImpl(asyncStub);
   }
 
   @Override
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/job/CreateJobCommandImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/job/CreateJobCommandImpl.java
new file mode 100644
index 0000000..dba1a11
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/impl/job/CreateJobCommandImpl.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.impl.job;
+
+import io.zeebe.client.api.ZeebeFuture;
+import io.zeebe.client.api.commands.CreateJobCommandStep1;
+import io.zeebe.client.api.commands.CreateJobCommandStep1.CreateJobCommandStep2;
+import io.zeebe.client.api.response.CreateJobResponse;
+import io.zeebe.client.impl.ArgumentUtil;
+import io.zeebe.client.impl.CommandWithPayload;
+import io.zeebe.client.impl.ZeebeClientFutureImpl;
+import io.zeebe.client.impl.response.CreateJobResponseImpl;
+import io.zeebe.gateway.protocol.GatewayGrpc.GatewayStub;
+import io.zeebe.gateway.protocol.GatewayOuterClass;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobRequest;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobRequest.Builder;
+import java.util.HashMap;
+import java.util.Map;
+
+public class CreateJobCommandImpl extends CommandWithPayload<CreateJobCommandStep2>
+    implements CreateJobCommandStep1, CreateJobCommandStep2 {
+
+  private final GatewayStub asyncStub;
+  private final Builder builder;
+  private final Map<String, Object> customHeaders;
+
+  public CreateJobCommandImpl(GatewayStub asyncStub) {
+    this.asyncStub = asyncStub;
+    builder = CreateJobRequest.newBuilder();
+    customHeaders = new HashMap<>();
+
+    builder.setRetries(CreateJobCommandStep1.DEFAULT_RETRIES);
+  }
+
+  @Override
+  public CreateJobCommandStep2 addCustomHeader(final String key, final Object value) {
+    ArgumentUtil.ensureNotNull(""key"", key);
+    customHeaders.put(key, value);
+    return this;
+  }
+
+  @Override
+  public CreateJobCommandStep2 addCustomHeaders(final Map<String, Object> headers) {
+    customHeaders.putAll(headers);
+    return this;
+  }
+
+  @Override
+  public CreateJobCommandStep2 retries(final int retries) {
+    ArgumentUtil.ensureGreaterThan(""retries"", retries, 0);
+    builder.setRetries(retries);
+    return this;
+  }
+
+  public CreateJobCommandStep2 jobType(final String type) {
+    ArgumentUtil.ensureNotNullNorEmpty(""jobType"", type);
+    builder.setJobType(type);
+    return this;
+  }
+
+  @Override
+  protected CreateJobCommandStep2 setPayloadInternal(String payload) {
+    builder.setPayload(payload);
+    return this;
+  }
+
+  @Override
+  public ZeebeFuture<CreateJobResponse> send() {
+    final CreateJobRequest request = builder.setCustomHeaders(toJson(customHeaders)).build();
+
+    final ZeebeClientFutureImpl<CreateJobResponse, GatewayOuterClass.CreateJobResponse> future =
+        new ZeebeClientFutureImpl<>(CreateJobResponseImpl::new);
+
+    asyncStub.createJob(request, future);
+    return future;
+  }
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/response/CreateJobResponseImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/response/CreateJobResponseImpl.java
new file mode 100644
index 0000000..cbed957
--- /dev/null
+++ b/clients/java/src/main/java/io/zeebe/client/impl/response/CreateJobResponseImpl.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.impl.response;
+
+import io.zeebe.client.api.response.CreateJobResponse;
+import io.zeebe.gateway.protocol.GatewayOuterClass;
+
+public class CreateJobResponseImpl implements CreateJobResponse {
+
+  private int partitionId;
+  private long key;
+
+  public CreateJobResponseImpl(final GatewayOuterClass.CreateJobResponse response) {
+    partitionId = response.getPartitionId();
+    key = response.getKey();
+  }
+
+  public int getPartitionId() {
+    return partitionId;
+  }
+
+  public long getKey() {
+    return key;
+  }
+
+  @Override
+  public String toString() {
+    return ""CreateJobResponseImpl{"" + ""partitionId="" + partitionId + "", key="" + key + '}';
+  }
+}
diff --git a/clients/java/src/main/java/io/zeebe/client/impl/workflow/PublishMessageCommandImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/workflow/PublishMessageCommandImpl.java
index 11f6b9e..83e716e 100644
--- a/clients/java/src/main/java/io/zeebe/client/impl/workflow/PublishMessageCommandImpl.java
+++ b/clients/java/src/main/java/io/zeebe/client/impl/workflow/PublishMessageCommandImpl.java
@@ -15,71 +15,34 @@
  */
 package io.zeebe.client.impl.workflow;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.protobuf.Empty;
 import io.zeebe.client.ZeebeClientConfiguration;
 import io.zeebe.client.api.ZeebeFuture;
 import io.zeebe.client.api.commands.PublishMessageCommandStep1;
 import io.zeebe.client.api.commands.PublishMessageCommandStep1.PublishMessageCommandStep2;
 import io.zeebe.client.api.commands.PublishMessageCommandStep1.PublishMessageCommandStep3;
+import io.zeebe.client.impl.CommandWithPayload;
 import io.zeebe.client.impl.ZeebeClientFutureImpl;
 import io.zeebe.gateway.protocol.GatewayGrpc.GatewayStub;
 import io.zeebe.gateway.protocol.GatewayOuterClass.PublishMessageRequest;
-import java.io.InputStream;
 import java.time.Duration;
-import java.util.Map;
 
-public class PublishMessageCommandImpl
+public class PublishMessageCommandImpl extends CommandWithPayload<PublishMessageCommandImpl>
     implements PublishMessageCommandStep1, PublishMessageCommandStep2, PublishMessageCommandStep3 {
 
   private final GatewayStub asyncStub;
   private final PublishMessageRequest.Builder builder;
-  private final ObjectMapper jsonObjectMapper;
 
   public PublishMessageCommandImpl(
       final GatewayStub asyncStub, final ZeebeClientConfiguration configuration) {
     this.asyncStub = asyncStub;
-    this.jsonObjectMapper = new ObjectMapper();
     this.builder = PublishMessageRequest.newBuilder();
     builder.setTimeToLive(configuration.getDefaultMessageTimeToLive().toMillis());
   }
 
   @Override
-  public PublishMessageCommandStep3 payload(final InputStream payload) {
-    try {
-      final String payloadString = jsonObjectMapper.readTree(payload).toString();
-      builder.setPayload(payloadString);
-    } catch (Exception ex) {
-      throw new RuntimeException(ex);
-    }
-
-    return this;
-  }
-
-  @Override
-  public PublishMessageCommandStep3 payload(final String payload) {
-    try {
-      final String payloadString = jsonObjectMapper.readTree(payload).toString();
-      builder.setPayload(payloadString);
-    } catch (Exception ex) {
-      throw new RuntimeException(ex);
-    }
-    return this;
-  }
-
-  @Override
-  public PublishMessageCommandStep3 payload(final Map<String, Object> payload) {
-    return payload((Object) payload);
-  }
-
-  @Override
-  public PublishMessageCommandStep3 payload(final Object payload) {
-    try {
-      final String payloadString = jsonObjectMapper.writeValueAsString(payload);
-      builder.setPayload(payloadString);
-    } catch (Exception ex) {
-      throw new RuntimeException(ex);
-    }
+  protected PublishMessageCommandImpl setPayloadInternal(String payload) {
+    builder.setPayload(payload);
     return this;
   }
 
diff --git a/clients/java/src/test/java/io/zeebe/client/job/CreateJobTest.java b/clients/java/src/test/java/io/zeebe/client/job/CreateJobTest.java
new file mode 100644
index 0000000..fd4e4fe
--- /dev/null
+++ b/clients/java/src/test/java/io/zeebe/client/job/CreateJobTest.java
@@ -0,0 +1,183 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.client.job;
+
+import static io.zeebe.exporter.record.Assertions.assertThat;
+import static io.zeebe.test.util.record.RecordingExporter.jobRecords;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Assertions.entry;
+
+import com.google.common.base.Charsets;
+import io.zeebe.client.ZeebeClient;
+import io.zeebe.client.api.response.CreateJobResponse;
+import io.zeebe.client.cmd.ClientException;
+import io.zeebe.client.util.TestEnvironmentRule;
+import io.zeebe.exporter.record.Record;
+import io.zeebe.exporter.record.value.JobRecordValue;
+import io.zeebe.protocol.intent.JobIntent;
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+public class CreateJobTest {
+
+  @Rule public TestEnvironmentRule rule = new TestEnvironmentRule();
+
+  private ZeebeClient client;
+
+  @Before
+  public void setUp() {
+    client = rule.getClient();
+  }
+
+  @Test
+  public void shouldCreateJob() {
+    // given
+    final Map<String, Object> partialCustomHeaders = new HashMap<>();
+    partialCustomHeaders.put(""one"", 1);
+    partialCustomHeaders.put(""two"", ""II"");
+
+    // when
+    final CreateJobResponse response =
+        client
+            .jobClient()
+            .newCreateCommand()
+            .jobType(""testJob"")
+            .retries(12)
+            .addCustomHeader(""foo"", ""bar"")
+            .addCustomHeaders(partialCustomHeaders)
+            .addCustomHeader(""hello"", ""world"")
+            .send()
+            .join();
+
+    // then
+    final Record<JobRecordValue> jobRecord = jobRecords(JobIntent.CREATED).getFirst();
+
+    assertThat(jobRecord).hasKey(response.getKey());
+    assertThat(jobRecord.getMetadata()).hasPartitionId(response.getPartitionId());
+    assertThat(jobRecord.getValue()).hasType(""testJob"").hasRetries(12);
+    assertThat(jobRecord.getValue().getCustomHeaders())
+        .containsAllEntriesOf(partialCustomHeaders)
+        .containsEntry(""foo"", ""bar"")
+        .containsEntry(""hello"", ""world"");
+  }
+
+  @Test
+  public void shouldCreateJobWithStringPayload() {
+    // when
+    final CreateJobResponse response =
+        client
+            .jobClient()
+            .newCreateCommand()
+            .jobType(""testJob"")
+            .payload(""{\""foo\"": \""bar\""}"")
+            .send()
+            .join();
+
+    // then
+    final Record<JobRecordValue> jobRecord = jobRecords(JobIntent.CREATED).getFirst();
+
+    assertThat(jobRecord).hasKey(response.getKey());
+    assertThat(jobRecord.getValue().getPayloadAsMap()).containsOnly(entry(""foo"", ""bar""));
+  }
+
+  @Test
+  public void shouldCreateJobWithInputStreamPayload() {
+    // given
+    final String payload = ""{\""foo\"": \""bar\""}"";
+    final InputStream inputStream = new ByteArrayInputStream(payload.getBytes(Charsets.UTF_8));
+
+    // when
+    final CreateJobResponse response =
+        client.jobClient().newCreateCommand().jobType(""testJob"").payload(inputStream).send().join();
+
+    // then
+    final Record<JobRecordValue> jobRecord = jobRecords(JobIntent.CREATED).getFirst();
+
+    assertThat(jobRecord).hasKey(response.getKey());
+    assertThat(jobRecord.getValue().getPayloadAsMap()).containsOnly(entry(""foo"", ""bar""));
+  }
+
+  @Test
+  public void shouldCreateJobWithMapPayload() {
+    // when
+    final CreateJobResponse response =
+        client
+            .jobClient()
+            .newCreateCommand()
+            .jobType(""testJob"")
+            .payload(Collections.singletonMap(""foo"", ""bar""))
+            .send()
+            .join();
+
+    // then
+    final Record<JobRecordValue> jobRecord = jobRecords(JobIntent.CREATED).getFirst();
+
+    assertThat(jobRecord).hasKey(response.getKey());
+    assertThat(jobRecord.getValue().getPayloadAsMap()).containsOnly(entry(""foo"", ""bar""));
+  }
+
+  @Test
+  public void shouldCreateJobWithObjectPayload() {
+    // when
+    final CreateJobResponse response =
+        client
+            .jobClient()
+            .newCreateCommand()
+            .jobType(""testJob"")
+            .payload(new Payload())
+            .send()
+            .join();
+
+    // then
+    final Record<JobRecordValue> jobRecord = jobRecords(JobIntent.CREATED).getFirst();
+
+    assertThat(jobRecord).hasKey(response.getKey());
+    assertThat(jobRecord.getValue().getPayloadAsMap()).containsOnly(entry(""foo"", ""bar""));
+  }
+
+  @Test
+  public void shouldNotPublishMessageWithNoJsonObjectAsPayload() {
+    assertThatThrownBy(
+            () ->
+                client
+                    .jobClient()
+                    .newCreateCommand()
+                    .jobType(""testJob"")
+                    .payload(""[]"")
+                    .send()
+                    .join())
+        .isInstanceOf(ClientException.class)
+        .hasMessageContaining(""Could not read property 'payload'"");
+  }
+
+  public static class Payload {
+
+    private final String foo = ""bar"";
+
+    Payload() {}
+
+    public String getFoo() {
+      return foo;
+    }
+  }
+}
diff --git a/gateway-protocol/src/main/proto/gateway.proto b/gateway-protocol/src/main/proto/gateway.proto
index f00d827..297da5c 100644
--- a/gateway-protocol/src/main/proto/gateway.proto
+++ b/gateway-protocol/src/main/proto/gateway.proto
@@ -61,6 +61,18 @@ message PublishMessageRequest {
   string payload = 5;
 }
 
+message CreateJobRequest {
+  string jobType = 1;
+  int32 retries = 2;
+  string customHeaders = 3;
+  string payload = 4;
+}
+
+message CreateJobResponse {
+  int32 partitionId = 1;
+  int64 key = 2;
+}
+
 service Gateway {
   rpc Health (HealthRequest) returns (HealthResponse) {
   }
@@ -68,4 +80,6 @@ service Gateway {
   }
   rpc PublishMessage (PublishMessageRequest) returns (google.protobuf.Empty) {
   }
+  rpc CreateJob (CreateJobRequest) returns (CreateJobResponse) {
+  }
 }
diff --git a/gateway/src/main/java/io/zeebe/gateway/ClusterClient.java b/gateway/src/main/java/io/zeebe/gateway/ClusterClient.java
index de19a8b..e1d2d20 100644
--- a/gateway/src/main/java/io/zeebe/gateway/ClusterClient.java
+++ b/gateway/src/main/java/io/zeebe/gateway/ClusterClient.java
@@ -18,7 +18,10 @@ package io.zeebe.gateway;
 import io.zeebe.gateway.api.commands.DeployWorkflowCommandStep1.DeployWorkflowCommandBuilderStep2;
 import io.zeebe.gateway.api.commands.Topology;
 import io.zeebe.gateway.api.events.DeploymentEvent;
+import io.zeebe.gateway.api.events.JobEvent;
 import io.zeebe.gateway.api.events.MessageEvent;
+import io.zeebe.gateway.impl.data.ZeebeObjectMapperImpl;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobRequest;
 import io.zeebe.gateway.protocol.GatewayOuterClass.DeployWorkflowRequest;
 import io.zeebe.gateway.protocol.GatewayOuterClass.HealthRequest;
 import io.zeebe.gateway.protocol.GatewayOuterClass.PublishMessageRequest;
@@ -26,9 +29,12 @@ import io.zeebe.gateway.protocol.GatewayOuterClass.WorkflowRequestObject;
 import io.zeebe.util.sched.future.ActorFuture;
 import java.time.Duration;
 import java.util.List;
+import java.util.Map;
 
 public class ClusterClient {
 
+  private static final String EMPTY_OBJECT = ""{}"";
+
   private final ZeebeClient client;
 
   public ClusterClient(final ZeebeClient client) {
@@ -65,10 +71,7 @@ public class ClusterClient {
   }
 
   public ActorFuture<MessageEvent> sendPublishMessage(final PublishMessageRequest messageRequest) {
-    String payload = messageRequest.getPayload();
-    if (payload == null || payload.trim().isEmpty()) {
-      payload = ""{}"";
-    }
+    final String payload = ensureJsonSet(messageRequest.getPayload());
 
     return client
         .workflowClient()
@@ -80,4 +83,30 @@ public class ClusterClient {
         .timeToLive(Duration.ofMillis(messageRequest.getTimeToLive()))
         .send();
   }
+
+  public ActorFuture<JobEvent> sendCreateJob(CreateJobRequest request) {
+    final String payload = ensureJsonSet(request.getPayload());
+    final String customHeaders = ensureJsonSet(request.getCustomHeaders());
+
+    return client
+        .jobClient()
+        .newCreateCommand()
+        .jobType(request.getJobType())
+        .retries(request.getRetries())
+        .payload(payload)
+        .addCustomHeaders(jsonToMap(customHeaders))
+        .send();
+  }
+
+  private String ensureJsonSet(final String value) {
+    if (value == null || value.trim().isEmpty()) {
+      return EMPTY_OBJECT;
+    } else {
+      return value;
+    }
+  }
+
+  private Map<String, Object> jsonToMap(final String json) {
+    return ((ZeebeObjectMapperImpl) client.objectMapper()).fromJsonAsMap(json);
+  }
 }
diff --git a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java
index bfef926..36aff85 100644
--- a/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java
+++ b/gateway/src/main/java/io/zeebe/gateway/EndpointManager.java
@@ -19,8 +19,11 @@ import com.google.protobuf.Empty;
 import io.grpc.stub.StreamObserver;
 import io.zeebe.gateway.api.commands.Topology;
 import io.zeebe.gateway.api.events.DeploymentEvent;
+import io.zeebe.gateway.api.events.JobEvent;
 import io.zeebe.gateway.api.events.MessageEvent;
 import io.zeebe.gateway.protocol.GatewayGrpc;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobRequest;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobResponse;
 import io.zeebe.gateway.protocol.GatewayOuterClass.DeployWorkflowRequest;
 import io.zeebe.gateway.protocol.GatewayOuterClass.DeployWorkflowResponse;
 import io.zeebe.gateway.protocol.GatewayOuterClass.HealthRequest;
@@ -68,4 +71,12 @@ public class EndpointManager extends GatewayGrpc.GatewayImplBase {
     final ActorFuture<MessageEvent> responseFuture = clusterClient.sendPublishMessage(request);
     requestActor.handleResponse(responseFuture, responseMapper::emptyResponse, responseObserver);
   }
+
+  @Override
+  public void createJob(
+      CreateJobRequest request, StreamObserver<CreateJobResponse> responseObserver) {
+    final ActorFuture<JobEvent> responseFuture = clusterClient.sendCreateJob(request);
+    requestActor.handleResponse(
+        responseFuture, responseMapper::toCreateJobResponse, responseObserver);
+  }
 }
diff --git a/gateway/src/main/java/io/zeebe/gateway/ResponseMapper.java b/gateway/src/main/java/io/zeebe/gateway/ResponseMapper.java
index cfb7862..70f1b76 100644
--- a/gateway/src/main/java/io/zeebe/gateway/ResponseMapper.java
+++ b/gateway/src/main/java/io/zeebe/gateway/ResponseMapper.java
@@ -20,9 +20,11 @@ import io.zeebe.gateway.api.commands.PartitionInfo;
 import io.zeebe.gateway.api.commands.Topology;
 import io.zeebe.gateway.api.commands.Workflow;
 import io.zeebe.gateway.api.events.DeploymentEvent;
+import io.zeebe.gateway.api.events.JobEvent;
 import io.zeebe.gateway.cmd.ClientException;
 import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;
 import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo.Builder;
+import io.zeebe.gateway.protocol.GatewayOuterClass.CreateJobResponse;
 import io.zeebe.gateway.protocol.GatewayOuterClass.DeployWorkflowResponse;
 import io.zeebe.gateway.protocol.GatewayOuterClass.HealthResponse;
 import io.zeebe.gateway.protocol.GatewayOuterClass.Partition;
@@ -89,4 +91,11 @@ public class ResponseMapper {
   public Empty emptyResponse(final Object response) {
     return Empty.getDefaultInstance();
   }
+
+  public CreateJobResponse toCreateJobResponse(final JobEvent jobEvent) {
+    return CreateJobResponse.newBuilder()
+        .setKey(jobEvent.getKey())
+        .setPartitionId(jobEvent.getMetadata().getPartitionId())
+        .build();
+  }
 }

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/MemberLeaveApplier.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/MemberLeaveApplier.java
new file mode 100644
index 0000000..5fe5673
--- /dev/null
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/MemberLeaveApplier.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.topology.changes;
+
+import io.atomix.cluster.MemberId;
+import io.camunda.zeebe.scheduler.future.ActorFuture;
+import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
+import io.camunda.zeebe.topology.changes.TopologyChangeAppliers.OperationApplier;
+import io.camunda.zeebe.topology.state.ClusterTopology;
+import io.camunda.zeebe.topology.state.MemberState;
+import io.camunda.zeebe.util.Either;
+import java.util.function.UnaryOperator;
+
+public class MemberLeaveApplier implements OperationApplier {
+
+  private final MemberId memberId;
+  private final TopologyMembershipChangeExecutor topologyMembershipChangeExecutor;
+
+  public MemberLeaveApplier(
+      final MemberId memberId,
+      final TopologyMembershipChangeExecutor topologyMembershipChangeExecutor) {
+    this.memberId = memberId;
+    this.topologyMembershipChangeExecutor = topologyMembershipChangeExecutor;
+  }
+
+  @Override
+  public Either<Exception, UnaryOperator<MemberState>> init(
+      final ClusterTopology currentClusterTopology) {
+    if (!currentClusterTopology.hasMember(memberId)) {
+      return Either.left(
+          new IllegalStateException(
+              String.format(
+                  ""Expected to remove member %s, but the member is not part of the topology"",
+                  memberId)));
+    }
+
+    final boolean hasPartitions =
+        !currentClusterTopology.getMember(memberId).partitions().isEmpty();
+    if (hasPartitions) {
+      return Either.left(
+          new IllegalStateException(
+              String.format(
+                  ""Expected to remove member %s, but the member still has partitions assigned. Partitions: [%s]"",
+                  memberId, currentClusterTopology.getMember(memberId).partitions())));
+    }
+
+    return Either.right(MemberState::toLeaving);
+  }
+
+  @Override
+  public ActorFuture<UnaryOperator<MemberState>> apply() {
+    final var future = new CompletableActorFuture<UnaryOperator<MemberState>>();
+    topologyMembershipChangeExecutor
+        .removeBroker(memberId)
+        .onComplete(
+            (ignore, error) -> {
+              if (error == null) {
+                future.complete(MemberState::toLeft);
+              } else {
+                future.completeExceptionally(error);
+              }
+            });
+
+    return future;
+  }
+}
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/NoopTopologyMembershipChangeExecutor.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/NoopTopologyMembershipChangeExecutor.java
index 1b8fc64..884e938 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/NoopTopologyMembershipChangeExecutor.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/NoopTopologyMembershipChangeExecutor.java
@@ -17,4 +17,9 @@ public class NoopTopologyMembershipChangeExecutor implements TopologyMembershipC
   public ActorFuture<Void> addBroker(final MemberId memberId) {
     return CompletableActorFuture.completed(null);
   }
+
+  @Override
+  public ActorFuture<Void> removeBroker(final MemberId memberId) {
+    return CompletableActorFuture.completed(null);
+  }
 }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
index c0692ef..71736a8 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
@@ -13,6 +13,7 @@ import io.camunda.zeebe.topology.state.ClusterTopology;
 import io.camunda.zeebe.topology.state.MemberState;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.MemberJoinOperation;
+import io.camunda.zeebe.topology.state.TopologyChangeOperation.MemberLeaveOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.PartitionChangeOperation.PartitionJoinOperation;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation.PartitionChangeOperation.PartitionLeaveOperation;
 import io.camunda.zeebe.util.Either;
@@ -44,7 +45,9 @@ public class TopologyChangeAppliersImpl implements TopologyChangeAppliers {
     } else if (operation instanceof final MemberJoinOperation memberJoinOperation) {
       return new MemberJoinApplier(
           memberJoinOperation.memberId(), topologyMembershipChangeExecutor);
-
+    } else if (operation instanceof final MemberLeaveOperation memberLeaveOperation) {
+      return new MemberLeaveApplier(
+          memberLeaveOperation.memberId(), topologyMembershipChangeExecutor);
     } else {
       return new FailingApplier(operation);
     }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyMembershipChangeExecutor.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyMembershipChangeExecutor.java
index f1189c3..67e33fe 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyMembershipChangeExecutor.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyMembershipChangeExecutor.java
@@ -20,4 +20,12 @@ public interface TopologyMembershipChangeExecutor {
    * @return future when the operation is completed.
    */
   ActorFuture<Void> addBroker(MemberId memberId);
+
+  /**
+   * The implementation of this method can react to a node leaving the cluster.
+   *
+   * @param memberId id of the member that is leaving the cluster
+   * @return future when the operation is completed
+   */
+  ActorFuture<Void> removeBroker(MemberId memberId);
 }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/state/TopologyChangeOperation.java b/topology/src/main/java/io/camunda/zeebe/topology/state/TopologyChangeOperation.java
index 3a2ae3b..a2396fa 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/state/TopologyChangeOperation.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/state/TopologyChangeOperation.java
@@ -19,6 +19,8 @@ public sealed interface TopologyChangeOperation {
 
   record MemberJoinOperation(MemberId memberId) implements TopologyChangeOperation {}
 
+  record MemberLeaveOperation(MemberId memberId) implements TopologyChangeOperation {}
+
   sealed interface PartitionChangeOperation extends TopologyChangeOperation {
     int partitionId();
 

diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/BpmnStepHandlers.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/BpmnStepHandlers.java
index 458c762..6c8fbad 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/BpmnStepHandlers.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/BpmnStepHandlers.java
@@ -28,6 +28,7 @@ import io.zeebe.engine.processor.workflow.handlers.container.ContainerElementAct
 import io.zeebe.engine.processor.workflow.handlers.container.ContainerElementTerminatingHandler;
 import io.zeebe.engine.processor.workflow.handlers.container.ProcessCompletedHandler;
 import io.zeebe.engine.processor.workflow.handlers.container.ProcessTerminatedHandler;
+import io.zeebe.engine.processor.workflow.handlers.container.WorkflowResultSender;
 import io.zeebe.engine.processor.workflow.handlers.element.ElementActivatedHandler;
 import io.zeebe.engine.processor.workflow.handlers.element.ElementActivatingHandler;
 import io.zeebe.engine.processor.workflow.handlers.element.ElementCompletedHandler;
@@ -54,17 +55,21 @@ import io.zeebe.engine.processor.workflow.handlers.seqflow.ParallelMergeSequence
 import io.zeebe.engine.processor.workflow.handlers.seqflow.SequenceFlowTakenHandler;
 import io.zeebe.engine.processor.workflow.handlers.servicetask.ServiceTaskElementActivatedHandler;
 import io.zeebe.engine.processor.workflow.handlers.servicetask.ServiceTaskElementTerminatingHandler;
+import io.zeebe.engine.processor.workflow.message.BufferedMessageToStartEventCorrelator;
 import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
 import java.util.EnumMap;
+import java.util.List;
 import java.util.Map;
 
 public class BpmnStepHandlers {
   private final Map<BpmnStep, BpmnStepHandler<?>> stepHandlers = new EnumMap<>(BpmnStep.class);
 
-  public BpmnStepHandlers(final ZeebeState state, final CatchEventBehavior catchEventBehavior) {
+  BpmnStepHandlers(final ZeebeState state, final CatchEventBehavior catchEventBehavior) {
     final IncidentResolver incidentResolver = new IncidentResolver(state.getIncidentState());
     final CatchEventSubscriber catchEventSubscriber = new CatchEventSubscriber(catchEventBehavior);
+    final BufferedMessageToStartEventCorrelator messageStartEventCorrelator =
+        new BufferedMessageToStartEventCorrelator(state.getKeyGenerator(), state.getMessageState());
 
     stepHandlers.put(BpmnStep.ELEMENT_ACTIVATING, new ElementActivatingHandler<>());
     stepHandlers.put(BpmnStep.ELEMENT_ACTIVATED, new ElementActivatedHandler<>());
@@ -96,8 +101,13 @@ public class BpmnStepHandlers {
     stepHandlers.put(
         BpmnStep.CONTAINER_ELEMENT_TERMINATING,
         new ContainerElementTerminatingHandler<>(catchEventSubscriber));
-    stepHandlers.put(BpmnStep.PROCESS_COMPLETED, new ProcessCompletedHandler());
-    stepHandlers.put(BpmnStep.PROCESS_TERMINATED, new ProcessTerminatedHandler(incidentResolver));
+    stepHandlers.put(
+        BpmnStep.PROCESS_COMPLETED,
+        new ProcessCompletedHandler(
+            List.of(new WorkflowResultSender(), messageStartEventCorrelator)));
+    stepHandlers.put(
+        BpmnStep.PROCESS_TERMINATED,
+        new ProcessTerminatedHandler(incidentResolver, messageStartEventCorrelator));
 
     stepHandlers.put(
         BpmnStep.EVENT_BASED_GATEWAY_ELEMENT_ACTIVATING,
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/catchevent/StartEventEventOccurredHandler.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/catchevent/StartEventEventOccurredHandler.java
index 42b7995..6addd5a 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/catchevent/StartEventEventOccurredHandler.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/catchevent/StartEventEventOccurredHandler.java
@@ -46,7 +46,7 @@ public class StartEventEventOccurredHandler<T extends ExecutableCatchEventElemen
     final WorkflowInstanceRecord event = context.getValue();
     final long workflowKey = event.getWorkflowKey();
     final DeployedWorkflow workflow = state.getWorkflowByKey(workflowKey);
-    final long workflowInstanceKey = keyGenerator.nextKey();
+    final long workflowInstanceKey = event.getWorkflowInstanceKey();
 
     // this should never happen because workflows are never deleted.
     if (workflow == null) {
@@ -75,6 +75,12 @@ public class StartEventEventOccurredHandler<T extends ExecutableCatchEventElemen
     return true;
   }
 
+  @Override
+  protected boolean shouldHandleState(final BpmnStepContext<T> context) {
+    // workflow instance key is set before but the instance is not activated yet (i.e. not in state)
+    return context.getValue().getWorkflowInstanceKey() > 0 && context.getElementInstance() == null;
+  }
+
   private void createWorkflowInstance(
       final BpmnStepContext<T> context,
       final DeployedWorkflow workflow,
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessCompletedHandler.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessCompletedHandler.java
index 33f5c38..65a5bc2 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessCompletedHandler.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessCompletedHandler.java
@@ -7,27 +7,23 @@
  */
 package io.zeebe.engine.processor.workflow.handlers.container;
 
-import io.zeebe.engine.processor.TypedResponseWriter;
 import io.zeebe.engine.processor.workflow.BpmnStepContext;
 import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;
 import io.zeebe.engine.processor.workflow.handlers.element.ElementCompletedHandler;
-import io.zeebe.engine.state.instance.AwaitWorkflowInstanceResultMetadata;
-import io.zeebe.engine.state.instance.VariablesState;
-import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceResultRecord;
-import io.zeebe.protocol.record.ValueType;
 import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
-import io.zeebe.protocol.record.intent.WorkflowInstanceResultIntent;
-import java.util.HashSet;
-import java.util.Set;
-import org.agrona.DirectBuffer;
-import org.agrona.MutableDirectBuffer;
-import org.agrona.concurrent.UnsafeBuffer;
+import java.util.List;
 
 public class ProcessCompletedHandler
     extends ElementCompletedHandler<ExecutableFlowElementContainer> {
 
+  private final List<WorkflowPostProcessor> postProcessors;
+
+  public ProcessCompletedHandler(final List<WorkflowPostProcessor> postProcessors) {
+    this.postProcessors = postProcessors;
+  }
+
   @Override
-  protected boolean handleState(BpmnStepContext<ExecutableFlowElementContainer> context) {
+  protected boolean handleState(final BpmnStepContext<ExecutableFlowElementContainer> context) {
 
     final var record = context.getValue();
     final var parentWorkflowInstanceKey = record.getParentWorkflowInstanceKey();
@@ -55,66 +51,10 @@ public class ProcessCompletedHandler
         final var variables = variablesState.getVariablesAsDocument(context.getKey());
         variablesState.setTemporaryVariables(parentElementInstanceKey, variables);
       }
-    } else {
-      sendProcessCompletedResult(context);
-    }
-
-    return super.handleState(context);
-  }
-
-  private void sendProcessCompletedResult(BpmnStepContext context) {
-
-    final long elementInstanceKey = context.getElementInstance().getKey();
-    final AwaitWorkflowInstanceResultMetadata requestMetadata =
-        context.getElementInstanceState().getAwaitResultRequestMetadata(elementInstanceKey);
-    if (requestMetadata != null) {
-      final DirectBuffer variablesAsDocument =
-          collectVariables(
-              context.getElementInstanceState().getVariablesState(),
-              requestMetadata,
-              elementInstanceKey);
-
-      final WorkflowInstanceResultRecord resultRecord = new WorkflowInstanceResultRecord();
-      resultRecord
-          .setWorkflowInstanceKey(context.getValue().getWorkflowInstanceKey())
-          .setWorkflowKey(context.getValue().getWorkflowKey())
-          .setVariables(variablesAsDocument)
-          .setBpmnProcessId(context.getValue().getBpmnProcessId())
-          .setVersion(context.getValue().getVersion());
-
-      final TypedResponseWriter responseWriter = context.getOutput().getResponseWriter();
-      responseWriter.writeResponse(
-          context.getKey(),
-          WorkflowInstanceResultIntent.COMPLETED,
-          resultRecord,
-          ValueType.WORKFLOW_INSTANCE_RESULT,
-          requestMetadata.getRequestId(),
-          requestMetadata.getRequestStreamId());
-
-      context.getSideEffect().add(responseWriter::flush);
     }
-  }
-
-  private DirectBuffer collectVariables(
-      VariablesState variablesState,
-      AwaitWorkflowInstanceResultMetadata requestMetadata,
-      long elementInstanceKey) {
 
-    final Set<DirectBuffer> variablesToCollect = new HashSet<>();
-    if (requestMetadata.fetchVariables().iterator().hasNext()) {
-      requestMetadata
-          .fetchVariables()
-          .forEach(
-              variable -> {
-                final MutableDirectBuffer nameCopy =
-                    new UnsafeBuffer(new byte[variable.getValue().capacity()]);
-                nameCopy.putBytes(0, variable.getValue(), 0, variable.getValue().capacity());
-                variablesToCollect.add(nameCopy);
-              });
+    postProcessors.forEach(p -> p.accept(context));
 
-      return variablesState.getVariablesAsDocument(elementInstanceKey, variablesToCollect);
-    } else {
-      return variablesState.getVariablesAsDocument(elementInstanceKey);
-    }
+    return super.handleState(context);
   }
 }
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessTerminatedHandler.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessTerminatedHandler.java
index e8db793..c0d971f 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessTerminatedHandler.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/ProcessTerminatedHandler.java
@@ -16,12 +16,16 @@ import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
 public class ProcessTerminatedHandler
     extends ElementTerminatedHandler<ExecutableFlowElementContainer> {
 
-  public ProcessTerminatedHandler(IncidentResolver incidentResolver) {
+  private final WorkflowPostProcessor postProcessor;
+
+  public ProcessTerminatedHandler(
+      final IncidentResolver incidentResolver, final WorkflowPostProcessor postProcessor) {
     super(incidentResolver);
+    this.postProcessor = postProcessor;
   }
 
   @Override
-  protected boolean handleState(BpmnStepContext<ExecutableFlowElementContainer> context) {
+  protected boolean handleState(final BpmnStepContext<ExecutableFlowElementContainer> context) {
     if (!super.handleState(context)) {
       return false;
     }
@@ -48,6 +52,8 @@ public class ProcessTerminatedHandler
       }
     }
 
+    postProcessor.accept(context);
+
     return true;
   }
 }
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowPostProcessor.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowPostProcessor.java
new file mode 100644
index 0000000..5f5d984
--- /dev/null
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowPostProcessor.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.engine.processor.workflow.handlers.container;
+
+import io.zeebe.engine.processor.workflow.BpmnStepContext;
+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;
+
+@FunctionalInterface
+public interface WorkflowPostProcessor {
+
+  void accept(BpmnStepContext<ExecutableFlowElementContainer> context);
+}
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowResultSender.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowResultSender.java
new file mode 100644
index 0000000..b289caa
--- /dev/null
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/container/WorkflowResultSender.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.engine.processor.workflow.handlers.container;
+
+import io.zeebe.engine.processor.TypedResponseWriter;
+import io.zeebe.engine.processor.workflow.BpmnStepContext;
+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;
+import io.zeebe.engine.state.instance.AwaitWorkflowInstanceResultMetadata;
+import io.zeebe.engine.state.instance.VariablesState;
+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceResultRecord;
+import io.zeebe.protocol.record.ValueType;
+import io.zeebe.protocol.record.intent.WorkflowInstanceResultIntent;
+import io.zeebe.util.buffer.BufferUtil;
+import java.util.HashSet;
+import java.util.Set;
+import org.agrona.DirectBuffer;
+
+public class WorkflowResultSender implements WorkflowPostProcessor {
+
+  @Override
+  public void accept(final BpmnStepContext<ExecutableFlowElementContainer> context) {
+    final long elementInstanceKey = context.getElementInstance().getKey();
+
+    final AwaitWorkflowInstanceResultMetadata requestMetadata =
+        context.getElementInstanceState().getAwaitResultRequestMetadata(elementInstanceKey);
+
+    if (requestMetadata != null) {
+      sendResult(context, elementInstanceKey, requestMetadata);
+    }
+  }
+
+  private void sendResult(
+      final BpmnStepContext<ExecutableFlowElementContainer> context,
+      final long elementInstanceKey,
+      final AwaitWorkflowInstanceResultMetadata requestMetadata) {
+
+    final DirectBuffer variablesAsDocument =
+        collectVariables(
+            context.getElementInstanceState().getVariablesState(),
+            requestMetadata,
+            elementInstanceKey);
+
+    final WorkflowInstanceResultRecord resultRecord = new WorkflowInstanceResultRecord();
+    resultRecord
+        .setWorkflowInstanceKey(context.getValue().getWorkflowInstanceKey())
+        .setWorkflowKey(context.getValue().getWorkflowKey())
+        .setVariables(variablesAsDocument)
+        .setBpmnProcessId(context.getValue().getBpmnProcessId())
+        .setVersion(context.getValue().getVersion());
+
+    final TypedResponseWriter responseWriter = context.getOutput().getResponseWriter();
+    responseWriter.writeResponse(
+        context.getKey(),
+        WorkflowInstanceResultIntent.COMPLETED,
+        resultRecord,
+        ValueType.WORKFLOW_INSTANCE_RESULT,
+        requestMetadata.getRequestId(),
+        requestMetadata.getRequestStreamId());
+
+    context.getSideEffect().add(responseWriter::flush);
+  }
+
+  private DirectBuffer collectVariables(
+      final VariablesState variablesState,
+      final AwaitWorkflowInstanceResultMetadata requestMetadata,
+      final long elementInstanceKey) {
+
+    final Set<DirectBuffer> variablesToCollect = new HashSet<>();
+    if (requestMetadata.fetchVariables().iterator().hasNext()) {
+      requestMetadata
+          .fetchVariables()
+          .forEach(
+              variable -> {
+                final DirectBuffer name = BufferUtil.cloneBuffer(variable.getValue());
+                variablesToCollect.add(name);
+              });
+
+      return variablesState.getVariablesAsDocument(elementInstanceKey, variablesToCollect);
+    } else {
+      return variablesState.getVariablesAsDocument(elementInstanceKey);
+    }
+  }
+}
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandler.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandler.java
index 0a890d0..a3d3b3e 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandler.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandler.java
@@ -37,8 +37,7 @@ public class EventOccurredHandler<T extends ExecutableFlowElement> extends Abstr
 
   @Override
   protected boolean shouldHandleState(final BpmnStepContext<T> context) {
-    return super.shouldHandleState(context)
-        && (!hasWorkflowInstance(context) || isElementActive(context.getElementInstance()));
+    return super.shouldHandleState(context) && isElementActive(context.getElementInstance());
   }
 
   /**
@@ -138,12 +137,4 @@ public class EventOccurredHandler<T extends ExecutableFlowElement> extends Abstr
 
     return eventRecord;
   }
-
-  /**
-   * Timer/Message start events publish an EVENT_OCCURRED event to their respective flow elements,
-   * but these are not initially part of a workflow instance.
-   */
-  private boolean hasWorkflowInstance(final BpmnStepContext<T> context) {
-    return context.getValue().getWorkflowInstanceKey() >= 0;
-  }
 }
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java
new file mode 100644
index 0000000..3bb567f
--- /dev/null
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java
@@ -0,0 +1,176 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.engine.processor.workflow.message;
+
+import io.zeebe.engine.processor.KeyGenerator;
+import io.zeebe.engine.processor.workflow.BpmnStepContext;
+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;
+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableStartEvent;
+import io.zeebe.engine.processor.workflow.handlers.container.WorkflowPostProcessor;
+import io.zeebe.engine.state.deployment.DeployedWorkflow;
+import io.zeebe.engine.state.message.Message;
+import io.zeebe.engine.state.message.MessageState;
+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;
+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
+import io.zeebe.protocol.record.value.BpmnElementType;
+import io.zeebe.util.sched.clock.ActorClock;
+import org.agrona.DirectBuffer;
+
+public class BufferedMessageToStartEventCorrelator implements WorkflowPostProcessor {
+
+  private final MessageState messageState;
+  private final KeyGenerator keyGenerator;
+
+  private final WorkflowInstanceRecord startEventRecord =
+      new WorkflowInstanceRecord().setBpmnElementType(BpmnElementType.START_EVENT);
+
+  private final Correlation messageCorrelation = new Correlation();
+
+  public BufferedMessageToStartEventCorrelator(
+      final KeyGenerator keyGenerator, final MessageState messageState) {
+    this.keyGenerator = keyGenerator;
+    this.messageState = messageState;
+  }
+
+  @Override
+  public void accept(final BpmnStepContext<ExecutableFlowElementContainer> context) {
+
+    final var workflowInstanceKey = context.getValue().getWorkflowInstanceKey();
+    final var correlationKey = messageState.getWorkflowInstanceCorrelationKey(workflowInstanceKey);
+
+    if (correlationKey != null) {
+      messageState.removeWorkflowInstanceCorrelationKey(workflowInstanceKey);
+
+      // the workflow instance was created by a message with a correlation key
+      // - other messages with same correlation key are not correlated to this workflow until this
+      // instance is ended (workflow-correlation-key lock)
+      // - now, after the instance is ended, correlate the next buffered message
+      correlateNextBufferedMessage(correlationKey, context);
+    }
+  }
+
+  private void correlateNextBufferedMessage(
+      final DirectBuffer correlationKey,
+      final BpmnStepContext<ExecutableFlowElementContainer> context) {
+
+    final var bpmnProcessId = context.getValue().getBpmnProcessIdBuffer();
+    final var workflow = context.getStateDb().getLatestWorkflowVersionByProcessId(bpmnProcessId);
+
+    final var messageCorrelation = findNextMessageToCorrelate(workflow, correlationKey);
+
+    if (messageCorrelation == null) {
+      // no buffered message to correlate
+      // - release the workflow-correlation-key lock
+      messageState.removeActiveWorkflowInstance(bpmnProcessId, correlationKey);
+
+    } else {
+      final var message = messageState.getMessage(messageCorrelation.messageKey);
+
+      correlateMessage(workflow, messageCorrelation.elementId, message, context);
+    }
+  }
+
+  private Correlation findNextMessageToCorrelate(
+      final DeployedWorkflow workflow, final DirectBuffer correlationKey) {
+
+    messageCorrelation.messageKey = Long.MAX_VALUE;
+    messageCorrelation.elementId = null;
+
+    for (final ExecutableStartEvent startEvent : workflow.getWorkflow().getStartEvents()) {
+      if (startEvent.isMessage()) {
+
+        final var messageName = startEvent.getMessage().getMessageName();
+
+        messageState.visitMessages(
+            messageName,
+            correlationKey,
+            message -> {
+              // correlate the first message with same correlation key that was not correlated yet
+              if (message.getDeadline() > ActorClock.currentTimeMillis()
+                  && !messageState.existMessageCorrelation(
+                      message.getKey(), workflow.getBpmnProcessId())) {
+
+                // correlate the first published message across all message start events
+                // - using the message key to decide which message was published before
+                if (message.getKey() < messageCorrelation.messageKey) {
+                  messageCorrelation.messageKey = message.getKey();
+                  messageCorrelation.elementId = startEvent.getId();
+                }
+
+                return false;
+              }
+
+              return true;
+            });
+      }
+    }
+
+    return messageCorrelation.elementId != null ? messageCorrelation : null;
+  }
+
+  private void correlateMessage(
+      final DeployedWorkflow workflow,
+      final DirectBuffer elementId,
+      final Message message,
+      final BpmnStepContext<ExecutableFlowElementContainer> context) {
+
+    createEventTrigger(workflow, elementId, message, context);
+    final long workflowInstanceKey = createNewWorkflowInstance(workflow, elementId, context);
+
+    // mark the message as correlated
+    messageState.putMessageCorrelation(message.getKey(), workflow.getBpmnProcessId());
+    messageState.putWorkflowInstanceCorrelationKey(
+        workflowInstanceKey, message.getCorrelationKey());
+  }
+
+  private void createEventTrigger(
+      final DeployedWorkflow workflow,
+      final DirectBuffer elementId,
+      final Message message,
+      final BpmnStepContext<ExecutableFlowElementContainer> context) {
+
+    final boolean success =
+        context
+            .getStateDb()
+            .getEventScopeInstanceState()
+            .triggerEvent(workflow.getKey(), message.getKey(), elementId, message.getVariables());
+
+    if (!success) {
+      throw new IllegalStateException(
+          String.format(
+              ""Expected the event trigger for be created of the workflow with key '%d' but failed."",
+              workflow.getKey()));
+    }
+  }
+
+  private long createNewWorkflowInstance(
+      final DeployedWorkflow workflow,
+      final DirectBuffer startEventElementId,
+      final BpmnStepContext<ExecutableFlowElementContainer> context) {
+
+    final var workflowInstanceKey = keyGenerator.nextKey();
+    final var eventKey = keyGenerator.nextKey();
+
+    context
+        .getOutput()
+        .appendFollowUpEvent(
+            eventKey,
+            WorkflowInstanceIntent.EVENT_OCCURRED,
+            startEventRecord
+                .setWorkflowKey(workflow.getKey())
+                .setWorkflowInstanceKey(workflowInstanceKey)
+                .setElementId(startEventElementId));
+
+    return workflowInstanceKey;
+  }
+
+  private static class Correlation {
+    private long messageKey;
+    private DirectBuffer elementId;
+  }
+}
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/PublishMessageProcessor.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/PublishMessageProcessor.java
index ec41279..7c17adf 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/PublishMessageProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/PublishMessageProcessor.java
@@ -9,7 +9,6 @@ package io.zeebe.engine.processor.workflow.message;
 
 import static io.zeebe.util.buffer.BufferUtil.bufferAsString;
 
-import io.zeebe.engine.Loggers;
 import io.zeebe.engine.processor.KeyGenerator;
 import io.zeebe.engine.processor.SideEffectProducer;
 import io.zeebe.engine.processor.TypedRecord;
@@ -23,6 +22,7 @@ import io.zeebe.engine.state.message.MessageStartEventSubscriptionState;
 import io.zeebe.engine.state.message.MessageState;
 import io.zeebe.engine.state.message.MessageSubscriptionState;
 import io.zeebe.protocol.impl.record.value.message.MessageRecord;
+import io.zeebe.protocol.impl.record.value.message.MessageStartEventSubscriptionRecord;
 import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;
 import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.MessageIntent;
@@ -30,12 +30,9 @@ import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
 import io.zeebe.protocol.record.value.BpmnElementType;
 import io.zeebe.util.sched.clock.ActorClock;
 import java.util.function.Consumer;
-import org.agrona.DirectBuffer;
 
 public class PublishMessageProcessor implements TypedRecordProcessor<MessageRecord> {
 
-  public static final String ERROR_START_EVENT_NOT_TRIGGERED_MESSAGE =
-      ""Expected to trigger event for workflow with key '%d', but could not (either does not exist or is not accepting)"";
   private static final String ALREADY_PUBLISHED_MESSAGE =
       ""Expected to publish a new message with id '%s', but a message with that id was already published"";
 
@@ -152,35 +149,72 @@ public class PublishMessageProcessor implements TypedRecordProcessor<MessageReco
 
   private void correlateToMessageStartEvents(
       final MessageRecord messageRecord, final TypedStreamWriter streamWriter) {
+
     startEventSubscriptionState.visitSubscriptionsByMessageName(
         messageRecord.getNameBuffer(),
         subscription -> {
-          if (!correlatingSubscriptions.contains(subscription.getBpmnProcessIdBuffer())) {
-
-            final DirectBuffer startEventId = subscription.getStartEventIdBuffer();
-            final long workflowKey = subscription.getWorkflowKey();
+          final var bpmnProcessIdBuffer = subscription.getBpmnProcessIdBuffer();
+          final var correlationKeyBuffer = messageRecord.getCorrelationKeyBuffer();
 
-            final boolean wasTriggered =
-                scopeEventInstanceState.triggerEvent(
-                    workflowKey, messageKey, startEventId, messageRecord.getVariablesBuffer());
+          // create only one instance of a workflow per correlation key
+          // - allow multiple instance if correlation key is empty
+          if (!correlatingSubscriptions.contains(bpmnProcessIdBuffer)
+              && (correlationKeyBuffer.capacity() == 0
+                  || !messageState.existActiveWorkflowInstance(
+                      bpmnProcessIdBuffer, correlationKeyBuffer))) {
 
-            if (wasTriggered) {
-              // create the workflow instance directly on the same partition
-              streamWriter.appendNewEvent(
-                  messageKey,
-                  WorkflowInstanceIntent.EVENT_OCCURRED,
-                  startEventRecord.setWorkflowKey(workflowKey).setElementId(startEventId));
+            correlatingSubscriptions.add(subscription);
 
-              correlatingSubscriptions.add(subscription);
+            createEventTrigger(subscription);
+            final long workflowInstanceKey = createNewWorkflowInstance(streamWriter, subscription);
 
-            } else {
-              Loggers.WORKFLOW_PROCESSOR_LOGGER.error(
-                  String.format(ERROR_START_EVENT_NOT_TRIGGERED_MESSAGE, workflowKey));
+            if (correlationKeyBuffer.capacity() > 0) {
+              // lock the workflow for this correlation key
+              // - other messages with same correlation key are not correlated to this workflow
+              // until the created instance is ended
+              messageState.putActiveWorkflowInstance(bpmnProcessIdBuffer, correlationKeyBuffer);
+              messageState.putWorkflowInstanceCorrelationKey(
+                  workflowInstanceKey, correlationKeyBuffer);
             }
           }
         });
   }
 
+  private void createEventTrigger(final MessageStartEventSubscriptionRecord subscription) {
+
+    final boolean success =
+        scopeEventInstanceState.triggerEvent(
+            subscription.getWorkflowKey(),
+            messageKey,
+            subscription.getStartEventIdBuffer(),
+            messageRecord.getVariablesBuffer());
+
+    if (!success) {
+      throw new IllegalStateException(
+          String.format(
+              ""Expected the event trigger for be created of the workflow with key '%d' but failed."",
+              subscription.getWorkflowKey()));
+    }
+  }
+
+  private long createNewWorkflowInstance(
+      final TypedStreamWriter streamWriter,
+      final MessageStartEventSubscriptionRecord subscription) {
+
+    final var workflowInstanceKey = keyGenerator.nextKey();
+    final var eventKey = keyGenerator.nextKey();
+
+    streamWriter.appendNewEvent(
+        eventKey,
+        WorkflowInstanceIntent.EVENT_OCCURRED,
+        startEventRecord
+            .setWorkflowKey(subscription.getWorkflowKey())
+            .setWorkflowInstanceKey(workflowInstanceKey)
+            .setElementId(subscription.getStartEventId()));
+
+    return workflowInstanceKey;
+  }
+
   private boolean sendCorrelateCommand() {
 
     final var success =
diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java
index 51aa1f1..3c3a26e 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java
@@ -47,17 +47,18 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
   private final WorkflowInstanceRecord eventOccurredRecord = new WorkflowInstanceRecord();
   private final KeyGenerator keyGenerator;
 
-  public TriggerTimerProcessor(final ZeebeState zeebeState, CatchEventBehavior catchEventBehavior) {
-    this.workflowState = zeebeState.getWorkflowState();
-    this.keyGenerator = zeebeState.getKeyGenerator();
+  public TriggerTimerProcessor(
+      final ZeebeState zeebeState, final CatchEventBehavior catchEventBehavior) {
+    workflowState = zeebeState.getWorkflowState();
+    keyGenerator = zeebeState.getKeyGenerator();
     this.catchEventBehavior = catchEventBehavior;
   }
 
   @Override
   public void processRecord(
-      TypedRecord<TimerRecord> record,
-      TypedResponseWriter responseWriter,
-      TypedStreamWriter streamWriter) {
+      final TypedRecord<TimerRecord> record,
+      final TypedResponseWriter responseWriter,
+      final TypedStreamWriter streamWriter) {
     final TimerRecord timer = record.getValue();
     final long elementInstanceKey = timer.getElementInstanceKey();
 
@@ -74,10 +75,10 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
   }
 
   private void processTimerTrigger(
-      TypedRecord<TimerRecord> record,
-      TypedStreamWriter streamWriter,
-      TimerRecord timer,
-      long elementInstanceKey) {
+      final TypedRecord<TimerRecord> record,
+      final TypedStreamWriter streamWriter,
+      final TimerRecord timer,
+      final long elementInstanceKey) {
     final long eventScopeKey =
         isTimerStartEvent(elementInstanceKey)
             ? record.getValue().getWorkflowKey()
@@ -107,7 +108,7 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
     }
   }
 
-  private boolean tryTriggerTimer(long eventScopeKey, TimerRecord timer) {
+  private boolean tryTriggerTimer(final long eventScopeKey, final TimerRecord timer) {
     final long eventKey = keyGenerator.nextKey();
     return workflowState
         .getEventScopeInstanceState()
@@ -118,7 +119,7 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
             DocumentValue.EMPTY_DOCUMENT);
   }
 
-  private long prepareEventOccurredEvent(TimerRecord timer, long elementInstanceKey) {
+  private long prepareEventOccurredEvent(final TimerRecord timer, final long elementInstanceKey) {
     final long eventOccurredKey;
 
     eventOccurredRecord.reset();
@@ -128,6 +129,7 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
       eventOccurredRecord
           .setBpmnElementType(BpmnElementType.START_EVENT)
           .setWorkflowKey(timer.getWorkflowKey())
+          .setWorkflowInstanceKey(keyGenerator.nextKey())
           .setElementId(timer.getTargetElementIdBuffer());
     } else if (isInEventSubprocess(timer)) {
       eventOccurredKey = keyGenerator.nextKey();
@@ -145,11 +147,11 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
     return eventOccurredKey;
   }
 
-  private boolean isTimerStartEvent(long elementInstanceKey) {
+  private boolean isTimerStartEvent(final long elementInstanceKey) {
     return elementInstanceKey == NO_ELEMENT_INSTANCE;
   }
 
-  private boolean isInEventSubprocess(TimerRecord timer) {
+  private boolean isInEventSubprocess(final TimerRecord timer) {
     final ExecutableCatchEventElement catchEvent =
         getCatchEventById(timer.getWorkflowKey(), timer.getTargetElementIdBuffer());
 
@@ -157,16 +159,17 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
         && ((ExecutableStartEvent) catchEvent).getEventSubProcess() != null;
   }
 
-  private boolean shouldReschedule(TimerRecord timer) {
+  private boolean shouldReschedule(final TimerRecord timer) {
     return timer.getRepetitions() == RepeatingInterval.INFINITE || timer.getRepetitions() > 1;
   }
 
-  private ExecutableCatchEventElement getTimerEvent(long elementInstanceKey, TimerRecord timer) {
+  private ExecutableCatchEventElement getTimerEvent(
+      final long elementInstanceKey, final TimerRecord timer) {
     if (isTimerStartEvent(elementInstanceKey)) {
       final List<ExecutableStartEvent> startEvents =
           workflowState.getWorkflowByKey(timer.getWorkflowKey()).getWorkflow().getStartEvents();
 
-      for (ExecutableCatchEventElement startEvent : startEvents) {
+      for (final ExecutableCatchEventElement startEvent : startEvents) {
         if (startEvent.getId().equals(timer.getTargetElementIdBuffer())) {
           return startEvent;
         }
@@ -184,7 +187,9 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
   }
 
   private void rescheduleTimer(
-      TimerRecord record, TypedStreamWriter writer, ExecutableCatchEventElement event) {
+      final TimerRecord record,
+      final TypedStreamWriter writer,
+      final ExecutableCatchEventElement event) {
     if (event.getTimer() == null) {
       final String message =
           String.format(
@@ -209,7 +214,8 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
         writer);
   }
 
-  private ExecutableCatchEventElement getCatchEventById(long workflowKey, DirectBuffer id) {
+  private ExecutableCatchEventElement getCatchEventById(
+      final long workflowKey, final DirectBuffer id) {
     final DeployedWorkflow workflow = workflowState.getWorkflowByKey(workflowKey);
     if (workflow == null) {
       throw new IllegalStateException(
diff --git a/engine/src/main/java/io/zeebe/engine/state/ZbColumnFamilies.java b/engine/src/main/java/io/zeebe/engine/state/ZbColumnFamilies.java
index 96f7540..1e635a7 100644
--- a/engine/src/main/java/io/zeebe/engine/state/ZbColumnFamilies.java
+++ b/engine/src/main/java/io/zeebe/engine/state/ZbColumnFamilies.java
@@ -52,6 +52,8 @@ public enum ZbColumnFamilies {
   MESSAGE_DEADLINES,
   MESSAGE_IDS,
   MESSAGE_CORRELATED,
+  MESSAGE_WORKFLOWS_ACTIVE_BY_CORRELATION_KEY,
+  MESSAGE_WORKFLOW_INSTANCE_CORRELATION_KEYS,
 
   // message subscription
   MESSAGE_SUBSCRIPTION_BY_KEY,
diff --git a/engine/src/main/java/io/zeebe/engine/state/message/MessageState.java b/engine/src/main/java/io/zeebe/engine/state/message/MessageState.java
index 3be40cb..6bf49a5 100644
--- a/engine/src/main/java/io/zeebe/engine/state/message/MessageState.java
+++ b/engine/src/main/java/io/zeebe/engine/state/message/MessageState.java
@@ -73,7 +73,24 @@ public class MessageState {
   private final DbString bpmnProcessIdKey;
   private final ColumnFamily<DbCompositeKey<DbLong, DbString>, DbNil> correlatedMessageColumnFamily;
 
-  public MessageState(ZeebeDb<ZbColumnFamilies> zeebeDb, DbContext dbContext) {
+  /**
+   * <pre> bpmn process id | correlation key -> []
+   *
+   * check if a workflow instance is created by this correlation key */
+  private final DbCompositeKey<DbString, DbString> bpmnProcessIdCorrelationKey;
+
+  private final ColumnFamily<DbCompositeKey<DbString, DbString>, DbNil>
+      activeWorkflowInstancesByCorrelationKeyColumnFamiliy;
+
+  /**
+   * <pre> workflow instance key -> correlation key
+   *
+   * get correlation key by workflow instance key */
+  private final DbLong workflowInstanceKey;
+
+  private final ColumnFamily<DbLong, DbString> workflowInstanceCorrelationKeyColumnFamiliy;
+
+  public MessageState(final ZeebeDb<ZbColumnFamilies> zeebeDb, final DbContext dbContext) {
     messageKey = new DbLong();
     message = new Message();
     messageColumnFamily =
@@ -107,6 +124,22 @@ public class MessageState {
             dbContext,
             messageBpmnProcessIdKey,
             DbNil.INSTANCE);
+
+    bpmnProcessIdCorrelationKey = new DbCompositeKey<>(bpmnProcessIdKey, correlationKey);
+    activeWorkflowInstancesByCorrelationKeyColumnFamiliy =
+        zeebeDb.createColumnFamily(
+            ZbColumnFamilies.MESSAGE_WORKFLOWS_ACTIVE_BY_CORRELATION_KEY,
+            dbContext,
+            bpmnProcessIdCorrelationKey,
+            DbNil.INSTANCE);
+
+    workflowInstanceKey = new DbLong();
+    workflowInstanceCorrelationKeyColumnFamiliy =
+        zeebeDb.createColumnFamily(
+            ZbColumnFamilies.MESSAGE_WORKFLOW_INSTANCE_CORRELATION_KEYS,
+            dbContext,
+            workflowInstanceKey,
+            correlationKey);
   }
 
   public void put(final Message message) {
@@ -127,7 +160,7 @@ public class MessageState {
     }
   }
 
-  public void putMessageCorrelation(long messageKey, DirectBuffer bpmnProcessId) {
+  public void putMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
     ensureGreaterThan(""message key"", messageKey, 0);
     ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
 
@@ -136,7 +169,7 @@ public class MessageState {
     correlatedMessageColumnFamily.put(messageBpmnProcessIdKey, DbNil.INSTANCE);
   }
 
-  public boolean existMessageCorrelation(long messageKey, DirectBuffer bpmnProcessId) {
+  public boolean existMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
     ensureGreaterThan(""message key"", messageKey, 0);
     ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
 
@@ -146,7 +179,7 @@ public class MessageState {
     return correlatedMessageColumnFamily.exists(messageBpmnProcessIdKey);
   }
 
-  public void removeMessageCorrelation(long messageKey, DirectBuffer bpmnProcessId) {
+  public void removeMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
     ensureGreaterThan(""message key"", messageKey, 0);
     ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
 
@@ -156,6 +189,64 @@ public class MessageState {
     correlatedMessageColumnFamily.delete(messageBpmnProcessIdKey);
   }
 
+  public boolean existActiveWorkflowInstance(
+      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
+    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
+    ensureNotNullOrEmpty(""correlation key"", correlationKey);
+
+    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
+    this.correlationKey.wrapBuffer(correlationKey);
+    return activeWorkflowInstancesByCorrelationKeyColumnFamiliy.exists(bpmnProcessIdCorrelationKey);
+  }
+
+  public void putActiveWorkflowInstance(
+      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
+    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
+    ensureNotNullOrEmpty(""correlation key"", correlationKey);
+
+    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
+    this.correlationKey.wrapBuffer(correlationKey);
+    activeWorkflowInstancesByCorrelationKeyColumnFamiliy.put(
+        bpmnProcessIdCorrelationKey, DbNil.INSTANCE);
+  }
+
+  public void removeActiveWorkflowInstance(
+      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
+    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
+    ensureNotNullOrEmpty(""correlation key"", correlationKey);
+
+    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
+    this.correlationKey.wrapBuffer(correlationKey);
+    activeWorkflowInstancesByCorrelationKeyColumnFamiliy.delete(bpmnProcessIdCorrelationKey);
+  }
+
+  public void putWorkflowInstanceCorrelationKey(
+      final long workflowInstanceKey, final DirectBuffer correlationKey) {
+    ensureGreaterThan(""workflow instance key"", workflowInstanceKey, 0);
+    ensureNotNullOrEmpty(""correlation key"", correlationKey);
+
+    this.workflowInstanceKey.wrapLong(workflowInstanceKey);
+    this.correlationKey.wrapBuffer(correlationKey);
+    workflowInstanceCorrelationKeyColumnFamiliy.put(this.workflowInstanceKey, this.correlationKey);
+  }
+
+  public DirectBuffer getWorkflowInstanceCorrelationKey(final long workflowInstanceKey) {
+    ensureGreaterThan(""workflow instance key"", workflowInstanceKey, 0);
+
+    this.workflowInstanceKey.wrapLong(workflowInstanceKey);
+    final var correlationKey =
+        workflowInstanceCorrelationKeyColumnFamiliy.get(this.workflowInstanceKey);
+
+    return correlationKey != null ? correlationKey.getBuffer() : null;
+  }
+
+  public void removeWorkflowInstanceCorrelationKey(final long workflowInstanceKey) {
+    ensureGreaterThan(""workflow instance key"", workflowInstanceKey, 0);
+
+    this.workflowInstanceKey.wrapLong(workflowInstanceKey);
+    workflowInstanceCorrelationKeyColumnFamiliy.delete(this.workflowInstanceKey);
+  }
+
   public void visitMessages(
       final DirectBuffer name, final DirectBuffer correlationKey, final MessageVisitor visitor) {
 
@@ -171,12 +262,12 @@ public class MessageState {
         });
   }
 
-  public Message getMessage(long messageKey) {
+  public Message getMessage(final long messageKey) {
     this.messageKey.wrapLong(messageKey);
     return messageColumnFamily.get(this.messageKey);
   }
 
-  public void visitMessagesWithDeadlineBefore(final long timestamp, MessageVisitor visitor) {
+  public void visitMessagesWithDeadlineBefore(final long timestamp, final MessageVisitor visitor) {
     deadlineColumnFamily.whileTrue(
         ((compositeKey, zbNil) -> {
           final long deadline = compositeKey.getFirst().getValue();
diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/BpmnElementTypeTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/BpmnElementTypeTest.java
index 3b13ecc..01c1ed5 100644
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/BpmnElementTypeTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/BpmnElementTypeTest.java
@@ -84,7 +84,7 @@ public class BpmnElementTypeTest {
                       MessageStartEventSubscriptionIntent.OPENED)
                   .getFirst();
 
-              ENGINE.message().withName(messageName()).withCorrelationKey("""").publish();
+              ENGINE.message().withName(messageName()).withCorrelationKey(""id"").publish();
             }
           },
           new BpmnElementTypeScenario(""Timer Start Event"", BpmnElementType.START_EVENT) {
@@ -291,7 +291,7 @@ public class BpmnElementTypeTest {
 
   private final BpmnElementTypeScenario scenario;
 
-  public BpmnElementTypeTest(BpmnElementTypeScenario scenario) {
+  public BpmnElementTypeTest(final BpmnElementTypeScenario scenario) {
     this.scenario = scenario;
   }
 
@@ -331,7 +331,7 @@ public class BpmnElementTypeTest {
     private final String taskType = Strings.newRandomValidBpmnId();
     private final String messageName = Strings.newRandomValidBpmnId();
 
-    BpmnElementTypeScenario(String name, BpmnElementType elementType) {
+    BpmnElementTypeScenario(final String name, final BpmnElementType elementType) {
       this.name = name;
       this.elementType = elementType;
     }
@@ -370,7 +370,7 @@ public class BpmnElementTypeTest {
       return ENGINE.workflowInstance().ofBpmnProcessId(processId()).create();
     }
 
-    long executeInstance(Map<String, String> variables) {
+    long executeInstance(final Map<String, String> variables) {
       final String json =
           ""{ ""
               + variables.entrySet().stream()
diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandlerTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandlerTest.java
index 44c262f..5959b1f 100644
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandlerTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/handlers/element/EventOccurredHandlerTest.java
@@ -30,7 +30,7 @@ public class EventOccurredHandlerTest extends ElementHandlerTestCase<ExecutableF
   }
 
   @Override
-  protected ElementInstance createAndSetContextElementInstance(WorkflowInstanceIntent state) {
+  protected ElementInstance createAndSetContextElementInstance(final WorkflowInstanceIntent state) {
     final ElementInstance instance = super.createAndSetContextElementInstance(state);
     return instance;
   }
@@ -67,20 +67,6 @@ public class EventOccurredHandlerTest extends ElementHandlerTestCase<ExecutableF
   }
 
   @Test
-  public void shouldHandleStateIfElementHasNoWorkflowInstance() {
-    // given
-    final Set<WorkflowInstanceIntent> inactiveStates =
-        EnumSet.complementOf(EnumSet.of(WorkflowInstanceIntent.ELEMENT_ACTIVATED));
-
-    // when - then
-    for (final WorkflowInstanceIntent inactiveState : inactiveStates) {
-      createAndSetContextElementInstance(inactiveState);
-
-      Assertions.assertThat(handler.shouldHandleState(context)).isTrue();
-    }
-  }
-
-  @Test
   public void shouldHandleStateIfElementIsActive() {
     // given
     createAndSetContextElementInstance(WorkflowInstanceIntent.ELEMENT_ACTIVATED);
diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java
index a18307b..611e618 100644
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java
@@ -7,427 +7,703 @@
  */
 package io.zeebe.engine.processor.workflow.message;
 
-import static io.zeebe.protocol.record.Assertions.assertThat;
-import static io.zeebe.test.util.MsgPackUtil.asMsgPack;
-import static io.zeebe.test.util.record.RecordingExporter.messageStartEventSubscriptionRecords;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
 
 import io.zeebe.engine.util.EngineRule;
-import io.zeebe.engine.util.client.PublishMessageClient;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
-import io.zeebe.model.bpmn.builder.ProcessBuilder;
+import io.zeebe.model.bpmn.builder.StartEventBuilder;
+import io.zeebe.protocol.record.Assertions;
 import io.zeebe.protocol.record.Record;
-import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;
+import io.zeebe.protocol.record.intent.JobIntent;
 import io.zeebe.protocol.record.intent.MessageSubscriptionIntent;
 import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
 import io.zeebe.protocol.record.intent.WorkflowInstanceSubscriptionIntent;
 import io.zeebe.protocol.record.value.BpmnElementType;
-import io.zeebe.protocol.record.value.DeploymentRecordValue;
-import io.zeebe.protocol.record.value.WorkflowInstanceRecordValue;
+import io.zeebe.protocol.record.value.VariableRecordValue;
 import io.zeebe.test.util.record.RecordingExporter;
-import java.util.List;
+import java.time.Duration;
 import java.util.Map;
+import java.util.function.Consumer;
+import java.util.stream.IntStream;
 import org.junit.Rule;
 import org.junit.Test;
 
 public class MessageStartEventTest {
 
-  private static final String MESSAGE_NAME1 = ""startMessage1"";
-  private static final String EVENT_ID1 = ""startEventId1"";
+  private static final String MESSAGE_NAME_1 = ""a"";
+  private static final String MESSAGE_NAME_2 = ""b"";
 
-  private static final String MESSAGE_NAME2 = ""startMessage2"";
-  private static final String EVENT_ID2 = ""startEventId2"";
+  private static final String CORRELATION_KEY_1 = ""key-1"";
+  private static final String CORRELATION_KEY_2 = ""key-2"";
+
+  private static final BpmnModelInstance SINGLE_START_EVENT = singleStartEvent(startEvent -> {});
+  private static final BpmnModelInstance MULTIPLE_START_EVENTS = multipleStartEvents();
 
   @Rule public EngineRule engine = EngineRule.singlePartition();
 
+  private static BpmnModelInstance singleStartEvent(final Consumer<StartEventBuilder> customizer) {
+    final var startEventBuilder =
+        Bpmn.createExecutableProcess(""wf"").startEvent().message(MESSAGE_NAME_1);
+
+    customizer.accept(startEventBuilder);
+
+    return startEventBuilder.serviceTask(""task"", t -> t.zeebeTaskType(""test"")).done();
+  }
+
+  private static BpmnModelInstance multipleStartEvents() {
+    final var process = Bpmn.createExecutableProcess(""wf"");
+    process.startEvent().message(MESSAGE_NAME_1).serviceTask(""task"", t -> t.zeebeTaskType(""test""));
+    process.startEvent().message(MESSAGE_NAME_2).connectTo(""task"");
+
+    return process.done();
+  }
+
   @Test
   public void shouldCorrelateMessageToStartEvent() {
     // given
-    final Record<DeploymentRecordValue> deploymentRecord =
-        engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
-    final long workflowKey = getFirstDeployedWorkflowKey(deploymentRecord);
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-    // wait until subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .exists())
-        .isTrue();
+    // when
+    engine.message().withCorrelationKey(CORRELATION_KEY_1).withName(MESSAGE_NAME_1).publish();
+
+    // then
+    final var workflowInstance =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)
+            .filterRootScope()
+            .getFirst();
+
+    final var startEvent =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)
+            .withElementType(BpmnElementType.START_EVENT)
+            .getFirst();
+
+    Assertions.assertThat(startEvent.getValue())
+        .hasWorkflowKey(workflowInstance.getValue().getWorkflowKey())
+        .hasBpmnProcessId(workflowInstance.getValue().getBpmnProcessId())
+        .hasVersion(workflowInstance.getValue().getVersion())
+        .hasWorkflowInstanceKey(workflowInstance.getKey())
+        .hasFlowScopeKey(workflowInstance.getKey());
+  }
+
+  @Test
+  public void shouldCreateNewInstance() {
+    // given
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
+
+    // when
+    engine.message().withCorrelationKey(CORRELATION_KEY_1).withName(MESSAGE_NAME_1).publish();
+
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+    engine.job().withKey(job.getKey()).complete();
+
+    // then
+    assertThat(RecordingExporter.workflowInstanceRecords().limitToWorkflowInstanceCompleted())
+        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSequence(
+            tuple(BpmnElementType.START_EVENT, WorkflowInstanceIntent.EVENT_OCCURRED),
+            tuple(BpmnElementType.PROCESS, WorkflowInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(BpmnElementType.PROCESS, WorkflowInstanceIntent.ELEMENT_ACTIVATED),
+            tuple(BpmnElementType.START_EVENT, WorkflowInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(BpmnElementType.START_EVENT, WorkflowInstanceIntent.ELEMENT_ACTIVATED),
+            tuple(BpmnElementType.START_EVENT, WorkflowInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.START_EVENT, WorkflowInstanceIntent.ELEMENT_COMPLETED));
+  }
+
+  @Test
+  public void shouldCreateNewInstanceWithMessageVariables() {
+    // given
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
     // when
     engine
         .message()
-        .withCorrelationKey(""order-123"")
-        .withName(MESSAGE_NAME1)
-        .withVariables(asMsgPack(""foo"", ""bar""))
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withName(MESSAGE_NAME_1)
+        .withVariables(Map.of(""x"", 1, ""y"", 2))
         .publish();
 
     // then
-    final Record<WorkflowInstanceRecordValue> record =
-        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.EVENT_OCCURRED).getFirst();
-
-    assertThat(record.getValue()).hasWorkflowKey(workflowKey).hasElementId(EVENT_ID1);
+    assertThat(RecordingExporter.variableRecords().limit(2))
+        .extracting(Record::getValue)
+        .extracting(VariableRecordValue::getName, VariableRecordValue::getValue)
+        .hasSize(2)
+        .contains(tuple(""x"", ""1""), tuple(""y"", ""2""));
   }
 
   @Test
-  public void shouldCreateInstanceOnMessage() {
+  public void shouldApplyOutputMappings() {
     // given
-    final Record<DeploymentRecordValue> deploymentRecord =
-        engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
-    final long workflowKey = getFirstDeployedWorkflowKey(deploymentRecord);
-
-    // wait until subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .exists())
-        .isTrue();
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.zeebeOutput(""x"", ""y"")))
+        .deploy();
 
     // when
     engine
         .message()
-        .withCorrelationKey(""order-123"")
-        .withName(MESSAGE_NAME1)
-        .withVariables(asMsgPack(""foo"", ""bar""))
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withName(MESSAGE_NAME_1)
+        .withVariables(Map.of(""x"", 1))
         .publish();
 
     // then
-    final List<Record<WorkflowInstanceRecordValue>> records =
-        RecordingExporter.workflowInstanceRecords().limit(5).asList();
+    final var workflowInstance =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
+            .filterRootScope()
+            .getFirst();
 
-    assertThat(records)
-        .extracting(Record::getIntent)
-        .containsExactly(
-            WorkflowInstanceIntent.EVENT_OCCURRED, // message
-            WorkflowInstanceIntent.ELEMENT_ACTIVATING, // workflow instance
-            WorkflowInstanceIntent.ELEMENT_ACTIVATED,
-            WorkflowInstanceIntent.ELEMENT_ACTIVATING, // start event
-            WorkflowInstanceIntent.ELEMENT_ACTIVATED);
+    assertThat(RecordingExporter.variableRecords().withScopeKey(workflowInstance.getKey()).limit(1))
+        .extracting(Record::getValue)
+        .extracting(VariableRecordValue::getName, VariableRecordValue::getValue)
+        .contains(tuple(""y"", ""1""));
+  }
 
-    assertThat(records).allMatch(r -> r.getValue().getWorkflowKey() == workflowKey);
+  @Test
+  public void shouldCreateInstanceOfLatestVersion() {
+    // given
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v1"")))
+        .deploy();
+
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v2"")))
+        .deploy();
+
+    // when
+    engine.message().withCorrelationKey(CORRELATION_KEY_1).withName(MESSAGE_NAME_1).publish();
 
-    assertThat(records.get(3).getValue()).hasElementId(EVENT_ID1);
+    // then
+    final var startEvent =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
+            .withElementType(BpmnElementType.START_EVENT)
+            .getFirst();
+
+    Assertions.assertThat(startEvent.getValue()).hasElementId(""v2"");
   }
 
   @Test
-  public void shouldMergeMessageVariables() {
+  public void shouldCreateNewInstanceWithMultipleStartEvents() {
     // given
-    engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
-
-    // wait until subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .exists())
-        .isTrue();
+    engine.deployment().withXmlResource(MULTIPLE_START_EVENTS).deploy();
 
     // when
     engine
         .message()
-        .withCorrelationKey(""order-123"")
-        .withName(MESSAGE_NAME1)
-        .withVariables(asMsgPack(""foo"", ""bar""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_2)
+        .withCorrelationKey(CORRELATION_KEY_2)
+        .withVariables(Map.of(""x"", 2))
         .publish();
 
     // then
-    assertThat(RecordingExporter.variableRecords().withName(""foo"").withValue(""\""bar\"""").exists())
-        .isTrue();
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2] to be correlated"")
+        .containsExactly(""1"", ""2"");
+  }
+
+  @Test
+  public void shouldTriggerOnlyMessageStartEvent() {
+    // given
+    final var process = Bpmn.createExecutableProcess(""process"");
+    process.startEvent(""none-start"").endEvent();
+    process.startEvent(""message-start"").message(MESSAGE_NAME_1).endEvent();
+    process.startEvent(""timer-start"").timerWithCycle(""R/PT1H"").endEvent();
+
+    engine.deployment().withXmlResource(process.done()).deploy();
+
+    // when
+    engine.message().withName(MESSAGE_NAME_1).withCorrelationKey(CORRELATION_KEY_1).publish();
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords()
+                .limitToWorkflowInstanceCompleted()
+                .withElementType(BpmnElementType.START_EVENT))
+        .extracting(r -> r.getValue().getElementId())
+        .containsOnly(""message-start"");
   }
 
   @Test
-  public void shouldApplyOutputMappingsOfMessageStartEvent() {
+  public void shouldNotCorrelateSameMessageToCreatedInstance() {
     // given
     engine
         .deployment()
-        .withXmlResource(createWorkflowWithMessageStartEventOutputMapping())
+        .withXmlResource(
+            Bpmn.createExecutableProcess(""wf"")
+                .startEvent()
+                .message(MESSAGE_NAME_1)
+                .intermediateCatchEvent(
+                    ""catch"", e -> e.message(m -> m.name(MESSAGE_NAME_1).zeebeCorrelationKey(""key"")))
+                .endEvent()
+                .done())
         .deploy();
 
-    // wait until subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .exists())
-        .isTrue();
-
     // when
     engine
         .message()
-        .withCorrelationKey(""order-123"")
-        .withName(MESSAGE_NAME1)
-        .withVariables(asMsgPack(""foo"", ""bar""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""key"", CORRELATION_KEY_1, ""x"", 1))
         .publish();
 
+    RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED).await();
+
+    final var message2 =
+        engine
+            .message()
+            .withName(MESSAGE_NAME_1)
+            .withCorrelationKey(CORRELATION_KEY_1)
+            .withVariables(Map.of(""x"", 2))
+            .publish();
+
     // then
-    assertThat(
-            RecordingExporter.variableRecords().withName(""mappedfoo"").withValue(""\""bar\"""").exists())
-        .isTrue();
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2] to be correlated"")
+        .containsExactly(""1"", ""2"");
+
+    final var subscription =
+        RecordingExporter.workflowInstanceSubscriptionRecords(
+                WorkflowInstanceSubscriptionIntent.CORRELATED)
+            .getFirst();
+
+    Assertions.assertThat(subscription.getValue()).hasMessageKey(message2.getKey());
   }
 
   @Test
-  public void shouldCreateInstancesForMultipleMessagesOfSameName() {
+  public void shouldCreateMultipleInstancesIfCorrelationKeyIsEmpty() {
     // given
-    final Record<DeploymentRecordValue> record =
-        engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-    final long workflowKey = getFirstDeployedWorkflowKey(record);
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey("""")
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    // wait until subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .exists())
-        .isTrue();
+    RecordingExporter.jobRecords(JobIntent.CREATED).await();
 
     // when
-    final PublishMessageClient messageClient =
-        engine.message().withName(MESSAGE_NAME1).withVariables(asMsgPack(""foo"", ""bar""));
-
-    messageClient.withCorrelationKey(""order-123"").publish();
-    messageClient.withCorrelationKey(""order-124"").publish();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey("""")
+        .withVariables(Map.of(""x"", 2))
+        .publish();
 
     // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2] to be correlated"")
+        .containsExactly(""1"", ""2"");
+  }
 
-    // check if two instances are created
-    final List<Record<WorkflowInstanceRecordValue>> records =
-        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)
-            .withElementType(BpmnElementType.PROCESS)
-            .limit(2)
-            .asList();
+  @Test
+  public void shouldCreateOnlyOneInstancePerCorrelationKey() {
+    // given
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    assertThat(records).allMatch(r -> r.getValue().getWorkflowKey() == workflowKey);
+    RecordingExporter.jobRecords(JobIntent.CREATED).await();
 
-    final WorkflowInstanceRecordValue recordValue1 = records.get(0).getValue();
-    final WorkflowInstanceRecordValue recordValue2 = records.get(1).getValue();
+    // when
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
 
-    assertThat(recordValue1.getWorkflowInstanceKey())
-        .isNotEqualTo(recordValue2.getWorkflowInstanceKey());
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_2)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,3] to be correlated"")
+        .containsExactly(""1"", ""3"");
   }
 
   @Test
-  public void shouldCreateInstancesForDifferentMessages() {
+  public void shouldNotCreateInstanceForDifferentVersion() {
     // given
-    final Record<DeploymentRecordValue> record =
-        engine.deployment().withXmlResource(createWorkflowWithTwoMessageStartEvent()).deploy();
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v1"")))
+        .deploy();
 
-    final long workflowKey = getFirstDeployedWorkflowKey(record);
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    // check if two subscriptions are opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .limit(2)
-                .count())
-        .isEqualTo(2);
+    RecordingExporter.jobRecords(JobIntent.CREATED).await();
+
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v2"")))
+        .deploy();
 
     // when
-    final PublishMessageClient messageClient =
-        engine.message().withVariables(asMsgPack(""foo"", ""bar""));
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
 
-    messageClient.withName(MESSAGE_NAME1).withCorrelationKey(""order-123"").publish();
-    messageClient.withName(MESSAGE_NAME2).withCorrelationKey(""order-124"").publish();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_2)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
 
     // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,3] to be correlated"")
+        .containsExactly(""1"", ""3"");
+  }
 
-    // check if two instances are created
-    final List<Record<WorkflowInstanceRecordValue>> records =
-        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETING)
-            .withElementType(BpmnElementType.START_EVENT)
-            .limit(2)
-            .asList();
+  @Test
+  public void shouldCreateNewInstanceAfterCompletion() {
+    // given
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-    assertThat(records.size()).isEqualTo(2);
-    assertThat(records).allMatch(r -> r.getValue().getWorkflowKey() == workflowKey);
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    assertThat(records.get(0).getValue())
-        .hasElementId(EVENT_ID1); // Message 1 triggers start event 1
-    assertThat(records.get(1).getValue())
-        .hasElementId(EVENT_ID2); // Message 2 triggers start event 2
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+    engine.job().withKey(job.getKey()).complete();
+
+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)
+        .withWorkflowInstanceKey(job.getValue().getWorkflowInstanceKey())
+        .filterRootScope()
+        .await();
+
+    // when
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2] to be correlated"")
+        .containsExactly(""1"", ""2"");
   }
 
   @Test
-  public void shouldNotCreateInstanceOfOldVersion() {
+  public void shouldCreateNewInstanceAfterTermination() {
     // given
-    engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-    // new version
-    final Record<DeploymentRecordValue> record =
-        engine.deployment().withXmlResource(createWorkflowWithOneMessageStartEvent()).deploy();
-    final long workflowKey2 = getFirstDeployedWorkflowKey(record);
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    // wait until second subscription is opened
-    assertThat(
-            messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED)
-                .limit(2)
-                .count())
-        .isEqualTo(2);
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+
+    engine.workflowInstance().withInstanceKey(job.getValue().getWorkflowInstanceKey()).cancel();
 
     // when
     engine
         .message()
-        .withCorrelationKey(""order-123"")
-        .withName(MESSAGE_NAME1)
-        .withVariables(asMsgPack(""foo"", ""bar""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
         .publish();
 
     // then
-    final List<Record<WorkflowInstanceRecordValue>> records =
-        RecordingExporter.workflowInstanceRecords().limit(5).asList();
-
-    assertThat(records.stream().map(Record::getIntent))
-        .containsExactly(
-            WorkflowInstanceIntent.EVENT_OCCURRED, // message
-            WorkflowInstanceIntent.ELEMENT_ACTIVATING, // workflow instance
-            WorkflowInstanceIntent.ELEMENT_ACTIVATED,
-            WorkflowInstanceIntent.ELEMENT_ACTIVATING, // start event
-            WorkflowInstanceIntent.ELEMENT_ACTIVATED);
-
-    assertThat(records).allMatch(r -> r.getValue().getWorkflowKey() == workflowKey2);
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2] to be correlated"")
+        .containsExactly(""1"", ""2"");
   }
 
   @Test
-  public void shouldNotCorrelateToStartedInstance() {
+  public void shouldCreateNewInstanceForBufferedMessageAfterCompletion() {
     // given
-    // create a workflow with an event based gateway waiting for two messages:
-    //  1. the same message that started the workflow, which should NOT be correlated
-    //  2. another message which can be properly correlated
-    // this slightly heavier example is used to avoid having to wait to ensure the message ""msg"" is
-    // not correlated twice
-    final var workflow =
-        Bpmn.createExecutableProcess(""shouldNotCorrelateToStartedInstance"")
-            .startEvent(""start"")
-            .message(m -> m.name(""msg"").zeebeCorrelationKey(""key""))
-            .eventBasedGateway(""gate"")
-            .intermediateCatchEvent(""catch1"")
-            .message(m -> m.name(""msg"").zeebeCorrelationKey(""key""))
-            .endEvent(""end1"")
-            .moveToLastGateway()
-            .intermediateCatchEvent(""catch2"")
-            .message(m -> m.name(""other"").zeebeCorrelationKey(""key""))
-            .endEvent(""end2"")
-            .done();
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
+
+    final var job1 = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
 
     // when
-    final var workflowKey =
-        getFirstDeployedWorkflowKey(engine.deployment().withXmlResource(workflow).deploy());
     engine
         .message()
-        .withName(""msg"")
-        .withCorrelationKey(""key"")
-        .withVariables(Map.of(""key"", ""key""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
         .publish();
 
-    // then
-    final var gateway =
-        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
-            .withWorkflowKey(workflowKey)
-            .withElementId(""gate"")
-            .findFirst()
-            .get();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
 
-    // wait until both subscriptions are opened for the gateway
-    assertThat(
-            RecordingExporter.workflowInstanceSubscriptionRecords(
-                    WorkflowInstanceSubscriptionIntent.OPENED)
-                .withWorkflowInstanceKey(gateway.getValue().getWorkflowInstanceKey())
-                .limit(2))
-        .hasSize(2);
+    engine.job().withKey(job1.getKey()).complete();
 
-    engine.message().withName(""other"").withCorrelationKey(""key"").publish();
-    assertThat(
-            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)
-                .limitToWorkflowInstanceCompleted()
-                .withElementId(""end2"")
-                .withWorkflowInstanceKey(gateway.getValue().getWorkflowInstanceKey()))
-        .hasSize(1);
+    final var job2 = RecordingExporter.jobRecords(JobIntent.CREATED).skip(1).getFirst();
+    engine.job().withKey(job2.getKey()).complete();
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(3))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2,3] to be correlated"")
+        .containsExactly(""1"", ""2"", ""3"");
   }
 
   @Test
-  public void shouldTriggerOnlyMessageStartEvent() {
+  public void shouldCreateNewInstanceForBufferedMessageAfterTermination() {
     // given
-    final var processBuilder = Bpmn.createExecutableProcess(""process"");
-    processBuilder.startEvent(""none-start"").endEvent();
-    processBuilder.startEvent(""message-start"").message(MESSAGE_NAME1).endEvent();
-    processBuilder.startEvent(""timer-start"").timerWithCycle(""R/PT1H"").endEvent();
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-    engine.deployment().withXmlResource(processBuilder.done()).deploy();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
+
+    final var job1 = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
 
     // when
-    messageStartEventSubscriptionRecords(MessageStartEventSubscriptionIntent.OPENED).await();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
 
-    engine.message().withCorrelationKey(""order-123"").withName(MESSAGE_NAME1).publish();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
+
+    engine.workflowInstance().withInstanceKey(job1.getValue().getWorkflowInstanceKey()).cancel();
+
+    final var job2 = RecordingExporter.jobRecords(JobIntent.CREATED).skip(1).getFirst();
+    engine.workflowInstance().withInstanceKey(job2.getValue().getWorkflowInstanceKey()).cancel();
 
     // then
-    assertThat(
-            RecordingExporter.workflowInstanceRecords()
-                .limitToWorkflowInstanceCompleted()
-                .withElementType(BpmnElementType.START_EVENT))
-        .extracting(r -> r.getValue().getElementId())
-        .containsOnly(""message-start"");
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(3))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2,3] to be correlated"")
+        .containsExactly(""1"", ""2"", ""3"");
   }
 
   @Test
-  public void shouldCorrelateMessageOnlyToCreatedInstanceIfExists() {
+  public void shouldCreateNewInstanceOfLatestWorkflowVersionForBufferedMessage() {
     // given
     engine
         .deployment()
-        .withXmlResource(
-            Bpmn.createExecutableProcess(""process"")
-                .startEvent(""start"")
-                .message(""message"")
-                .intermediateCatchEvent(
-                    ""catch"", c -> c.message(m -> m.name(""message"").zeebeCorrelationKey(""key"")))
-                .endEvent()
-                .done())
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v1"")))
         .deploy();
 
-    // when
     engine
         .message()
-        .withName(""message"")
-        .withCorrelationKey(""order-123"")
-        .withVariables(Map.of(""key"", ""order-123""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
         .publish();
 
-    RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED).await();
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+
+    engine
+        .deployment()
+        .withXmlResource(singleStartEvent(startEvent -> startEvent.id(""v2"")))
+        .deploy();
 
+    // when
     engine
         .message()
-        .withName(""message"")
-        .withCorrelationKey(""order-123"")
-        .withVariables(Map.of(""key"", ""order-123""))
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
         .publish();
 
+    engine.job().withKey(job.getKey()).complete();
+
     // then
     assertThat(
-            RecordingExporter.workflowInstanceRecords()
-                .limitToWorkflowInstanceCompleted()
-                .withIntent(WorkflowInstanceIntent.EVENT_OCCURRED))
-        .extracting(r -> r.getValue().getBpmnElementType())
-        .hasSize(2)
-        .containsExactly(BpmnElementType.START_EVENT, BpmnElementType.INTERMEDIATE_CATCH_EVENT);
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
+                .withElementType(BpmnElementType.START_EVENT)
+                .limit(2))
+        .extracting(r -> r.getValue().getElementId())
+        .containsExactly(""v1"", ""v2"");
   }
 
-  private static BpmnModelInstance createWorkflowWithOneMessageStartEvent() {
-    return Bpmn.createExecutableProcess(""processId"")
-        .startEvent(EVENT_ID1)
-        .message(m -> m.name(MESSAGE_NAME1).id(""startmsgId""))
-        .endEvent()
-        .done();
-  }
+  @Test
+  public void shouldNotCreateNewInstanceForBufferedMessageAfterTTL() {
+    // given
+    engine.deployment().withXmlResource(SINGLE_START_EVENT).deploy();
 
-  private static BpmnModelInstance createWorkflowWithTwoMessageStartEvent() {
-    final ProcessBuilder process = Bpmn.createExecutableProcess(""processId"");
-    process.startEvent(EVENT_ID1).message(m -> m.name(MESSAGE_NAME1).id(""startmsgId1"")).endEvent();
-    process.startEvent(EVENT_ID2).message(m -> m.name(MESSAGE_NAME2).id(""startmsgId2"")).endEvent();
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
 
-    return process.done();
+    final var messageTTL = Duration.ofSeconds(1);
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .withTimeToLive(messageTTL)
+        .publish();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 3))
+        .withTimeToLive(messageTTL.multipliedBy(2))
+        .publish();
+
+    // when
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+
+    engine.getClock().addTime(messageTTL);
+
+    engine.job().withKey(job.getKey()).complete();
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,3] to be correlated"")
+        .containsExactly(""1"", ""3"");
   }
 
-  private static BpmnModelInstance createWorkflowWithMessageStartEventOutputMapping() {
-    return Bpmn.createExecutableProcess(""processId"")
-        .startEvent(EVENT_ID1)
-        .zeebeOutput(""foo"", ""mappedfoo"")
-        .message(m -> m.name(MESSAGE_NAME1).id(""startmsgId""))
-        .endEvent()
-        .done();
+  @Test
+  public void shouldCreateOnlyOneInstancePerCorrelationKeyWithMultipleStartEvents() {
+    // given
+    engine.deployment().withXmlResource(MULTIPLE_START_EVENTS).deploy();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
+
+    RecordingExporter.jobRecords(JobIntent.CREATED).await();
+
+    // when
+    engine
+        .message()
+        .withName(MESSAGE_NAME_2)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_2)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(2))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,3] to be correlated"")
+        .containsExactly(""1"", ""3"");
   }
 
-  private long getFirstDeployedWorkflowKey(final Record<DeploymentRecordValue> deploymentRecord) {
-    return deploymentRecord.getValue().getDeployedWorkflows().get(0).getWorkflowKey();
+  @Test
+  public void shouldCreateNewInstanceForBufferedMessageWithMultipleStartEvents() {
+    // given
+    engine.deployment().withXmlResource(MULTIPLE_START_EVENTS).deploy();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 1))
+        .publish();
+
+    // when
+    engine
+        .message()
+        .withName(MESSAGE_NAME_2)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 2))
+        .publish();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_1)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 3))
+        .publish();
+
+    engine
+        .message()
+        .withName(MESSAGE_NAME_2)
+        .withCorrelationKey(CORRELATION_KEY_1)
+        .withVariables(Map.of(""x"", 4))
+        .publish();
+
+    IntStream.range(0, 4)
+        .forEach(
+            j -> {
+              final var job = RecordingExporter.jobRecords(JobIntent.CREATED).skip(j).getFirst();
+              engine.job().withKey(job.getKey()).complete();
+            });
+
+    // then
+    assertThat(RecordingExporter.variableRecords().withName(""x"").limit(4))
+        .extracting(r -> r.getValue().getValue())
+        .describedAs(""Expected messages [1,2,3,4] to be correlated"")
+        .containsExactly(""1"", ""2"", ""3"", ""4"");
   }
 }
diff --git a/engine/src/test/java/io/zeebe/engine/state/message/MessageStateTest.java b/engine/src/test/java/io/zeebe/engine/state/message/MessageStateTest.java
index 0273e23..066c672 100644
--- a/engine/src/test/java/io/zeebe/engine/state/message/MessageStateTest.java
+++ b/engine/src/test/java/io/zeebe/engine/state/message/MessageStateTest.java
@@ -387,7 +387,66 @@ public class MessageStateTest {
     assertThat(messageState.existMessageCorrelation(messageKey, wrapString(""a""))).isFalse();
   }
 
-  private Message createMessage(long key, String name, String correlationKey) {
+  @Test
+  public void shouldExistActiveWorkflowInstance() {
+    // when
+    messageState.putActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-1""));
+
+    // then
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-1"")))
+        .isTrue();
+
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-2""), wrapString(""key-1"")))
+        .isFalse();
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-2"")))
+        .isFalse();
+  }
+
+  @Test
+  public void shouldRemoveActiveWorkflowInstance() {
+    // given
+    messageState.putActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-1""));
+    messageState.putActiveWorkflowInstance(wrapString(""wf-2""), wrapString(""key-1""));
+    messageState.putActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-2""));
+
+    // when
+    messageState.removeActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-1""));
+
+    // then
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-1"")))
+        .isFalse();
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-2""), wrapString(""key-1"")))
+        .isTrue();
+    assertThat(messageState.existActiveWorkflowInstance(wrapString(""wf-1""), wrapString(""key-2"")))
+        .isTrue();
+  }
+
+  @Test
+  public void shouldGetWorkflowInstanceCorrelationKey() {
+    // when
+    messageState.putWorkflowInstanceCorrelationKey(1L, wrapString(""key-1""));
+
+    // then
+    assertThat(messageState.getWorkflowInstanceCorrelationKey(1L)).isEqualTo(wrapString(""key-1""));
+
+    assertThat(messageState.getWorkflowInstanceCorrelationKey(2L)).isNull();
+  }
+
+  @Test
+  public void shouldRemoveWorkflowInstanceCorrelationKey() {
+    // given
+    messageState.putWorkflowInstanceCorrelationKey(1L, wrapString(""key-1""));
+    messageState.putWorkflowInstanceCorrelationKey(2L, wrapString(""key-2""));
+
+    // when
+    messageState.removeWorkflowInstanceCorrelationKey(1L);
+
+    // then
+    assertThat(messageState.getWorkflowInstanceCorrelationKey(1L)).isNull();
+    assertThat(messageState.getWorkflowInstanceCorrelationKey(2L)).isEqualTo(wrapString(""key-2""));
+  }
+
+  private Message createMessage(final long key, final String name, final String correlationKey) {
     return new Message(
         key,
         wrapString(name),
@@ -399,7 +458,11 @@ public class MessageStateTest {
   }
 
   private Message createMessage(
-      long key, String name, String correlationKey, String variables, String id) {
+      final long key,
+      final String name,
+      final String correlationKey,
+      final String variables,
+      final String id) {
     return new Message(
         key,
         wrapString(name),
@@ -411,7 +474,12 @@ public class MessageStateTest {
   }
 
   private Message createMessage(
-      long key, String name, String correlationKey, String variables, String id, long deadline) {
+      final long key,
+      final String name,
+      final String correlationKey,
+      final String variables,
+      final String id,
+      final long deadline) {
     return new Message(
         key,
         wrapString(name),
diff --git a/engine/src/test/java/io/zeebe/engine/util/client/PublishMessageClient.java b/engine/src/test/java/io/zeebe/engine/util/client/PublishMessageClient.java
index 4ff6e80..3fb3c1d 100644
--- a/engine/src/test/java/io/zeebe/engine/util/client/PublishMessageClient.java
+++ b/engine/src/test/java/io/zeebe/engine/util/client/PublishMessageClient.java
@@ -53,49 +53,53 @@ public class PublishMessageClient {
       SUCCESSFUL_EXPECTATION_SUPPLIER;
   private int partitionId = DEFAULT_VALUE;
 
-  public PublishMessageClient(StreamProcessorRule environmentRule, int partitionCount) {
-    this.enviromentRule = environmentRule;
+  public PublishMessageClient(final StreamProcessorRule environmentRule, final int partitionCount) {
+    enviromentRule = environmentRule;
     this.partitionCount = partitionCount;
 
     messageRecord = new MessageRecord();
     messageRecord.setTimeToLive(DEFAULT_MSG_TTL.toMillis());
   }
 
-  public PublishMessageClient withCorrelationKey(String correlationKey) {
+  public PublishMessageClient withCorrelationKey(final String correlationKey) {
     messageRecord.setCorrelationKey(correlationKey);
     return this;
   }
 
-  public PublishMessageClient withName(String name) {
+  public PublishMessageClient withName(final String name) {
     messageRecord.setName(name);
     return this;
   }
 
-  public PublishMessageClient withId(String id) {
+  public PublishMessageClient withId(final String id) {
     messageRecord.setMessageId(id);
     return this;
   }
 
-  public PublishMessageClient withTimeToLive(long timeToLive) {
+  public PublishMessageClient withTimeToLive(final Duration timeToLive) {
+    return withTimeToLive(timeToLive.toMillis());
+  }
+
+  public PublishMessageClient withTimeToLive(final long timeToLive) {
     messageRecord.setTimeToLive(timeToLive);
     return this;
   }
 
-  public PublishMessageClient withVariables(Map<String, Object> variables) {
+  public PublishMessageClient withVariables(final Map<String, Object> variables) {
     return withVariables(MsgPackUtil.asMsgPack(variables));
   }
 
-  public PublishMessageClient withVariables(DirectBuffer variables) {
+  public PublishMessageClient withVariables(final DirectBuffer variables) {
     messageRecord.setVariables(variables);
     return this;
   }
 
-  public PublishMessageClient withVariables(String variables) {
+  public PublishMessageClient withVariables(final String variables) {
     messageRecord.setVariables(new UnsafeBuffer(MsgPackConverter.convertToMsgPack(variables)));
     return this;
   }
 
-  public PublishMessageClient onPartition(int partitionId) {
+  public PublishMessageClient onPartition(final int partitionId) {
     this.partitionId = partitionId;
     return this;
   }
@@ -125,7 +129,7 @@ public class PublishMessageClient {
     final String correlationKey;
     final long position;
 
-    Message(int partitionId, String correlationKey, long position) {
+    Message(final int partitionId, final String correlationKey, final long position) {
       this.partitionId = partitionId;
       this.correlationKey = correlationKey;
       this.position = position;

diff --git a/backup/src/main/java/io/camunda/zeebe/backup/api/BackupManager.java b/backup/src/main/java/io/camunda/zeebe/backup/api/BackupManager.java
index b2dfb98..21eaf6d 100644
--- a/backup/src/main/java/io/camunda/zeebe/backup/api/BackupManager.java
+++ b/backup/src/main/java/io/camunda/zeebe/backup/api/BackupManager.java
@@ -42,4 +42,6 @@ public interface BackupManager {
 
   /** Close Backup manager */
   ActorFuture<Void> closeAsync();
+
+  void failInProgressBackup(long lastCheckpointId);
 }
diff --git a/backup/src/main/java/io/camunda/zeebe/backup/management/BackupService.java b/backup/src/main/java/io/camunda/zeebe/backup/management/BackupService.java
index a1e1319..33149ae 100644
--- a/backup/src/main/java/io/camunda/zeebe/backup/management/BackupService.java
+++ b/backup/src/main/java/io/camunda/zeebe/backup/management/BackupService.java
@@ -16,6 +16,7 @@ import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
 import io.camunda.zeebe.snapshots.PersistedSnapshotStore;
 import java.nio.file.Path;
+import java.util.List;
 import java.util.function.Predicate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,11 +32,13 @@ public final class BackupService extends Actor implements BackupManager {
   private final PersistedSnapshotStore snapshotStore;
   private final Path segmentsDirectory;
   private final Predicate<Path> isSegmentsFile;
+  private List<Integer> partitionMembers;
 
   public BackupService(
       final int nodeId,
       final int partitionId,
       final int numberOfPartitions,
+      final List<Integer> partitionMembers,
       final PersistedSnapshotStore snapshotStore,
       final Predicate<Path> isSegmentsFile,
       final Path segmentsDirectory) {
@@ -48,6 +51,7 @@ public final class BackupService extends Actor implements BackupManager {
         snapshotStore,
         segmentsDirectory,
         isSegmentsFile);
+    this.partitionMembers = partitionMembers;
   }
 
   public BackupService(
@@ -122,6 +126,12 @@ public final class BackupService extends Actor implements BackupManager {
         new UnsupportedOperationException(""Not implemented""));
   }
 
+  @Override
+  public void failInProgressBackup(final long lastCheckpointId) {
+    internalBackupManager.failInProgressBackups(
+        partitionId, lastCheckpointId, partitionMembers, actor);
+  }
+
   private BackupIdentifierImpl getBackupId(final long checkpointId) {
     return new BackupIdentifierImpl(nodeId, partitionId, checkpointId);
   }
diff --git a/backup/src/main/java/io/camunda/zeebe/backup/management/BackupServiceImpl.java b/backup/src/main/java/io/camunda/zeebe/backup/management/BackupServiceImpl.java
index e462dd5..f6d76b6 100644
--- a/backup/src/main/java/io/camunda/zeebe/backup/management/BackupServiceImpl.java
+++ b/backup/src/main/java/io/camunda/zeebe/backup/management/BackupServiceImpl.java
@@ -9,16 +9,23 @@ package io.camunda.zeebe.backup.management;
 
 import io.camunda.zeebe.backup.api.BackupIdentifier;
 import io.camunda.zeebe.backup.api.BackupStatus;
+import io.camunda.zeebe.backup.api.BackupStatusCode;
 import io.camunda.zeebe.backup.api.BackupStore;
+import io.camunda.zeebe.backup.common.BackupIdentifierImpl;
+import io.camunda.zeebe.backup.processing.state.CheckpointState;
 import io.camunda.zeebe.scheduler.ConcurrencyControl;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
+import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 final class BackupServiceImpl {
+  private static final Logger LOG = LoggerFactory.getLogger(BackupServiceImpl.class);
   private final Set<InProgressBackup> backupsInProgress = new HashSet<>();
   private final BackupStore backupStore;
   private ConcurrencyControl concurrencyControl;
@@ -138,4 +145,48 @@ final class BackupServiceImpl {
                     }));
     return future;
   }
+
+  void failInProgressBackups(
+      final int partitionId,
+      final long lastCheckpointId,
+      final Collection<Integer> brokers,
+      final ConcurrencyControl executor) {
+    if (lastCheckpointId != CheckpointState.NO_CHECKPOINT) {
+      executor.run(
+          () -> {
+            final var backupIds =
+                brokers.stream()
+                    .map(b -> new BackupIdentifierImpl(b, partitionId, lastCheckpointId))
+                    .toList();
+            // Fail backups initiated by previous leaders
+            backupIds.forEach(this::failInProgressBackup);
+          });
+    }
+  }
+
+  private void failInProgressBackup(final BackupIdentifier backupId) {
+    backupStore
+        .getStatus(backupId)
+        .thenAccept(
+            status -> {
+              if (status.statusCode() == BackupStatusCode.IN_PROGRESS) {
+                LOG.debug(
+                    ""The backup {} initiated by previous leader is still in progress. Marking it as failed."",
+                    backupId);
+                backupStore
+                    .markFailed(backupId)
+                    .thenAccept(ignore -> LOG.trace(""Marked backup {} as failed."", backupId))
+                    .exceptionally(
+                        failed -> {
+                          LOG.debug(""Failed to mark backup {} as failed"", backupId, failed);
+                          return null;
+                        });
+              }
+            })
+        .exceptionally(
+            error -> {
+              LOG.debug(""Failed to retrieve status of backup {}"", backupId);
+              return null;
+            });
+  }
 }
diff --git a/backup/src/main/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessor.java b/backup/src/main/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessor.java
index c83fdc1..2899d4d 100644
--- a/backup/src/main/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessor.java
+++ b/backup/src/main/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessor.java
@@ -14,20 +14,24 @@ import io.camunda.zeebe.backup.processing.state.DbCheckpointState;
 import io.camunda.zeebe.engine.api.ProcessingResult;
 import io.camunda.zeebe.engine.api.ProcessingResultBuilder;
 import io.camunda.zeebe.engine.api.ProcessingScheduleService;
+import io.camunda.zeebe.engine.api.ReadonlyStreamProcessorContext;
 import io.camunda.zeebe.engine.api.RecordProcessor;
 import io.camunda.zeebe.engine.api.RecordProcessorContext;
+import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
 import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.protocol.impl.record.value.management.CheckpointRecord;
 import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.management.CheckpointIntent;
 import java.time.Duration;
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /** Process and replays records related to Checkpoint. */
-public final class CheckpointRecordsProcessor implements RecordProcessor {
+public final class CheckpointRecordsProcessor
+    implements RecordProcessor, StreamProcessorLifecycleAware {
 
   private static final Logger LOG = LoggerFactory.getLogger(CheckpointRecordsProcessor.class);
 
@@ -62,6 +66,8 @@ public final class CheckpointRecordsProcessor implements RecordProcessor {
       checkpointListeners.forEach(
           listener -> listener.onNewCheckpointCreated(checkpointState.getCheckpointId()));
     }
+
+    recordProcessorContext.addLifecycleListeners(List.of(this));
   }
 
   @Override
@@ -126,4 +132,12 @@ public final class CheckpointRecordsProcessor implements RecordProcessor {
           });
     }
   }
+
+  @Override
+  public void onRecovered(final ReadonlyStreamProcessorContext context) {
+    // After a leader change, the new leader will not continue taking the backup initiated by
+    // previous leader. So mark them as failed, so that the users do not wait forever for it to be
+    // completed.
+    backupManager.failInProgressBackup(checkpointState.getCheckpointId());
+  }
 }
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/BackupServiceTransitionStep.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/BackupServiceTransitionStep.java
index 3424e19..591e17b 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/BackupServiceTransitionStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/BackupServiceTransitionStep.java
@@ -7,6 +7,7 @@
  */
 package io.camunda.zeebe.broker.system.partitions.impl.steps;
 
+import io.atomix.cluster.MemberId;
 import io.atomix.raft.RaftServer.Role;
 import io.camunda.zeebe.backup.api.BackupManager;
 import io.camunda.zeebe.backup.management.BackupService;
@@ -17,6 +18,7 @@ import io.camunda.zeebe.journal.file.SegmentFile;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
 import java.nio.file.Path;
+import java.util.List;
 import java.util.function.Predicate;
 
 public final class BackupServiceTransitionStep implements PartitionTransitionStep {
@@ -69,6 +71,7 @@ public final class BackupServiceTransitionStep implements PartitionTransitionSte
             context.getNodeId(),
             context.getPartitionId(),
             context.getBrokerCfg().getCluster().getPartitionsCount(),
+            getPartitionMembers(context),
             context.getPersistedSnapshotStore(),
             isSegmentsFile,
             context.getRaftPartition().dataDirectory().toPath());
@@ -90,4 +93,12 @@ public final class BackupServiceTransitionStep implements PartitionTransitionSte
             });
     return installed;
   }
+
+  // Brokers which are members of this partition's replication group
+  private static List<Integer> getPartitionMembers(final PartitionTransitionContext context) {
+    return context.getRaftPartition().members().stream()
+        .map(MemberId::id)
+        .map(Integer::parseInt)
+        .toList();
+  }
 }

diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/ExecutionPathSegment.java b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/ExecutionPathSegment.java
index da33c23..23c43be 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/ExecutionPathSegment.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/ExecutionPathSegment.java
@@ -29,6 +29,10 @@ import org.apache.commons.lang3.builder.ToStringStyle;
  */
 public final class ExecutionPathSegment {
 
+  // If we have reached a terminate end event we want to stop generating execution steps for a
+  // specific flow scope. By setting this flag to true no new execution steps will be added for the
+  // flow scope this segment is in.
+  private boolean reachedTerminateEndEvent = false;
   private final List<ScheduledExecutionStep> scheduledSteps = new ArrayList<>();
   private final Map<String, Object> variableDefaults = new HashMap<>();
 
@@ -87,10 +91,28 @@ public final class ExecutionPathSegment {
         new ScheduledExecutionStep(logicalPredecessor, executionPredecessor, executionStep));
   }
 
+  /**
+   * Appends the steps of the passed execution path segment to the current segment.
+   *
+   * @param pathToAdd execution path segment to append to this segment
+   */
   public void append(final ExecutionPathSegment pathToAdd) {
+    append(pathToAdd, false);
+  }
+
+  /**
+   * Appends the step of the passed execution path segment to the current segment if the current
+   *
+   * @param pathToAdd
+   * @param changesFlowScope
+   */
+  public void append(final ExecutionPathSegment pathToAdd, final boolean changesFlowScope) {
     mergeVariableDefaults(pathToAdd);
 
-    pathToAdd.getScheduledSteps().forEach(this::append);
+    if (!hasReachedTerminateEndEvent() || changesFlowScope) {
+      pathToAdd.getScheduledSteps().forEach(this::append);
+    }
+    reachedTerminateEndEvent = pathToAdd.hasReachedTerminateEndEvent() && !changesFlowScope;
   }
 
   public void append(final ScheduledExecutionStep scheduledExecutionStep) {
@@ -259,6 +281,14 @@ public final class ExecutionPathSegment {
     return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
   }
 
+  public boolean hasReachedTerminateEndEvent() {
+    return reachedTerminateEndEvent;
+  }
+
+  public void setReachedTerminateEndEvent(final boolean reachedTerminateEndEvent) {
+    this.reachedTerminateEndEvent = reachedTerminateEndEvent;
+  }
+
   /**
    * An execution boundary is the point where automatic and non-automatic {@link
    * ScheduledExecutionStep}'s meet each other. This class contains information about the existing

diff --git a/Jenkinsfile b/Jenkinsfile
index b92fc5c..662108e 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -103,8 +103,13 @@ pipeline {
                     // to simplify building the Docker image, we copy the distribution to a fixed
                     // filename that doesn't include the version
                     runMavenContainerCommand('cp dist/target/camunda-cloud-zeebe-*.tar.gz camunda-cloud-zeebe.tar.gz')
-                    stash name: ""zeebe-build"", includes: ""m2-repository/io/camunda/*/${VERSION}/*""
-                    stash name: ""zeebe-distro"", includes: ""camunda-cloud-zeebe.tar.gz""
+
+                    container('maven') {
+                        gcloudSaveTmpFile('zeebe-distro', ['camunda-cloud-zeebe.tar.gz'])
+
+                        sh ""tar -cf zeebe-build.tar ./m2-repository/io/camunda/*/${VERSION}/*""
+                        gcloudSaveTmpFile('zeebe-build', ['zeebe-build.tar'])
+                    }
                 }
             }
         }
@@ -250,7 +255,10 @@ pipeline {
                                 timeout(time: shortTimeoutMinutes, unit: 'MINUTES') {
                                     prepareMavenContainer()
 
-                                    unstash name: ""zeebe-build""
+                                    container('maven') {
+                                        gcloudRestoreTmpFile('zeebe-build', ['zeebe-build.tar'])
+                                        sh ""tar -xf zeebe-build.tar""
+                                    }
                                     runMavenContainerCommand('.ci/scripts/distribution/it-prepare.sh')
                                 }
                             }
@@ -265,7 +273,9 @@ pipeline {
 
                             steps {
                                 timeout(time: shortTimeoutMinutes, unit: 'MINUTES') {
-                                    unstash name: ""zeebe-distro""
+                                    container('maven') {
+                                        gcloudRestoreTmpFile('zeebe-distro', ['camunda-cloud-zeebe.tar.gz'])
+                                    }
                                     container('docker') {
                                         sh '.ci/scripts/docker/build.sh'
                                     }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/OutputMappingIncidentTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/OutputMappingIncidentTest.java
index 9cfcc12..c7648fc 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/OutputMappingIncidentTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/incident/OutputMappingIncidentTest.java
@@ -20,6 +20,7 @@ import io.camunda.zeebe.protocol.record.Assertions;
 import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.intent.IncidentIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.value.BpmnElementType;
 import io.camunda.zeebe.protocol.record.value.ErrorType;
 import io.camunda.zeebe.protocol.record.value.IncidentRecordValue;
 import io.camunda.zeebe.test.util.collection.Maps;
@@ -32,6 +33,7 @@ import org.junit.ClassRule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
 @RunWith(Parameterized.class)
@@ -39,22 +41,24 @@ public class OutputMappingIncidentTest {
 
   @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
   private static final String PROCESS_ID = ""processId"";
-  private final BpmnModelInstance bpmnModelInstance;
-  private final String elementId;
-  private final boolean createsJob;
-
-  public OutputMappingIncidentTest(
-      final BpmnModelInstance bpmnModelInstance, final String elementId, final boolean createsJob) {
-    this.bpmnModelInstance = bpmnModelInstance;
-    this.elementId = elementId;
-    this.createsJob = createsJob;
-  }
+
+  @Parameter public String description;
+
+  @Parameter(1)
+  public BpmnModelInstance bpmnModelInstance;
+
+  @Parameter(2)
+  public String elementId;
+
+  @Parameter(3)
+  public boolean createsJob;
 
   @Parameters(name = ""{index}: {0}"")
   public static Collection<Object[]> parameters() {
     return Arrays.asList(
         new Object[][] {
           {
+            ""Service task"",
             Bpmn.createExecutableProcess(PROCESS_ID)
                 .startEvent()
                 .serviceTask(
@@ -66,6 +70,7 @@ public class OutputMappingIncidentTest {
             true
           },
           {
+            ""Intermediate throw event"",
             Bpmn.createExecutableProcess(PROCESS_ID)
                 .startEvent()
                 .intermediateThrowEvent(
@@ -153,6 +158,7 @@ public class OutputMappingIncidentTest {
     assertTrue(
         RecordingExporter.processInstanceRecords()
             .withProcessInstanceKey(processInstanceKey)
+            .withElementType(BpmnElementType.PROCESS)
             .withIntent(ProcessInstanceIntent.ELEMENT_COMPLETED)
             .exists());
     final Map<String, String> variables = ProcessInstances.getCurrentVariables(processInstanceKey);
@@ -197,6 +203,7 @@ public class OutputMappingIncidentTest {
     assertTrue(
         RecordingExporter.processInstanceRecords()
             .withProcessInstanceKey(processInstanceKey)
+            .withElementType(BpmnElementType.PROCESS)
             .withIntent(ProcessInstanceIntent.ELEMENT_TERMINATED)
             .exists());
   }
"
camunda/zeebe,fix,"diff --git a/util/src/main/java/io/camunda/zeebe/util/allocation/DirectBufferAllocator.java b/util/src/main/java/io/camunda/zeebe/util/allocation/DirectBufferAllocator.java
index 6d0b1ac..436a9d2 100644
--- a/util/src/main/java/io/camunda/zeebe/util/allocation/DirectBufferAllocator.java
+++ b/util/src/main/java/io/camunda/zeebe/util/allocation/DirectBufferAllocator.java
@@ -9,6 +9,7 @@ package io.camunda.zeebe.util.allocation;
 
 import java.nio.ByteBuffer;
 import java.util.concurrent.atomic.AtomicLong;
+import org.agrona.BufferUtil;
 
 public final class DirectBufferAllocator implements BufferAllocator {
   private static final AtomicLong ALLOCATED_MEMORY = new AtomicLong();
@@ -26,6 +27,7 @@ public final class DirectBufferAllocator implements BufferAllocator {
 
   private static void onFree(final AllocatedDirectBuffer buffer) {
     ALLOCATED_MEMORY.addAndGet(-buffer.capacity());
+    BufferUtil.free(buffer.rawBuffer);
   }
 
   public static long getAllocatedMemoryInKb() {

diff --git a/exporters/opensearch-exporter/docker-compose.yml b/exporters/opensearch-exporter/docker-compose.yml
index 8fe84b3..647afa1 100644
--- a/exporters/opensearch-exporter/docker-compose.yml
+++ b/exporters/opensearch-exporter/docker-compose.yml
@@ -2,7 +2,7 @@ version: '3'
 
 services:
   opensearch:
-    image: opensearchproject/opensearch:2.6.0
+    image: opensearchproject/opensearch:2.5.0
     ports:
       - ""9200:9200""
       - ""9600:9600""
@@ -14,7 +14,7 @@ services:
       - opensearch-net
 
   opensearch-dashboards:
-    image: opensearchproject/opensearch-dashboards:2.6.0
+    image: opensearchproject/opensearch-dashboards:2.5.0
     ports:
       - ""5601:5601""
     expose:

diff --git a/dist/src/main/resources/api/backup-management-api.yaml b/dist/src/main/resources/api/backup-management-api.yaml
index 7a42a4b..7a8b86e 100644
--- a/dist/src/main/resources/api/backup-management-api.yaml
+++ b/dist/src/main/resources/api/backup-management-api.yaml
@@ -166,8 +166,7 @@ components:
             partitions known to the cluster.
           type: array
           items:
-            allOf:
-              - $ref: '#/components/schemas/PartitionBackupInfo'
+            $ref: '#/components/schemas/PartitionBackupInfo'
       required:
         - backupId
         - state

diff --git a/bom/pom.xml b/bom/pom.xml
index 4f4ccd6..306478d 100644
--- a/bom/pom.xml
+++ b/bom/pom.xml
@@ -200,7 +200,7 @@
 
       <dependency>
         <groupId>io.camunda</groupId>
-        <artifactId>dmn</artifactId>
+        <artifactId>zeebe-dmn</artifactId>
         <version>${project.version}</version>
       </dependency>
 
diff --git a/engine/pom.xml b/engine/pom.xml
index fd5bde6..e98d17e 100644
--- a/engine/pom.xml
+++ b/engine/pom.xml
@@ -70,7 +70,7 @@
 
     <dependency>
       <groupId>io.camunda</groupId>
-      <artifactId>dmn</artifactId>
+      <artifactId>zeebe-dmn</artifactId>
     </dependency>
 
     <dependency>

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
index cd5ea81..2d1c109 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
@@ -608,6 +608,49 @@ public class ModifyProcessInstanceRejectionTest {
   }
 
   @Test
+  public void shouldRejectActivationOfMultiInstanceInstance() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .userTask(""A"")
+                .subProcess(
+                    ""subprocess"", s -> s.embeddedSubProcess().startEvent().manualTask(""B"").done())
+                .multiInstance(m -> m.zeebeInputCollectionExpression(""[1]""))
+                .endEvent()
+                .done())
+        .deploy();
+
+    final var processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+        .withProcessInstanceKey(processInstanceKey)
+        .withElementId(""A"")
+        .await();
+
+    // when
+    final var rejection =
+        ENGINE
+            .processInstance()
+            .withInstanceKey(processInstanceKey)
+            .modification()
+            .activateElement(""B"")
+            .expectRejection()
+            .modify();
+
+    // then
+    assertThat(rejection)
+        .describedAs(""Expect we cannot activate an instance of the multi-instance"")
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to modify instance of process 'process' but it contains one or more activate \
+            instructions that would result in the activation of multi-instance element \
+            'subprocess', which is currently unsupported."""""");
+  }
+
+  @Test
   public void shouldRejectSelectedAncestorIsMultiInstance() {
     // given
     ENGINE
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceUnsupportedElementsTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceUnsupportedElementsTest.java
index 020748d..540c8c8 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceUnsupportedElementsTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceUnsupportedElementsTest.java
@@ -45,24 +45,6 @@ public class ModifyProcessInstanceUnsupportedElementsTest {
   public static Collection<Object> scenarios() {
     return List.of(
         new Scenario(
-            ""Activate element inside multi-instance sub-process"",
-            Bpmn.createExecutableProcess(PROCESS_ID)
-                .startEvent()
-                .userTask(""A"")
-                .subProcess(
-                    ""subprocess"",
-                    s -> s.embeddedSubProcess().startEvent().manualTask(""B"").manualTask(""C"").done())
-                .multiInstance(m -> m.zeebeInputCollectionExpression(""[1,2,3]""))
-                .manualTask(""D"")
-                .endEvent()
-                .done(),
-            instructionBuilder ->
-                instructionBuilder.activateElement(""B"").activateElement(""C"").activateElement(""D""),
-            new Rejection(
-                RejectionType.INVALID_ARGUMENT,
-                ""'B', 'C'"",
-                ""The activation of elements inside a multi-instance subprocess is not supported"")),
-        new Scenario(
             ""Activate element that belongs to an event-based gateway"",
             Bpmn.createExecutableProcess(PROCESS_ID)
                 .startEvent()

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
index 636cd21..76afff7 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
@@ -15,7 +15,9 @@
  */
 package io.zeebe.broker.it.startup;
 
-import static io.zeebe.broker.it.util.TopicEventRecorder.*;
+import static io.zeebe.broker.it.util.TopicEventRecorder.incidentEvent;
+import static io.zeebe.broker.it.util.TopicEventRecorder.taskEvent;
+import static io.zeebe.broker.it.util.TopicEventRecorder.wfInstanceEvent;
 import static io.zeebe.test.util.TestUtil.doRepeatedly;
 import static io.zeebe.test.util.TestUtil.waitUntil;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -24,11 +26,18 @@ import java.io.File;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.time.Duration;
-import java.time.Instant;
 import java.util.Collections;
 import java.util.List;
 import java.util.regex.Pattern;
 
+import org.assertj.core.util.Files;
+import org.junit.After;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.rules.RuleChain;
+import org.junit.rules.TemporaryFolder;
+
 import io.zeebe.broker.clustering.ClusterServiceNames;
 import io.zeebe.broker.it.ClientRule;
 import io.zeebe.broker.it.EmbeddedBrokerRule;
@@ -38,7 +47,9 @@ import io.zeebe.client.ZeebeClient;
 import io.zeebe.client.clustering.impl.TopicLeader;
 import io.zeebe.client.clustering.impl.TopologyResponse;
 import io.zeebe.client.cmd.ClientCommandRejectedException;
-import io.zeebe.client.event.*;
+import io.zeebe.client.event.DeploymentEvent;
+import io.zeebe.client.event.TaskEvent;
+import io.zeebe.client.event.WorkflowInstanceEvent;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.instance.WorkflowDefinition;
 import io.zeebe.raft.Raft;
@@ -48,9 +59,6 @@ import io.zeebe.test.util.TestFileUtil;
 import io.zeebe.test.util.TestUtil;
 import io.zeebe.transport.SocketAddress;
 import io.zeebe.util.time.ClockUtil;
-import org.assertj.core.util.Files;
-import org.junit.*;
-import org.junit.rules.*;
 
 public class BrokerRecoveryTest
 {
@@ -360,17 +368,12 @@ public class BrokerRecoveryTest
         waitUntil(() -> !recordingTaskHandler.getHandledTasks().isEmpty());
 
         // when
-        restartBroker(() ->
-        {
-            final Instant now = ClockUtil.getCurrentTime();
-            ClockUtil.setCurrentTime(now.plusSeconds(60));
-        });
+        restartBroker(() -> ClockUtil.addTime(Duration.ofSeconds(60)));
 
         // wait until stream processor and scheduler process the lock task event which is not re-processed on recovery
         doRepeatedly(() ->
         {
-            final Instant now = ClockUtil.getCurrentTime();
-            ClockUtil.setCurrentTime(now.plusSeconds(60));
+            ClockUtil.addTime(Duration.ofSeconds(60)); // retriggers lock expiration check in broker
             return null;
         }).until(t -> eventRecorder.hasTaskEvent(taskEvent(""LOCK_EXPIRED"")));
 
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRestartTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRestartTest.java
index 5ff1301..0ffe98d 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRestartTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRestartTest.java
@@ -15,7 +15,9 @@
  */
 package io.zeebe.broker.it.startup;
 
-import static io.zeebe.broker.it.util.TopicEventRecorder.*;
+import static io.zeebe.broker.it.util.TopicEventRecorder.incidentEvent;
+import static io.zeebe.broker.it.util.TopicEventRecorder.taskEvent;
+import static io.zeebe.broker.it.util.TopicEventRecorder.wfInstanceEvent;
 import static io.zeebe.test.util.TestUtil.waitUntil;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -23,11 +25,18 @@ import java.io.File;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.time.Duration;
-import java.time.Instant;
 import java.util.Collections;
 import java.util.List;
 import java.util.regex.Pattern;
 
+import org.junit.After;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+import org.junit.rules.ExpectedException;
+import org.junit.rules.RuleChain;
+import org.junit.rules.TemporaryFolder;
+
 import io.zeebe.broker.clustering.ClusterServiceNames;
 import io.zeebe.broker.it.ClientRule;
 import io.zeebe.broker.it.EmbeddedBrokerRule;
@@ -37,7 +46,9 @@ import io.zeebe.client.ZeebeClient;
 import io.zeebe.client.clustering.impl.TopicLeader;
 import io.zeebe.client.clustering.impl.TopologyResponse;
 import io.zeebe.client.cmd.ClientCommandRejectedException;
-import io.zeebe.client.event.*;
+import io.zeebe.client.event.DeploymentEvent;
+import io.zeebe.client.event.TaskEvent;
+import io.zeebe.client.event.WorkflowInstanceEvent;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.instance.WorkflowDefinition;
 import io.zeebe.raft.Raft;
@@ -47,9 +58,6 @@ import io.zeebe.test.util.TestFileUtil;
 import io.zeebe.test.util.TestUtil;
 import io.zeebe.transport.SocketAddress;
 import io.zeebe.util.time.ClockUtil;
-import org.junit.*;
-import org.junit.experimental.categories.Category;
-import org.junit.rules.*;
 
 public class BrokerRestartTest
 {
@@ -360,11 +368,7 @@ public class BrokerRestartTest
         waitUntil(() -> !recordingTaskHandler.getHandledTasks().isEmpty());
 
         // when
-        restartBroker(() ->
-        {
-            final Instant now = ClockUtil.getCurrentTime();
-            ClockUtil.setCurrentTime(now.plusSeconds(60));
-        });
+        restartBroker(() -> ClockUtil.addTime(Duration.ofSeconds(60)));
 
         waitUntil(() -> eventRecorder.hasTaskEvent(taskEvent(""LOCK_EXPIRED"")));
         recordingTaskHandler.clear();
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/task/TaskSubscriptionTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/task/TaskSubscriptionTest.java
index 49b527d..a322fbe 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/task/TaskSubscriptionTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/task/TaskSubscriptionTest.java
@@ -353,7 +353,7 @@ public class TaskSubscriptionTest
         waitUntil(() -> taskHandler.getHandledTasks().size() == 1);
 
         // when
-        ClockUtil.setCurrentTime(Instant.now().plus(Duration.ofMinutes(5)));
+        ClockUtil.addTime(Duration.ofMinutes(5));
 
         // then
         waitUntil(() -> taskHandler.getHandledTasks().size() == 2);

diff --git a/qa/integration-tests/src/test/java/org/camunda/tngp/broker/it/event/PollEventsTest.java b/qa/integration-tests/src/test/java/org/camunda/tngp/broker/it/event/PollEventsTest.java
deleted file mode 100644
index ce8afcf..0000000
--- a/qa/integration-tests/src/test/java/org/camunda/tngp/broker/it/event/PollEventsTest.java
+++ /dev/null
@@ -1,299 +0,0 @@
-/* Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.camunda.tngp.broker.it.event;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-import java.util.List;
-
-import org.camunda.bpm.model.bpmn.Bpmn;
-import org.camunda.tngp.broker.it.ClientRule;
-import org.camunda.tngp.broker.it.EmbeddedBrokerRule;
-import org.camunda.tngp.client.TngpClient;
-import org.camunda.tngp.client.cmd.WorkflowDefinition;
-import org.camunda.tngp.client.event.Event;
-import org.camunda.tngp.client.event.EventsBatch;
-import org.camunda.tngp.client.event.TaskInstanceEvent;
-import org.camunda.tngp.client.event.WorkflowDefinitionEvent;
-import org.junit.Ignore;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-import org.junit.rules.RuleChain;
-
-@Ignore
-public class PollEventsTest
-{
-    private static final int TASK_QUEUE_TOPIC_ID = 0;
-    private static final int WORKFLOW_TOPIC_ID = 1;
-
-    private static final int INITIAL_LOG_POSITION = 0;
-
-    public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule();
-
-    public ClientRule clientRule = new ClientRule();
-
-    @Rule
-    public RuleChain ruleChain = RuleChain
-        .outerRule(brokerRule)
-        .around(clientRule);
-
-    @Rule
-    public ExpectedException exception = ExpectedException.none();
-
-    @Test
-    public void shouldPollNoEventsIfNoneAvailable()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(1)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        assertThat(eventsBatch).isNotNull();
-        assertThat(eventsBatch.getEvents()).hasSize(0);
-    }
-
-    @Test
-    public void shouldPollEvent()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .payload(""foo"")
-            .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(1)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        assertThat(eventsBatch).isNotNull();
-        assertThat(eventsBatch.getEvents()).hasSize(1);
-
-        final Event event = eventsBatch.getEvents().get(0);
-
-        assertThat(event.getPosition()).isEqualTo(INITIAL_LOG_POSITION);
-        assertThat(event.getRawBuffer()).isNotNull();
-    }
-
-    @Test
-    public void shouldPollEvents()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        final Long taskId1 = client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .payload(""foo"")
-            .execute();
-
-        final Long taskId2 = client.tasks().create()
-                .topicId(0)
-                .taskType(""test"")
-                .payload(""bar"")
-                .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(2)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        final List<TaskInstanceEvent> events = eventsBatch.getTaskInstanceEvents();
-        assertThat(events).hasSize(2);
-
-        final TaskInstanceEvent event1 = events.get(0);
-        final TaskInstanceEvent event2 = events.get(1);
-
-        assertThat(event1.getPosition()).isEqualTo(INITIAL_LOG_POSITION);
-        assertThat(event1.getId()).isEqualTo(taskId1);
-
-        assertThat(event2.getPosition()).isGreaterThan(INITIAL_LOG_POSITION);
-        assertThat(event2.getId()).isEqualTo(taskId2);
-    }
-
-    @Test
-    public void shouldPollEventWithStartPosition()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .payload(""foo"")
-            .execute();
-
-        final Long taskId2 = client.tasks().create()
-                .topicId(0)
-                .taskType(""test"")
-                .payload(""bar"")
-                .execute();
-
-        EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(2)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        assertThat(eventsBatch.getEvents()).hasSize(2);
-
-        final Event event2 = eventsBatch.getEvents().get(1);
-
-        eventsBatch = client.events().poll()
-                .startPosition(event2.getPosition())
-                .maxEvents(1)
-                .topicId(TASK_QUEUE_TOPIC_ID)
-                .execute();
-
-        final List<TaskInstanceEvent> events = eventsBatch.getTaskInstanceEvents();
-        assertThat(events).hasSize(1);
-
-        final TaskInstanceEvent event = events.get(0);
-        assertThat(event.getId()).isEqualTo(taskId2);
-    }
-
-    @Test
-    public void shouldPollNotMoreThanMaxEvents()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .payload(""foo"")
-            .execute();
-
-        client.tasks().create()
-                .topicId(0)
-                .taskType(""test"")
-                .payload(""bar"")
-                .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(1)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        assertThat(eventsBatch.getEvents()).hasSize(1);
-    }
-
-    @Test
-    public void shouldPollEventWithStartPositionBetweenEvents()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .payload(""foo"")
-            .execute();
-
-        final Long taskId2 = client.tasks().create()
-                .topicId(0)
-                .taskType(""test"")
-                .payload(""bar"")
-                .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION + 1)
-            .maxEvents(2)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        final List<TaskInstanceEvent> events = eventsBatch.getTaskInstanceEvents();
-        assertThat(events).hasSize(1);
-
-        final TaskInstanceEvent event = events.get(0);
-        assertThat(event.getId()).isEqualTo(taskId2);
-    }
-
-    @Test
-    public void shouldPollTaskInstanceEvent()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        final Long taskId = client.tasks().create()
-            .topicId(0)
-            .taskType(""test"")
-            .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(10)
-            .topicId(TASK_QUEUE_TOPIC_ID)
-            .execute();
-
-        final List<TaskInstanceEvent> events = eventsBatch.getTaskInstanceEvents();
-        assertThat(events).hasSize(1);
-
-        final TaskInstanceEvent event = events.get(0);
-
-        assertThat(event.getPosition()).isEqualTo(INITIAL_LOG_POSITION);
-        assertThat(event.getRawBuffer()).isNotNull();
-
-        assertThat(event.getId()).isEqualTo(taskId);
-        assertThat(event.getType()).isEqualTo(""test"");
-
-        assertThat(event.isNew()).isTrue();
-        assertThat(event.isLocked()).isFalse();
-        assertThat(event.isCompleted()).isFalse();
-        assertThat(event.getState()).isEqualTo(TaskInstanceEvent.STATE_NEW);
-
-        assertThat(event.getWorkflowInstanceId()).isNull();
-        assertThat(event.getLockOwnerId()).isNull();
-        assertThat(event.getLockExpirationTime()).isNull();
-    }
-
-    @Test
-    public void shouldPollWorkflowDefinitionEvent()
-    {
-        final TngpClient client = clientRule.getClient();
-
-        final WorkflowDefinition workflowDefinition = client.workflows().deploy()
-            .bpmnModelInstance(Bpmn.createExecutableProcess(""process-id"").startEvent().endEvent().done())
-            .execute();
-
-        // this ensures that the workflow definition event is already persistent - see #68
-        client.workflows().start()
-            .workflowDefinitionId(workflowDefinition.getId())
-            .execute();
-
-        final EventsBatch eventsBatch = client.events().poll()
-            .startPosition(INITIAL_LOG_POSITION)
-            .maxEvents(10)
-            .topicId(WORKFLOW_TOPIC_ID)
-            .execute();
-
-        final List<WorkflowDefinitionEvent> events = eventsBatch.getWorkflowDefinitionEvents();
-        assertThat(events).hasSize(1);
-
-        final WorkflowDefinitionEvent event = events.get(0);
-
-        assertThat(event.getPosition()).isGreaterThanOrEqualTo(INITIAL_LOG_POSITION);
-        assertThat(event.getRawBuffer()).isNotNull();
-
-        assertThat(event.getId()).isEqualTo(workflowDefinition.getId());
-        assertThat(event.getKey()).isEqualTo(""process-id"");
-
-        assertThat(event.getResource()).isNotEmpty();
-    }
-
-
-}

diff --git a/docs/engine_questions.md b/docs/engine_questions.md
index f486f48..2885b3e 100644
--- a/docs/engine_questions.md
+++ b/docs/engine_questions.md
@@ -89,5 +89,6 @@ format we need for executing the process.
 _Note:_ The cache is not evicting any entries right now which can in theory lead to out of memory errors.
 
 ## How does deployment distribution work?
+
 **A:**
 ![Deployment distribution](assets/deployment_distribution.png)

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/SnapshotDirectorPartitionStep.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/SnapshotDirectorPartitionStep.java
index eb6fc48..de88bd4 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/SnapshotDirectorPartitionStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/SnapshotDirectorPartitionStep.java
@@ -39,6 +39,7 @@ public class SnapshotDirectorPartitionStep implements PartitionStep {
   public ActorFuture<Void> close(final PartitionStartupAndTransitionContextImpl context) {
     final var director = context.getSnapshotDirector();
     context.getComponentHealthMonitor().removeComponent(director.getName());
+    context.getRaftPartition().getServer().removeCommittedEntryListener(director);
     final ActorFuture<Void> future = director.closeAsync();
     context.setSnapshotDirector(null);
     return future;

diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/api/ClientStreamService.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/api/ClientStreamService.java
index f03e883..0db5021 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/api/ClientStreamService.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/api/ClientStreamService.java
@@ -48,8 +48,8 @@ public interface ClientStreamService<M extends BufferWriter> extends AsyncClosab
   ClientStreamer<M> streamer();
 
   /** Returns the {@link ClientStream} associated with this ID */
-  Optional<ClientStream<M>> streamFor(final ClientStreamId id);
+  ActorFuture<Optional<ClientStream<M>>> streamFor(final ClientStreamId id);
 
   /** Returns all registered client streams. */
-  Collection<ClientStream<M>> streams();
+  ActorFuture<Collection<ClientStream<M>>> streams();
 }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
index 42e3e13..765b44b 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
@@ -42,15 +42,8 @@ public final class ClientStreamServiceImpl<M extends BufferWriter> extends Actor
 
   public ClientStreamServiceImpl(
       final ClusterCommunicationService communicationService, final ClientStreamMetrics metrics) {
-    this(communicationService, metrics, new ClientStreamRegistry<>(metrics));
-  }
-
-  public ClientStreamServiceImpl(
-      final ClusterCommunicationService communicationService,
-      final ClientStreamMetrics metrics,
-      final ClientStreamRegistry<M> registry) {
     this.communicationService = communicationService;
-    this.registry = registry;
+    registry = new ClientStreamRegistry<>(metrics);
 
     // ClientStreamRequestManager must use same actor as this because it is mutating shared
     // ClientStream objects.
@@ -129,16 +122,18 @@ public final class ClientStreamServiceImpl<M extends BufferWriter> extends Actor
   }
 
   @Override
-  public Optional<ClientStream<M>> streamFor(final ClientStreamId id) {
+  public ActorFuture<Optional<ClientStream<M>>> streamFor(final ClientStreamId id) {
     // mapping to itself is necessary to cast from impl to interface type
-    return registry.getClient(id).map(s -> s);
+    return actor.call(() -> registry.getClient(id).map(s -> s));
   }
 
   @Override
-  public Collection<ClientStream<M>> streams() {
-    return registry.list().stream()
-        .flatMap(agg -> agg.list().stream())
-        .map(s -> (ClientStream<M>) s)
-        .toList();
+  public ActorFuture<Collection<ClientStream<M>>> streams() {
+    return actor.call(
+        () ->
+            registry.list().stream()
+                .flatMap(agg -> agg.list().stream())
+                .map(s -> (ClientStream<M>) s)
+                .toList());
   }
 }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
index ebaef60..14c6f30 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
@@ -8,6 +8,7 @@
 package io.camunda.zeebe.transport.stream.impl;
 
 import io.camunda.zeebe.util.buffer.BufferUtil;
+import org.agrona.BitUtil;
 import org.agrona.concurrent.UnsafeBuffer;
 
 /**
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
index 941d592..c3fe82c 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
@@ -37,6 +37,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.stream.Stream;
 import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
+import org.assertj.core.api.Assertions;
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -118,7 +119,7 @@ final class StreamIntegrationTest {
     Awaitility.await(""until stream is registered client side"")
         .untilAsserted(
             () ->
-                assertThat(clientService.streamFor(streamId))
+                Assertions.assertThat(clientService.streamFor(streamId).join())
                     .hasValueSatisfying(s -> s.isConnected(serverMemberId)));
   }
 
@@ -135,10 +136,10 @@ final class StreamIntegrationTest {
 
     // must wait until the stream is connected everywhere before removal, as otherwise there is a
     // race condition
-    Awaitility.await(""until stream is registered"")
+    Awaitility.await(""until stream is registered client side"")
         .untilAsserted(
             () ->
-                assertThat(clientService.streamFor(streamId))
+                Assertions.assertThat(clientService.streamFor(streamId).join())
                     .hasValueSatisfying(s -> s.isConnected(serverMemberId)));
 
     // when
@@ -148,7 +149,8 @@ final class StreamIntegrationTest {
     Awaitility.await(""until stream is removed from the server side"")
         .untilAsserted(() -> assertThat(remoteStreamer.streamFor(streamType)).isEmpty());
     Awaitility.await(""until stream is removed from the client side"")
-        .untilAsserted(() -> assertThat(clientService.streamFor(streamId)).isEmpty());
+        .untilAsserted(
+            () -> Assertions.assertThat(clientService.streamFor(streamId).join()).isEmpty());
   }
 
   @Test

diff --git a/broker-core/src/main/java/io/zeebe/broker/incident/processor/IncidentStreamProcessor.java b/broker-core/src/main/java/io/zeebe/broker/incident/processor/IncidentStreamProcessor.java
index 397871a..f4d068e 100644
--- a/broker-core/src/main/java/io/zeebe/broker/incident/processor/IncidentStreamProcessor.java
+++ b/broker-core/src/main/java/io/zeebe/broker/incident/processor/IncidentStreamProcessor.java
@@ -502,13 +502,13 @@ public class IncidentStreamProcessor implements StreamProcessor
         @Override
         public void processEvent()
         {
+            isResolved = false;
+
             final long value = resolvingEvents.get(sourceEventPosition, -1);
             if (value > 0)
             {
                 currentIncidentKey = value;
 
-                isResolved = false;
-
                 incidentMap.wrapIncidentKey(currentIncidentKey);
 
                 if (incidentMap.getState() == STATE_RESOLVING)
@@ -557,6 +557,8 @@ public class IncidentStreamProcessor implements StreamProcessor
         @Override
         public void processEvent()
         {
+            isTerminated = false;
+
             incidentKey = activityInstanceMap.get(eventKey, -1L);
 
             if (incidentKey > 0)
diff --git a/broker-core/src/test/java/io/zeebe/broker/incident/IncidentTest.java b/broker-core/src/test/java/io/zeebe/broker/incident/IncidentTest.java
index 2a04c35..8e0f19c 100644
--- a/broker-core/src/test/java/io/zeebe/broker/incident/IncidentTest.java
+++ b/broker-core/src/test/java/io/zeebe/broker/incident/IncidentTest.java
@@ -675,6 +675,30 @@ public class IncidentTest
     }
 
     @Test
+    public void shouldResolveMultipleIncidents() throws Exception
+    {
+        // given
+        testClient.deploy(WORKFLOW_INPUT_MAPPING);
+
+        // create and resolve an first incident
+        long workflowInstanceKey = testClient.createWorkflowInstance(""process"");
+        SubscribedEvent failureEvent = testClient.receiveSingleEvent(workflowInstanceEvents(""ACTIVITY_READY"", workflowInstanceKey));
+        updatePayload(workflowInstanceKey, failureEvent.key(), PAYLOAD);
+
+        // create a second incident
+        workflowInstanceKey = testClient.createWorkflowInstance(""process"");
+        failureEvent = testClient.receiveSingleEvent(workflowInstanceEvents(""ACTIVITY_READY"", workflowInstanceKey));
+        final SubscribedEvent incidentEvent = testClient.receiveSingleEvent(incidentEvents(""CREATED"", workflowInstanceKey));
+
+        // when
+        updatePayload(workflowInstanceKey, failureEvent.key(), PAYLOAD);
+
+        // then
+        final SubscribedEvent incidentResolvedEvent = testClient.receiveSingleEvent(incidentEvents(""RESOLVED"", workflowInstanceKey));
+        assertThat(incidentResolvedEvent.key()).isEqualTo(incidentEvent.key());
+    }
+
+    @Test
     public void shouldDeleteIncidentIfActivityTerminated()
     {
         // given
@@ -701,6 +725,40 @@ public class IncidentTest
     }
 
     @Test
+    public void shouldProcessIncidentsAfterMultipleTerminations()
+    {
+        // given
+        testClient.deploy(WORKFLOW_INPUT_MAPPING);
+
+        // create and cancel instance with incident
+        long workflowInstanceKey = testClient.createWorkflowInstance(""process"");
+        cancelWorkflowInstance(workflowInstanceKey);
+
+        // create and cancel instance without incident
+        workflowInstanceKey = testClient.createWorkflowInstance(""process"", PAYLOAD);
+        cancelWorkflowInstance(workflowInstanceKey);
+
+        // create another instance which creates an incident
+        workflowInstanceKey = testClient.createWorkflowInstance(""process"");
+        final SubscribedEvent incidentCreatedEvent = testClient.receiveSingleEvent(incidentEvents(""CREATED"", workflowInstanceKey));
+
+        // when
+        cancelWorkflowInstance(workflowInstanceKey);
+
+        // then
+        final SubscribedEvent incidentEvent = testClient.receiveSingleEvent(incidentEvents(""DELETED"", workflowInstanceKey));
+
+        assertThat(incidentEvent.key()).isEqualTo(incidentCreatedEvent.key());
+        assertThat(incidentEvent.event())
+            .containsEntry(""errorType"", ErrorType.IO_MAPPING_ERROR.name())
+            .containsEntry(""errorMessage"", ""No data found for query $.foo."")
+            .containsEntry(""bpmnProcessId"", ""process"")
+            .containsEntry(""workflowInstanceKey"", workflowInstanceKey)
+            .containsEntry(""activityId"", ""failingTask"")
+            .containsEntry(""activityInstanceKey"", incidentEvent.event().get(""activityInstanceKey""));
+    }
+
+    @Test
     public void shouldCreateIncidentIfTaskHasNoRetriesLeft()
     {
         // given
diff --git a/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/TestTopicClient.java b/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/TestTopicClient.java
index de32053..c83d3ce 100644
--- a/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/TestTopicClient.java
+++ b/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/TestTopicClient.java
@@ -277,6 +277,11 @@ public class TestTopicClient
         return incidentEvents().and(state(eventType));
     }
 
+    public static Predicate<SubscribedEvent> incidentEvents(String eventType, long workflowInstanceKey)
+    {
+        return incidentEvents(eventType).and(workflowInstanceKey(workflowInstanceKey));
+    }
+
     public static Predicate<SubscribedEvent> workflowEvents(String eventType)
     {
         return workflowEvents().and(state(eventType));

diff --git a/broker-core/src/main/java/io/zeebe/broker/workflow/processor/timer/TriggerTimerProcessor.java b/broker-core/src/main/java/io/zeebe/broker/workflow/processor/timer/TriggerTimerProcessor.java
index 1ce0a0a..a629249 100644
--- a/broker-core/src/main/java/io/zeebe/broker/workflow/processor/timer/TriggerTimerProcessor.java
+++ b/broker-core/src/main/java/io/zeebe/broker/workflow/processor/timer/TriggerTimerProcessor.java
@@ -78,8 +78,10 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
     boolean isOccurred = true;
 
     eventOccurredRecord.reset();
+    final long eventOccuredKey;
     if (elementInstanceKey == NO_ELEMENT_INSTANCE) {
       // timer start event
+      eventOccuredKey = streamWriter.getKeyGenerator().nextKey();
       eventOccurredRecord
           .setBpmnElementType(BpmnElementType.START_EVENT)
           .setWorkflowKey(timer.getWorkflowKey())
@@ -87,6 +89,7 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
           .setPayload(WorkflowInstanceRecord.EMPTY_PAYLOAD);
     } else {
       final long eventKey = streamWriter.getKeyGenerator().nextKey();
+      eventOccuredKey = elementInstanceKey;
       isOccurred =
           workflowState
               .getEventScopeInstanceState()
@@ -102,7 +105,7 @@ public class TriggerTimerProcessor implements TypedRecordProcessor<TimerRecord> 
     if (isOccurred) {
       streamWriter.appendFollowUpEvent(record.getKey(), TimerIntent.TRIGGERED, timer);
       streamWriter.appendFollowUpEvent(
-          elementInstanceKey, WorkflowInstanceIntent.EVENT_OCCURRED, eventOccurredRecord);
+          eventOccuredKey, WorkflowInstanceIntent.EVENT_OCCURRED, eventOccurredRecord);
 
       if (shouldReschedule(timer)) {
         final ExecutableCatchEventElement timerEvent = getTimerEvent(elementInstanceKey, timer);
diff --git a/broker-core/src/test/java/io/zeebe/broker/workflow/TimerStartEventTest.java b/broker-core/src/test/java/io/zeebe/broker/workflow/TimerStartEventTest.java
index 7b0a817..84abde0 100644
--- a/broker-core/src/test/java/io/zeebe/broker/workflow/TimerStartEventTest.java
+++ b/broker-core/src/test/java/io/zeebe/broker/workflow/TimerStartEventTest.java
@@ -22,6 +22,7 @@ import static org.assertj.core.api.Assertions.assertThat;
 
 import io.zeebe.broker.test.EmbeddedBrokerRule;
 import io.zeebe.exporter.record.Assertions;
+import io.zeebe.exporter.record.Record;
 import io.zeebe.exporter.record.value.DeploymentRecordValue;
 import io.zeebe.exporter.record.value.TimerRecordValue;
 import io.zeebe.exporter.record.value.WorkflowInstanceRecordValue;
@@ -130,21 +131,32 @@ public class TimerStartEventTest {
     assertThat(RecordingExporter.timerRecords(TimerIntent.CREATED).exists()).isTrue();
     brokerRule.getClock().addTime(Duration.ofSeconds(2));
 
-    Assertions.assertThat(
-            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)
-                .withElementType(BpmnElementType.START_EVENT)
-                .getFirst()
-                .getValue())
+    final WorkflowInstanceRecordValue startEventActivating =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)
+            .withElementType(BpmnElementType.START_EVENT)
+            .getFirst()
+            .getValue();
+    Assertions.assertThat(startEventActivating)
         .hasElementId(""start_1"")
         .hasBpmnProcessId(""process"")
         .hasVersion(workflow.getVersion())
         .hasWorkflowKey(workflow.getWorkflowKey());
 
+    final Record startEventOccured =
+        RecordingExporter.getRecords()
+            .stream()
+            .filter(r -> r.getMetadata().getIntent() == WorkflowInstanceIntent.EVENT_OCCURRED)
+            .findFirst()
+            .get();
+    assertThat(startEventOccured.getKey())
+        .isLessThan(startEventActivating.getWorkflowInstanceKey());
+
     final long triggerRecordPosition =
         RecordingExporter.timerRecords(TimerIntent.TRIGGER).getFirst().getPosition();
 
     assertThat(
-            RecordingExporter.getRecords().stream()
+            RecordingExporter.getRecords()
+                .stream()
                 .filter(r -> r.getPosition() >= triggerRecordPosition)
                 .limit(6)
                 .map(r -> r.getMetadata().getIntent()))

diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/stream/ClientStreamAdapter.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/stream/ClientStreamAdapter.java
index ae2b1c0..8ed64e5 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/stream/ClientStreamAdapter.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/stream/ClientStreamAdapter.java
@@ -22,6 +22,7 @@ import io.camunda.zeebe.transport.stream.api.ClientStreamer;
 import io.camunda.zeebe.util.VisibleForTesting;
 import io.grpc.Status;
 import io.grpc.StatusRuntimeException;
+import io.grpc.internal.SerializingExecutor;
 import io.grpc.stub.ServerCallStreamObserver;
 import io.grpc.stub.StreamObserver;
 import java.util.concurrent.CompletableFuture;
@@ -83,12 +84,12 @@ public class ClientStreamAdapter {
   @VisibleForTesting(""Allow unit testing behavior job handling behavior"")
   static final class ClientStreamConsumerImpl implements ClientStreamConsumer {
     private final StreamObserver<ActivatedJob> responseObserver;
-    private final Executor executor;
+    private final SerializingExecutor executor;
 
     public ClientStreamConsumerImpl(
         final StreamObserver<ActivatedJob> responseObserver, final Executor executor) {
       this.responseObserver = responseObserver;
-      this.executor = executor;
+      this.executor = new SerializingExecutor(executor);
     }
 
     @Override

diff --git a/service-container/src/main/java/io/zeebe/servicecontainer/impl/ServiceDependencyResolver.java b/service-container/src/main/java/io/zeebe/servicecontainer/impl/ServiceDependencyResolver.java
index 5b39b17..aaed0f0 100644
--- a/service-container/src/main/java/io/zeebe/servicecontainer/impl/ServiceDependencyResolver.java
+++ b/service-container/src/main/java/io/zeebe/servicecontainer/impl/ServiceDependencyResolver.java
@@ -130,7 +130,7 @@ public class ServiceDependencyResolver
         {
             if (startedServices.contains(dependentService))
             {
-                final List<ServiceController> deps = resolvedDependencies.get(dependentService);
+                final List<ServiceController> deps = dependentServices.get(dependentService);
                 boolean allStopped = true;
                 for (int i = 0; i < deps.size() && allStopped; i++)
                 {
diff --git a/service-container/src/test/java/io/zeebe/servicecontainer/impl/DependenciesTest.java b/service-container/src/test/java/io/zeebe/servicecontainer/impl/DependenciesTest.java
index e8c1629..e9356bf 100644
--- a/service-container/src/test/java/io/zeebe/servicecontainer/impl/DependenciesTest.java
+++ b/service-container/src/test/java/io/zeebe/servicecontainer/impl/DependenciesTest.java
@@ -35,6 +35,7 @@ public class DependenciesTest
     ServiceContainer serviceContainer;
     ServiceName<Object> service1;
     ServiceName<Object> service2;
+    ServiceName<Object> service3;
 
     @Before
     public void setup()
@@ -43,6 +44,7 @@ public class DependenciesTest
         serviceContainer.start();
         service1 = ServiceName.newServiceName(""service1"", Object.class);
         service2 = ServiceName.newServiceName(""service2"", Object.class);
+        service3 = ServiceName.newServiceName(""service3"", Object.class);
     }
 
     @Test
@@ -184,6 +186,66 @@ public class DependenciesTest
     }
 
     @Test
+    public void shouldStopDependentServicesFirstCase2()
+    {
+        final Service<Object> mockService1 = mock(Service.class);
+        final Service<Object> mockService2 = mock(Service.class);
+        final Service<Object> mockService3 = mock(Service.class);
+
+        // given
+        serviceContainer.createService(service1, mockService1)
+            .dependency(service2)
+            .install();
+        serviceContainer.createService(service2, mockService2)
+            .dependency(service3)
+            .install();
+        serviceContainer.createService(service3, mockService3)
+            .install();
+
+        actorSchedulerRule.workUntilDone();
+
+        // when
+        serviceContainer.removeService(service3);
+        actorSchedulerRule.workUntilDone();
+
+        // then
+        final InOrder inOrder = inOrder(mockService1, mockService2, mockService3);
+        inOrder.verify(mockService1, times(1)).stop(any(ServiceStopContext.class));
+        inOrder.verify(mockService2, times(1)).stop(any(ServiceStopContext.class));
+        inOrder.verify(mockService3, times(1)).stop(any(ServiceStopContext.class));
+    }
+
+    /**
+     * Same as test above but dependency direction is reversed with respect to
+     * installation order. Having this test makes it a little more affirming
+     * that the service container does not close services in arbitrary order.
+     */
+    @Test
+    public void shouldStopDependentServicesFirstWithReverseInstallationOrder()
+    {
+        final Service<Object> mockService1 = mock(Service.class);
+        final Service<Object> mockService2 = mock(Service.class);
+
+        // given
+        serviceContainer.createService(service1, mockService1)
+            .install();
+        serviceContainer.createService(service2, mockService2)
+            .dependency(service1)
+            .install();
+
+        actorSchedulerRule.workUntilDone();
+
+        // when
+        serviceContainer.removeService(service1);
+        actorSchedulerRule.workUntilDone();
+
+        // then
+        final InOrder inOrder = inOrder(mockService1, mockService2);
+        inOrder.verify(mockService2, times(1)).stop(any(ServiceStopContext.class));
+        inOrder.verify(mockService1, times(1)).stop(any(ServiceStopContext.class));
+    }
+
+    @Test
     public void shouldStopAllServicesWhenStoppingContainer()
     {
         final Service<Object> mockService1 = mock(Service.class);
@@ -207,6 +269,30 @@ public class DependenciesTest
         inOrder.verify(mockService1, times(1)).stop(any(ServiceStopContext.class));
     }
 
+    @Test
+    public void shouldStopAllServicesWhenStoppingContainerWithReverseInstallationOrder()
+    {
+        final Service<Object> mockService1 = mock(Service.class);
+        final Service<Object> mockService2 = mock(Service.class);
+
+        // given
+        serviceContainer.createService(service1, mockService1)
+            .dependency(service2)
+            .install();
+        serviceContainer.createService(service2, mockService2)
+            .install();
+        actorSchedulerRule.workUntilDone();
+
+        // when
+        serviceContainer.closeAsync();
+        actorSchedulerRule.workUntilDone();
+
+        // then
+        final InOrder inOrder = inOrder(mockService1, mockService2);
+        inOrder.verify(mockService1, times(1)).stop(any(ServiceStopContext.class));
+        inOrder.verify(mockService2, times(1)).stop(any(ServiceStopContext.class));
+    }
+
     protected void assertCompleted(CompletableFuture<Void> serviceFuture)
     {
         assertThat(serviceFuture).isCompleted();

diff --git a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/ReplayStateMachine.java b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/ReplayStateMachine.java
index aaf6c3c..c67d627 100644
--- a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/ReplayStateMachine.java
+++ b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/ReplayStateMachine.java
@@ -131,12 +131,12 @@ public final class ReplayStateMachine implements LogRecordAwaiter {
         snapshotPosition,
         streamProcessorMode);
 
-    replayNextEvent();
-
     if (streamProcessorMode == StreamProcessorMode.REPLAY) {
       logStream.registerRecordAvailableListener(this);
     }
 
+    replayNextEvent();
+
     return recoveryFuture;
   }
 

diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
index 54a47a9..02ac7ad 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
@@ -68,10 +68,7 @@ public class PassiveRole extends InactiveRole {
   public CompletableFuture<RaftRole> start() {
     snapshotListener = createSnapshotListener();
 
-    return super.start()
-        .thenRun(this::truncateUncommittedEntries)
-        .thenRun(this::addSnapshotListener)
-        .thenApply(v -> this);
+    return super.start().thenRun(this::truncateUncommittedEntries).thenApply(v -> this);
   }
 
   @Override
@@ -100,14 +97,6 @@ public class PassiveRole extends InactiveRole {
       raft.getLog().flush();
       raft.setLastWrittenIndex(raft.getCommitIndex());
     }
-
-    // to fix the edge case where we might have been stopped
-    // between persisting snapshot and truncating log we need to call on restart snapshot listener
-    // again, such that we truncate the log when necessary
-    final var latestSnapshot = raft.getCurrentSnapshot();
-    if (latestSnapshot != null && snapshotListener != null) {
-      snapshotListener.onNewSnapshot(latestSnapshot);
-    }
   }
 
   /**
@@ -268,11 +257,12 @@ public class PassiveRole extends InactiveRole {
       final long elapsed = System.currentTimeMillis() - pendingSnapshotStartTimestamp;
       log.debug(""Committing snapshot {}"", pendingSnapshot);
       try {
+        // Reset before committing to prevent the edge case where the system crashes after
+        // committing the snapshot, and restart with a snapshot and invalid log.
+        resetLogOnReceivingSnapshot(pendingSnapshot.index());
+
         final var snapshot = pendingSnapshot.persist().join();
         log.info(""Committed snapshot {}"", snapshot);
-        // Must be executed immediately before any other operation on this threadcontext. Hence
-        // don't wait for the listener to be notified by the snapshot store.
-        snapshotListener.onNewSnapshot(snapshot);
       } catch (final Exception e) {
         log.error(""Failed to commit pending snapshot {}, rolling back"", pendingSnapshot, e);
         abortPendingSnapshots();
@@ -745,6 +735,17 @@ public class PassiveRole extends InactiveRole {
     return succeeded;
   }
 
+  private void resetLogOnReceivingSnapshot(final long snapshotIndex) {
+    final var raftLog = raft.getLog();
+
+    log.info(
+        ""Delete existing log (lastIndex '{}') and replace with received snapshot (index '{}'). First entry in the log will be at index {}"",
+        raftLog.getLastIndex(),
+        snapshotIndex,
+        snapshotIndex + 1);
+    raftLog.reset(snapshotIndex + 1);
+  }
+
   private static final class ResetWriterSnapshotListener implements PersistedSnapshotListener {
 
     private final ThreadContext threadContext;

diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/MessageCorrelator.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/MessageCorrelator.java
index 78c64fb..adacb66 100644
--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/message/MessageCorrelator.java
+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/message/MessageCorrelator.java
@@ -54,11 +54,13 @@ public class MessageCorrelator {
   private boolean correlateMessage(final Message message) {
     // correlate the first message which is not correlated to the workflow instance yet
     messageKey = message.getKey();
-    final boolean isCorrelatedBefore =
-        messageState.existMessageCorrelation(
-            messageKey, subscriptionRecord.getBpmnProcessIdBuffer());
 
-    if (!isCorrelatedBefore) {
+    final boolean correlateMessage =
+        message.getDeadline() > ActorClock.currentTimeMillis()
+            && !messageState.existMessageCorrelation(
+                messageKey, subscriptionRecord.getBpmnProcessIdBuffer());
+
+    if (correlateMessage) {
       subscriptionState.updateToCorrelatingState(
           subscription, message.getVariables(), ActorClock.currentTimeMillis(), messageKey);
 
@@ -69,7 +71,7 @@ public class MessageCorrelator {
       messageState.putMessageCorrelation(messageKey, subscriptionRecord.getBpmnProcessIdBuffer());
     }
 
-    return isCorrelatedBefore;
+    return !correlateMessage;
   }
 
   private boolean sendCorrelateCommand() {
diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageCorrelationTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageCorrelationTest.java
index 4974058..472c351 100755
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageCorrelationTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageCorrelationTest.java
@@ -16,8 +16,10 @@ import io.zeebe.engine.util.EngineRule;
 import io.zeebe.engine.util.client.PublishMessageClient;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.protocol.record.Assertions;
 import io.zeebe.protocol.record.Record;
 import io.zeebe.protocol.record.RecordType;
+import io.zeebe.protocol.record.intent.JobIntent;
 import io.zeebe.protocol.record.intent.MessageSubscriptionIntent;
 import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
 import io.zeebe.protocol.record.intent.WorkflowInstanceSubscriptionIntent;
@@ -26,6 +28,7 @@ import io.zeebe.protocol.record.value.WorkflowInstanceRecordValue;
 import io.zeebe.protocol.record.value.WorkflowInstanceSubscriptionRecordValue;
 import io.zeebe.test.util.record.RecordingExporter;
 import io.zeebe.test.util.record.WorkflowInstances;
+import java.time.Duration;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
@@ -241,36 +244,6 @@ public class MessageCorrelationTest {
   }
 
   @Test
-  public void shouldNotCorrelateMessageAfterTTL() {
-    // given
-    engine.deployment().withXmlResource(SINGLE_MESSAGE_WORKFLOW).deploy();
-
-    final PublishMessageClient messageClient =
-        engine.message().withName(""message"").withCorrelationKey(""order-123"");
-
-    messageClient.withVariables(asMsgPack(""nr"", 1)).withTimeToLive(0L).publish();
-    messageClient.withVariables(asMsgPack(""nr"", 2)).withTimeToLive(10_000L).publish();
-
-    // when
-    final long workflowInstanceKey =
-        engine
-            .workflowInstance()
-            .ofBpmnProcessId(PROCESS_ID)
-            .withVariable(""key"", ""order-123"")
-            .create();
-
-    // then
-    final Record<WorkflowInstanceRecordValue> event =
-        RecordingExporter.workflowInstanceRecords()
-            .withElementId(""receive-message"")
-            .withIntent(WorkflowInstanceIntent.ELEMENT_COMPLETED)
-            .getFirst();
-    final Map<String, String> variables =
-        WorkflowInstances.getCurrentVariables(workflowInstanceKey, event.getPosition());
-    assertThat(variables).containsOnly(entry(""key"", ""\""order-123\""""), entry(""nr"", ""2""));
-  }
-
-  @Test
   public void shouldCorrelateMessageByCorrelationKey() {
     // given
     engine.deployment().withXmlResource(SINGLE_MESSAGE_WORKFLOW).deploy();
@@ -856,6 +829,63 @@ public class MessageCorrelationTest {
         .isNotEmpty();
   }
 
+  @Test
+  public void shouldNotCorrelateMessageAfterTTL() {
+    // given
+    engine
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(""wf"")
+                .startEvent()
+                .serviceTask(""task"", t -> t.zeebeTaskType(""test""))
+                .intermediateCatchEvent(
+                    ""catch"", c -> c.message(m -> m.name(""a"").zeebeCorrelationKey(""key"")))
+                .done())
+        .deploy();
+
+    engine.workflowInstance().ofBpmnProcessId(""wf"").withVariable(""key"", ""key-1"").create();
+
+    // - zero TTL
+    engine
+        .message()
+        .withName(""a"")
+        .withCorrelationKey(""key-1"")
+        .withVariables(Map.of(""x"", 1))
+        .withTimeToLive(Duration.ZERO)
+        .publish();
+
+    // - short TTL
+    final var messageTtl = Duration.ofSeconds(1);
+
+    engine
+        .message()
+        .withName(""a"")
+        .withCorrelationKey(""key-1"")
+        .withVariables(Map.of(""x"", 2))
+        .withTimeToLive(messageTtl)
+        .publish();
+
+    // - long TTL
+    engine
+        .message()
+        .withName(""a"")
+        .withCorrelationKey(""key-1"")
+        .withVariables(Map.of(""x"", 3))
+        .withTimeToLive(messageTtl.multipliedBy(2))
+        .publish();
+
+    // when
+    final var job = RecordingExporter.jobRecords(JobIntent.CREATED).getFirst();
+
+    engine.getClock().addTime(messageTtl);
+
+    engine.job().withKey(job.getKey()).complete();
+
+    // then
+    final var variable = RecordingExporter.variableRecords().withName(""x"").getFirst();
+    Assertions.assertThat(variable.getValue()).hasValue(""3"");
+  }
+
   private List<Record<WorkflowInstanceSubscriptionRecordValue>> awaitMessagesCorrelated(
       final int messagesCount) {
     return RecordingExporter.workflowInstanceSubscriptionRecords(
diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStreamProcessorTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStreamProcessorTest.java
index c6e8209..3503cfa 100644
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStreamProcessorTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStreamProcessorTest.java
@@ -28,6 +28,7 @@ import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.MessageIntent;
 import io.zeebe.protocol.record.intent.MessageSubscriptionIntent;
 import io.zeebe.util.buffer.BufferUtil;
+import java.time.Duration;
 import org.agrona.DirectBuffer;
 import org.assertj.core.api.Assertions;
 import org.junit.Before;
@@ -453,7 +454,7 @@ public class MessageStreamProcessorTest {
     message
         .setName(wrapString(""order canceled""))
         .setCorrelationKey(wrapString(""order-123""))
-        .setTimeToLive(1L)
+        .setTimeToLive(Duration.ofSeconds(10).toMillis())
         .setVariables(asMsgPack(""orderId"", ""order-123""));
 
     return message;

diff --git a/clients/go/cmd/zbctl/internal/commands/status.go b/clients/go/cmd/zbctl/internal/commands/status.go
index 32fb405..daf57e2 100644
--- a/clients/go/cmd/zbctl/internal/commands/status.go
+++ b/clients/go/cmd/zbctl/internal/commands/status.go
@@ -67,7 +67,7 @@ func (s StatusResponseWrapper) human() (string, error) {
 				roleToString(partition.Role),
 				healthToString(partition.Health)))
 
-			if p < len(broker.Partitions)-1 || b < len(broker.Partitions)-1 {
+			if p < len(broker.Partitions)-1 || b < len(resp.Brokers)-1 {
 				stringBuilder.WriteRune('\n')
 			}
 		}

diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
index 06bff36..76bfbe8 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
@@ -285,7 +285,6 @@ public final class ProcessingStateMachine {
     } catch (final UnrecoverableException unrecoverableException) {
       throw unrecoverableException;
     } catch (final Exception e) {
-      LOG.error(ERROR_MESSAGE_PROCESSING_FAILED_SKIP_EVENT, command, metadata, e);
       onError(e, this::writeRecords);
     }
   }
"
camunda/zeebe,perf,"diff --git a/engine/src/main/java/io/camunda/zeebe/engine/metrics/ProcessEngineMetrics.java b/engine/src/main/java/io/camunda/zeebe/engine/metrics/ProcessEngineMetrics.java
index ce3cadf..665fb58 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/metrics/ProcessEngineMetrics.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/metrics/ProcessEngineMetrics.java
@@ -8,8 +8,8 @@
 package io.camunda.zeebe.engine.metrics;
 
 import io.camunda.zeebe.engine.processing.bpmn.BpmnElementContext;
+import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceCreationRecord;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
-import io.camunda.zeebe.protocol.record.value.ProcessInstanceCreationRecordValue;
 import io.prometheus.client.Counter;
 
 public final class ProcessEngineMetrics {
@@ -72,11 +72,11 @@ public final class ProcessEngineMetrics {
     partitionIdLabel = String.valueOf(partitionId);
   }
 
-  public void processInstanceCreated(final ProcessInstanceCreationRecordValue recordValue) {
+  public void processInstanceCreated(final ProcessInstanceCreationRecord instanceCreationRecord) {
     final var creationMode =
-        recordValue.getStartInstructions().isEmpty()
-            ? CreationMode.CREATION_AT_DEFAULT_START_EVENT
-            : CreationMode.CREATION_AT_GIVEN_ELEMENT;
+        instanceCreationRecord.hasStartInstructions()
+            ? CreationMode.CREATION_AT_GIVEN_ELEMENT
+            : CreationMode.CREATION_AT_DEFAULT_START_EVENT;
 
     CREATED_PROCESS_INSTANCES.labels(partitionIdLabel, creationMode.toString()).inc();
   }
diff --git a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/processinstance/ProcessInstanceCreationRecord.java b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/processinstance/ProcessInstanceCreationRecord.java
index ca4a681..f8ded01 100644
--- a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/processinstance/ProcessInstanceCreationRecord.java
+++ b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/processinstance/ProcessInstanceCreationRecord.java
@@ -99,6 +99,11 @@ public final class ProcessInstanceCreationRecord extends UnifiedRecordValue
     return this;
   }
 
+  @JsonIgnore
+  public boolean hasStartInstructions() {
+    return !startInstructionsProperty.isEmpty();
+  }
+
   @Override
   public long getProcessInstanceKey() {
     return processInstanceKeyProperty.getValue();

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ElementActivationBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ElementActivationBehavior.java
index 42b7258..9be8e31 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ElementActivationBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ElementActivationBehavior.java
@@ -256,31 +256,27 @@ public final class ElementActivationBehavior {
             activateFlowScope(
                 processInstanceRecord, flowScopeKey, flowScope, createVariablesCallback);
 
-      } else if (elementInstancesOfScope.stream()
-          .anyMatch(
-              instance ->
-                  isAncestorOfElementInstance(
-                      instance.getKey(), elementInstanceState.getInstance(ancestorScopeKey)))) {
-        // we found instances of a flow scope that itself is an ancestor of the ancestor scopeKey.
-        // - no need to create a new instance, because we can use the instance explicitly.
-        activatedInstanceKey =
+      } else {
+        final var selectedAncestor = elementInstanceState.getInstance(ancestorScopeKey);
+        final var activatedInstance =
             elementInstancesOfScope.stream()
                 .filter(
-                    instance ->
-                        isAncestorOfElementInstance(
-                            instance.getKey(), elementInstanceState.getInstance(ancestorScopeKey)))
-                .findAny()
-                .get()
-                .getKey();
-
-      } else {
-        // the selected ancestor is not an ancestor of the existing element instances. It's also not
-        // one of the existing element instances itself. We cannot decide what to do here.
-        // - reject by throwing an exception
-        // todo: verify whether this situation can occur
-        final var flowScopeId = BufferUtil.bufferAsString(flowScope.getId());
-        throw new MultipleFlowScopeInstancesFoundException(
-            flowScopeId, processInstanceRecord.getBpmnProcessId());
+                    instance -> isAncestorOfElementInstance(instance.getKey(), selectedAncestor))
+                .findAny();
+        if (activatedInstance.isPresent()) {
+          // we found instances of a flow scope that itself is an ancestor of the ancestor scopeKey.
+          // - no need to create a new instance, because we can use the instance explicitly.
+          activatedInstanceKey = activatedInstance.get().getKey();
+
+        } else {
+          // the selected ancestor is not an ancestor of the existing element instances. It's also
+          // not one of the existing element instances itself. We cannot decide what to do here.
+          // - reject by throwing an exception
+          // todo: verify whether this situation can occur
+          final var flowScopeId = BufferUtil.bufferAsString(flowScope.getId());
+          throw new MultipleFlowScopeInstancesFoundException(
+              flowScopeId, processInstanceRecord.getBpmnProcessId());
+        }
       }
 
       createVariablesCallback.accept(flowScope.getId(), activatedInstanceKey);

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/DbMigrationState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/DbMigrationState.java
index 866d619..5c12a08 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/DbMigrationState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/DbMigrationState.java
@@ -456,10 +456,11 @@ public class DbMigrationState implements MutableMigrationState {
 
   @Override
   public void migrateProcessStateForMultiTenancy() {
+    tenantIdKey.wrapString(TenantOwned.DEFAULT_TENANT_IDENTIFIER);
+
     deprecatedProcessCacheColumnFamily.forEach(
         (key, value) -> {
           value.setTenantId(TenantOwned.DEFAULT_TENANT_IDENTIFIER);
-          tenantIdKey.wrapString(TenantOwned.DEFAULT_TENANT_IDENTIFIER);
           processDefinitionKey.wrapLong(key.getValue());
           processColumnFamily.insert(tenantAwareProcessDefinitionKey, value);
           deprecatedProcessCacheColumnFamily.deleteExisting(key);
@@ -468,7 +469,6 @@ public class DbMigrationState implements MutableMigrationState {
     deprecatedProcessCacheByIdAndVersionColumnFamily.forEach(
         (key, value) -> {
           value.setTenantId(TenantOwned.DEFAULT_TENANT_IDENTIFIER);
-          tenantIdKey.wrapString(TenantOwned.DEFAULT_TENANT_IDENTIFIER);
           processId.wrapBuffer(value.getBpmnProcessId());
           processVersion.wrapLong(value.getVersion());
           processByIdAndVersionColumnFamily.insert(tenantAwareProcessIdAndVersionKey, value);

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ExpressionProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ExpressionProcessor.java
index bc4afb5..0305153 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ExpressionProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/ExpressionProcessor.java
@@ -290,16 +290,18 @@ public final class ExpressionProcessor {
       final EvaluationResult result,
       final Collection<ResultType> expectedResultTypes,
       final long scopeKey) {
-    final var defaultFailure =
-        new Failure(
-            String.format(
-                ""Expected result of expression '%s' to be one of '%s', but was '%s'"",
-                result.getExpression(), expectedResultTypes, result.getType()),
-            ErrorType.EXTRACT_VALUE_ERROR,
-            scopeKey);
     return expectedResultTypes.stream()
-        .map(type -> typeCheck(result, type, scopeKey))
-        .reduce(Either.left(defaultFailure), (a, b) -> b.isRight() ? b : a);
+        .map(expected -> typeCheck(result, expected, scopeKey))
+        .filter(Either::isRight)
+        .findFirst()
+        .orElse(
+            Either.left(
+                new Failure(
+                    String.format(
+                        ""Expected result of expression '%s' to be one of '%s', but was '%s'"",
+                        result.getExpression(), expectedResultTypes, result.getType()),
+                    ErrorType.EXTRACT_VALUE_ERROR,
+                    scopeKey)));
   }
 
   private EvaluationResult evaluateExpression(

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
index 6ddd631..12d170c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
@@ -215,16 +215,17 @@ public final class ProcessInstanceModificationProcessor
   private static Either<Rejection, ?> validateElementsDoNotBelongToEventBasedGateway(
       final DeployedProcess process,
       final List<ProcessInstanceModificationActivateInstructionValue> activateInstructions) {
-    final Set<String> elementIdsConnectedToEventBasedGateway =
+    final List<String> elementIdsConnectedToEventBasedGateway =
         activateInstructions.stream()
             .map(ProcessInstanceModificationActivateInstructionValue::getElementId)
+            .distinct()
             .filter(
                 elementId -> {
                   final var element = process.getProcess().getElementById(elementId);
                   return element instanceof ExecutableCatchEventElement event
                       && event.isConnectedToEventBasedGateway();
                 })
-            .collect(Collectors.toSet());
+            .toList();
 
     if (elementIdsConnectedToEventBasedGateway.isEmpty()) {
       return VALID;
@@ -241,12 +242,13 @@ public final class ProcessInstanceModificationProcessor
   private Either<Rejection, ?> validateElementsNotInsideMultiInstance(
       final DeployedProcess process,
       final List<ProcessInstanceModificationActivateInstructionValue> activateInstructions) {
-    final Set<String> elementsInsideMultiInstance =
+    final List<String> elementsInsideMultiInstance =
         activateInstructions.stream()
             .map(ProcessInstanceModificationActivateInstructionValue::getElementId)
+            .distinct()
             .filter(
                 elementId -> isInsideMultiInstanceBody(process, BufferUtil.wrapString(elementId)))
-            .collect(Collectors.toSet());
+            .toList();
 
     if (elementsInsideMultiInstance.isEmpty()) {
       return VALID;
@@ -316,11 +318,12 @@ public final class ProcessInstanceModificationProcessor
       final ElementInstance processInstance,
       final List<ProcessInstanceModificationTerminateInstructionValue> terminateInstructions) {
 
-    final Set<Long> unknownElementInstanceKeys =
+    final List<Long> unknownElementInstanceKeys =
         terminateInstructions.stream()
             .map(ProcessInstanceModificationTerminateInstructionValue::getElementInstanceKey)
+            .distinct()
             .filter(instanceKey -> elementInstanceState.getInstance(instanceKey) == null)
-            .collect(Collectors.toSet());
+            .toList();
 
     if (unknownElementInstanceKeys.isEmpty()) {
       return VALID;
"
camunda/zeebe,refactor,"diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinator.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinator.java
index 8bb5c3d..f8f5e24 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinator.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinator.java
@@ -10,6 +10,7 @@ package io.camunda.zeebe.topology.changes;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.topology.state.ClusterTopology;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation;
+import io.camunda.zeebe.util.Either;
 import java.util.List;
 
 public interface TopologyChangeCoordinator {
@@ -39,4 +40,16 @@ public interface TopologyChangeCoordinator {
   ActorFuture<Boolean> hasCompletedChanges(final long version);
 
   ActorFuture<ClusterTopology> getCurrentTopology();
+
+  ActorFuture<TopologyChangeResult> applyOperations(TopologyChangeRequest request);
+
+  record TopologyChangeResult(
+      ClusterTopology currentTopology,
+      ClusterTopology finalTopology,
+      List<TopologyChangeOperation> operations) {}
+
+  interface TopologyChangeRequest {
+    Either<Exception, List<TopologyChangeOperation>> operations(
+        final ClusterTopology currentTopology);
+  }
 }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
index 13ec754..877fc3c 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
@@ -103,6 +103,62 @@ public class TopologyChangeCoordinatorImpl implements TopologyChangeCoordinator 
     return clusterTopologyManager.getClusterTopology();
   }
 
+  @Override
+  public ActorFuture<TopologyChangeResult> applyOperations(final TopologyChangeRequest request) {
+    final ActorFuture<TopologyChangeResult> future = executor.createFuture();
+    clusterTopologyManager
+        .getClusterTopology()
+        .onComplete(
+            (currentClusterTopology, errorOnGettingTopology) -> {
+              if (errorOnGettingTopology != null) {
+                future.completeExceptionally(errorOnGettingTopology);
+                return;
+              }
+
+              final var operationsEither = request.operations(currentClusterTopology);
+              if (operationsEither.isLeft()) {
+                future.completeExceptionally(operationsEither.getLeft());
+                return;
+              }
+              final var operations = operationsEither.get();
+              if (operations.isEmpty()) {
+                // No operations to apply
+                future.complete(
+                    new TopologyChangeResult(
+                        currentClusterTopology, currentClusterTopology, operations));
+                return;
+              }
+
+              final ActorFuture<ClusterTopology> validation =
+                  validateTopologyChangeRequest(currentClusterTopology, operations);
+
+              validation.onComplete(
+                  (simulatedFinalTopology, validationError) -> {
+                    if (validationError != null) {
+                      future.completeExceptionally(validationError);
+                      return;
+                    }
+
+                    // if the validation was successful, apply the changes
+                    final ActorFuture<ClusterTopology> applyFuture = executor.createFuture();
+                    applyTopologyChange(
+                        operations, currentClusterTopology, simulatedFinalTopology, applyFuture);
+
+                    applyFuture.onComplete(
+                        (ignore, error) -> {
+                          if (error == null) {
+                            future.complete(
+                                new TopologyChangeResult(
+                                    currentClusterTopology, simulatedFinalTopology, operations));
+                          } else {
+                            future.completeExceptionally(error);
+                          }
+                        });
+                  });
+            });
+    return future;
+  }
+
   private ActorFuture<ClusterTopology> validateTopologyChangeRequest(
       final ClusterTopology currentClusterTopology,
       final List<TopologyChangeOperation> operations) {

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionStepMigrationHelper.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionStepMigrationHelper.java
new file mode 100644
index 0000000..dd76249
--- /dev/null
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionStepMigrationHelper.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.system.partitions;
+
+import io.atomix.raft.RaftServer.Role;
+import io.camunda.zeebe.util.sched.future.ActorFuture;
+import io.camunda.zeebe.util.sched.future.CompletableActorFuture;
+
+@Deprecated
+public class PartitionStepMigrationHelper {
+
+  public static PartitionStep fromBootstrapStep(final PartitionBootstrapStep bootstrapStep) {
+    return new WrappedPartitionBootstrapStep(bootstrapStep);
+  }
+
+  public static PartitionStep fromTransitionStep(final PartitionTransitionStep transitionStep) {
+    return new WrappedPartitionTransitionStep(transitionStep);
+  }
+
+  static class WrappedPartitionBootstrapStep implements PartitionStep {
+
+    private final PartitionBootstrapStep bootstrapStep;
+
+    public WrappedPartitionBootstrapStep(final PartitionBootstrapStep bootstrapStep) {
+      this.bootstrapStep = bootstrapStep;
+    }
+
+    @Override
+    public ActorFuture<Void> open(final PartitionBoostrapAndTransitionContextImpl context) {
+      return wrapInVoidFuture(bootstrapStep.open(context));
+    }
+
+    @Override
+    public ActorFuture<Void> close(final PartitionBoostrapAndTransitionContextImpl context) {
+
+      return wrapInVoidFuture(bootstrapStep.close(context));
+    }
+
+    private ActorFuture<Void> wrapInVoidFuture(
+        final ActorFuture<PartitionBootstrapContext> wrappable) {
+      final var result = new CompletableActorFuture<Void>();
+
+      wrappable.onComplete(
+          (success, error) -> {
+            if (error != null) {
+              result.completeExceptionally(error);
+            } else {
+              result.complete(null);
+            }
+          });
+
+      return result;
+    }
+
+    @Override
+    public String getName() {
+      return bootstrapStep.getName();
+    }
+  }
+
+  static class WrappedPartitionTransitionStep implements PartitionStep {
+
+    private final PartitionTransitionStep transitionStep;
+
+    public WrappedPartitionTransitionStep(final PartitionTransitionStep transitionStep) {
+      this.transitionStep = transitionStep;
+    }
+
+    @Override
+    public ActorFuture<Void> open(final PartitionBoostrapAndTransitionContextImpl context) {
+      return transitionStep.transitionTo(
+          context, context.getRaftPartition().term(), context.getRaftPartition().getRole());
+    }
+
+    @Override
+    public ActorFuture<Void> close(final PartitionBoostrapAndTransitionContextImpl context) {
+      return transitionStep.transitionTo(context, context.getRaftPartition().term(), Role.INACTIVE);
+    }
+
+    @Override
+    public String getName() {
+      return transitionStep.getName();
+    }
+  }
+}

diff --git a/util/pom.xml b/util/pom.xml
index 383fb95..6403a35 100644
--- a/util/pom.xml
+++ b/util/pom.xml
@@ -106,6 +106,12 @@
       <artifactId>assertj-core</artifactId>
       <scope>test</scope>
     </dependency>
+
+    <dependency>
+      <groupId>org.awaitility</groupId>
+      <artifactId>awaitility</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
   <build>
     <resources>
diff --git a/util/src/main/java/io/camunda/zeebe/util/sched/ConcurrencyControl.java b/util/src/main/java/io/camunda/zeebe/util/sched/ConcurrencyControl.java
index 5213842..61efa76 100644
--- a/util/src/main/java/io/camunda/zeebe/util/sched/ConcurrencyControl.java
+++ b/util/src/main/java/io/camunda/zeebe/util/sched/ConcurrencyControl.java
@@ -24,4 +24,11 @@ public interface ConcurrencyControl {
    * @param <T> result type of the future
    */
   <T> void runOnCompletion(final ActorFuture<T> future, final BiConsumer<T, Throwable> callback);
+
+  /**
+   * Schedules an action to be invoked
+   *
+   * @param action action to be invoked
+   */
+  void submit(final Runnable action);
 }
diff --git a/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcess.java b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcess.java
new file mode 100644
index 0000000..e5eaaff
--- /dev/null
+++ b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcess.java
@@ -0,0 +1,300 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.util.startup;
+
+import static java.util.Collections.singletonList;
+
+import io.camunda.zeebe.util.sched.ConcurrencyControl;
+import io.camunda.zeebe.util.sched.future.ActorFuture;
+import io.camunda.zeebe.util.sched.future.CompletableActorFuture;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Deque;
+import java.util.List;
+import java.util.Objects;
+import java.util.Queue;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Executes a number of steps in a startup/shutdown process.
+ *
+ * <p>On startup, steps are executed in the given order. If any step completes exceptionally, then
+ * the subsequent steps are not executed and the startup future completes exceptionally. However, no
+ * shutdown is triggered by this class. This can be done by the caller.
+ *
+ * <p>On shutdown, steps are executed in reverse order. If any shutdown step completes
+ * exceptionally, subsequent steps will be executed and the exceptions of all steps are collected as
+ * suppressed exceptions
+ *
+ * <p><strong>Error handling</strong>
+ *
+ * <ul>
+ *   <li>Exceptions that occur during startup/shutdown are propagated via the {@code ActorFuture}.
+ *       They are also wrapped.
+ *   <li>If the exceptions is related to a certain step, it is wrapped in a {@code
+ *       StartupProcessStepException}, which is then added as suppressed exception to a {@code
+ *       StartupProcessException}, which is returned by the future
+ *   <li>If the exception is not related to a step (e.g. startup is aborted due to concurrent
+ *       shutdown), this is propagated as a plain {@code StartupProcessException}
+ *   <li>{@code}IllegalStateExceptions are not propagated via the future but thrown directly to the
+ *       caller
+ * </ul>
+ *
+ * <p>Callers of this class must obey the following contract:
+ *
+ * <ul>
+ *   <li>Shutdown must not be called before startup
+ *   <li>Startup must be called at most once
+ *   <li>Shutdown may be called more than once. The first call will trigger the shutdown and any
+ *       subsequent calls do nothing
+ *   <li>Shutdown may be called before the future of startup has completed. In that case, it will
+ *       complete the current running startup step, cancel all subsequent startup step, complete the
+ *       startup future with an exception and start the shutdown from the step that last completed
+ * </ul>
+ *
+ * @param <CONTEXT> the startup/shutdown context
+ */
+public final class StartupProcess<CONTEXT> {
+
+  private final Logger logger;
+  private final Deque<StartupStep<CONTEXT>> steps;
+  private final Deque<StartupStep<CONTEXT>> startedSteps = new ArrayDeque<>();
+
+  private Supplier<ActorFuture<CONTEXT>> futureProvider = CompletableActorFuture::new;
+
+  private boolean startupCalled = false;
+  private ActorFuture<CONTEXT> shutdownFuture;
+  private ActorFuture<CONTEXT> startupFuture;
+
+  /**
+   * Constructs the startup process
+   *
+   * @param steps the steps to execute; must not be {@code null}
+   */
+  public StartupProcess(final List<StartupStep<CONTEXT>> steps) {
+    this(LoggerFactory.getLogger(""io.camunda.zeebe.util.startup""), steps);
+  }
+
+  /**
+   * Constructs the startup process
+   *
+   * @param logger the logger to use for messages related to the startup process; must not be {@code
+   *     null}
+   * @param steps the steps to execute; must not be {@code null}
+   */
+  public StartupProcess(final Logger logger, final List<StartupStep<CONTEXT>> steps) {
+    this.steps = new ArrayDeque<>(Objects.requireNonNull(steps));
+    this.logger = Objects.requireNonNull(logger);
+  }
+
+  /**
+   * Executes the startup logic
+   *
+   * @param concurrencyControl the startup context at the start of this step
+   * @param context the startup context at the start of this step
+   * @return future with startup context at the end of this step
+   */
+  public ActorFuture<CONTEXT> startup(
+      final ConcurrencyControl concurrencyControl, final CONTEXT context) {
+
+    final var result = futureProvider.get();
+    concurrencyControl.submit(() -> startupSynchronized(concurrencyControl, context, result));
+
+    return result;
+  }
+
+  /**
+   * Executes the shutdown logic
+   *
+   * @param context the shutdown context at the start of this step
+   * @return future with the shutdown context at the end of this step.
+   */
+  public ActorFuture<CONTEXT> shutdown(
+      final ConcurrencyControl concurrencyControl, final CONTEXT context) {
+    final var result = futureProvider.get();
+    concurrencyControl.submit(() -> shutdownSynchronized(concurrencyControl, context, result));
+
+    return result;
+  }
+
+  void overrideFutureProviderForTest(final Supplier<ActorFuture<CONTEXT>> futureProvider) {
+    this.futureProvider = futureProvider;
+  }
+
+  private void startupSynchronized(
+      final ConcurrencyControl concurrencyControl,
+      final CONTEXT context,
+      final ActorFuture<CONTEXT> startupFuture) {
+    logger.debug(""Startup was called with context: "" + context);
+    if (startupCalled) {
+      throw new IllegalStateException(""startup(...) must only be called once"");
+    }
+    startupCalled = true;
+    this.startupFuture = startupFuture;
+
+    // reset future when we are done
+    concurrencyControl.runOnCompletion(startupFuture, (result, error) -> this.startupFuture = null);
+
+    final var stepsToStart = new ArrayDeque<>(steps);
+
+    logger.info(""Starting startup process"");
+    proceedWithStartupSynchronized(concurrencyControl, stepsToStart, context, startupFuture);
+  }
+
+  private void proceedWithStartupSynchronized(
+      final ConcurrencyControl concurrencyControl,
+      final Queue<StartupStep<CONTEXT>> stepsToStart,
+      final CONTEXT context,
+      final ActorFuture<CONTEXT> startupFuture) {
+    if (stepsToStart.isEmpty()) {
+      startupFuture.complete(context);
+      logger.info(""Finished startup process"");
+    } else if (shutdownFuture != null) {
+      logger.info(""Aborting startup process because shutdown was called"");
+      startupFuture.completeExceptionally(
+          new StartupProcessException(""Aborting startup process because shutdown was called""));
+    } else {
+      final var stepToStart = stepsToStart.poll();
+      startedSteps.push(stepToStart);
+
+      logCurrentStepSynchronized(""Startup"", stepToStart);
+
+      final var stepStartupFuture = stepToStart.startup(context);
+
+      concurrencyControl.runOnCompletion(
+          stepStartupFuture,
+          (contextReturnedByStep, error) -> {
+            if (error != null) {
+              completeStartupFutureExceptionallySynchronized(startupFuture, stepToStart, error);
+            } else {
+              proceedWithStartupSynchronized(
+                  concurrencyControl, stepsToStart, contextReturnedByStep, startupFuture);
+            }
+          });
+    }
+  }
+
+  private void completeStartupFutureExceptionallySynchronized(
+      final ActorFuture<CONTEXT> startupFuture,
+      final StartupStep<CONTEXT> stepToStart,
+      final Throwable error) {
+    logger.warn(
+        ""Aborting startup process due to exception during step "" + stepToStart.getName(), error);
+    startupFuture.completeExceptionally(
+        aggregateExceptionsSynchronized(
+            ""Startup"",
+            singletonList(new StartupProcessStepException(stepToStart.getName(), error))));
+  }
+
+  private void shutdownSynchronized(
+      final ConcurrencyControl concurrencyControl,
+      final CONTEXT context,
+      final ActorFuture<CONTEXT> resultFuture) {
+    logger.debug(""Shutdown was called with context: "" + context);
+    if (shutdownFuture == null) {
+      logger.info(""Starting shutdown process"");
+      shutdownFuture = resultFuture;
+
+      if (startupFuture != null) {
+        concurrencyControl.runOnCompletion(
+            startupFuture,
+            (contextReturnedByStartup, error) -> {
+              final var contextForShutdown = error == null ? contextReturnedByStartup : context;
+
+              proceedWithShutdownSynchronized(
+                  concurrencyControl, contextForShutdown, shutdownFuture, new ArrayList<>());
+            });
+      } else {
+        proceedWithShutdownSynchronized(
+            concurrencyControl, context, shutdownFuture, new ArrayList<>());
+      }
+    } else {
+      logger.info(""Shutdown already in progress"");
+
+      concurrencyControl.runOnCompletion(
+          shutdownFuture,
+          (contextReturnedByShutdown, error) -> {
+            if (error != null) {
+              resultFuture.completeExceptionally(error);
+            } else {
+              resultFuture.complete(contextReturnedByShutdown);
+            }
+          });
+    }
+  }
+
+  private void proceedWithShutdownSynchronized(
+      final ConcurrencyControl concurrencyControl,
+      final CONTEXT context,
+      final ActorFuture<CONTEXT> shutdownFuture,
+      final List<StartupProcessStepException> collectedExceptions) {
+    if (startedSteps.isEmpty()) {
+      completeShutdownFutureSynchronized(context, shutdownFuture, collectedExceptions);
+    } else {
+      final var stepToShutdown = startedSteps.pop();
+
+      logCurrentStepSynchronized(""Shutdown"", stepToShutdown);
+
+      final var shutdownStepFuture = stepToShutdown.shutdown(context);
+
+      concurrencyControl.runOnCompletion(
+          shutdownStepFuture,
+          (contextReturnedByShutdown, error) -> {
+            final CONTEXT contextToUse;
+            if (error != null) {
+              collectedExceptions.add(
+                  new StartupProcessStepException(stepToShutdown.getName(), error));
+              contextToUse = context;
+            } else {
+              contextToUse = contextReturnedByShutdown;
+            }
+
+            proceedWithShutdownSynchronized(
+                concurrencyControl, contextToUse, shutdownFuture, collectedExceptions);
+          });
+    }
+  }
+
+  private void completeShutdownFutureSynchronized(
+      final CONTEXT context,
+      final ActorFuture<CONTEXT> shutdownFuture,
+      final List<StartupProcessStepException> collectedExceptions) {
+    if (collectedExceptions.isEmpty()) {
+      shutdownFuture.complete(context);
+      logger.info(""Finished shutdown process"");
+    } else {
+      final var umbrellaException =
+          aggregateExceptionsSynchronized(""Shutdown"", collectedExceptions);
+      shutdownFuture.completeExceptionally(umbrellaException);
+      logger.warn(umbrellaException.getMessage(), umbrellaException);
+    }
+  }
+
+  private Throwable aggregateExceptionsSynchronized(
+      final String operation, final List<StartupProcessStepException> exceptions) {
+    final var failedSteps =
+        exceptions.stream()
+            .map(StartupProcessStepException::getStepName)
+            .collect(Collectors.toList());
+    final var message =
+        String.format(
+            ""%s failed in the following steps: %s. See suppressed exceptions for details."",
+            operation, failedSteps);
+
+    final var exception = new StartupProcessException(message);
+    exceptions.forEach(exception::addSuppressed);
+    return exception;
+  }
+
+  private void logCurrentStepSynchronized(final String process, final StartupStep<CONTEXT> step) {
+    logger.info(process + "" "" + step.getName());
+  }
+}
diff --git a/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessException.java b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessException.java
new file mode 100644
index 0000000..ec1a00f
--- /dev/null
+++ b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessException.java
@@ -0,0 +1,15 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.util.startup;
+
+public final class StartupProcessException extends Exception {
+
+  StartupProcessException(final String message) {
+    super(message);
+  }
+}
diff --git a/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessStepException.java b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessStepException.java
new file mode 100644
index 0000000..b886d7a
--- /dev/null
+++ b/util/src/main/java/io/camunda/zeebe/util/startup/StartupProcessStepException.java
@@ -0,0 +1,21 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.util.startup;
+
+public final class StartupProcessStepException extends Exception {
+  private final String stepName;
+
+  StartupProcessStepException(final String stepName, final Throwable cause) {
+    super(String.format(""Bootstrap step %s failed"", stepName), cause);
+    this.stepName = stepName;
+  }
+
+  public String getStepName() {
+    return stepName;
+  }
+}
diff --git a/util/src/test/java/io/camunda/zeebe/util/startup/StartupProcessTest.java b/util/src/test/java/io/camunda/zeebe/util/startup/StartupProcessTest.java
new file mode 100644
index 0000000..816de34
--- /dev/null
+++ b/util/src/test/java/io/camunda/zeebe/util/startup/StartupProcessTest.java
@@ -0,0 +1,396 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.util.startup;
+
+import static io.camunda.zeebe.util.sched.future.TestActorFuture.completedFuture;
+import static io.camunda.zeebe.util.sched.future.TestActorFuture.failedFuture;
+import static java.util.Collections.singletonList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.awaitility.Awaitility.await;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoInteractions;
+import static org.mockito.Mockito.when;
+
+import io.camunda.zeebe.util.sched.ConcurrencyControl;
+import io.camunda.zeebe.util.sched.TestConcurrencyControl;
+import io.camunda.zeebe.util.sched.future.ActorFuture;
+import io.camunda.zeebe.util.sched.future.TestActorFuture;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.CompletionException;
+import java.util.concurrent.CountDownLatch;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Test;
+
+@SuppressWarnings({""rawtypes"", ""unchecked""})
+class StartupProcessTest {
+  private static final Object STARTUP_CONTEXT =
+      new Object() {
+        @Override
+        public String toString() {
+          return ""startupContext"";
+        }
+      };
+
+  private static final Object SHUTDOWN_CONTEXT =
+      new Object() {
+        @Override
+        public String toString() {
+          return ""shutdownContext"";
+        }
+      };
+
+  private static final ConcurrencyControl TEST_CONCURRENCY_CONTROL = new TestConcurrencyControl();
+
+  static final class InvocationCountingStartupStep implements StartupStep<Object> {
+
+    private int startupInvocationCounter = 0;
+    private int shutdownInvocationCounter = 0;
+
+    int getStartupInvocationCounter() {
+      return startupInvocationCounter;
+    }
+
+    int getShutdownInvocationCounter() {
+      return shutdownInvocationCounter;
+    }
+
+    @Override
+    public String getName() {
+      return ""InvocationCountingStartupStep"";
+    }
+
+    @Override
+    public ActorFuture<Object> startup(final Object o) {
+      startupInvocationCounter++;
+      return completedFuture(o);
+    }
+
+    @Override
+    public ActorFuture<Object> shutdown(final Object o) {
+      shutdownInvocationCounter++;
+      return completedFuture(o);
+    }
+  }
+
+  static final class WaitingStartupStep implements StartupStep<Object> {
+
+    private final CountDownLatch startupCountdownLatch;
+    private final boolean completeWithException;
+
+    WaitingStartupStep(
+        final CountDownLatch startupCountdownLatch, final boolean completeWithException) {
+      this.startupCountdownLatch = startupCountdownLatch;
+      this.completeWithException = completeWithException;
+    }
+
+    @Override
+    public String getName() {
+      return ""WaitingStartupStep"";
+    }
+
+    @Override
+    public ActorFuture<Object> startup(final Object o) {
+      final var startupFuture = new TestActorFuture<>();
+      final var startupThread =
+          new Thread(
+              () -> {
+                try {
+                  startupCountdownLatch.await();
+                } catch (final InterruptedException e) {
+                  e.printStackTrace();
+                } finally {
+                  if (!completeWithException) {
+                    startupFuture.complete(o);
+                  } else {
+                    startupFuture.completeExceptionally(new Throwable(""completed exceptionally""));
+                  }
+                }
+              });
+      startupThread.start();
+      return startupFuture;
+    }
+
+    @Override
+    public ActorFuture<Object> shutdown(final Object o) {
+      return completedFuture(o);
+    }
+  }
+
+  @Nested
+  class MainUseCase {
+
+    private static final String INPUT_STEP1 = ""inputStep1"";
+    private static final String INPUT_STEP2 = ""inputStep2"";
+    private static final String RESULT_STEP1 = ""resultStep1"";
+    private static final String RESULT_STEP2 = ""resultStep2"";
+
+    private final Exception testException1 = new Exception(""TEST_EXCEPTION1"");
+    private final Exception testException2 = new Exception(""TEST_EXCEPTION1"");
+
+    private StartupStep mockStep1;
+    private StartupStep mockStep2;
+
+    @BeforeEach
+    void setup() {
+      mockStep1 = mock(StartupStep.class);
+      mockStep2 = mock(StartupStep.class);
+
+      when(mockStep1.getName()).thenReturn(""step1"");
+      when(mockStep2.getName()).thenReturn(""step2"");
+    }
+
+    @Test
+    void shouldCallStartupStepsInOrder() {
+      // given
+      when(mockStep1.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+      when(mockStep2.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      // then
+      final var invocationRecorder = inOrder(mockStep1, mockStep2);
+      invocationRecorder.verify(mockStep1).startup(STARTUP_CONTEXT);
+      invocationRecorder.verify(mockStep2).startup(STARTUP_CONTEXT);
+    }
+
+    @Test
+    void shouldCallShutdownStepsInReverseOrder() {
+      // given
+      when(mockStep1.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+      when(mockStep1.shutdown(SHUTDOWN_CONTEXT)).thenReturn(completedFuture(SHUTDOWN_CONTEXT));
+      when(mockStep2.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+      when(mockStep2.shutdown(SHUTDOWN_CONTEXT)).thenReturn(completedFuture(SHUTDOWN_CONTEXT));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      // when
+      sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT).join();
+
+      // then
+      final var invocationRecorder = inOrder(mockStep1, mockStep2);
+      invocationRecorder.verify(mockStep2).shutdown(SHUTDOWN_CONTEXT);
+      invocationRecorder.verify(mockStep1).shutdown(SHUTDOWN_CONTEXT);
+    }
+
+    @Test
+    void shouldCallSubsequentStartupStepWithResultOfPreviousStep() {
+      // given
+      when(mockStep1.startup(INPUT_STEP1)).thenReturn(completedFuture(RESULT_STEP1));
+      when(mockStep2.startup(RESULT_STEP1)).thenReturn(completedFuture(RESULT_STEP2));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when
+      final var actualResult = sut.startup(TEST_CONCURRENCY_CONTROL, INPUT_STEP1).join();
+
+      // then
+      final var invocationRecorder = inOrder(mockStep1, mockStep2);
+      invocationRecorder.verify(mockStep1).startup(INPUT_STEP1);
+      invocationRecorder.verify(mockStep2).startup(RESULT_STEP1);
+
+      assertThat(actualResult).isSameAs(RESULT_STEP2);
+    }
+
+    @Test
+    void shouldCallSubsequentShutdownStepWithResultOfPreviousStep() {
+      // given
+      when(mockStep1.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+      when(mockStep2.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+
+      when(mockStep2.shutdown(INPUT_STEP2)).thenReturn(completedFuture(RESULT_STEP2));
+      when(mockStep1.shutdown(RESULT_STEP2)).thenReturn(completedFuture(RESULT_STEP1));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      // when
+      final var actualResult = sut.shutdown(TEST_CONCURRENCY_CONTROL, INPUT_STEP2).join();
+
+      // then
+      final var invocationRecorder = inOrder(mockStep1, mockStep2);
+      invocationRecorder.verify(mockStep2).shutdown(INPUT_STEP2);
+      invocationRecorder.verify(mockStep1).shutdown(RESULT_STEP2);
+
+      assertThat(actualResult).isSameAs(RESULT_STEP1);
+    }
+
+    @Test
+    void shouldAbortStartupIfOneStepThrewAnException() {
+      // given
+      final var testException = new Exception(""TEST_EXCEPTION"");
+
+      when(mockStep1.startup(STARTUP_CONTEXT)).thenReturn(failedFuture(testException));
+      when(mockStep2.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when
+      final var actualResult = sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT);
+
+      // then
+      verify(mockStep2, never()).startup(STARTUP_CONTEXT);
+
+      assertThat(actualResult.isCompletedExceptionally()).isTrue();
+
+      assertThatThrownBy(actualResult::join)
+          .isInstanceOf(CompletionException.class)
+          .getCause()
+          .isInstanceOf(StartupProcessException.class);
+    }
+
+    @Test
+    void shouldContinueShutdownEvenIfStepsThrowExceptions() {
+      // given
+      when(mockStep1.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+      when(mockStep2.startup(STARTUP_CONTEXT)).thenReturn(completedFuture(STARTUP_CONTEXT));
+
+      when(mockStep1.shutdown(SHUTDOWN_CONTEXT)).thenReturn(failedFuture(testException1));
+      when(mockStep2.shutdown(SHUTDOWN_CONTEXT)).thenReturn(failedFuture(testException2));
+
+      final var sut = new StartupProcess<>(List.of(mockStep1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      // when
+      final var actualResult = sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT);
+
+      // then
+      verify(mockStep2).shutdown(SHUTDOWN_CONTEXT);
+      verify(mockStep1).shutdown(SHUTDOWN_CONTEXT);
+
+      assertThat(actualResult.isCompletedExceptionally()).isTrue();
+
+      assertThatThrownBy(actualResult::join)
+          .isInstanceOf(CompletionException.class)
+          .getCause()
+          .isInstanceOf(StartupProcessException.class);
+    }
+
+    @Test
+    void shouldAbortOngoingStartupWhenShutdownIsCalled() {
+      // given
+      final var step1CountdownLatch = new CountDownLatch(1);
+      final var step1 = new WaitingStartupStep(step1CountdownLatch, false);
+
+      final var sut = new StartupProcess<>(List.of(step1, mockStep2));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when
+      final var startupFuture = sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT);
+      final var shutdownFuture = sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT);
+
+      step1CountdownLatch.countDown();
+
+      // then
+      verifyNoInteractions(mockStep2);
+
+      await().until(startupFuture::isDone);
+      await().until(shutdownFuture::isDone);
+
+      assertThat(startupFuture.isCompletedExceptionally()).isTrue();
+      assertThat(shutdownFuture.join()).isSameAs(SHUTDOWN_CONTEXT);
+    }
+  }
+
+  @Nested
+  class IllegalStatesAndArguments {
+
+    @Test
+    void shouldThrowNPEWhenCalledWithNoSteps() {
+      // when + then
+      assertThatThrownBy(() -> new StartupProcess<>(null)).isInstanceOf(NullPointerException.class);
+    }
+
+    @Test
+    void shouldThrowNPEWhenCalledWithNoLogger() {
+      // when + then
+      assertThatThrownBy(() -> new StartupProcess<>(null, Collections.emptyList()))
+          .isInstanceOf(NullPointerException.class);
+    }
+
+    @Test
+    void shouldThrowIllegalStateIfStartupIsCalledMoreThanOnce() {
+      // given
+      final var sut = new StartupProcess<>(Collections.emptyList());
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when + then
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      assertThatThrownBy(() -> sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT))
+          .isInstanceOf(IllegalStateException.class)
+          .hasMessage(""startup(...) must only be called once"");
+    }
+
+    @Test
+    void shouldPerformShutdownOnlyOnceIfShutdownIsCalledMultipleTimes() {
+      // given
+      final var step = new InvocationCountingStartupStep();
+      final var sut = new StartupProcess<>(singletonList(step));
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+
+      // when
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+      sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT).join();
+      sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT).join();
+
+      // then
+      assertThat(step.getShutdownInvocationCounter()).isEqualTo(1);
+    }
+  }
+
+  @Nested
+  class EmptyList {
+
+    private final StartupProcess<Object> sut = new StartupProcess<>(Collections.emptyList());
+
+    @BeforeEach
+    void setUp() {
+      sut.overrideFutureProviderForTest(TestActorFuture::new);
+    }
+
+    @Test
+    void shouldReturnContextImmediatelyOnStartup() {
+      // when
+      final var startupFuture = sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT);
+
+      // then
+      assertThat(startupFuture.join()).isSameAs(STARTUP_CONTEXT);
+    }
+
+    @Test
+    void shouldReturnContextImmediatelyOnShutdown() {
+      // given
+      sut.startup(TEST_CONCURRENCY_CONTROL, STARTUP_CONTEXT).join();
+
+      // when
+      final var shutdownFuture = sut.shutdown(TEST_CONCURRENCY_CONTROL, SHUTDOWN_CONTEXT);
+
+      // then
+      assertThat(shutdownFuture.join()).isSameAs(SHUTDOWN_CONTEXT);
+    }
+  }
+}

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedCommandCache.java b/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedCommandCache.java
new file mode 100644
index 0000000..b6c888d
--- /dev/null
+++ b/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedCommandCache.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.engine.impl;
+
+import io.camunda.zeebe.util.LockUtil;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import org.agrona.collections.LongHashSet;
+
+final class BoundedCommandCache {
+  private static final int DEFAULT_CAPACITY = 100_000;
+
+  private final Lock lock = new ReentrantLock();
+
+  private final int capacity;
+  private final LongHashSet cache;
+
+  BoundedCommandCache() {
+    this(DEFAULT_CAPACITY);
+  }
+
+  /**
+   * You can estimate the size based on the capacity as followed. Since we use a {@link LongHashSet}
+   * primitives, each element takes about 8 bytes. There is some minimal overhead for state
+   * management and the likes, which means in the end, amortized, each entry takes about 8.4 bytes.
+   *
+   * <p>So the default capacity, 100,000 entries, will use about 840KB of memory, even when full.
+   *
+   * @param capacity the maximum capacity of the command cache
+   */
+  BoundedCommandCache(final int capacity) {
+    this.capacity = capacity;
+
+    // to avoid resizing, we set a load factor of 0.9, and increase the internal capacity
+    // preemptively
+    final var resizeThreshold = (int) Math.ceil(capacity * 0.9f);
+    final var capacityToPreventResize = 2 * capacity - resizeThreshold;
+    cache = new LongHashSet(capacityToPreventResize, 0.9f, true);
+  }
+
+  void add(final LongHashSet keys) {
+    LockUtil.withLock(lock, () -> lockedAdd(keys));
+  }
+
+  boolean contains(final long key) {
+    return LockUtil.withLock(lock, () -> cache.contains(key));
+  }
+
+  void remove(final long key) {
+    LockUtil.withLock(lock, (Runnable) () -> cache.remove(key));
+  }
+
+  private void lockedAdd(final LongHashSet keys) {
+    final int evictionCount = cache.size() + keys.size() - capacity;
+    if (evictionCount > 0) {
+      evict(evictionCount);
+    }
+
+    cache.addAll(keys);
+  }
+
+  private void evict(final int count) {
+    final var evictionStartIndex = ThreadLocalRandom.current().nextInt(0, capacity - count);
+    final int evictionEndIndex = evictionStartIndex + count;
+    final var iterator = cache.iterator();
+
+    for (int i = 0; i < evictionEndIndex && iterator.hasNext(); i++, iterator.next()) {
+      if (i >= evictionStartIndex) {
+        iterator.remove();
+      }
+    }
+  }
+}
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedScheduledCommandCache.java b/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedScheduledCommandCache.java
new file mode 100644
index 0000000..d6779ed
--- /dev/null
+++ b/broker/src/main/java/io/camunda/zeebe/broker/engine/impl/BoundedScheduledCommandCache.java
@@ -0,0 +1,100 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.engine.impl;
+
+import io.camunda.zeebe.protocol.record.intent.Intent;
+import io.camunda.zeebe.stream.api.scheduling.ScheduledCommandCache.StageableScheduledCommandCache;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import org.agrona.collections.LongHashSet;
+
+public final class BoundedScheduledCommandCache implements StageableScheduledCommandCache {
+  private final Map<Intent, BoundedCommandCache> caches;
+
+  private BoundedScheduledCommandCache(final Map<Intent, BoundedCommandCache> caches) {
+    this.caches = caches;
+  }
+
+  public static BoundedScheduledCommandCache ofIntent(final Intent... intents) {
+    final Map<Intent, BoundedCommandCache> caches =
+        Arrays.stream(intents)
+            .collect(Collectors.toMap(Function.identity(), ignored -> new BoundedCommandCache()));
+    return new BoundedScheduledCommandCache(caches);
+  }
+
+  @Override
+  public void add(final Intent intent, final long key) {
+    final var cache = caches.get(intent);
+    if (cache != null) {
+      final var singleton = new LongHashSet();
+      singleton.add(key);
+      cache.add(singleton);
+    }
+  }
+
+  @Override
+  public boolean isCached(final Intent intent, final long key) {
+    final var cache = caches.get(intent);
+    return cache != null && cache.contains(key);
+  }
+
+  @Override
+  public void remove(final Intent intent, final long key) {
+    final var cache = caches.get(intent);
+    if (cache != null) {
+      cache.remove(key);
+    }
+  }
+
+  @Override
+  public StagedScheduledCommandCache stage() {
+    return new StagedCache();
+  }
+
+  private final class StagedCache implements StagedScheduledCommandCache {
+    private final Map<Intent, LongHashSet> stagedKeys = new HashMap<>();
+
+    @Override
+    public void add(final Intent intent, final long key) {
+      stagedKeys(intent).add(key);
+    }
+
+    @Override
+    public boolean isCached(final Intent intent, final long key) {
+      return stagedKeys(intent).contains(key)
+          || (caches.containsKey(intent) && caches.get(intent).contains(key));
+    }
+
+    @Override
+    public void remove(final Intent intent, final long key) {
+      if (!stagedKeys(intent).remove(key)) {
+        final var cache = caches.get(intent);
+        if (cache != null) {
+          cache.remove(key);
+        }
+      }
+    }
+
+    @Override
+    public void persist() {
+      for (final var entry : stagedKeys.entrySet()) {
+        final var cache = caches.get(entry.getKey());
+        if (cache != null) {
+          cache.add(entry.getValue());
+        }
+      }
+    }
+
+    private LongHashSet stagedKeys(final Intent intent) {
+      return stagedKeys.computeIfAbsent(intent, ignored -> new LongHashSet());
+    }
+  }
+}
diff --git a/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java b/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java
new file mode 100644
index 0000000..befc962
--- /dev/null
+++ b/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.stream.api.scheduling;
+
+import io.camunda.zeebe.protocol.record.intent.Intent;
+
+public interface ScheduledCommandCache {
+  void add(final Intent intent, final long key);
+
+  boolean isCached(final Intent intent, final long key);
+
+  void remove(final Intent intent, final long key);
+
+  interface ScheduledCommandCacheChanges {
+
+    void persist();
+  }
+
+  interface StageableScheduledCommandCache extends ScheduledCommandCache {
+    StagedScheduledCommandCache stage();
+  }
+
+  interface StagedScheduledCommandCache
+      extends ScheduledCommandCache, ScheduledCommandCacheChanges {}
+}

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeoutTrigger.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeoutTrigger.java
index 5846d24..798f341 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeoutTrigger.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeoutTrigger.java
@@ -20,7 +20,7 @@ public final class JobTimeoutTrigger implements StreamProcessorLifecycleAware {
   public static final Duration TIME_OUT_POLLING_INTERVAL = Duration.ofSeconds(30);
   private final JobState state;
 
-  private boolean timerRunning = false;
+  private boolean shouldReschedule = false;
 
   private TypedCommandWriter writer;
   private ReadonlyStreamProcessorContext processingContext;
@@ -32,7 +32,7 @@ public final class JobTimeoutTrigger implements StreamProcessorLifecycleAware {
   @Override
   public void onRecovered(final ReadonlyStreamProcessorContext processingContext) {
     this.processingContext = processingContext;
-    timerRunning = true;
+    shouldReschedule = true;
     scheduleDeactivateTimedOutJobsTask();
     writer = processingContext.getLogStreamWriter();
   }
@@ -54,7 +54,7 @@ public final class JobTimeoutTrigger implements StreamProcessorLifecycleAware {
 
   @Override
   public void onResumed() {
-    if (timerRunning) {
+    if (shouldReschedule) {
       scheduleDeactivateTimedOutJobsTask();
     }
   }
@@ -66,7 +66,7 @@ public final class JobTimeoutTrigger implements StreamProcessorLifecycleAware {
   }
 
   private void cancelTimer() {
-    timerRunning = false;
+    shouldReschedule = false;
   }
 
   void deactivateTimedOutJobs() {
@@ -79,7 +79,7 @@ public final class JobTimeoutTrigger implements StreamProcessorLifecycleAware {
 
           return writer.flush() >= 0;
         });
-    if (timerRunning) {
+    if (shouldReschedule) {
       scheduleDeactivateTimedOutJobsTask();
     }
   }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/message/PendingProcessMessageSubscriptionChecker.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/message/PendingProcessMessageSubscriptionChecker.java
index 26361be..c75d5b5 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/message/PendingProcessMessageSubscriptionChecker.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/message/PendingProcessMessageSubscriptionChecker.java
@@ -27,7 +27,7 @@ public final class PendingProcessMessageSubscriptionChecker
   private final long subscriptionTimeoutInMillis;
 
   private ProcessingScheduleService scheduleService;
-  private boolean timerRunning = false;
+  private boolean schouldRescheduleTimer = false;
 
   public PendingProcessMessageSubscriptionChecker(
       final SubscriptionCommandSender commandSender,
@@ -40,7 +40,7 @@ public final class PendingProcessMessageSubscriptionChecker
   @Override
   public void onRecovered(final ReadonlyStreamProcessorContext context) {
     scheduleService = context.getScheduleService();
-    timerRunning = true;
+    schouldRescheduleTimer = true;
     rescheduleTimer();
   }
 
@@ -61,18 +61,18 @@ public final class PendingProcessMessageSubscriptionChecker
 
   @Override
   public void onResumed() {
-    timerRunning = true;
+    schouldRescheduleTimer = true;
     rescheduleTimer();
   }
 
   private void rescheduleTimer() {
-    if (timerRunning) {
+    if (schouldRescheduleTimer) {
       scheduleService.runDelayed(SUBSCRIPTION_CHECK_INTERVAL, this::checkPendingSubscriptions);
     }
   }
 
   private void cancelTimer() {
-    timerRunning = false;
+    schouldRescheduleTimer = false;
   }
 
   private void checkPendingSubscriptions() {
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/scheduled/DueDateChecker.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/scheduled/DueDateChecker.java
index 8be4b2b..08d3e8e 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/scheduled/DueDateChecker.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/scheduled/DueDateChecker.java
@@ -22,6 +22,8 @@ public final class DueDateChecker implements StreamProcessorLifecycleAware {
   private TypedStreamWriter streamWriter;
 
   private boolean checkerRunning;
+  private boolean shouldRescheduleChecker;
+
   private long nextDueDate = -1L;
   private final long timerResolution;
   private final Function<TypedCommandWriter, Long> nextDueDateSupplier;
@@ -43,27 +45,30 @@ public final class DueDateChecker implements StreamProcessorLifecycleAware {
 
     final Duration delay = calculateDelayForNextRun(dueDate);
 
-    if (!checkerRunning) {
-      scheduleService.runDelayed(delay, this::triggerEntities);
-      nextDueDate = dueDate;
-      checkerRunning = true;
-
-    } else if (nextDueDate - dueDate > timerResolution) {
-      scheduleService.runDelayed(delay, this::triggerEntities);
-      nextDueDate = dueDate;
-      checkerRunning = true;
+    if (shouldRescheduleChecker) {
+      if (!checkerRunning) {
+        scheduleService.runDelayed(delay, this::triggerEntities);
+        nextDueDate = dueDate;
+      } else if (nextDueDate - dueDate > timerResolution) {
+        scheduleService.runDelayed(delay, this::triggerEntities);
+        nextDueDate = dueDate;
+      }
     }
   }
 
   private void triggerEntities() {
-    nextDueDate = nextDueDateSupplier.apply(streamWriter);
-
-    // reschedule the runnable if there are timers left
-
-    if (nextDueDate > 0) {
-      final Duration delay = calculateDelayForNextRun(nextDueDate);
-      scheduleService.runDelayed(delay, this::triggerEntities);
-      checkerRunning = true;
+    if (shouldRescheduleChecker) {
+      nextDueDate = nextDueDateSupplier.apply(streamWriter);
+
+      // reschedule the runnable if there are timers left
+
+      if (nextDueDate > 0) {
+        final Duration delay = calculateDelayForNextRun(nextDueDate);
+        scheduleService.runDelayed(delay, this::triggerEntities);
+        checkerRunning = true;
+      } else {
+        checkerRunning = false;
+      }
     } else {
       checkerRunning = false;
     }
@@ -87,17 +92,20 @@ public final class DueDateChecker implements StreamProcessorLifecycleAware {
   public void onRecovered(final ReadonlyStreamProcessorContext processingContext) {
     scheduleService = processingContext.getScheduleService();
     streamWriter = processingContext.getLogStreamWriter();
+    shouldRescheduleChecker = true;
     // check if timers are due after restart
     triggerEntities();
   }
 
   @Override
   public void onPaused() {
-    checkerRunning = false;
+    shouldRescheduleChecker = false;
+    nextDueDate = -1;
   }
 
   @Override
   public void onResumed() {
+    shouldRescheduleChecker = true;
     if (!checkerRunning) {
       triggerEntities();
     }

diff --git a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/StreamProcessor.java b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/StreamProcessor.java
index 7d0904f..06a833b 100755
--- a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/StreamProcessor.java
+++ b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/StreamProcessor.java
@@ -108,8 +108,8 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
 
   private final List<RecordProcessor> recordProcessors = new ArrayList<>();
   private ProcessingScheduleServiceImpl processorActorService;
-  private ProcessingScheduleServiceImpl differentScheduleService;
-  private DifferentProcessingScheduleServiceActor differentActor;
+  private ProcessingScheduleServiceImpl asyncScheduleService;
+  private AsyncProcessingScheduleServiceActor asyncActor;
 
   protected StreamProcessor(final StreamProcessorBuilder processorBuilder) {
     actorSchedulingService = processorBuilder.getActorSchedulingService();
@@ -165,15 +165,15 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
               streamProcessorContext::getStreamProcessorPhase,
               streamProcessorContext.getAbortCondition(),
               logStream::newLogStreamWriter);
-      differentScheduleService =
+      asyncScheduleService =
           new ProcessingScheduleServiceImpl(
               streamProcessorContext::getStreamProcessorPhase, // this is volatile
               () -> false, // we will just stop the actor in this case, no need to provide this
               logStream::newLogStreamWriter);
-      differentActor = new DifferentProcessingScheduleServiceActor(differentScheduleService);
+      asyncActor = new AsyncProcessingScheduleServiceActor(asyncScheduleService);
       final var extendedProcessingScheduleService =
           new ExtendedProcessingScheduleServiceImpl(
-              processorActorService, differentScheduleService, differentActor.getActorControl());
+              processorActorService, asyncScheduleService, asyncActor.getActorControl());
       streamProcessorContext.scheduleService(extendedProcessingScheduleService);
 
       initRecordProcessors();
@@ -264,8 +264,8 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
 
   private void tearDown() {
     processorActorService.close();
-    differentActor.closeAsync();
-    differentScheduleService.close();
+    asyncActor.closeAsync();
+    asyncScheduleService.close();
     streamProcessorContext.getLogStreamReader().close();
     logStream.removeRecordAvailableListener(this);
     replayStateMachine.close();
@@ -308,7 +308,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
           0,
           new Step[] {
             () -> processorActorService.open(actor),
-            () -> actorSchedulingService.submitActor(differentActor)
+            () -> actorSchedulingService.submitActor(asyncActor)
           },
           () -> startProcessing(lastProcessingPositions));
     } else {
@@ -557,11 +557,11 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
     actor.run(processingStateMachine::readNextRecord);
   }
 
-  private static final class DifferentProcessingScheduleServiceActor extends Actor {
+  private static final class AsyncProcessingScheduleServiceActor extends Actor {
 
     private final ProcessingScheduleServiceImpl scheduleService;
 
-    public DifferentProcessingScheduleServiceActor(
+    public AsyncProcessingScheduleServiceActor(
         final ProcessingScheduleServiceImpl scheduleService) {
       this.scheduleService = scheduleService;
     }

diff --git a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/ClusterCommunicationService.java b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/ClusterCommunicationService.java
index 9197da7..3fa0b97 100644
--- a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/ClusterCommunicationService.java
+++ b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/ClusterCommunicationService.java
@@ -45,11 +45,11 @@ import java.util.function.Function;
  *       directly to the given member and awaits a reply
  * </ul>
  *
- * To register to listen for messages, use one of the {@link #subscribe(String, Function, Consumer,
+ * To register to listen for messages, use one of the {@link #consume(String, Function, Consumer,
  * Executor)} methods:
  *
  * <pre>{@code
- * service.subscribe(""test"", String::new, message -> {
+ * service.consume(""test"", String::new, message -> {
  *   System.out.println(""Received message "" + message);
  * }, executor);
  *
@@ -120,76 +120,66 @@ public interface ClusterCommunicationService {
       Duration timeout);
 
   /**
-   * Adds a new subscriber for the specified message subject.
+   * Adds a new subscriber for the specified message subject, which must return a reply.
    *
    * @param subject message subject
-   * @param decoder decoder for resurrecting incoming message
-   * @param handler handler function that processes the incoming message and produces a reply
-   * @param encoder encoder for serializing reply
-   * @param executor executor to run this handler on
-   * @param <M> incoming message type
-   * @param <R> reply message type
-   */
-  <M, R> void subscribe(
-      String subject,
-      Function<byte[], M> decoder,
-      Function<M, R> handler,
-      Function<R, byte[]> encoder,
-      Executor executor);
-
-  /**
-   * Adds a new subscriber for the specified message subject.
-   *
-   * @param subject message subject
-   * @param decoder decoder for resurrecting incoming message
+   * @param decoder decoder for deserialize incoming message
    * @param handler handler function that processes the incoming message and produces a reply
    * @param encoder encoder for serializing reply
    * @param <M> incoming message type
    * @param <R> reply message type
    */
-  <M, R> void subscribe(
+  <M, R> void replyTo(
       String subject,
       Function<byte[], M> decoder,
       Function<M, CompletableFuture<R>> handler,
       Function<R, byte[]> encoder);
 
   /**
-   * Adds a new subscriber for the specified message subject.
+   * Adds a new subscriber for the specified message subject which does not return any reply.
    *
    * @param subject message subject
-   * @param decoder decoder to resurrecting incoming message
+   * @param decoder decoder to deserialize incoming message
    * @param handler handler for handling message
    * @param executor executor to run this handler on
    * @param <M> incoming message type
    */
-  <M> void subscribe(
+  <M> void consume(
       String subject, Function<byte[], M> decoder, Consumer<M> handler, Executor executor);
 
   /**
-   * Adds a new subscriber for the specified message subject.
+   * Adds a new subscriber for the specified message subject which does not return any reply. If the
+   * sender is not a known member, the handler is not called (but no error is returned to the
+   * sender).
    *
    * @param subject message subject
-   * @param decoder decoder to resurrecting incoming message
-   * @param handler handler for handling message
+   * @param decoder decoder to deserialize incoming message
+   * @param handler handler for handling message, receiving the sender's member ID and the decoded
+   *     message
    * @param executor executor to run this handler on
    * @param <M> incoming message type
    */
-  <M> void subscribe(
+  <M> void consume(
       String subject,
       Function<byte[], M> decoder,
       BiConsumer<MemberId, M> handler,
       Executor executor);
 
   /**
-   * Adds a new subscriber for the specified message subject.
+   * Adds a new subscriber for the specified message subject which must return a reply. If the
+   * sender is not a known member, the handler is not called, and a {@link
+   * io.atomix.cluster.messaging.MessagingException.NoSuchMemberException} is returned to the
+   * sender.
    *
    * @param subject message subject
-   * @param decoder decoder to resurrecting incoming message
-   * @param handler handler for handling message
+   * @param decoder decoder to deserializing incoming message
+   * @param handler handler for handling message, receiving the sender's member ID and the decoded
+   *     message
+   * @param encoder to serialize the outgoing reply
    * @param executor executor to run this handler on
    * @param <M> incoming message type
    */
-  <M, R> void subscribe(
+  <M, R> void replyTo(
       String subject,
       Function<byte[], M> decoder,
       BiFunction<MemberId, M, R> handler,
diff --git a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/impl/DefaultClusterCommunicationService.java b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/impl/DefaultClusterCommunicationService.java
index 3ace9f2..0855a6a 100644
--- a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/impl/DefaultClusterCommunicationService.java
+++ b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/impl/DefaultClusterCommunicationService.java
@@ -119,33 +119,7 @@ public class DefaultClusterCommunicationService implements ManagedClusterCommuni
   }
 
   @Override
-  public <M, R> void subscribe(
-      final String subject,
-      final Function<byte[], M> decoder,
-      final Function<M, R> handler,
-      final Function<R, byte[]> encoder,
-      final Executor executor) {
-    messagingService.registerHandler(
-        subject,
-        new InternalMessageResponder<>(
-            decoder,
-            encoder,
-            m -> {
-              final CompletableFuture<R> responseFuture = new CompletableFuture<>();
-              executor.execute(
-                  () -> {
-                    try {
-                      responseFuture.complete(handler.apply(m));
-                    } catch (final Exception e) {
-                      responseFuture.completeExceptionally(e);
-                    }
-                  });
-              return responseFuture;
-            }));
-  }
-
-  @Override
-  public <M, R> void subscribe(
+  public <M, R> void replyTo(
       final String subject,
       final Function<byte[], M> decoder,
       final Function<M, CompletableFuture<R>> handler,
@@ -155,7 +129,7 @@ public class DefaultClusterCommunicationService implements ManagedClusterCommuni
   }
 
   @Override
-  public <M> void subscribe(
+  public <M> void consume(
       final String subject,
       final Function<byte[], M> decoder,
       final Consumer<M> handler,
@@ -169,7 +143,7 @@ public class DefaultClusterCommunicationService implements ManagedClusterCommuni
   }
 
   @Override
-  public <M> void subscribe(
+  public <M> void consume(
       final String subject,
       final Function<byte[], M> decoder,
       final BiConsumer<MemberId, M> handler,
@@ -183,7 +157,7 @@ public class DefaultClusterCommunicationService implements ManagedClusterCommuni
   }
 
   @Override
-  public <M, R> void subscribe(
+  public <M, R> void replyTo(
       final String subject,
       final Function<byte[], M> decoder,
       final BiFunction<MemberId, M, R> handler,
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftServerCommunicator.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftServerCommunicator.java
index 45151c2..31c4760 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftServerCommunicator.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftServerCommunicator.java
@@ -111,7 +111,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerTransferHandler(
       final Function<TransferRequest, CompletableFuture<TransferResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.transferSubject,
         serializer::decode,
         handler.<TransferRequest>compose(this::recordReceivedMetrics),
@@ -126,7 +126,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerConfigureHandler(
       final Function<ConfigureRequest, CompletableFuture<ConfigureResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.configureSubject,
         serializer::decode,
         handler.<ConfigureRequest>compose(this::recordReceivedMetrics),
@@ -141,7 +141,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerReconfigureHandler(
       final Function<ReconfigureRequest, CompletableFuture<ReconfigureResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.reconfigureSubject,
         serializer::decode,
         handler.<ReconfigureRequest>compose(this::recordReceivedMetrics),
@@ -156,7 +156,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerInstallHandler(
       final Function<InstallRequest, CompletableFuture<InstallResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.installSubject,
         serializer::decode,
         handler.<InstallRequest>compose(this::recordReceivedMetrics),
@@ -171,7 +171,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerPollHandler(
       final Function<PollRequest, CompletableFuture<PollResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.pollSubject,
         serializer::decode,
         handler.<PollRequest>compose(this::recordReceivedMetrics),
@@ -186,7 +186,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerVoteHandler(
       final Function<VoteRequest, CompletableFuture<VoteResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.voteSubject,
         serializer::decode,
         handler.<VoteRequest>compose(this::recordReceivedMetrics),
@@ -201,7 +201,7 @@ public class RaftServerCommunicator implements RaftServerProtocol {
   @Override
   public void registerAppendHandler(
       final Function<AppendRequest, CompletableFuture<AppendResponse>> handler) {
-    clusterCommunicator.subscribe(
+    clusterCommunicator.replyTo(
         context.appendSubject,
         serializer::decode,
         handler.<AppendRequest>compose(this::recordReceivedMetrics),
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java
index bc7869f..4443a9f 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java
@@ -40,7 +40,7 @@ public class AtomixPartitionMessagingService implements PartitionMessagingServic
   @Override
   public void subscribe(
       final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {
-    communicationService.subscribe(subject, DefaultSerializers.BASIC::decode, consumer, executor);
+    communicationService.consume(subject, DefaultSerializers.BASIC::decode, consumer, executor);
   }
 
   @Override
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverActor.java b/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverActor.java
index d0d6ee2..a7c4c5a 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverActor.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverActor.java
@@ -59,7 +59,7 @@ public final class InterPartitionCommandReceiverActor extends Actor
 
   @Override
   protected void onActorStarting() {
-    communicationService.subscribe(
+    communicationService.consume(
         TOPIC_PREFIX + partitionId,
         DefaultSerializers.BASIC::decode,
         this::tryHandleMessage,
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
index 765b44b..8d2c228 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamServiceImpl.java
@@ -56,7 +56,7 @@ public final class ClientStreamServiceImpl<M extends BufferWriter> extends Actor
   protected void onActorStarted() {
     // TODO: Define an PushResponse to inform server if push was successful or not. Currently, an
     // exception will be received by the server response handler.
-    communicationService.subscribe(
+    communicationService.replyTo(
         StreamTopics.PUSH.topic(),
         MessageUtil::parsePushRequest,
         request -> {
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamEndpoint.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamEndpoint.java
index ae2b012..35264c9 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamEndpoint.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamEndpoint.java
@@ -35,19 +35,19 @@ public final class RemoteStreamEndpoint<M extends BufferReader> extends Actor {
 
   @Override
   protected void onActorStarting() {
-    transport.subscribe(
+    transport.replyTo(
         StreamTopics.ADD.topic(),
         MessageUtil::parseAddRequest,
         this::onAdd,
         Function.identity(),
         actor::run);
-    transport.subscribe(
+    transport.replyTo(
         StreamTopics.REMOVE.topic(),
         MessageUtil::parseRemoveRequest,
         this::onRemove,
         Function.identity(),
         actor::run);
-    transport.subscribe(
+    transport.replyTo(
         StreamTopics.REMOVE_ALL.topic(),
         Function.identity(),
         this::onRemoveAll,

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobBatchActivateProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobBatchActivateProcessor.java
index b41561d..6f7e2ba 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobBatchActivateProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobBatchActivateProcessor.java
@@ -106,8 +106,8 @@ public final class JobBatchActivateProcessor implements TypedRecordProcessor<Job
     stateWriter.appendFollowUpEvent(jobBatchKey, JobBatchIntent.ACTIVATED, value);
     responseWriter.writeEventOnCommand(jobBatchKey, JobBatchIntent.ACTIVATED, value, record);
 
-    final var activatedJobs = record.getValue().getJobKeys().size();
-    jobMetrics.jobActivated(value.getType(), activatedJobs);
+    final var activatedJobsCount = record.getValue().getJobKeys().size();
+    jobMetrics.jobActivated(value.getType(), activatedJobsCount);
   }
 
   private void collectJobsToActivate(

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
index 0f345ed..d336df0 100755
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
@@ -101,7 +101,7 @@ public final class CatchEventBehavior {
    * @param commandWriter the writer for unsubscribe commands
    * @param sideEffects the side effects for unsubscribe actions
    */
-  public void unsubscribeFromEventSubprocesses(
+  public void unsubscribeEventSubprocesses(
       final BpmnElementContext context,
       final TypedCommandWriter commandWriter,
       final SideEffects sideEffects) {
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
index 7c832ed..48362b0 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
@@ -59,9 +59,9 @@ public class EventTriggerBehavior {
         new VariableBehavior(zeebeState.getVariableState(), writers.state(), keyGenerator);
   }
 
-  private void unsubscribeFromEventSubprocesses(final BpmnElementContext context) {
+  private void unsubscribeEventSubprocesses(final BpmnElementContext context) {
     final var sideEffectQueue = new SideEffectQueue();
-    catchEventBehavior.unsubscribeFromEventSubprocesses(context, commandWriter, sideEffectQueue);
+    catchEventBehavior.unsubscribeEventSubprocesses(context, commandWriter, sideEffectQueue);
 
     // side effect can immediately executed, since on restart we not reprocess anymore the commands
     sideEffectQueue.flush();
@@ -98,7 +98,7 @@ public class EventTriggerBehavior {
     }
 
     if (startEvent.interrupting()) {
-      unsubscribeFromEventSubprocesses(flowScopeContext);
+      unsubscribeEventSubprocesses(flowScopeContext);
 
       final var noActiveChildInstances = terminateChildInstances(flowScopeContext);
       if (!noActiveChildInstances) {

diff --git a/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java b/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java
index 77e320f..0389291 100644
--- a/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/ReplayStateTest.java
@@ -22,9 +22,9 @@ import io.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.zeebe.protocol.record.value.BpmnElementType;
 import io.zeebe.test.util.record.RecordingExporter;
 import java.time.Duration;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Optional;
 import java.util.function.Function;
 import org.assertj.core.api.SoftAssertions;
 import org.awaitility.Awaitility;
@@ -170,7 +170,7 @@ public final class ReplayStateTest {
   @Test
   public void shouldRestoreState() {
     // given
-    testCase.process.ifPresent(process -> engine.deployment().withXmlResource(process).deploy());
+    testCase.processes.forEach(process -> engine.deployment().withXmlResource(process).deploy());
 
     final Record<?> finalRecord = testCase.execution.apply(engine);
 
@@ -227,7 +227,7 @@ public final class ReplayStateTest {
 
   private static final class TestCase {
     private final String description;
-    private Optional<BpmnModelInstance> process = Optional.empty();
+    private final List<BpmnModelInstance> processes = new ArrayList<>();
     private Function<EngineRule, Record<?>> execution =
         engine -> RecordingExporter.records().getFirst();
 
@@ -236,7 +236,7 @@ public final class ReplayStateTest {
     }
 
     private TestCase withProcess(final BpmnModelInstance process) {
-      this.process = Optional.of(process);
+      processes.add(process);
       return this;
     }
 

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/ClusterTopologyManagerService.java b/topology/src/main/java/io/camunda/zeebe/topology/ClusterTopologyManagerService.java
index edf0b1a..40b0f08 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/ClusterTopologyManagerService.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/ClusterTopologyManagerService.java
@@ -76,9 +76,7 @@ public final class ClusterTopologyManagerService extends Actor implements Topolo
     isCoordinator = localMemberId.id().equals(COORDINATOR_ID);
     if (isCoordinator) {
       // Only a coordinator can start topology change
-      topologyChangeCoordinator =
-          new TopologyChangeCoordinatorImpl(
-              clusterTopologyManager, clusterTopologyGossiper::queryClusterTopology, this);
+      topologyChangeCoordinator = new TopologyChangeCoordinatorImpl(clusterTopologyManager, this);
       topologyRequestServer =
           new TopologyRequestServer(
               communicationService,
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
index 290c779..0d79088 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
@@ -7,7 +7,6 @@
  */
 package io.camunda.zeebe.topology.changes;
 
-import io.atomix.cluster.MemberId;
 import io.camunda.zeebe.scheduler.ConcurrencyControl;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.topology.ClusterTopologyManager;
@@ -21,7 +20,6 @@ import io.camunda.zeebe.topology.state.ClusterTopology;
 import io.camunda.zeebe.topology.state.CompletedChange;
 import io.camunda.zeebe.topology.state.TopologyChangeOperation;
 import java.util.List;
-import java.util.function.Function;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -29,14 +27,10 @@ public class TopologyChangeCoordinatorImpl implements TopologyChangeCoordinator 
   private static final Logger LOG = LoggerFactory.getLogger(TopologyChangeCoordinatorImpl.class);
   private final ClusterTopologyManager clusterTopologyManager;
   private final ConcurrencyControl executor;
-  private final Function<MemberId, ActorFuture<ClusterTopology>> syncRequester;
 
   public TopologyChangeCoordinatorImpl(
-      final ClusterTopologyManager clusterTopologyManager,
-      final Function<MemberId, ActorFuture<ClusterTopology>> syncRequester,
-      final ConcurrencyControl executor) {
+      final ClusterTopologyManager clusterTopologyManager, final ConcurrencyControl executor) {
     this.clusterTopologyManager = clusterTopologyManager;
-    this.syncRequester = syncRequester;
     this.executor = executor;
   }
 
diff --git a/topology/src/test/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImplTest.java b/topology/src/test/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImplTest.java
index eac81cf..96f22e7 100644
--- a/topology/src/test/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImplTest.java
+++ b/topology/src/test/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImplTest.java
@@ -49,8 +49,7 @@ final class TopologyChangeCoordinatorImplTest {
     // given
     clusterTopologyManager.setClusterTopology(ClusterTopology.init());
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
 
@@ -79,8 +78,7 @@ final class TopologyChangeCoordinatorImplTest {
             .addMember(MemberId.from(""1""), MemberState.initializeAsActive(Map.of()))
             .updateMember(MemberId.from(""1""), m -> m.addPartition(1, PartitionState.active(1))));
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
 
@@ -108,8 +106,7 @@ final class TopologyChangeCoordinatorImplTest {
         ClusterTopology.init()
             .startTopologyChange(List.of(new PartitionLeaveOperation(MemberId.from(""1""), 1))));
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
     final var applyFuture =
@@ -138,8 +135,7 @@ final class TopologyChangeCoordinatorImplTest {
         List.of(new PartitionJoinOperation(MemberId.from(""1""), 1, 1));
 
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
     final var applyFuture = coordinator.applyOperations(getTransformer(operations));
@@ -166,8 +162,7 @@ final class TopologyChangeCoordinatorImplTest {
         List.of(new PartitionJoinOperation(MemberId.from(""1""), 1, 1));
 
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
     final var simulationResult = coordinator.simulateOperations(getTransformer(operations));
@@ -184,8 +179,7 @@ final class TopologyChangeCoordinatorImplTest {
     // given
     clusterTopologyManager.setClusterTopology(ClusterTopology.init());
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
 
     // when
 
@@ -217,8 +211,7 @@ final class TopologyChangeCoordinatorImplTest {
         List.of(new PartitionJoinOperation(MemberId.from(""1""), 1, 1));
 
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
     final var applyResult = coordinator.applyOperations(getTransformer(operations)).join();
 
     // when
@@ -254,8 +247,7 @@ final class TopologyChangeCoordinatorImplTest {
         List.of(new PartitionJoinOperation(MemberId.from(""1""), 1, 1));
 
     final var coordinator =
-        new TopologyChangeCoordinatorImpl(
-            clusterTopologyManager, syncRequester, new TestConcurrencyControl());
+        new TopologyChangeCoordinatorImpl(clusterTopologyManager, new TestConcurrencyControl());
     final var applyResult = coordinator.applyOperations(getTransformer(operations)).join();
 
     // when

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
index 99b8448..c8a8d55 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
@@ -241,12 +241,7 @@ public final class CreateProcessInstanceProcessor
       final long processInstanceKey,
       final ProcessInstanceRecord processInstance) {
 
-    stateWriter.appendFollowUpEvent(
-        processInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATING, processInstance);
-    stateWriter.appendFollowUpEvent(
-        processInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATED, processInstance);
-
-    createEventSubscriptions(process.getProcess(), processInstance, processInstanceKey);
+    activateElementInstance(process.getProcess(), processInstanceKey, processInstance);
 
     final Map<DirectBuffer, Long> activatedFlowScopeIds = new HashMap<>();
     activatedFlowScopeIds.put(processInstance.getElementIdBuffer(), processInstanceKey);
@@ -307,17 +302,25 @@ public final class CreateProcessInstanceProcessor
       final long elementInstanceKey = keyGenerator.nextKey();
       activatedFlowScopeIds.put(flowScope.getId(), elementInstanceKey);
 
-      stateWriter.appendFollowUpEvent(
-          elementInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATING, flowScopeRecord);
-      stateWriter.appendFollowUpEvent(
-          elementInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATED, flowScopeRecord);
-
-      createEventSubscriptions(flowScope, flowScopeRecord, elementInstanceKey);
+      activateElementInstance(flowScope, elementInstanceKey, flowScopeRecord);
 
       return elementInstanceKey;
     }
   }
 
+  private void activateElementInstance(
+      final ExecutableFlowElement element,
+      final long elementInstanceKey,
+      final ProcessInstanceRecord elementRecord) {
+
+    stateWriter.appendFollowUpEvent(
+        elementInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATING, elementRecord);
+    stateWriter.appendFollowUpEvent(
+        elementInstanceKey, ProcessInstanceIntent.ELEMENT_ACTIVATED, elementRecord);
+
+    createEventSubscriptions(element, elementRecord, elementInstanceKey);
+  }
+
   private void createEventSubscriptions(
       final ExecutableFlowElement element,
       final ProcessInstanceRecord elementRecord,

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
index 0093ff9..417b84a 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
@@ -240,7 +240,7 @@ public final class AsyncSnapshotDirector extends Actor
         (transientSnapshot, snapshotTakenError) -> {
           if (snapshotTakenError != null) {
             if (snapshotTakenError instanceof SnapshotException.SnapshotAlreadyExistsException) {
-              LOG.debug(""Did not take a snapshot. Snapshot already exists."", snapshotTakenError);
+              LOG.debug(""Did not take a snapshot. {}"", snapshotTakenError.getMessage());
             } else {
               LOG.error(""Failed to take a snapshot for {}"", processorName, snapshotTakenError);
               resetStateOnFailure();

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
index 4d370ca..267fdb6 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/EngineProcessors.java
@@ -120,7 +120,12 @@ public final class EngineProcessors {
         maxFragmentSize,
         writers);
 
-    addIncidentProcessors(zeebeState, bpmnStreamProcessor, typedRecordProcessors, writers);
+    addIncidentProcessors(
+        zeebeState,
+        bpmnStreamProcessor,
+        typedRecordProcessors,
+        writers,
+        zeebeState.getKeyGenerator());
 
     return typedRecordProcessors;
   }
@@ -203,9 +208,10 @@ public final class EngineProcessors {
       final ZeebeState zeebeState,
       final TypedRecordProcessor<ProcessInstanceRecord> bpmnStreamProcessor,
       final TypedRecordProcessors typedRecordProcessors,
-      final Writers writers) {
+      final Writers writers,
+      final KeyGenerator keyGenerator) {
     IncidentEventProcessors.addProcessors(
-        typedRecordProcessors, zeebeState, bpmnStreamProcessor, writers);
+        typedRecordProcessors, zeebeState, bpmnStreamProcessor, writers, keyGenerator);
   }
 
   private static void addMessageProcessors(
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/IncidentEventProcessors.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/IncidentEventProcessors.java
index a22f886..f92e431 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/IncidentEventProcessors.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/IncidentEventProcessors.java
@@ -10,6 +10,7 @@ package io.camunda.zeebe.engine.processing.incident;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessors;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.ZeebeState;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.ValueType;
@@ -21,10 +22,11 @@ public final class IncidentEventProcessors {
       final TypedRecordProcessors typedRecordProcessors,
       final ZeebeState zeebeState,
       final TypedRecordProcessor<ProcessInstanceRecord> bpmnStreamProcessor,
-      final Writers writers) {
+      final Writers writers,
+      final KeyGenerator keyGenerator) {
     typedRecordProcessors.onCommand(
         ValueType.INCIDENT,
         IncidentIntent.RESOLVE,
-        new ResolveIncidentProcessor(zeebeState, bpmnStreamProcessor, writers));
+        new ResolveIncidentProcessor(zeebeState, bpmnStreamProcessor, writers, keyGenerator));
   }
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/ResolveIncidentProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/ResolveIncidentProcessor.java
index aedb151..a261f84 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/ResolveIncidentProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/incident/ResolveIncidentProcessor.java
@@ -18,6 +18,7 @@ import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejection
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.ElementInstanceState;
 import io.camunda.zeebe.engine.state.immutable.IncidentState;
 import io.camunda.zeebe.engine.state.immutable.JobState;
@@ -52,17 +53,20 @@ public final class ResolveIncidentProcessor implements TypedRecordProcessor<Inci
   private final IncidentState incidentState;
   private final ElementInstanceState elementInstanceState;
   private final JobState jobState;
+  private final KeyGenerator keyGenerator;
 
   public ResolveIncidentProcessor(
       final ZeebeState zeebeState,
       final TypedRecordProcessor<ProcessInstanceRecord> bpmnStreamProcessor,
-      final Writers writers) {
+      final Writers writers,
+      final KeyGenerator keyGenerator) {
     this.bpmnStreamProcessor = bpmnStreamProcessor;
     stateWriter = writers.state();
     rejectionWriter = writers.rejection();
     incidentState = zeebeState.getIncidentState();
     elementInstanceState = zeebeState.getElementInstanceState();
     jobState = zeebeState.getJobState();
+    this.keyGenerator = keyGenerator;
   }
 
   @Override

diff --git a/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentLoader.java b/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentLoader.java
index 91d4ec9..6a550a0 100644
--- a/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentLoader.java
+++ b/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentLoader.java
@@ -141,7 +141,6 @@ final class SegmentLoader {
       final Path file,
       final MappedByteBuffer buffer,
       final SegmentDescriptor descriptor,
-      final long lastFlushedIndex,
       final long lastWrittenAsqn,
       final JournalIndex journalIndex) {
     final SegmentFile segmentFile = new SegmentFile(file.toFile());
@@ -231,16 +230,6 @@ final class SegmentLoader {
       allocateSegment(maxSegmentSize, channel);
       return mapSegment(channel, maxSegmentSize);
     } catch (final FileAlreadyExistsException e) {
-      // do not reuse a segment into which we've already written!
-      if (lastFlushedIndex >= descriptor.index()) {
-        throw new JournalException(
-            String.format(
-                ""Failed to create journal segment %s, as it already exists, and the last written ""
-                    + ""index %d indicates we've already written to it"",
-                segmentPath, lastFlushedIndex),
-            e);
-      }
-
       LOGGER.warn(
           ""Failed to create segment {}: an unused file already existed, and will be replaced"",
           segmentPath,

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/api/LegacyTask.java b/engine/src/main/java/io/camunda/zeebe/engine/api/LegacyTask.java
new file mode 100644
index 0000000..9e8ec16
--- /dev/null
+++ b/engine/src/main/java/io/camunda/zeebe/engine/api/LegacyTask.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.api;
+
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
+
+/** This interface is here to migrate legacy tasks */
+@Deprecated
+public interface LegacyTask {
+
+  void run(TypedCommandWriter commandWriter, ProcessingScheduleService schedulingService);
+}
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/api/ProcessingScheduleService.java b/engine/src/main/java/io/camunda/zeebe/engine/api/ProcessingScheduleService.java
index e5dd008..05c78f0 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/api/ProcessingScheduleService.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/api/ProcessingScheduleService.java
@@ -17,6 +17,12 @@ public interface ProcessingScheduleService {
 
   <T> void runOnCompletion(ActorFuture<T> precedingTask, BiConsumer<T, Throwable> followUpTask);
 
+  @Deprecated
+  <T> void runOnCompletion(ActorFuture<T> precedingTask, LegacyTask followUpTask);
+
+  @Deprecated
+  void runDelayed(Duration delay, LegacyTask followUpTask);
+
   default void runAtFixedRate(final Duration delay, final Runnable task) {
     runDelayed(
         delay,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnBehaviorsImpl.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnBehaviorsImpl.java
index 5c4ee50..dfef73b 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnBehaviorsImpl.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnBehaviorsImpl.java
@@ -78,8 +78,7 @@ public final class BpmnBehaviorsImpl implements BpmnBehaviors {
             stateBehavior,
             processEngineMetrics,
             processorLookup,
-            writers,
-            zeebeState.getElementInstanceState());
+            writers);
     eventSubscriptionBehavior =
         new BpmnEventSubscriptionBehavior(
             catchEventBehavior,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
index 6593e62..933280f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
@@ -14,7 +14,7 @@ import io.camunda.zeebe.engine.processing.common.Failure;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableCatchEventSupplier;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowElement;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffects;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.EventScopeInstanceState;
 import io.camunda.zeebe.engine.state.immutable.ProcessState;
@@ -39,13 +39,13 @@ public final class BpmnEventSubscriptionBehavior {
 
   private final KeyGenerator keyGenerator;
   private final ProcessState processState;
-  private final TypedCommandWriter commandWriter;
+  private final RestrictedTypedCommandWriter commandWriter;
   private final EventTriggerBehavior eventTriggerBehavior;
 
   public BpmnEventSubscriptionBehavior(
       final CatchEventBehavior catchEventBehavior,
       final EventTriggerBehavior eventTriggerBehavior,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final SideEffects sideEffects,
       final ZeebeState zeebeState,
       final KeyGenerator keyGenerator) {
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
index cf40289..5b7b75f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
@@ -17,12 +17,11 @@ import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableCal
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowElement;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowNode;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableSequenceFlow;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.deployment.DeployedProcess;
-import io.camunda.zeebe.engine.state.immutable.ElementInstanceState;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
@@ -47,8 +46,7 @@ public final class BpmnStateTransitionBehavior {
 
   private final ProcessEngineMetrics metrics;
   private final StateWriter stateWriter;
-  private final TypedCommandWriter commandWriter;
-  private final ElementInstanceState elementInstanceState;
+  private final RestrictedTypedCommandWriter commandWriter;
 
   public BpmnStateTransitionBehavior(
       final KeyGenerator keyGenerator,
@@ -56,15 +54,13 @@ public final class BpmnStateTransitionBehavior {
       final ProcessEngineMetrics metrics,
       final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>
           processorLookUp,
-      final Writers writers,
-      final ElementInstanceState elementInstanceState) {
+      final Writers writers) {
     this.keyGenerator = keyGenerator;
     this.stateBehavior = stateBehavior;
     this.metrics = metrics;
     this.processorLookUp = processorLookUp;
     stateWriter = writers.state();
     commandWriter = writers.command();
-    this.elementInstanceState = elementInstanceState;
   }
 
   /**
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
index 04546c8..f6790bd 100755
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
@@ -17,8 +17,8 @@ import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlo
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableMessage;
 import io.camunda.zeebe.engine.processing.message.command.SubscriptionCommandSender;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffects;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.timer.DueDateTimerChecker;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.ProcessMessageSubscriptionState;
@@ -88,7 +88,7 @@ public final class CatchEventBehavior {
    */
   public void unsubscribeFromEvents(
       final BpmnElementContext context,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final SideEffects sideEffects) {
     unsubscribeFromEvents(context, commandWriter, sideEffects, elementId -> true);
   }
@@ -103,7 +103,7 @@ public final class CatchEventBehavior {
    */
   public void unsubscribeEventSubprocesses(
       final BpmnElementContext context,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final SideEffects sideEffects) {
     unsubscribeFromEvents(
         context, commandWriter, sideEffects, elementId -> isEventSubprocess(context, elementId));
@@ -131,7 +131,7 @@ public final class CatchEventBehavior {
    */
   private void unsubscribeFromEvents(
       final BpmnElementContext context,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final SideEffects sideEffects,
       final Predicate<DirectBuffer> elementIdFilter) {
 
@@ -146,7 +146,7 @@ public final class CatchEventBehavior {
       final BpmnElementContext context,
       final ExecutableCatchEventSupplier supplier,
       final SideEffects sideEffects,
-      final TypedCommandWriter commandWriter) {
+      final RestrictedTypedCommandWriter commandWriter) {
     final var evaluationResults =
         supplier.getEvents().stream()
             .filter(event -> event.isTimer() || event.isMessage())
@@ -274,7 +274,7 @@ public final class CatchEventBehavior {
   private void subscribeToTimerEvents(
       final BpmnElementContext context,
       final SideEffects sideEffects,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final List<EvalResult> results) {
     results.stream()
         .filter(EvalResult::isTimer)
@@ -299,7 +299,7 @@ public final class CatchEventBehavior {
       final long processDefinitionKey,
       final DirectBuffer handlerNodeId,
       final Timer timer,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final SideEffects sideEffects) {
     final long dueDate = timer.getDueDate(ActorClock.currentTimeMillis());
     timerRecord.reset();
@@ -324,7 +324,7 @@ public final class CatchEventBehavior {
 
   private void unsubscribeFromTimerEvents(
       final BpmnElementContext context,
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final Predicate<DirectBuffer> elementIdFilter) {
     timerInstanceState.forEachTimerForElementInstance(
         context.getElementInstanceKey(),
@@ -336,7 +336,7 @@ public final class CatchEventBehavior {
   }
 
   public void unsubscribeFromTimerEvent(
-      final TimerInstance timer, final TypedCommandWriter commandWriter) {
+      final TimerInstance timer, final RestrictedTypedCommandWriter commandWriter) {
     timerRecord.reset();
     timerRecord
         .setElementInstanceKey(timer.getElementInstanceKey())
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventHandle.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventHandle.java
index 5cce682..1e3d8a8 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventHandle.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventHandle.java
@@ -10,8 +10,8 @@ package io.camunda.zeebe.engine.processing.common;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableCatchEvent;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowElement;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableStartEvent;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.EventScopeInstanceState;
@@ -40,7 +40,7 @@ public final class EventHandle {
   private final EventScopeInstanceState eventScopeInstanceState;
   private final ProcessState processState;
 
-  private final TypedCommandWriter commandWriter;
+  private final RestrictedTypedCommandWriter commandWriter;
   private final StateWriter stateWriter;
   private final EventTriggerBehavior eventTriggerBehavior;
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
index 48362b0..cc3b5d7 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/EventTriggerBehavior.java
@@ -13,8 +13,8 @@ import io.camunda.zeebe.engine.processing.bpmn.ProcessInstanceLifecycle;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowElement;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableStartEvent;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectQueue;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.processing.variable.VariableBehavior;
 import io.camunda.zeebe.engine.state.KeyGenerator;
@@ -35,7 +35,7 @@ public class EventTriggerBehavior {
 
   private final KeyGenerator keyGenerator;
   private final CatchEventBehavior catchEventBehavior;
-  private final TypedCommandWriter commandWriter;
+  private final RestrictedTypedCommandWriter commandWriter;
   private final StateWriter stateWriter;
   private final ElementInstanceState elementInstanceState;
   private final EventScopeInstanceState eventScopeInstanceState;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributionBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributionBehavior.java
index c1460d2..d3b46ea 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributionBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributionBehavior.java
@@ -7,6 +7,7 @@
  */
 package io.camunda.zeebe.engine.processing.deployment.distribute;
 
+import io.camunda.zeebe.engine.api.LegacyTask;
 import io.camunda.zeebe.engine.api.ProcessingScheduleService;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
@@ -19,7 +20,6 @@ import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
 import io.camunda.zeebe.util.buffer.BufferUtil;
 import java.time.Duration;
 import java.util.List;
-import java.util.function.BiConsumer;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import org.agrona.DirectBuffer;
@@ -28,13 +28,13 @@ public final class DeploymentDistributionBehavior {
 
   private final DeploymentDistributionRecord deploymentDistributionRecord =
       new DeploymentDistributionRecord();
+
   private final DeploymentRecord emptyDeploymentRecord = new DeploymentRecord();
 
   private final List<Integer> otherPartitions;
   private final DeploymentDistributor deploymentDistributor;
   private final ProcessingScheduleService scheduleService;
   private final StateWriter stateWriter;
-  private final TypedCommandWriter commandWriter;
 
   public DeploymentDistributionBehavior(
       final Writers writers,
@@ -50,7 +50,6 @@ public final class DeploymentDistributionBehavior {
     this.scheduleService = scheduleService;
 
     stateWriter = writers.state();
-    commandWriter = writers.command();
   }
 
   public void distributeDeployment(final DeploymentRecord deploymentEvent, final long key) {
@@ -84,8 +83,10 @@ public final class DeploymentDistributionBehavior {
         deploymentPushedFuture, new WriteDeploymentDistributionCompleteTask(partitionId, key));
   }
 
-  private final class WriteDeploymentDistributionCompleteTask
-      implements Runnable, BiConsumer<Void, Throwable> {
+  private static final class WriteDeploymentDistributionCompleteTask implements LegacyTask {
+
+    private final DeploymentDistributionRecord deploymentDistributionRecord =
+        new DeploymentDistributionRecord();
 
     private final int partitionId;
     private final long key;
@@ -96,7 +97,9 @@ public final class DeploymentDistributionBehavior {
     }
 
     @Override
-    public void run() {
+    public void run(
+        final TypedCommandWriter commandWriter, final ProcessingScheduleService schedulingService) {
+
       deploymentDistributionRecord.setPartition(partitionId);
       commandWriter.reset();
       commandWriter.appendFollowUpCommand(
@@ -104,13 +107,8 @@ public final class DeploymentDistributionBehavior {
 
       final long pos = commandWriter.flush();
       if (pos < 0) {
-        scheduleService.runDelayed(Duration.ofMillis(100), this);
+        schedulingService.runDelayed(Duration.ofMillis(100), this);
       }
     }
-
-    @Override
-    public void accept(final Void unused, final Throwable throwable) {
-      run();
-    }
   }
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
index 436a66b..016e011 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
@@ -11,8 +11,8 @@ import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.common.EventHandle;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.state.immutable.ElementInstanceState;
 import io.camunda.zeebe.engine.state.immutable.JobState;
 import io.camunda.zeebe.engine.state.immutable.ZeebeState;
@@ -51,7 +51,7 @@ public final class JobCompleteProcessor implements CommandProcessor<JobRecord> {
 
   @Override
   public void afterAccept(
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final StateWriter stateWriter,
       final long key,
       final Intent intent,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
index b9ee0d7..5a15813 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
@@ -13,8 +13,8 @@ import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.JobState;
 import io.camunda.zeebe.engine.state.immutable.ZeebeState;
@@ -61,7 +61,7 @@ public final class JobFailProcessor implements CommandProcessor<JobRecord> {
 
   @Override
   public void afterAccept(
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final StateWriter stateWriter,
       final long key,
       final Intent intent,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
index e75b7a7..3cfce40 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
@@ -12,8 +12,8 @@ import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnEventPublicationBehavior;
 import io.camunda.zeebe.engine.processing.common.Failure;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.analyzers.CatchEventAnalyzer;
 import io.camunda.zeebe.engine.state.analyzers.CatchEventAnalyzer.CatchEventTuple;
@@ -82,7 +82,7 @@ public class JobThrowErrorProcessor implements CommandProcessor<JobRecord> {
 
   @Override
   public void afterAccept(
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final StateWriter stateWriter,
       final long jobKey,
       final Intent intent,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
index 23d7583..4211b12 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
@@ -22,8 +22,8 @@ import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutablePro
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableSequenceFlow;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectQueue;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.processing.variable.VariableBehavior;
 import io.camunda.zeebe.engine.state.KeyGenerator;
@@ -80,7 +80,7 @@ public final class CreateProcessInstanceProcessor
   private final CatchEventBehavior catchEventBehavior;
 
   private final KeyGenerator keyGenerator;
-  private final TypedCommandWriter commandWriter;
+  private final RestrictedTypedCommandWriter commandWriter;
   private final StateWriter stateWriter;
   private final ProcessEngineMetrics metrics;
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceWithResultProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceWithResultProcessor.java
index e6c1687..b1f919d 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceWithResultProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceWithResultProcessor.java
@@ -10,8 +10,8 @@ package io.camunda.zeebe.engine.processing.processinstance;
 import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.state.instance.AwaitProcessInstanceResultMetadata;
 import io.camunda.zeebe.engine.state.mutable.MutableElementInstanceState;
 import io.camunda.zeebe.msgpack.property.ArrayProperty;
@@ -53,7 +53,7 @@ public final class CreateProcessInstanceWithResultProcessor
 
   @Override
   public void afterAccept(
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final StateWriter stateWriter,
       final long key,
       final Intent intent,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
index 12e33b1..9a10570 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
@@ -9,8 +9,8 @@ package io.camunda.zeebe.engine.processing.streamprocessor;
 
 import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.protocol.impl.record.UnifiedRecordValue;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.Intent;
@@ -36,7 +36,7 @@ public interface CommandProcessor<T extends UnifiedRecordValue> {
   // TODO (#8003): clean up after refactoring; this is just a simple hook to be able to append
   // additional commands/events
   default void afterAccept(
-      final TypedCommandWriter commandWriter,
+      final RestrictedTypedCommandWriter commandWriter,
       final StateWriter stateWriter,
       final long key,
       final Intent intent,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessorImpl.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessorImpl.java
index 6375d47..b475942 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessorImpl.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessorImpl.java
@@ -11,8 +11,8 @@ import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor.CommandControl;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
 import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectQueue;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.RestrictedTypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
@@ -44,7 +44,7 @@ public final class CommandProcessorImpl<T extends UnifiedRecordValue>
   private final KeyGenerator keyGenerator;
   private final StateWriter stateWriter;
   private final TypedRejectionWriter rejectionWriter;
-  private final TypedCommandWriter commandWriter;
+  private final RestrictedTypedCommandWriter commandWriter;
 
   private boolean isAccepted;
   private long entityKey;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/RestrictedTypedCommandWriter.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/RestrictedTypedCommandWriter.java
new file mode 100644
index 0000000..62604db
--- /dev/null
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/RestrictedTypedCommandWriter.java
@@ -0,0 +1,18 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.streamprocessor.writers;
+
+import io.camunda.zeebe.protocol.record.RecordValue;
+import io.camunda.zeebe.protocol.record.intent.Intent;
+
+/** This interface is supposed to replace TypedCommandWriter */
+public interface RestrictedTypedCommandWriter {
+  void appendNewCommand(Intent intent, RecordValue value);
+
+  void appendFollowUpCommand(long key, Intent intent, RecordValue value);
+}
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
index 1279f0e..8a501e4 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
@@ -11,10 +11,13 @@ import io.camunda.zeebe.protocol.record.RecordValue;
 import io.camunda.zeebe.protocol.record.intent.Intent;
 
 /** Things that any actor can write to a partition. */
-public interface TypedCommandWriter {
+/** This interface is supposed to be replaced by RestrictedTypedCommandWriter */
+public interface TypedCommandWriter extends RestrictedTypedCommandWriter {
 
+  @Override
   void appendNewCommand(Intent intent, RecordValue value);
 
+  @Override
   void appendFollowUpCommand(long key, Intent intent, RecordValue value);
 
   void reset();
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
index d55adc0..23aaa6f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
@@ -24,7 +24,7 @@ public final class Writers {
   /**
    * @return the writer, which is used by the processors to write (follow-up) commands
    */
-  public TypedCommandWriter command() {
+  public RestrictedTypedCommandWriter command() {
     return stream;
   }
 
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
index 185cd44..a6fa9a4 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
@@ -7,7 +7,9 @@
  */
 package io.camunda.zeebe.streamprocessor;
 
+import io.camunda.zeebe.engine.api.LegacyTask;
 import io.camunda.zeebe.engine.api.ProcessingScheduleService;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.scheduler.ActorControl;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import java.time.Duration;
@@ -16,9 +18,12 @@ import java.util.function.BiConsumer;
 public class ProcessingScheduleServiceImpl implements ProcessingScheduleService {
 
   private final ActorControl actorControl;
+  private final TypedCommandWriter commandWriter;
 
-  public ProcessingScheduleServiceImpl(final ActorControl actorControl) {
+  public ProcessingScheduleServiceImpl(
+      final ActorControl actorControl, final TypedCommandWriter typedCommandWriter) {
     this.actorControl = actorControl;
+    commandWriter = typedCommandWriter;
   }
 
   @Override
@@ -32,6 +37,26 @@ public class ProcessingScheduleServiceImpl implements ProcessingScheduleService 
     scheduleOnActor(() -> actorControl.runOnCompletion(precedingTask, followUpTask));
   }
 
+  @Override
+  public <T> void runOnCompletion(
+      final ActorFuture<T> precedingTask, final LegacyTask followUpTask) {
+    runOnCompletion(
+        precedingTask,
+        (BiConsumer<T, Throwable>)
+            (ok, err) -> {
+              followUpTask.run(commandWriter, this);
+            });
+  }
+
+  @Override
+  public void runDelayed(final Duration delay, final LegacyTask followUpTask) {
+    runDelayed(
+        delay,
+        () -> {
+          followUpTask.run(commandWriter, this);
+        });
+  }
+
   private void scheduleOnActor(final Runnable task) {
     actorControl.submit(task);
   }
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
index c690449..026ab73 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
@@ -65,7 +65,8 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
 
   public StreamProcessorContext actor(final ActorControl actor) {
     this.actor = actor;
-    processingScheduleService = new ProcessingScheduleServiceImpl(actor);
+    // TODO clean this up as soon as legacy
+    processingScheduleService = new ProcessingScheduleServiceImpl(actor, streamWriterProxy);
     return this;
   }
 

diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnElementProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
index 1a13d1a..55d6e2d 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
@@ -224,28 +224,4 @@ public interface BpmnElementProcessor<T extends ExecutableFlowElement> {
   default void onTerminated(final T element, final BpmnElementContext context) {
     throw new UnsupportedOperationException(""This method is replaced by onTerminate"");
   }
-
-  /**
-   * An event subscription of the element is triggered. Leave the element if it waited for this
-   * event to continue. Terminate the element if the event belongs to an interrupting boundary
-   * event. Or, continue with the boundary event if it is a non-interrupting one.
-   *
-   * <p>Possible actions:
-   *
-   * <ul>
-   *   <li>activate the triggered boundary event - if any
-   * </ul>
-   *
-   * Next step: completing or terminating.
-   *
-   * @param element the instance of the BPMN element that is executed
-   * @param context process instance-related data of the element that is executed
-   * @deprecated handle the event on the caller side and continue with the element by write a
-   *     activate/complete/terminate command
-   */
-  @Deprecated // todo (#6202): remove method
-  default void onEventOccurred(final T element, final BpmnElementContext context) {
-    throw new UnsupportedOperationException(
-        ""event-occurred is deprecated. Instead, handle the event on the caller side. Continue with the element by writing a activate/complete/terminate command."");
-  }
 }
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnStreamProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnStreamProcessor.java
index f131bbc..6ef027f 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnStreamProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/BpmnStreamProcessor.java
@@ -238,9 +238,6 @@ public final class BpmnStreamProcessor implements TypedRecordProcessor<ProcessIn
       case ELEMENT_ACTIVATED:
         processor.onActivated(element, context);
         break;
-      case EVENT_OCCURRED:
-        processor.onEventOccurred(element, context);
-        break;
       case ELEMENT_COMPLETING:
         processor.onCompleting(element, context);
         break;
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceLifecycle.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceLifecycle.java
index a59c699..71ea30d 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceLifecycle.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceLifecycle.java
@@ -13,7 +13,6 @@ import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_COMP
 import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_COMPLETING;
 import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_TERMINATED;
 import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_TERMINATING;
-import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.EVENT_OCCURRED;
 import static io.zeebe.protocol.record.intent.ProcessInstanceIntent.SEQUENCE_FLOW_TAKEN;
 
 import io.zeebe.protocol.record.intent.ProcessInstanceIntent;
@@ -50,7 +49,6 @@ public final class ProcessInstanceLifecycle {
     TRANSITION_RULES.put(ELEMENT_TERMINATING, EnumSet.of(ELEMENT_TERMINATED));
     TRANSITION_RULES.put(ELEMENT_COMPLETED, EnumSet.of(SEQUENCE_FLOW_TAKEN));
     TRANSITION_RULES.put(ELEMENT_TERMINATED, Collections.emptySet());
-    TRANSITION_RULES.put(EVENT_OCCURRED, EnumSet.of(ELEMENT_COMPLETING, ELEMENT_TERMINATING));
     TRANSITION_RULES.put(SEQUENCE_FLOW_TAKEN, EnumSet.of(ELEMENT_ACTIVATING));
   }
 
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStateTransitionGuard.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStateTransitionGuard.java
index 1e601df..f662a6a 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStateTransitionGuard.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/ProcessInstanceStateTransitionGuard.java
@@ -108,12 +108,6 @@ public final class ProcessInstanceStateTransitionGuard {
       case ELEMENT_TERMINATED:
         return hasElementInstanceWithState(context, context.getIntent());
 
-      case EVENT_OCCURRED:
-        if (context.getBpmnElementType() == BpmnElementType.START_EVENT) {
-          return Either.right(null);
-        }
-        return hasElementInstanceWithState(context, ProcessInstanceIntent.ELEMENT_ACTIVATED);
-
       case ACTIVATE_ELEMENT:
       case SEQUENCE_FLOW_TAKEN:
         return hasActiveFlowScopeInstance(context);
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java
index 9cd9d03..07f2287 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java
@@ -100,12 +100,6 @@ public final class CallActivityProcessor
   }
 
   @Override
-  public void onEventOccurred(
-      final ExecutableCallActivity element, final BpmnElementContext context) {
-    eventSubscriptionBehavior.triggerBoundaryEvent(element, context);
-  }
-
-  @Override
   public void onChildActivating(
       final ExecutableCallActivity element,
       final BpmnElementContext flowScopeContext,
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/EventSubProcessProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/EventSubProcessProcessor.java
index 127385c..d92063b 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/EventSubProcessProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/container/EventSubProcessProcessor.java
@@ -124,13 +124,6 @@ public final class EventSubProcessProcessor
   }
 
   @Override
-  public void onEventOccurred(
-      final ExecutableFlowElementContainer element, final BpmnElementContext context) {
-
-    eventSubscriptionBehavior.triggerBoundaryEvent(element, context);
-  }
-
-  @Override
   public void onChildActivating(
       final ExecutableFlowElementContainer element,
       final BpmnElementContext flowScopeContext,
diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/sequenceflow/SequenceFlowProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/sequenceflow/SequenceFlowProcessor.java
index fb2ebfb..9138872 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/sequenceflow/SequenceFlowProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/sequenceflow/SequenceFlowProcessor.java
@@ -78,12 +78,6 @@ public final class SequenceFlowProcessor implements BpmnElementProcessor<Executa
     throw new BpmnProcessingException(context, UNSUPPORTED_OPERATION_MESSAGE);
   }
 
-  @Override
-  public void onEventOccurred(
-      final ExecutableSequenceFlow element, final BpmnElementContext context) {
-    throw new BpmnProcessingException(context, UNSUPPORTED_OPERATION_MESSAGE);
-  }
-
   private void onSequenceFlowTaken(
       final ExecutableSequenceFlow element, final BpmnElementContext context) {
 
diff --git a/engine/src/main/java/io/zeebe/engine/processing/common/EventHandle.java b/engine/src/main/java/io/zeebe/engine/processing/common/EventHandle.java
index e31b191..aa9a79f 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/common/EventHandle.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/common/EventHandle.java
@@ -31,7 +31,6 @@ public final class EventHandle {
   private static final DirectBuffer NO_VARIABLES = new UnsafeBuffer();
 
   private final ProcessInstanceRecord recordForPICreation = new ProcessInstanceRecord();
-  private final ProcessInstanceRecord eventOccurredRecord = new ProcessInstanceRecord();
   private final ProcessEventRecord processEventRecord = new ProcessEventRecord();
 
   private final KeyGenerator keyGenerator;
@@ -122,21 +121,6 @@ public final class EventHandle {
         eventTriggerBehavior.activateTriggeredEvent(
             catchEvent, elementRecord.getFlowScopeKey(), elementRecord, variables);
       }
-
-    } else {
-      // --- legacy behavior ---
-      if (catchEvent.getFlowScope().getElementType() == BpmnElementType.EVENT_SUB_PROCESS) {
-        final var executableStartEvent = (ExecutableStartEvent) catchEvent;
-
-        eventTriggerBehavior.triggerEventSubProcess(
-            executableStartEvent, eventScopeKey, elementRecord);
-      } else {
-        eventOccurredRecord.wrap(elementRecord);
-
-        // TODO (saig0): don't write EVENT_OCCURRED when processors are migrated (#6187/#6196)
-        stateWriter.appendFollowUpEvent(
-            eventScopeKey, ProcessInstanceIntent.EVENT_OCCURRED, eventOccurredRecord);
-      }
     }
   }
 
diff --git a/engine/src/test/java/io/zeebe/engine/processing/bpmn/error/ErrorCatchEventTest.java b/engine/src/test/java/io/zeebe/engine/processing/bpmn/error/ErrorCatchEventTest.java
index 45e2a26..2d0f027 100644
--- a/engine/src/test/java/io/zeebe/engine/processing/bpmn/error/ErrorCatchEventTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processing/bpmn/error/ErrorCatchEventTest.java
@@ -42,9 +42,6 @@ public final class ErrorCatchEventTest {
   public BpmnModelInstance process;
 
   @Parameter(2)
-  public String expectedEventOccurredElementId;
-
-  @Parameter(3)
   public String expectedActivatedElement;
 
   @Rule
@@ -62,7 +59,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error-boundary-event"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        TASK_ELEMENT_ID,
         ""error-boundary-event""
       },
       {
@@ -79,7 +75,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error-boundary-event"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        ""subprocess"",
         ""error-boundary-event""
       },
       {
@@ -97,7 +92,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error-boundary-event"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        ""subprocess"",
         ""error-boundary-event""
       },
       {
@@ -112,7 +106,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error-boundary-event"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        TASK_ELEMENT_ID,
         ""error-boundary-event""
       },
       {
@@ -129,7 +122,6 @@ public final class ErrorCatchEventTest {
             .serviceTask(TASK_ELEMENT_ID, t -> t.zeebeJobType(JOB_TYPE))
             .endEvent()
             .done(),
-        ""error-start-event"",
         ""error-event-subprocess""
       },
       {
@@ -147,7 +139,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error-boundary-event-on-subprocess"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        TASK_ELEMENT_ID,
         ""error-boundary-event""
       },
       {
@@ -162,7 +153,6 @@ public final class ErrorCatchEventTest {
             .error(ERROR_CODE)
             .endEvent()
             .done(),
-        TASK_ELEMENT_ID,
         ""error-boundary-event""
       },
       {
@@ -186,7 +176,6 @@ public final class ErrorCatchEventTest {
             .boundaryEvent(""error"", b -> b.error(ERROR_CODE))
             .endEvent()
             .done(),
-        ""error-start-event"",
         ""error-event-subprocess""
       },
     };
diff --git a/engine/src/test/java/io/zeebe/engine/processing/message/MessageCorrelationTest.java b/engine/src/test/java/io/zeebe/engine/processing/message/MessageCorrelationTest.java
index d1c356b..98536d3 100755
--- a/engine/src/test/java/io/zeebe/engine/processing/message/MessageCorrelationTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processing/message/MessageCorrelationTest.java
@@ -321,7 +321,7 @@ public final class MessageCorrelationTest {
         .publish();
 
     // then
-    final Record<ProcessInstanceRecordValue> catchEventOccurred1 =
+    final Record<ProcessInstanceRecordValue> catchEvent1Completed =
         RecordingExporter.processInstanceRecords()
             .withProcessInstanceKey(processInstanceKey1)
             .withElementType(BpmnElementType.INTERMEDIATE_CATCH_EVENT)
@@ -329,10 +329,10 @@ public final class MessageCorrelationTest {
             .getFirst();
     final Map<String, String> variables1 =
         ProcessInstances.getCurrentVariables(
-            processInstanceKey1, catchEventOccurred1.getPosition());
+            processInstanceKey1, catchEvent1Completed.getPosition());
     assertThat(variables1).containsOnly(entry(""key"", ""\""order-123\""""), entry(""nr"", ""1""));
 
-    final Record<ProcessInstanceRecordValue> catchEventOccurred2 =
+    final Record<ProcessInstanceRecordValue> catchEvent2Completed =
         RecordingExporter.processInstanceRecords()
             .withProcessInstanceKey(processInstanceKey2)
             .withElementType(BpmnElementType.INTERMEDIATE_CATCH_EVENT)
@@ -340,7 +340,7 @@ public final class MessageCorrelationTest {
             .getFirst();
     final Map<String, String> variables2 =
         ProcessInstances.getCurrentVariables(
-            processInstanceKey2, catchEventOccurred2.getPosition());
+            processInstanceKey2, catchEvent2Completed.getPosition());
     assertThat(variables2).containsOnly(entry(""key"", ""\""order-456\""""), entry(""nr"", ""2""));
   }
 
diff --git a/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java b/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java
index 03ef8e6..d68467b 100644
--- a/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processing/streamprocessor/BlacklistInstanceTest.java
@@ -167,7 +167,6 @@ public final class BlacklistInstanceTest {
       {ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.ELEMENT_COMPLETED, true},
       {ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.ELEMENT_TERMINATING, true},
       {ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.ELEMENT_TERMINATED, true},
-      {ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.EVENT_OCCURRED, true},
 
       // USER COMMAND
       {ValueType.PROCESS_INSTANCE, ProcessInstanceIntent.CANCEL, false},

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/Broker.java b/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
index fe4e42d..37c7066 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
@@ -7,20 +7,14 @@
  */
 package io.camunda.zeebe.broker;
 
-import io.atomix.cluster.AtomixCluster;
 import io.camunda.zeebe.broker.bootstrap.BrokerContext;
 import io.camunda.zeebe.broker.bootstrap.BrokerStartupContextImpl;
 import io.camunda.zeebe.broker.bootstrap.BrokerStartupProcess;
-import io.camunda.zeebe.broker.clustering.ClusterServices;
 import io.camunda.zeebe.broker.exporter.repo.ExporterLoadException;
 import io.camunda.zeebe.broker.exporter.repo.ExporterRepository;
-import io.camunda.zeebe.broker.partitioning.PartitionManager;
-import io.camunda.zeebe.broker.system.EmbeddedGatewayService;
 import io.camunda.zeebe.broker.system.SystemContext;
 import io.camunda.zeebe.broker.system.configuration.BrokerCfg;
-import io.camunda.zeebe.broker.system.management.BrokerAdminService;
 import io.camunda.zeebe.broker.system.monitoring.BrokerHealthCheckService;
-import io.camunda.zeebe.broker.system.monitoring.DiskSpaceUsageMonitor;
 import io.camunda.zeebe.protocol.impl.encoding.BrokerInfo;
 import io.camunda.zeebe.util.LogUtil;
 import io.camunda.zeebe.util.VersionUtil;
@@ -184,35 +178,15 @@ public final class Broker implements AutoCloseable {
   }
 
   // only used for tests
-  public EmbeddedGatewayService getEmbeddedGatewayService() {
-    return brokerContext.getEmbeddedGatewayService();
-  }
-
-  public AtomixCluster getAtomixCluster() {
-    return brokerContext.getAtomixCluster();
-  }
-
-  public ClusterServices getClusterServices() {
-    return brokerContext.getClusterServices();
-  }
-
-  public DiskSpaceUsageMonitor getDiskSpaceUsageMonitor() {
-    return brokerContext.getDiskSpaceUsageMonitor();
-  }
-
-  public BrokerAdminService getBrokerAdminService() {
-    return brokerContext.getBrokerAdminService();
+  public BrokerContext getBrokerContext() {
+    return brokerContext;
   }
 
+  // only used for tests
   public SystemContext getSystemContext() {
     return systemContext;
   }
 
-  public PartitionManager getPartitionManager() {
-    return brokerContext.getPartitionManager();
-  }
-  // only used for tests
-
   /**
    * Temporary helper object. This object is needed during the transition of broker startup/shutdown
    * steps to the new concept. Afterwards, the expectation is that this object will merge with the
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/system/partitions/BrokerSnapshotTest.java b/broker/src/test/java/io/camunda/zeebe/broker/system/partitions/BrokerSnapshotTest.java
index bda5170..1accbc1 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/system/partitions/BrokerSnapshotTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/system/partitions/BrokerSnapshotTest.java
@@ -45,11 +45,12 @@ public class BrokerSnapshotTest {
         (RaftPartition)
             brokerRule
                 .getBroker()
+                .getBrokerContext()
                 .getPartitionManager()
                 .getPartitionGroup()
                 .getPartition(PartitionId.from(PartitionManagerImpl.GROUP_NAME, PARTITION_ID));
     journalReader = raftPartition.getServer().openReader();
-    brokerAdminService = brokerRule.getBroker().getBrokerAdminService();
+    brokerAdminService = brokerRule.getBroker().getBrokerContext().getBrokerAdminService();
 
     final String contactPoint = NetUtil.toSocketAddressString(brokerRule.getGatewayAddress());
     final ZeebeClientBuilder zeebeClientBuilder =
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/test/EmbeddedBrokerRule.java b/broker/src/test/java/io/camunda/zeebe/broker/test/EmbeddedBrokerRule.java
index e98e7d2..a831bfe 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/test/EmbeddedBrokerRule.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/test/EmbeddedBrokerRule.java
@@ -173,11 +173,11 @@ public final class EmbeddedBrokerRule extends ExternalResource {
   }
 
   public ClusterServices getClusterServices() {
-    return broker.getClusterServices();
+    return broker.getBrokerContext().getClusterServices();
   }
 
   public AtomixCluster getAtomixCluster() {
-    return broker.getAtomixCluster();
+    return broker.getBrokerContext().getAtomixCluster();
   }
 
   public InetSocketAddress getGatewayAddress() {
@@ -245,7 +245,8 @@ public final class EmbeddedBrokerRule extends ExternalResource {
       Thread.currentThread().interrupt();
     }
 
-    final EmbeddedGatewayService embeddedGatewayService = broker.getEmbeddedGatewayService();
+    final EmbeddedGatewayService embeddedGatewayService =
+        broker.getBrokerContext().getEmbeddedGatewayService();
     if (embeddedGatewayService != null) {
       final BrokerClient brokerClient = embeddedGatewayService.get().getBrokerClient();
 
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ClusteringRule.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ClusteringRule.java
index 890b596..8561cf1 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ClusteringRule.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ClusteringRule.java
@@ -29,6 +29,7 @@ import io.atomix.utils.net.Address;
 import io.camunda.zeebe.broker.Broker;
 import io.camunda.zeebe.broker.PartitionListener;
 import io.camunda.zeebe.broker.SpringBrokerBridge;
+import io.camunda.zeebe.broker.bootstrap.BrokerContext;
 import io.camunda.zeebe.broker.exporter.stream.ExporterDirectorContext;
 import io.camunda.zeebe.broker.partitioning.PartitionManagerImpl;
 import io.camunda.zeebe.broker.system.SystemContext;
@@ -602,11 +603,11 @@ public final class ClusteringRule extends ExternalResource {
   }
 
   public void stepDown(final Broker broker, final int partitionId) {
-    final var atomix = broker.getClusterServices();
+    final var atomix = broker.getBrokerContext().getClusterServices();
     final MemberId nodeId = atomix.getMembershipService().getLocalMember().id();
 
     final var raftPartition =
-        broker.getPartitionManager().getPartitionGroup().getPartitions().stream()
+        broker.getBrokerContext().getPartitionManager().getPartitionGroup().getPartitions().stream()
             .filter(partition -> partition.members().contains(nodeId))
             .filter(partition -> partition.id().id() == partitionId)
             .map(RaftPartition.class::cast)
@@ -617,14 +618,14 @@ public final class ClusteringRule extends ExternalResource {
   }
 
   public void disconnect(final Broker broker) {
-    final var atomix = broker.getAtomixCluster();
+    final var atomix = broker.getBrokerContext().getAtomixCluster();
 
     ((NettyUnicastService) atomix.getUnicastService()).stop().join();
     ((NettyMessagingService) atomix.getMessagingService()).stop().join();
   }
 
   public void connect(final Broker broker) {
-    final var atomix = broker.getAtomixCluster();
+    final var atomix = broker.getBrokerContext().getAtomixCluster();
 
     ((NettyUnicastService) atomix.getUnicastService()).start().join();
     ((NettyMessagingService) atomix.getMessagingService()).start().join();
@@ -666,11 +667,11 @@ public final class ClusteringRule extends ExternalResource {
     }
 
     final var broker = brokers.get(expectedLeader);
-    final var atomix = broker.getClusterServices();
+    final var atomix = broker.getBrokerContext().getClusterServices();
     final MemberId nodeId = atomix.getMembershipService().getLocalMember().id();
 
     final var raftPartition =
-        broker.getPartitionManager().getPartitionGroup().getPartitions().stream()
+        broker.getBrokerContext().getPartitionManager().getPartitionGroup().getPartitions().stream()
             .filter(partition -> partition.members().contains(nodeId))
             .filter(partition -> partition.id().id() == START_PARTITION_ID)
             .map(RaftPartition.class::cast)
@@ -775,14 +776,15 @@ public final class ClusteringRule extends ExternalResource {
   }
 
   public void takeSnapshot(final Broker broker) {
-    broker.getBrokerAdminService().takeSnapshot();
+    broker.getBrokerContext().getBrokerAdminService().takeSnapshot();
   }
 
   public void triggerAndWaitForSnapshots() {
     // Ensure that the exporter positions are distributed to the followers
     getClock().addTime(ExporterDirectorContext.DEFAULT_DISTRIBUTION_INTERVAL);
     getBrokers().stream()
-        .map(Broker::getBrokerAdminService)
+        .map(Broker::getBrokerContext)
+        .map(BrokerContext::getBrokerAdminService)
         .forEach(BrokerAdminService::takeSnapshot);
 
     getBrokers()
@@ -794,7 +796,7 @@ public final class ClusteringRule extends ExternalResource {
                     .until(
                         () -> {
                           // Trigger snapshot again in case snapshot is not already taken
-                          broker.getBrokerAdminService().takeSnapshot();
+                          broker.getBrokerContext().getBrokerAdminService().takeSnapshot();
                           return getSnapshot(broker);
                         },
                         Optional::isPresent));
@@ -831,7 +833,7 @@ public final class ClusteringRule extends ExternalResource {
 
   private Optional<SnapshotId> getSnapshot(final Broker broker, final int partitionId) {
 
-    final var partitions = broker.getBrokerAdminService().getPartitionStatus();
+    final var partitions = broker.getBrokerContext().getBrokerAdminService().getPartitionStatus();
     final var partitionStatus = partitions.get(partitionId);
 
     return Optional.ofNullable(partitionStatus)
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceMonitoringFailOverTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceMonitoringFailOverTest.java
index f07961c..d46636b 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceMonitoringFailOverTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceMonitoringFailOverTest.java
@@ -88,6 +88,7 @@ public class DiskSpaceMonitoringFailOverTest {
             () ->
                 clusteringRule
                     .getBroker(newLeaderId)
+                    .getBrokerContext()
                     .getBrokerAdminService()
                     .getPartitionStatus()
                     .get(1)
@@ -96,7 +97,7 @@ public class DiskSpaceMonitoringFailOverTest {
   }
 
   private void waitUntilDiskSpaceNotAvailable(final Broker broker) throws InterruptedException {
-    final var diskSpaceMonitor = broker.getDiskSpaceUsageMonitor();
+    final var diskSpaceMonitor = broker.getBrokerContext().getDiskSpaceUsageMonitor();
 
     final CountDownLatch diskSpaceNotAvailable = new CountDownLatch(1);
     diskSpaceMonitor.addDiskUsageListener(
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryClusteredTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryClusteredTest.java
index 0a02a27..6e93cf9 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryClusteredTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryClusteredTest.java
@@ -165,7 +165,7 @@ public class DiskSpaceRecoveryClusteredTest {
   }
 
   private void waitUntilDiskSpaceNotAvailable(final Broker broker) throws InterruptedException {
-    final var diskSpaceMonitor = broker.getDiskSpaceUsageMonitor();
+    final var diskSpaceMonitor = broker.getBrokerContext().getDiskSpaceUsageMonitor();
 
     final CountDownLatch diskSpaceNotAvailable = new CountDownLatch(1);
     diskSpaceMonitor.addDiskUsageListener(
@@ -188,7 +188,7 @@ public class DiskSpaceRecoveryClusteredTest {
   }
 
   private void waitUntilDiskSpaceAvailable(final Broker broker) throws InterruptedException {
-    final var diskSpaceMonitor = broker.getDiskSpaceUsageMonitor();
+    final var diskSpaceMonitor = broker.getBrokerContext().getDiskSpaceUsageMonitor();
     final CountDownLatch diskSpaceAvailableAgain = new CountDownLatch(1);
     diskSpaceMonitor.addDiskUsageListener(
         new DiskSpaceUsageListener() {
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryTest.java
index 9cef5a0..a487729 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryTest.java
@@ -192,7 +192,8 @@ public class DiskSpaceRecoveryTest {
   }
 
   private void waitUntilDiskSpaceNotAvailable() throws InterruptedException {
-    final var diskSpaceMonitor = embeddedBrokerRule.getBroker().getDiskSpaceUsageMonitor();
+    final var diskSpaceMonitor =
+        embeddedBrokerRule.getBroker().getBrokerContext().getDiskSpaceUsageMonitor();
 
     final CountDownLatch diskSpaceNotAvailable = new CountDownLatch(1);
     diskSpaceMonitor.addDiskUsageListener(
@@ -215,7 +216,8 @@ public class DiskSpaceRecoveryTest {
   }
 
   private void waitUntilDiskSpaceAvailable() throws InterruptedException {
-    final var diskSpaceMonitor = embeddedBrokerRule.getBroker().getDiskSpaceUsageMonitor();
+    final var diskSpaceMonitor =
+        embeddedBrokerRule.getBroker().getBrokerContext().getDiskSpaceUsageMonitor();
     final CountDownLatch diskSpaceAvailableAgain = new CountDownLatch(1);
     diskSpaceMonitor.addDiskUsageListener(
         new DiskSpaceUsageListener() {
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/HealthMonitoringTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/HealthMonitoringTest.java
index 2d1e4f0..58f6f16 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/HealthMonitoringTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/HealthMonitoringTest.java
@@ -48,6 +48,7 @@ public class HealthMonitoringTest {
     final var raftPartition =
         (RaftPartition)
             leader
+                .getBrokerContext()
                 .getPartitionManager()
                 .getPartitionGroup()
                 .getPartition(
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceClusterTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceClusterTest.java
index 468f83c..7ff03be 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceClusterTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceClusterTest.java
@@ -11,6 +11,7 @@ import static org.assertj.core.api.Assertions.assertThat;
 
 import io.atomix.raft.RaftServer.Role;
 import io.camunda.zeebe.broker.Broker;
+import io.camunda.zeebe.broker.bootstrap.BrokerContext;
 import io.camunda.zeebe.broker.system.management.BrokerAdminService;
 import io.camunda.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;
 import io.camunda.zeebe.it.clustering.ClusteringRule;
@@ -48,7 +49,7 @@ public class BrokerAdminServiceClusterTest {
   @Before
   public void before() {
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
   }
 
   @Test
@@ -61,7 +62,8 @@ public class BrokerAdminServiceClusterTest {
     // when
     final var followerStatus =
         followers.stream()
-            .map(Broker::getBrokerAdminService)
+            .map(Broker::getBrokerContext)
+            .map(BrokerContext::getBrokerAdminService)
             .map(BrokerAdminService::getPartitionStatus)
             .map(status -> status.get(1));
 
@@ -94,7 +96,8 @@ public class BrokerAdminServiceClusterTest {
 
     // then
     clusteringRule.getBrokers().stream()
-        .map(Broker::getBrokerAdminService)
+        .map(Broker::getBrokerContext)
+        .map(BrokerContext::getBrokerAdminService)
         .forEach(this::assertThatStatusContainsProcessedPositionInSnapshot);
   }
 
@@ -102,7 +105,8 @@ public class BrokerAdminServiceClusterTest {
   public void shouldPauseAfterLeaderChange() {
     // given
     clusteringRule.getBrokers().stream()
-        .map(Broker::getBrokerAdminService)
+        .map(Broker::getBrokerContext)
+        .map(BrokerContext::getBrokerAdminService)
         .forEach(BrokerAdminService::pauseStreamProcessing);
 
     // when
@@ -113,6 +117,7 @@ public class BrokerAdminServiceClusterTest {
     final var newLeaderAdminService =
         clusteringRule
             .getBroker(clusteringRule.getLeaderForPartition(1).getNodeId())
+            .getBrokerContext()
             .getBrokerAdminService();
     assertStreamProcessorPhase(newLeaderAdminService, Phase.PAUSED);
   }
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceTest.java
index 5160b50..2185329 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceTest.java
@@ -41,7 +41,7 @@ public class BrokerAdminServiceTest {
   @Before
   public void before() {
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
   }
 
   @Test
@@ -144,7 +144,7 @@ public class BrokerAdminServiceTest {
 
     // then
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
     assertStreamProcessorPhase(leaderAdminService, Phase.PAUSED);
   }
 
@@ -161,7 +161,7 @@ public class BrokerAdminServiceTest {
 
     // then
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
     assertStreamProcessorPhase(leaderAdminService, Phase.PROCESSING);
   }
 
@@ -176,7 +176,7 @@ public class BrokerAdminServiceTest {
 
     // then
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
     assertExporterPhase(leaderAdminService, ExporterPhase.PAUSED);
   }
 
@@ -193,7 +193,7 @@ public class BrokerAdminServiceTest {
 
     // then
     leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    leaderAdminService = leader.getBrokerAdminService();
+    leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
     assertExporterPhase(leaderAdminService, ExporterPhase.EXPORTING);
   }
 
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceWithOutExporterTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceWithOutExporterTest.java
index d6c8ab3..4582ad2 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceWithOutExporterTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/system/BrokerAdminServiceWithOutExporterTest.java
@@ -30,7 +30,7 @@ public class BrokerAdminServiceWithOutExporterTest {
     // given
     final var leader =
         clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());
-    final var leaderAdminService = leader.getBrokerAdminService();
+    final var leaderAdminService = leader.getBrokerContext().getBrokerAdminService();
     // when there are no exporters configured
     // then
     final var partitionStatus = leaderAdminService.getPartitionStatus().get(1);
diff --git a/test/src/main/java/io/camunda/zeebe/test/EmbeddedBrokerRule.java b/test/src/main/java/io/camunda/zeebe/test/EmbeddedBrokerRule.java
index 36bc0bf..d332201 100644
--- a/test/src/main/java/io/camunda/zeebe/test/EmbeddedBrokerRule.java
+++ b/test/src/main/java/io/camunda/zeebe/test/EmbeddedBrokerRule.java
@@ -240,7 +240,8 @@ public class EmbeddedBrokerRule extends ExternalResource {
       Thread.currentThread().interrupt();
     }
 
-    final EmbeddedGatewayService embeddedGatewayService = broker.getEmbeddedGatewayService();
+    final EmbeddedGatewayService embeddedGatewayService =
+        broker.getBrokerContext().getEmbeddedGatewayService();
     if (embeddedGatewayService != null) {
       final BrokerClient brokerClient = embeddedGatewayService.get().getBrokerClient();
 

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index 8bdaac7..91f1b41 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -27,6 +27,7 @@ import io.camunda.zeebe.protocol.impl.record.value.error.ErrorRecord;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.ErrorIntent;
 import io.camunda.zeebe.protocol.record.value.ProcessInstanceRelated;
+import java.util.Objects;
 import java.util.function.Supplier;
 import org.slf4j.Logger;
 
@@ -162,17 +163,18 @@ public class Engine implements RecordProcessor<EngineContext> {
     private ProcessingResultBuilder resultBuilder;
 
     private void setResultBuilder(final ProcessingResultBuilder resultBuilder) {
-      this.resultBuilder = resultBuilder;
+      this.resultBuilder = Objects.requireNonNull(resultBuilder);
     }
 
     private void unsetResultBuilder() {
-      /* TODO think about what we want to do here. Right now it is rest to null, which means NPEs
-      if accessed outside scope. We could also set a NOOP implementation, or one that logs warnings, etc.*/
       resultBuilder = null;
     }
 
     @Override
     public ProcessingResultBuilder get() {
+      if (resultBuilder == null) {
+        throw new IllegalStateException(""Attempt to retrieve resultBuilder out of scope."");
+      }
       return resultBuilder;
     }
   }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index 9645928..25753b8 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -31,7 +31,7 @@ import java.util.Objects;
 import java.util.function.Supplier;
 import org.slf4j.Logger;
 
-public class Engine implements RecordProcessor<EngineContext> {
+public class Engine implements RecordProcessor {
 
   private static final Logger LOG = Loggers.PROCESSOR_LOGGER;
   private static final String ERROR_MESSAGE_ON_EVENT_FAILED_SKIP_EVENT =
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessor.java
index 7852c61..f22409f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessor.java
@@ -7,18 +7,20 @@
  */
 package io.camunda.zeebe.engine.api;
 
+import io.camunda.zeebe.engine.RecordProcessorContext;
+
 /**
  * Interface for record processors. A record processor is responsible for handling a single record.
  * (The class {@code StreamProcessor} in turn is responsible for handling a stream of records.
  */
-public interface RecordProcessor<CONTEXT> {
+public interface RecordProcessor {
 
   /**
    * Called by platform to initialize the processor
    *
    * @param recordProcessorContext context object to initialize the processor
    */
-  void init(CONTEXT recordProcessorContext);
+  void init(RecordProcessorContext recordProcessorContext);
 
   /**
    * Called by platform in order to replay a single record

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
index 24ca476..0bf684f 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
@@ -55,43 +55,6 @@ public final class StreamProcessorReprocessingTest {
     streamProcessorRule.withEventApplierFactory(state -> mockEventApplier);
   }
 
-  @Test
-  public void shouldCallOnPausedAfterOnRecovered() {
-    // given - bunch of records
-    IntStream.range(0, 5000)
-        .forEach(i -> streamProcessorRule.writeProcessInstanceEvent(ELEMENT_ACTIVATING, i));
-
-    streamProcessorRule.writeBatch(
-        RecordToWrite.event().processInstance(ELEMENT_ACTIVATING, PROCESS_INSTANCE_RECORD),
-        RecordToWrite.event()
-            .processInstance(ELEMENT_ACTIVATED, PROCESS_INSTANCE_RECORD)
-            .causedBy(0));
-
-    Awaitility.await()
-        .until(
-            () ->
-                streamProcessorRule
-                    .events()
-                    .onlyProcessInstanceRecords()
-                    .withIntent(ELEMENT_ACTIVATED),
-            StreamWrapper::exists);
-
-    // when
-    final var lifecycleAware = mock(StreamProcessorLifecycleAware.class);
-    final var streamProcessor =
-        streamProcessorRule.startTypedStreamProcessor(
-            (processors, context) -> processors.withListener(lifecycleAware));
-    streamProcessor.pauseProcessing();
-    streamProcessor.resumeProcessing();
-
-    // then
-    final InOrder inOrder = inOrder(lifecycleAware);
-    // reprocessing
-    inOrder.verify(lifecycleAware, TIMEOUT.times(1)).onRecovered(any());
-    inOrder.verify(lifecycleAware, TIMEOUT.times(1)).onPaused();
-    inOrder.verify(lifecycleAware, TIMEOUT.times(1)).onResumed();
-    inOrder.verifyNoMoreInteractions();
-  }
 
   @Test
   public void shouldCallOnPausedBeforeOnResumedNoMatterWhenResumedWasCalled() {

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandler.java b/broker/src/main/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandler.java
index 9f5e1c7..6f6ca10 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandler.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandler.java
@@ -175,14 +175,13 @@ public final class BackupApiRequestHandler
         backups.stream()
             .map(
                 backup ->
-                    new BackupListResponse.BackupStatus()
-                        .setStatus(encodeStatusCode(backup.statusCode()))
-                        .setBackupId(backup.id().checkpointId())
-                        .setPartitionId(backup.id().partitionId())
-                        .setBrokerVersion(
-                            backup.descriptor().map(BackupDescriptor::brokerVersion).orElse(""""))
-                        .setCreatedAt(backup.created().map(Instant::toString).orElse(""""))
-                        .setFailureReason(backup.failureReason().orElse("""")))
+                    new BackupListResponse.BackupStatus(
+                        backup.id().checkpointId(),
+                        backup.id().partitionId(),
+                        encodeStatusCode(backup.statusCode()),
+                        backup.failureReason().orElse(""""),
+                        backup.descriptor().map(BackupDescriptor::brokerVersion).orElse(""""),
+                        backup.created().map(Instant::toString).orElse("""")))
             .toList();
     return new BackupListResponse(statuses);
   }
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java b/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
index 49b6537..fbf6f1c 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
@@ -299,13 +299,8 @@ final class BackupApiRequestHandlerTest {
     // then
     assertThat(responseFuture).succeedsWithin(Duration.ofMillis(100)).matches(Either::isRight);
     final var expected =
-        new BackupListResponse.BackupStatus()
-            .setBackupId(2)
-            .setPartitionId(1)
-            .setStatus(BackupStatusCode.COMPLETED)
-            .setFailureReason("""")
-            .setCreatedAt(createdAt.toString())
-            .setBrokerVersion(""test"");
+        new BackupListResponse.BackupStatus(
+            2, 1, BackupStatusCode.COMPLETED, """", ""test"", createdAt.toString());
     assertThat(listResponse.getBackups()).containsExactly(expected);
   }
 
diff --git a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponse.java b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponse.java
index c42c8de..7bc62f7 100644
--- a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponse.java
+++ b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponse.java
@@ -31,10 +31,11 @@ public class BackupListResponse implements BufferReader, BufferWriter {
   private final BackupListResponseEncoder bodyEncoder = new BackupListResponseEncoder();
   private final BackupListResponseDecoder bodyDecoder = new BackupListResponseDecoder();
 
-  private List<BackupStatus> backups;
+  // Consists of backup statuses with encoded string
+  private List<InternalBackupStatus> internalBackups;
 
   public BackupListResponse(final List<BackupStatus> statuses) {
-    backups = statuses;
+    internalBackups = statuses.stream().map(InternalBackupStatus::new).toList();
   }
 
   public BackupListResponse(final DirectBuffer buffer, final int offset, final int length) {
@@ -44,48 +45,33 @@ public class BackupListResponse implements BufferReader, BufferWriter {
   @Override
   public void wrap(final DirectBuffer buffer, final int offset, final int length) {
     bodyDecoder.wrapAndApplyHeader(buffer, offset, headerDecoder);
-    backups = new ArrayList<>();
+    internalBackups = new ArrayList<>();
     for (final var backupsDecoder : bodyDecoder.backups()) {
-      final var backup =
-          new BackupStatus()
-              .setBackupId(backupsDecoder.backupId())
-              .setPartitionId(backupsDecoder.partitionId())
-              .setStatus(backupsDecoder.status());
 
-      backup.encodedFailureReason = new byte[backupsDecoder.failureReasonLength()];
-      backupsDecoder.getFailureReason(
-          backup.encodedFailureReason, 0, backup.encodedFailureReason.length);
-      backup.failureReason =
-          decodeString(
-              backup.encodedFailureReason, BackupsDecoder.failureReasonCharacterEncoding());
+      final byte[] encodedFailureReason = new byte[backupsDecoder.failureReasonLength()];
+      backupsDecoder.getFailureReason(encodedFailureReason, 0, encodedFailureReason.length);
 
-      backup.encodedCreatedAt = new byte[backupsDecoder.createdAtLength()];
-      backupsDecoder.getCreatedAt(backup.encodedCreatedAt, 0, backup.encodedCreatedAt.length);
-      backup.createdAt =
-          decodeString(backup.encodedCreatedAt, BackupsDecoder.createdAtCharacterEncoding());
+      final byte[] encodedCreatedAt = new byte[backupsDecoder.createdAtLength()];
+      backupsDecoder.getCreatedAt(encodedCreatedAt, 0, encodedCreatedAt.length);
 
-      backup.encodedBrokerVersion = new byte[backupsDecoder.brokerVersionLength()];
-      backupsDecoder.getBrokerVersion(
-          backup.encodedBrokerVersion, 0, backup.encodedBrokerVersion.length);
-      backup.brokerVersion =
-          decodeString(
-              backup.encodedBrokerVersion, BackupsDecoder.brokerVersionCharacterEncoding());
-      backups.add(backup);
-    }
-  }
+      final byte[] encodedBrokerVersion = new byte[backupsDecoder.brokerVersionLength()];
+      backupsDecoder.getBrokerVersion(encodedBrokerVersion, 0, encodedBrokerVersion.length);
 
-  private static String decodeString(final byte[] encodedSnapshotId, final String charsetName) {
-    try {
-      return new String(encodedSnapshotId, charsetName);
-    } catch (final UnsupportedEncodingException e) {
-      throw new RuntimeException(e);
+      internalBackups.add(
+          new InternalBackupStatus(
+              backupsDecoder.backupId(),
+              backupsDecoder.partitionId(),
+              backupsDecoder.status(),
+              encodedFailureReason,
+              encodedBrokerVersion,
+              encodedCreatedAt));
     }
   }
 
   @Override
   public int getLength() {
     final int backupsLength =
-        backups.stream()
+        internalBackups.stream()
             .map(
                 backup ->
                     BackupsEncoder.sbeBlockLength()
@@ -107,14 +93,14 @@ public class BackupListResponse implements BufferReader, BufferWriter {
   @Override
   public void write(final MutableDirectBuffer buffer, final int offset) {
     bodyEncoder.wrapAndApplyHeader(buffer, offset, headerEncoder);
-    final var backupsEncoder = bodyEncoder.backupsCount(backups.size());
-    backups.forEach(
+    final var backupsEncoder = bodyEncoder.backupsCount(internalBackups.size());
+    internalBackups.forEach(
         backup ->
             backupsEncoder
                 .next()
-                .backupId(backup.backupId)
-                .partitionId(backup.partitionId)
-                .status(backup.status)
+                .backupId(backup.status.backupId)
+                .partitionId(backup.status.partitionId)
+                .status(backup.status.status)
                 .putFailureReason(
                     backup.encodedFailureReason, 0, backup.encodedFailureReason.length)
                 .putCreatedAt(backup.encodedCreatedAt, 0, backup.encodedCreatedAt.length)
@@ -123,145 +109,64 @@ public class BackupListResponse implements BufferReader, BufferWriter {
   }
 
   public List<BackupStatus> getBackups() {
-    return backups;
+    return internalBackups.stream().map(s -> s.status).toList();
   }
 
-  public static class BackupStatus {
-    private long backupId;
-
-    private int partitionId;
-    private BackupStatusCode status;
-
-    private String failureReason = """";
-    private byte[] encodedFailureReason = EMPTY_BYTE_ARRAY;
-    private String brokerVersion = """";
-    private byte[] encodedBrokerVersion = EMPTY_BYTE_ARRAY;
-    private String createdAt = """";
-    private byte[] encodedCreatedAt = EMPTY_BYTE_ARRAY;
-
-    public long getBackupId() {
-      return backupId;
-    }
-
-    public BackupStatus setBackupId(final long backupId) {
-      this.backupId = backupId;
-      return this;
-    }
-
-    public int getPartitionId() {
-      return partitionId;
-    }
-
-    public BackupStatus setPartitionId(final int partitionId) {
-      this.partitionId = partitionId;
-      return this;
-    }
-
-    public BackupStatusCode getStatus() {
-      return status;
-    }
-
-    public BackupStatus setStatus(final BackupStatusCode status) {
+  public record BackupStatus(
+      long backupId,
+      int partitionId,
+      BackupStatusCode status,
+      String failureReason,
+      String brokerVersion,
+      String createdAt) {}
+
+  private static final class InternalBackupStatus {
+    private final BackupStatus status;
+    private final byte[] encodedFailureReason;
+    private final byte[] encodedBrokerVersion;
+    private final byte[] encodedCreatedAt;
+
+    InternalBackupStatus(final BackupStatus status) {
       this.status = status;
-      return this;
-    }
-
-    public String getFailureReason() {
-      return failureReason;
-    }
-
-    public BackupStatus setFailureReason(final String failureReason) {
-      this.failureReason = failureReason;
       encodedFailureReason =
-          encodeString(failureReason, BackupsEncoder.failureReasonCharacterEncoding());
-      return this;
-    }
-
-    public String getBrokerVersion() {
-      return brokerVersion;
-    }
-
-    public BackupStatus setBrokerVersion(final String brokerVersion) {
-      this.brokerVersion = brokerVersion;
+          encodeString(status.failureReason(), BackupsEncoder.failureReasonCharacterEncoding());
       encodedBrokerVersion =
-          encodeString(brokerVersion, BackupsEncoder.brokerVersionCharacterEncoding());
-      return this;
-    }
-
-    public String getCreatedAt() {
-      return createdAt;
-    }
-
-    public BackupStatus setCreatedAt(final String createdAt) {
-      this.createdAt = createdAt;
-      encodedCreatedAt = encodeString(createdAt, BackupsEncoder.createdAtCharacterEncoding());
-      return this;
-    }
-
-    @Override
-    public int hashCode() {
-      int result = (int) (backupId ^ (backupId >>> 32));
-      result = 31 * result + partitionId;
-      result = 31 * result + status.hashCode();
-      result = 31 * result + failureReason.hashCode();
-      result = 31 * result + brokerVersion.hashCode();
-      result = 31 * result + createdAt.hashCode();
-      return result;
-    }
-
-    @Override
-    public boolean equals(final Object o) {
-      if (this == o) {
-        return true;
-      }
-      if (o == null || getClass() != o.getClass()) {
-        return false;
-      }
-
-      final BackupStatus that = (BackupStatus) o;
-
-      if (backupId != that.backupId) {
-        return false;
-      }
-      if (partitionId != that.partitionId) {
-        return false;
-      }
-      if (status != that.status) {
-        return false;
-      }
-      if (!failureReason.equals(that.failureReason)) {
-        return false;
-      }
-      if (!brokerVersion.equals(that.brokerVersion)) {
-        return false;
+          encodeString(status.brokerVersion(), BackupsEncoder.brokerVersionCharacterEncoding());
+      encodedCreatedAt =
+          encodeString(status.createdAt(), BackupsEncoder.createdAtCharacterEncoding());
+    }
+
+    InternalBackupStatus(
+        final long backupId,
+        final int partitionId,
+        final BackupStatusCode statusCode,
+        final byte[] encodedFailureReason,
+        final byte[] encodedBrokerVersion,
+        final byte[] encodedCreatedAt) {
+      status =
+          new BackupStatus(
+              backupId,
+              partitionId,
+              statusCode,
+              decodeString(encodedFailureReason, BackupsDecoder.failureReasonCharacterEncoding()),
+              decodeString(encodedBrokerVersion, BackupsDecoder.brokerVersionCharacterEncoding()),
+              decodeString(encodedCreatedAt, BackupsDecoder.createdAtCharacterEncoding()));
+      this.encodedCreatedAt = encodedCreatedAt;
+      this.encodedBrokerVersion = encodedBrokerVersion;
+      this.encodedFailureReason = encodedFailureReason;
+    }
+
+    private static byte[] encodeString(final String value, final String charsetName) {
+      try {
+        return (null == value || value.isEmpty()) ? EMPTY_BYTE_ARRAY : value.getBytes(charsetName);
+      } catch (final UnsupportedEncodingException e) {
+        throw new RuntimeException(e);
       }
-      return createdAt.equals(that.createdAt);
     }
 
-    @Override
-    public String toString() {
-      return ""BackupStatus{""
-          + ""backupId=""
-          + backupId
-          + "", partitionId=""
-          + partitionId
-          + "", status=""
-          + status
-          + "", failureReason='""
-          + failureReason
-          + '\''
-          + "", brokerVersion='""
-          + brokerVersion
-          + '\''
-          + "", createdAt='""
-          + createdAt
-          + '\''
-          + '}';
-    }
-
-    private byte[] encodeString(final String value, final String charsetName) {
+    private static String decodeString(final byte[] encodedSnapshotId, final String charsetName) {
       try {
-        return (null == value || value.isEmpty()) ? EMPTY_BYTE_ARRAY : value.getBytes(charsetName);
+        return new String(encodedSnapshotId, charsetName);
       } catch (final UnsupportedEncodingException e) {
         throw new RuntimeException(e);
       }
diff --git a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponseTest.java b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponseTest.java
index 5318b82..d48608d 100644
--- a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponseTest.java
+++ b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/encoding/BackupListResponseTest.java
@@ -12,7 +12,6 @@ import static org.assertj.core.api.Assertions.assertThat;
 import io.camunda.zeebe.protocol.impl.encoding.BackupListResponse.BackupStatus;
 import io.camunda.zeebe.protocol.management.BackupStatusCode;
 import java.time.Instant;
-import java.util.ArrayList;
 import java.util.List;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.jupiter.api.Test;
@@ -22,23 +21,13 @@ class BackupListResponseTest {
   @Test
   void shouldEncodeAndDecodeBackupListResponse() {
     // given
-    final List<BackupStatus> backups = new ArrayList<>();
-    backups.add(
-        new BackupStatus()
-            .setBackupId(1)
-            .setPartitionId(1)
-            .setStatus(BackupStatusCode.COMPLETED)
-            .setBrokerVersion(""8.1.1"")
-            .setFailureReason("""")
-            .setCreatedAt(Instant.now().toString()));
-    backups.add(
-        new BackupStatus()
-            .setBackupId(2)
-            .setPartitionId(1)
-            .setStatus(BackupStatusCode.FAILED)
-            .setBrokerVersion(""8.1.2"")
-            .setFailureReason(""Error"")
-            .setCreatedAt(Instant.now().toString()));
+    final List<BackupStatus> backups =
+        List.of(
+            new BackupStatus(
+                1, 1, BackupStatusCode.COMPLETED, """", ""8.1.1"", Instant.now().toString()),
+            new BackupStatus(
+                1, 1, BackupStatusCode.FAILED, ""ERROR"", ""8.1.2"", Instant.now().toString()));
+
     final BackupListResponse toEncode = new BackupListResponse(backups);
 
     // when

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java
index d0ee4f3..c2ab83c 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java
@@ -13,6 +13,7 @@ import static io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent.ACTI
 import static io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_ACTIVATING;
 import static java.util.function.Predicate.isEqual;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.eq;
@@ -30,7 +31,6 @@ import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.streamprocessor.StreamProcessor;
 import io.camunda.zeebe.streamprocessor.StreamProcessor.Phase;
 import io.camunda.zeebe.streamprocessor.StreamProcessorMode;
-import org.awaitility.Awaitility;
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -71,7 +71,7 @@ public final class StreamProcessorReplayModeTest {
     // when
     startStreamProcessor(replayUntilEnd);
 
-    Awaitility.await()
+    await()
         .untilAsserted(
             () -> assertThat(getCurrentPhase(replayUntilEnd)).isEqualTo(Phase.PROCESSING));
 
@@ -163,7 +163,7 @@ public final class StreamProcessorReplayModeTest {
         command().processInstance(ACTIVATE_ELEMENT, RECORD),
         event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
 
-    Awaitility.await(""should have replayed first events"")
+    await(""should have replayed first events"")
         .until(replayContinuously::getLastSuccessfulProcessedRecordPosition, (pos) -> pos > 0);
 
     // when
@@ -210,7 +210,7 @@ public final class StreamProcessorReplayModeTest {
         command().processInstance(ACTIVATE_ELEMENT, RECORD),
         event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
 
-    Awaitility.await(""should have replayed first events"")
+    await(""should have replayed first events"")
         .until(replayContinuously::getLastSuccessfulProcessedRecordPosition, (pos) -> pos > 0);
     streamProcessor.pauseProcessing().join();
     replayContinuously.writeBatch(
@@ -244,7 +244,7 @@ public final class StreamProcessorReplayModeTest {
     // then
     verify(eventApplier, TIMEOUT).applyState(anyLong(), eq(ELEMENT_ACTIVATING), any());
 
-    Awaitility.await()
+    await()
         .untilAsserted(
             () -> {
               final var lastProcessedPosition = getLastProcessedPosition(replayContinuously);
@@ -273,8 +273,7 @@ public final class StreamProcessorReplayModeTest {
 
     verify(eventApplier, TIMEOUT).applyState(anyLong(), eq(ELEMENT_ACTIVATING), any());
 
-    Awaitility.await()
-        .until(() -> getLastProcessedPosition(replayContinuously), isEqual(commandPosition));
+    await().until(() -> getLastProcessedPosition(replayContinuously), isEqual(commandPosition));
 
     // then
     assertThat(replayContinuously.getLastSuccessfulProcessedRecordPosition())
@@ -285,7 +284,6 @@ public final class StreamProcessorReplayModeTest {
   @Test
   public void shouldNotSetLastProcessedPositionIfLessThanSnapshotPosition() {
     // given
-    final var commandPositionBeforeSnapshot = 1L;
     final var snapshotPosition = 2L;
 
     startStreamProcessor(replayContinuously);
@@ -298,23 +296,20 @@ public final class StreamProcessorReplayModeTest {
     // when
     startStreamProcessor(replayContinuously);
 
-    Awaitility.await()
+    await()
         .untilAsserted(
             () -> assertThat(getCurrentPhase(replayContinuously)).isEqualTo(Phase.REPLAY));
 
-    final var eventPosition =
-        replayContinuously.writeEvent(
-            ELEMENT_ACTIVATING,
-            RECORD,
-            writer -> writer.sourceRecordPosition(commandPositionBeforeSnapshot));
-
     // then
     final var lastProcessedPositionState = replayContinuously.getLastProcessedPositionState();
 
-    assertThat(lastProcessedPositionState.getLastSuccessfulProcessedRecordPosition())
-        .describedAs(
-            ""Expected that the last processed position is not less than the snapshot position"")
-        .isEqualTo(snapshotPosition);
+    await()
+        .untilAsserted(
+            () ->
+                assertThat(lastProcessedPositionState.getLastSuccessfulProcessedRecordPosition())
+                    .describedAs(
+                        ""Expected that the last processed position is not less than the snapshot position"")
+                    .isEqualTo(snapshotPosition));
   }
 
   private StreamProcessor startStreamProcessor(final StreamProcessorRule streamProcessorRule) {

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
index e5a111d..8ccd410 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
@@ -171,7 +171,31 @@ public record ClusterTopology(
   }
 
   private ClusterTopology advance() {
-    return new ClusterTopology(version, members, changes.advance());
+    final ClusterTopology result = new ClusterTopology(version, members, changes.advance());
+    if (!result.hasPendingChanges()) {
+      // The last change has been applied. Clean up the members that are marked as LEFT in the
+      // topology. This operation will be executed in the member that executes the last operation.
+      // This is ok because it is guaranteed that no other concurrent modification will be applied
+      // to the topology. This is because all the operations are applied sequentially, and no
+      // topology update will be done without adding a ClusterChangePlan.
+      return result.gc();
+    }
+    return result;
+  }
+
+  private ClusterTopology gc() {
+    if (hasPendingChanges()) {
+      throw new IllegalStateException(
+          ""Expected to remove members that are left from the topology, but there are pending changes ""
+              + changes);
+    }
+    // remove members that are marked as LEFT
+    final var currentMembers =
+        members().entrySet().stream()
+            .filter(entry -> entry.getValue().state() != State.LEFT)
+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
+    // Increment the version so that other members can merge by overwriting their local topology.
+    return new ClusterTopology(version + 1, currentMembers, changes);
   }
 
   public boolean hasMember(final MemberId memberId) {

diff --git a/dist/src/main/java/io/camunda/zeebe/shared/MetricRegistration.java b/dist/src/main/java/io/camunda/zeebe/shared/MetricRegistration.java
new file mode 100644
index 0000000..6236b12
--- /dev/null
+++ b/dist/src/main/java/io/camunda/zeebe/shared/MetricRegistration.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.shared;
+
+import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.binder.MeterBinder;
+import io.micrometer.core.instrument.binder.netty4.NettyAllocatorMetrics;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.buffer.UnpooledByteBufAllocator;
+import io.prometheus.client.CollectorRegistry;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration(proxyBeanMethods = false)
+public final class MetricRegistration implements MeterBinder {
+
+  @SuppressWarnings(""NullableProblems"")
+  @Override
+  public void bindTo(final MeterRegistry registry) {
+    new NettyAllocatorMetrics(PooledByteBufAllocator.DEFAULT).bindTo(registry);
+    new NettyAllocatorMetrics(UnpooledByteBufAllocator.DEFAULT).bindTo(registry);
+  }
+
+  @Bean
+  @ConditionalOnMissingBean
+  public CollectorRegistry collectorRegistry() {
+    // for compatibility reasons with how Zeebe registers metrics directly to Prometheus everywhere
+    // else, use the global default registry
+    return CollectorRegistry.defaultRegistry;
+  }
+}
diff --git a/dist/src/main/java/io/camunda/zeebe/shared/PrometheusRegistryConfiguration.java b/dist/src/main/java/io/camunda/zeebe/shared/PrometheusRegistryConfiguration.java
deleted file mode 100644
index 669a70b..0000000
--- a/dist/src/main/java/io/camunda/zeebe/shared/PrometheusRegistryConfiguration.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.shared;
-
-import io.prometheus.client.CollectorRegistry;
-import io.prometheus.client.hotspot.BufferPoolsExports;
-import io.prometheus.client.hotspot.ClassLoadingExports;
-import io.prometheus.client.hotspot.GarbageCollectorExports;
-import io.prometheus.client.hotspot.MemoryAllocationExports;
-import io.prometheus.client.hotspot.MemoryPoolsExports;
-import io.prometheus.client.hotspot.ThreadExports;
-import org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration;
-import org.springframework.boot.autoconfigure.AutoConfigureBefore;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-@AutoConfigureBefore(PrometheusMetricsExportAutoConfiguration.class)
-public class PrometheusRegistryConfiguration {
-
-  @Bean
-  @ConditionalOnMissingBean
-  public CollectorRegistry collectorRegistry() {
-    final var registry = CollectorRegistry.defaultRegistry;
-
-    (new MemoryPoolsExports()).register(registry);
-    (new MemoryAllocationExports()).register(registry);
-    (new BufferPoolsExports()).register(registry);
-    (new GarbageCollectorExports()).register(registry);
-    (new ThreadExports()).register(registry);
-    (new ClassLoadingExports()).register(registry);
-
-    return registry;
-  }
-}
diff --git a/dist/src/main/resources/application.properties b/dist/src/main/resources/application.properties
index 5dd1606..445d829 100644
--- a/dist/src/main/resources/application.properties
+++ b/dist/src/main/resources/application.properties
@@ -37,6 +37,5 @@ management.endpoint.loggers.enabled=true
 # Elastic client which spawns 16 threads)
 spring.autoconfigure.exclude=\
   org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration, \
-  org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration, \
   org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration, \
   org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration

diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/PartitionDistributor.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/PartitionDistributor.java
index 151cb04..f082651 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/PartitionDistributor.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/PartitionDistributor.java
@@ -18,8 +18,8 @@ package io.atomix.raft.partition;
 import io.atomix.cluster.MemberId;
 import io.atomix.primitive.partition.PartitionId;
 import io.atomix.primitive.partition.PartitionMetadata;
-import java.util.Collection;
 import java.util.List;
+import java.util.Set;
 
 /**
  * Maps a list of partitions to a set of members, based on the given replication factor.
@@ -45,8 +45,6 @@ public interface PartitionDistributor {
    * @param replicationFactor the replication factor for each partition
    * @return a set of distributed partitions, each specifying which members they belong to
    */
-  Collection<PartitionMetadata> distributePartitions(
-      Collection<MemberId> clusterMembers,
-      List<PartitionId> sortedPartitionIds,
-      int replicationFactor);
+  Set<PartitionMetadata> distributePartitions(
+      Set<MemberId> clusterMembers, List<PartitionId> sortedPartitionIds, int replicationFactor);
 }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/RoundRobinPartitionDistributor.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/RoundRobinPartitionDistributor.java
index dfa5fab..dcf620a 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/RoundRobinPartitionDistributor.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/RoundRobinPartitionDistributor.java
@@ -20,7 +20,6 @@ import io.atomix.cluster.MemberId;
 import io.atomix.primitive.partition.PartitionId;
 import io.atomix.primitive.partition.PartitionMetadata;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -48,8 +47,8 @@ import java.util.Set;
 public final class RoundRobinPartitionDistributor implements PartitionDistributor {
 
   @Override
-  public Collection<PartitionMetadata> distributePartitions(
-      final Collection<MemberId> clusterMembers,
+  public Set<PartitionMetadata> distributePartitions(
+      final Set<MemberId> clusterMembers,
       final List<PartitionId> sortedPartitionIds,
       final int replicationFactor) {
     final List<MemberId> sorted = new ArrayList<>(clusterMembers);
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/partition/RoundRobinPartitionDistributorTest.java b/atomix/cluster/src/test/java/io/atomix/raft/partition/RoundRobinPartitionDistributorTest.java
index c98c234..a261fb7 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/partition/RoundRobinPartitionDistributorTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/partition/RoundRobinPartitionDistributorTest.java
@@ -20,7 +20,6 @@ import static org.assertj.core.api.Assertions.assertThat;
 import io.atomix.cluster.MemberId;
 import io.atomix.primitive.partition.PartitionId;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -108,7 +107,7 @@ final class RoundRobinPartitionDistributorTest {
             }));
   }
 
-  private Collection<MemberId> getMembers(final int nodeCount) {
+  private Set<MemberId> getMembers(final int nodeCount) {
     final Set<MemberId> members = new HashSet<>();
     for (int i = 0; i < nodeCount; i++) {
       members.add(MemberId.from(String.valueOf(i)));

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/CompleteDeploymentDistributionProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/CompleteDeploymentDistributionProcessor.java
index 46b8416..52e1a90 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/CompleteDeploymentDistributionProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/CompleteDeploymentDistributionProcessor.java
@@ -9,11 +9,8 @@ package io.camunda.zeebe.engine.processing.deployment.distribute;
 
 import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
-import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.immutable.DeploymentState;
 import io.camunda.zeebe.protocol.impl.record.value.deployment.DeploymentDistributionRecord;
@@ -21,7 +18,6 @@ import io.camunda.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.DeploymentDistributionIntent;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
-import java.util.function.Consumer;
 
 public class CompleteDeploymentDistributionProcessor
     implements TypedRecordProcessor<DeploymentDistributionRecord> {
@@ -42,12 +38,7 @@ public class CompleteDeploymentDistributionProcessor
   }
 
   @Override
-  public void processRecord(
-      final long position,
-      final TypedRecord<DeploymentDistributionRecord> record,
-      final TypedResponseWriter responseWriter,
-      final TypedStreamWriter streamWriter,
-      final Consumer<SideEffectProducer> sideEffect) {
+  public void processRecord(final TypedRecord<DeploymentDistributionRecord> record) {
 
     final var deploymentKey = record.getKey();
     if (!deploymentState.hasPendingDeploymentDistribution(deploymentKey)) {
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributeProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributeProcessor.java
index 1ff62a2..93e36a6 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributeProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/distribute/DeploymentDistributeProcessor.java
@@ -11,17 +11,13 @@ import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.processing.deployment.DeploymentResponder;
 import io.camunda.zeebe.engine.processing.deployment.MessageStartEventSubscriptionManager;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
-import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.immutable.MessageStartEventSubscriptionState;
 import io.camunda.zeebe.engine.state.immutable.ProcessState;
 import io.camunda.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
-import java.util.function.Consumer;
 
 public final class DeploymentDistributeProcessor implements TypedRecordProcessor<DeploymentRecord> {
 
@@ -46,12 +42,7 @@ public final class DeploymentDistributeProcessor implements TypedRecordProcessor
   }
 
   @Override
-  public void processRecord(
-      final long position,
-      final TypedRecord<DeploymentRecord> event,
-      final TypedResponseWriter responseWriter,
-      final TypedStreamWriter streamWriter,
-      final Consumer<SideEffectProducer> sideEffect) {
+  public void processRecord(final TypedRecord<DeploymentRecord> event) {
     final var deploymentEvent = event.getValue();
     final var deploymentKey = event.getKey();
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/message/ProcessMessageSubscriptionCorrelateProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/message/ProcessMessageSubscriptionCorrelateProcessor.java
index c65eca8..351b3a8 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/message/ProcessMessageSubscriptionCorrelateProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/message/ProcessMessageSubscriptionCorrelateProcessor.java
@@ -15,7 +15,6 @@ import io.camunda.zeebe.engine.processing.common.EventTriggerBehavior;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlowElement;
 import io.camunda.zeebe.engine.processing.message.command.SubscriptionCommandSender;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
-import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
@@ -30,7 +29,6 @@ import io.camunda.zeebe.protocol.impl.record.value.message.ProcessMessageSubscri
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.ProcessMessageSubscriptionIntent;
-import java.util.function.Consumer;
 import org.agrona.DirectBuffer;
 
 public final class ProcessMessageSubscriptionCorrelateProcessor
@@ -80,8 +78,7 @@ public final class ProcessMessageSubscriptionCorrelateProcessor
   public void processRecord(
       final TypedRecord<ProcessMessageSubscriptionRecord> command,
       final TypedResponseWriter responseWriter,
-      final TypedStreamWriter streamWriter,
-      final Consumer<SideEffectProducer> sideEffect) {
+      final TypedStreamWriter streamWriter) {
 
     final var record = command.getValue();
     final var elementInstanceKey = record.getElementInstanceKey();
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
index 29c2c79..aecb718 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
@@ -16,16 +16,21 @@ import java.util.function.Consumer;
 
 // todo (#8002): remove TypedStreamWriter from this interface's method signatures
 // After the migration, none of these should be in use anymore and replaced by the CommandWriter and
-// StateWriter passed along to the constructors of the concrete processors.
+// StateWriter passed along to the constructors of the concrete processors. The only method that
+// should remain in use is {@code processRecord(final TypedRecord<T> record)}
 public interface TypedRecordProcessor<T extends UnifiedRecordValue> {
 
+  default void processRecord(final TypedRecord<T> record) {}
+
   /**
    * @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer)
    */
   default void processRecord(
       final TypedRecord<T> record,
       final TypedResponseWriter responseWriter,
-      final TypedStreamWriter streamWriter) {}
+      final TypedStreamWriter streamWriter) {
+    processRecord(record);
+  }
 
   /**
    * @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer)
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
index cadbb6d..42c9956 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
@@ -13,8 +13,6 @@ import static io.camunda.zeebe.test.util.TestUtil.waitUntil;
 import static org.mockito.Mockito.mock;
 
 import io.camunda.zeebe.engine.api.TypedRecord;
-import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.engine.util.Records;
@@ -33,7 +31,6 @@ import io.camunda.zeebe.util.health.HealthStatus;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.function.Consumer;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -46,7 +43,6 @@ public class StreamProcessorHealthTest {
   @Rule public final StreamProcessorRule streamProcessorRule = new StreamProcessorRule();
 
   private StreamProcessor streamProcessor;
-  private TypedStreamWriter mockedLogStreamWriter;
   private AtomicBoolean shouldFlushThrowException;
   private AtomicInteger invocation;
   private AtomicBoolean shouldFailErrorHandlingInTransaction;
@@ -165,13 +161,7 @@ public class StreamProcessorHealthTest {
                       ACTIVATE_ELEMENT,
                       new TypedRecordProcessor<>() {
                         @Override
-                        public void processRecord(
-                            final long position,
-                            final TypedRecord<UnifiedRecordValue> record,
-                            final TypedResponseWriter responseWriter,
-                            final TypedStreamWriter streamWriter,
-                            final Consumer<SideEffectProducer> sideEffect) {
-
+                        public void processRecord(final TypedRecord<UnifiedRecordValue> record) {
                           invocation.getAndIncrement();
                           if (shouldProcessingThrowException.get()) {
                             throw new RuntimeException(""Expected failure on processing"");
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
index 81fdc9d..d30c29f 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java
@@ -22,9 +22,6 @@ import static org.mockito.Mockito.verify;
 import io.camunda.zeebe.engine.api.ReadonlyStreamProcessorContext;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
 import io.camunda.zeebe.engine.api.TypedRecord;
-import io.camunda.zeebe.engine.processing.streamprocessor.sideeffect.SideEffectProducer;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.util.RecordToWrite;
 import io.camunda.zeebe.engine.util.Records;
@@ -36,7 +33,6 @@ import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.test.util.stream.StreamWrapper;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Consumer;
 import java.util.stream.IntStream;
 import org.awaitility.Awaitility;
 import org.junit.Before;
@@ -253,12 +249,7 @@ public final class StreamProcessorReprocessingTest {
                 ACTIVATE_ELEMENT,
                 new TypedRecordProcessor<>() {
                   @Override
-                  public void processRecord(
-                      final long position,
-                      final TypedRecord<UnifiedRecordValue> record,
-                      final TypedResponseWriter responseWriter,
-                      final TypedStreamWriter streamWriter,
-                      final Consumer<SideEffectProducer> sideEffect) {}
+                  public void processRecord(final TypedRecord<UnifiedRecordValue> record) {}
                 }));
 
     streamProcessorRule.writeCommand(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD);
@@ -282,12 +273,7 @@ public final class StreamProcessorReprocessingTest {
                 ACTIVATE_ELEMENT,
                 new TypedRecordProcessor<>() {
                   @Override
-                  public void processRecord(
-                      final long position,
-                      final TypedRecord<UnifiedRecordValue> record,
-                      final TypedResponseWriter responseWriter,
-                      final TypedStreamWriter streamWriter,
-                      final Consumer<SideEffectProducer> sideEffect) {}
+                  public void processRecord(final TypedRecord<UnifiedRecordValue> record) {}
                 }));
 
     final long position =
@@ -396,12 +382,7 @@ public final class StreamProcessorReprocessingTest {
                 ACTIVATE_ELEMENT,
                 new TypedRecordProcessor<>() {
                   @Override
-                  public void processRecord(
-                      final long position,
-                      final TypedRecord<UnifiedRecordValue> record,
-                      final TypedResponseWriter responseWriter,
-                      final TypedStreamWriter streamWriter,
-                      final Consumer<SideEffectProducer> sideEffect) {}
+                  public void processRecord(final TypedRecord<UnifiedRecordValue> record) {}
                 }));
 
     streamProcessorRule.writeCommand(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD);
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
index b09cff9..5577e2e 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
@@ -271,11 +271,9 @@ public final class StreamProcessorTest {
                     new TypedRecordProcessor<>() {
                       @Override
                       public void processRecord(
-                          final long position,
                           final TypedRecord<UnifiedRecordValue> record,
                           final TypedResponseWriter responseWriter,
-                          final TypedStreamWriter streamWriter,
-                          final Consumer<SideEffectProducer> sideEffect) {
+                          final TypedStreamWriter streamWriter) {
 
                         streamWriter.appendFollowUpEvent(
                             record.getKey(),
@@ -311,7 +309,6 @@ public final class StreamProcessorTest {
                 new TypedRecordProcessor<>() {
                   @Override
                   public void processRecord(
-                      final long position,
                       final TypedRecord<UnifiedRecordValue> record,
                       final TypedResponseWriter responseWriter,
                       final TypedStreamWriter streamWriter,
@@ -345,7 +342,6 @@ public final class StreamProcessorTest {
                 new TypedRecordProcessor<>() {
                   @Override
                   public void processRecord(
-                      final long position,
                       final TypedRecord<UnifiedRecordValue> record,
                       final TypedResponseWriter responseWriter,
                       final TypedStreamWriter streamWriter,
@@ -378,7 +374,6 @@ public final class StreamProcessorTest {
                 new TypedRecordProcessor<>() {
                   @Override
                   public void processRecord(
-                      final long position,
                       final TypedRecord<UnifiedRecordValue> record,
                       final TypedResponseWriter responseWriter,
                       final TypedStreamWriter streamWriter,
@@ -416,12 +411,7 @@ public final class StreamProcessorTest {
               ProcessInstanceIntent.ACTIVATE_ELEMENT,
               new TypedRecordProcessor<>() {
                 @Override
-                public void processRecord(
-                    final long position,
-                    final TypedRecord<UnifiedRecordValue> record,
-                    final TypedResponseWriter responseWriter,
-                    final TypedStreamWriter streamWriter,
-                    final Consumer<SideEffectProducer> sideEffect) {
+                public void processRecord(final TypedRecord<UnifiedRecordValue> record) {
 
                   state.getJobState().create(jobKey, JOB_RECORD);
 
@@ -465,12 +455,7 @@ public final class StreamProcessorTest {
               ProcessInstanceIntent.ACTIVATE_ELEMENT,
               new TypedRecordProcessor<>() {
                 @Override
-                public void processRecord(
-                    final long position,
-                    final TypedRecord<UnifiedRecordValue> record,
-                    final TypedResponseWriter responseWriter,
-                    final TypedStreamWriter streamWriter,
-                    final Consumer<SideEffectProducer> sideEffect) {
+                public void processRecord(final TypedRecord<UnifiedRecordValue> record) {
 
                   state.getJobState().create(jobKey, JOB_RECORD);
                 }
@@ -506,11 +491,9 @@ public final class StreamProcessorTest {
                 new TypedRecordProcessor<>() {
                   @Override
                   public void processRecord(
-                      final long position,
                       final TypedRecord<UnifiedRecordValue> record,
                       final TypedResponseWriter responseWriter,
-                      final TypedStreamWriter streamWriter,
-                      final Consumer<SideEffectProducer> sideEffect) {
+                      final TypedStreamWriter streamWriter) {
 
                     responseWriter.writeEventOnCommand(
                         3, ProcessInstanceIntent.ELEMENT_ACTIVATING, record.getValue(), record);
@@ -547,11 +530,9 @@ public final class StreamProcessorTest {
                 new TypedRecordProcessor<>() {
                   @Override
                   public void processRecord(
-                      final long position,
                       final TypedRecord<UnifiedRecordValue> record,
                       final TypedResponseWriter responseWriter,
-                      final TypedStreamWriter streamWriter,
-                      final Consumer<SideEffectProducer> sideEffect) {
+                      final TypedStreamWriter streamWriter) {
 
                     responseWriter.writeEventOnCommand(
                         3, ProcessInstanceIntent.ELEMENT_ACTIVATING, record.getValue(), record);
@@ -705,11 +686,9 @@ public final class StreamProcessorTest {
                     new TypedRecordProcessor<>() {
                       @Override
                       public void processRecord(
-                          final long position,
                           final TypedRecord<UnifiedRecordValue> record,
                           final TypedResponseWriter responseWriter,
-                          final TypedStreamWriter streamWriter,
-                          final Consumer<SideEffectProducer> sideEffect) {
+                          final TypedStreamWriter streamWriter) {
 
                         streamWriter.appendFollowUpEvent(
                             record.getKey(),

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobRecurProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobRecurProcessor.java
index c1e34bb..f930f0b 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobRecurProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobRecurProcessor.java
@@ -11,7 +11,6 @@ import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnJobActivationBehavio
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.immutable.JobState;
 import io.camunda.zeebe.engine.state.immutable.JobState.State;
@@ -28,7 +27,6 @@ public class JobRecurProcessor implements TypedRecordProcessor<JobRecord> {
   private final JobState jobState;
   private final StateWriter stateWriter;
   private final TypedRejectionWriter rejectionWriter;
-  private final TypedResponseWriter responseWriter;
   private final BpmnJobActivationBehavior jobActivationBehavior;
 
   public JobRecurProcessor(
@@ -38,7 +36,6 @@ public class JobRecurProcessor implements TypedRecordProcessor<JobRecord> {
     jobState = processingState.getJobState();
     stateWriter = writers.state();
     rejectionWriter = writers.rejection();
-    responseWriter = writers.response();
     this.jobActivationBehavior = jobActivationBehavior;
   }
 
@@ -51,8 +48,6 @@ public class JobRecurProcessor implements TypedRecordProcessor<JobRecord> {
       final JobRecord recurredJob = record.getValue();
 
       stateWriter.appendFollowUpEvent(jobKey, JobIntent.RECURRED_AFTER_BACKOFF, recurredJob);
-      responseWriter.writeEventOnCommand(
-          jobKey, JobIntent.RECURRED_AFTER_BACKOFF, recurredJob, record);
 
       jobActivationBehavior.publishWork(jobKey, recurredJob);
     } else {
@@ -75,7 +70,6 @@ public class JobRecurProcessor implements TypedRecordProcessor<JobRecord> {
 
       final String errorMesage = String.format(NOT_FAILED_JOB_MESSAGE, jobKey, textState);
       rejectionWriter.appendRejection(record, RejectionType.NOT_FOUND, errorMesage);
-      responseWriter.writeRejectionOnCommand(record, RejectionType.NOT_FOUND, errorMesage);
     }
   }
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeOutProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeOutProcessor.java
index c77fbb3..55ee04a 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeOutProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobTimeOutProcessor.java
@@ -12,7 +12,6 @@ import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnJobActivationBehavio
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.immutable.JobState;
 import io.camunda.zeebe.engine.state.immutable.JobState.State;
@@ -28,7 +27,6 @@ public final class JobTimeOutProcessor implements TypedRecordProcessor<JobRecord
   private final JobState jobState;
   private final StateWriter stateWriter;
   private final TypedRejectionWriter rejectionWriter;
-  private final TypedResponseWriter responseWriter;
   private final JobMetrics jobMetrics;
   private final BpmnJobActivationBehavior jobActivationBehavior;
 
@@ -40,7 +38,6 @@ public final class JobTimeOutProcessor implements TypedRecordProcessor<JobRecord
     jobState = state.getJobState();
     stateWriter = writers.state();
     rejectionWriter = writers.rejection();
-    responseWriter = writers.response();
     this.jobMetrics = jobMetrics;
     this.jobActivationBehavior = jobActivationBehavior;
   }
@@ -55,7 +52,6 @@ public final class JobTimeOutProcessor implements TypedRecordProcessor<JobRecord
 
       stateWriter.appendFollowUpEvent(jobKey, JobIntent.TIMED_OUT, timedOutJob);
       jobMetrics.jobTimedOut(timedOutJob.getType());
-      responseWriter.writeEventOnCommand(jobKey, JobIntent.TIMED_OUT, timedOutJob, record);
 
       jobActivationBehavior.publishWork(jobKey, timedOutJob);
     } else {
@@ -75,7 +71,6 @@ public final class JobTimeOutProcessor implements TypedRecordProcessor<JobRecord
 
       final String errorMessage = String.format(NOT_ACTIVATED_JOB_MESSAGE, jobKey, textState);
       rejectionWriter.appendRejection(record, RejectionType.NOT_FOUND, errorMessage);
-      responseWriter.writeRejectionOnCommand(record, RejectionType.NOT_FOUND, errorMessage);
     }
   }
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
index e958119..e5a8a66 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnSignalBehavior.java
@@ -13,7 +13,6 @@ import static io.camunda.zeebe.util.EnsureUtil.ensureNotNullOrEmpty;
 import io.camunda.zeebe.engine.processing.bpmn.BpmnElementContext;
 import io.camunda.zeebe.engine.processing.common.ExpressionProcessor;
 import io.camunda.zeebe.engine.processing.common.Failure;
-import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableEndEvent;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableSignal;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
@@ -46,9 +45,8 @@ public final class BpmnSignalBehavior {
   }
 
   public Either<Failure, ?> broadcastNewSignal(
-      final BpmnElementContext context, final ExecutableEndEvent element) {
+      final BpmnElementContext context, final ExecutableSignal signal) {
 
-    final var signal = element.getSignal();
     final var variables =
         variableState.getVariablesLocalAsDocument(context.getElementInstanceKey());
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
index c074907..468b2bf 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/event/EndEventProcessor.java
@@ -280,7 +280,7 @@ public final class EndEventProcessor implements BpmnElementProcessor<ExecutableE
     public void onActivate(final ExecutableEndEvent element, final BpmnElementContext activating) {
       variableMappingBehavior
           .applyInputMappings(activating, element)
-          .flatMap(ok -> signalBehavior.broadcastNewSignal(activating, element))
+          .flatMap(ok -> signalBehavior.broadcastNewSignal(activating, element.getSignal()))
           .ifRightOrLeft(
               ok -> {
                 final var activated = stateTransitionBehavior.transitionToActivated(activating);

diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
index 83b72b7..7a09843 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
@@ -7,10 +7,6 @@
  */
 package io.camunda.zeebe.gateway.impl.configuration;
 
-import static io.camunda.zeebe.util.ObjectWriterFactory.getDefaultJsonObjectWriter;
-
-import com.fasterxml.jackson.core.JsonProcessingException;
-import io.camunda.zeebe.util.exception.UncheckedExecutionException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
@@ -141,12 +137,4 @@ public class GatewayCfg {
         + multiTenancy
         + '}';
   }
-
-  public String toJson() {
-    try {
-      return getDefaultJsonObjectWriter().writeValueAsString(this);
-    } catch (final JsonProcessingException e) {
-      throw new UncheckedExecutionException(""Writing to JSON failed"", e);
-    }
-  }
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index 91f1b41..eb4b9a8 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -81,8 +81,6 @@ public class Engine implements RecordProcessor<EngineContext> {
 
     engineContext.setLifecycleListeners(typedRecordProcessors.getLifecycleListeners());
     recordProcessorMap = typedRecordProcessors.getRecordProcessorMap();
-
-    engineContext.setWriters(writers);
   }
 
   @Override
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/EngineContext.java b/engine/src/main/java/io/camunda/zeebe/engine/EngineContext.java
index a8e5538..a27b6e6 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/EngineContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/EngineContext.java
@@ -15,7 +15,6 @@ import io.camunda.zeebe.engine.processing.streamprocessor.StreamProcessorListene
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessorFactory;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.LegacyTypedResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.LegacyTypedStreamWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import java.util.Collections;
@@ -34,7 +33,6 @@ public final class EngineContext {
   private final TypedRecordProcessorFactory typedRecordProcessorFactory;
   private List<StreamProcessorLifecycleAware> lifecycleListeners = Collections.EMPTY_LIST;
   private StreamProcessorListener streamProcessorListener;
-  private Writers writers;
 
   public EngineContext(
       final int partitionId,
@@ -102,12 +100,4 @@ public final class EngineContext {
   public void setStreamProcessorListener(final StreamProcessorListener streamProcessorListener) {
     this.streamProcessorListener = streamProcessorListener;
   }
-
-  public Writers getWriters() {
-    return writers;
-  }
-
-  public void setWriters(final Writers writers) {
-    this.writers = writers;
-  }
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/api/ReadonlyStreamProcessorContext.java b/engine/src/main/java/io/camunda/zeebe/engine/api/ReadonlyStreamProcessorContext.java
index f30c7cc..834b421 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/api/ReadonlyStreamProcessorContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/api/ReadonlyStreamProcessorContext.java
@@ -8,7 +8,6 @@
 package io.camunda.zeebe.engine.api;
 
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.LegacyTypedStreamWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.logstreams.log.LogStream;
 
@@ -27,11 +26,6 @@ public interface ReadonlyStreamProcessorContext {
   LegacyTypedStreamWriter getLogStreamWriter();
 
   /**
-   * @return the specific writers, like command, response, etc
-   */
-  Writers getWriters();
-
-  /**
    * @return the state, where the data is stored during processing
    */
   MutableZeebeState getZeebeState();
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
index 844e487..49fd8e2 100755
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
@@ -346,7 +346,6 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
     if (listener != null) {
       streamProcessorContext.listener(engineContext.getStreamProcessorListener());
     }
-    streamProcessorContext.writers(engineContext.getWriters());
   }
 
   private long recoverFromSnapshot() {
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
index d02b273..b527d3c 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
@@ -17,7 +17,6 @@ import io.camunda.zeebe.engine.processing.streamprocessor.writers.CommandRespons
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.LegacyTypedResponseWriterImpl;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.LegacyTypedStreamWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.NoopLegacyTypedStreamWriter;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.KeyGeneratorControls;
 import io.camunda.zeebe.engine.state.ZeebeDbState;
@@ -55,7 +54,7 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
   private StreamProcessorMode streamProcessorMode = StreamProcessorMode.PROCESSING;
   private ProcessingScheduleService processingScheduleService;
   private MutableLastProcessedPositionState lastProcessedPositionState;
-  private Writers writers;
+
   private LogStreamBatchWriter logStreamBatchWriter;
   private CommandResponseWriter commandResponseWriter;
 
@@ -85,11 +84,6 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
   }
 
   @Override
-  public Writers getWriters() {
-    return writers;
-  }
-
-  @Override
   public MutableZeebeState getZeebeState() {
     return zeebeState;
   }
@@ -216,10 +210,6 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
     return streamProcessorMode;
   }
 
-  public void writers(final Writers writers) {
-    this.writers = writers;
-  }
-
   public void logStreamBatchWriter(final LogStreamBatchWriter batchWriter) {
     logStreamBatchWriter = batchWriter;
   }

diff --git a/dist/src/main/resources/api/backup-management-api.yaml b/dist/src/main/resources/api/backup-management-api.yaml
index d09fce8..499b0b6 100644
--- a/dist/src/main/resources/api/backup-management-api.yaml
+++ b/dist/src/main/resources/api/backup-management-api.yaml
@@ -65,13 +65,7 @@ paths:
       summary: Get information of a backup
       description: A detailed information of the backup with the give backup id.
       parameters:
-        - name: backupId
-          in : path
-          description: Backup ID
-          required: true
-          schema:
-            type: integer
-            format: int64
+        - $ref: '#/components/parameters/BackupId'
       responses:
         '200':
           description: OK
@@ -92,13 +86,7 @@ paths:
       summary: Delete a backup
       description: Delete a backup with the given id
       parameters:
-        - name: backupId
-          in: path
-          description: Backup ID
-          required: true
-          schema:
-            type: integer
-            format: int64
+        - $ref: '#/components/parameters/BackupId'
       responses:
         '204':
           description: Backup is deleted
@@ -110,6 +98,15 @@ paths:
           $ref: '#/components/responses/Error'
 
 components:
+  parameters:
+    BackupId:
+      name: backupId
+      required: true
+      in: path
+      description: Id of the backup
+      schema:
+        $ref: '#/components/schemas/BackupId'
+
   responses:
     Error:
       description: Generic error response

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/ProcessingExporterTransistor.java b/engine/src/test/java/io/camunda/zeebe/engine/util/ProcessingExporterTransistor.java
index 9541759..059bcb0 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/ProcessingExporterTransistor.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/ProcessingExporterTransistor.java
@@ -47,7 +47,7 @@ public final class ProcessingExporterTransistor implements StreamProcessorLifecy
           typedEvent = new TypedRecordImpl(partitionId);
           final var asyncLogStream = synchronousLogStream.getAsyncLogStream();
           asyncLogStream.registerRecordAvailableListener(this::onNewEventCommitted);
-          logStreamReader = asyncLogStream.newLogStreamReader().join();
+          logStreamReader = synchronousLogStream.newLogStreamReader();
           exportEvents();
         });
   }

diff --git a/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java b/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java
index a92ffe4..4272b78 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/EngineProcessors.java
@@ -27,6 +27,8 @@ import io.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecordProcessors;
 import io.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.zeebe.engine.processing.timer.DueDateTimerChecker;
+import io.zeebe.engine.state.KeyGenerator;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.logstreams.log.LogStream;
 import io.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
@@ -75,7 +77,8 @@ public final class EngineProcessors {
         writers,
         partitionsCount,
         actor,
-        deploymentDistributor);
+        deploymentDistributor,
+        zeebeState.getKeyGenerator());
     addMessageProcessors(subscriptionCommandSender, zeebeState, typedRecordProcessors, writers);
 
     final TypedRecordProcessor<ProcessInstanceRecord> bpmnStreamProcessor =
@@ -116,14 +119,15 @@ public final class EngineProcessors {
   private static void addDeploymentRelatedProcessorAndServices(
       final CatchEventBehavior catchEventBehavior,
       final int partitionId,
-      final MutableZeebeState zeebeState,
+      final ZeebeState zeebeState,
       final TypedRecordProcessors typedRecordProcessors,
       final DeploymentResponder deploymentResponder,
       final ExpressionProcessor expressionProcessor,
       final Writers writers,
       final int partitionsCount,
       final ActorControl actor,
-      final DeploymentDistributor deploymentDistributor) {
+      final DeploymentDistributor deploymentDistributor,
+      final KeyGenerator keyGenerator) {
 
     // on deployment partition CREATE Command is received and processed
     // it will cause a distribution to other partitions
@@ -135,7 +139,8 @@ public final class EngineProcessors {
             partitionsCount,
             writers,
             actor,
-            deploymentDistributor);
+            deploymentDistributor,
+            keyGenerator);
     typedRecordProcessors.onCommand(ValueType.DEPLOYMENT, CREATE, processor);
 
     // redistributes deployments after recovery
diff --git a/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java
index ecd9ce3..d046336 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/deployment/DeploymentCreateProcessor.java
@@ -26,10 +26,10 @@ import io.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.TypedStreamWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.zeebe.engine.state.KeyGenerator;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.ProcessState;
 import io.zeebe.engine.state.immutable.TimerInstanceState;
 import io.zeebe.engine.state.instance.TimerInstance;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.model.bpmn.util.time.Timer;
 import io.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
 import io.zeebe.protocol.impl.record.value.deployment.ProcessRecord;
@@ -57,18 +57,20 @@ public final class DeploymentCreateProcessor implements TypedRecordProcessor<Dep
   private final DeploymentDistributionBehavior deploymentDistributionBehavior;
 
   public DeploymentCreateProcessor(
-      final MutableZeebeState zeebeState,
+      final ZeebeState zeebeState,
       final CatchEventBehavior catchEventBehavior,
       final ExpressionProcessor expressionProcessor,
       final int partitionsCount,
       final Writers writers,
       final ActorControl actor,
-      final DeploymentDistributor deploymentDistributor) {
+      final DeploymentDistributor deploymentDistributor,
+      final KeyGenerator keyGenerator) {
     processState = zeebeState.getProcessState();
     timerInstanceState = zeebeState.getTimerState();
-    keyGenerator = zeebeState.getKeyGenerator();
+    this.keyGenerator = keyGenerator;
     stateWriter = writers.state();
-    deploymentTransformer = new DeploymentTransformer(stateWriter, zeebeState, expressionProcessor);
+    deploymentTransformer =
+        new DeploymentTransformer(stateWriter, zeebeState, expressionProcessor, keyGenerator);
     this.catchEventBehavior = catchEventBehavior;
     this.expressionProcessor = expressionProcessor;
     messageStartEventSubscriptionManager = new MessageStartEventSubscriptionManager(processState);
diff --git a/engine/src/main/java/io/zeebe/engine/processing/deployment/transform/DeploymentTransformer.java b/engine/src/main/java/io/zeebe/engine/processing/deployment/transform/DeploymentTransformer.java
index 58daa08..737c6b4 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/deployment/transform/DeploymentTransformer.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/deployment/transform/DeploymentTransformer.java
@@ -14,9 +14,9 @@ import io.zeebe.engine.processing.common.ExpressionProcessor;
 import io.zeebe.engine.processing.deployment.model.BpmnFactory;
 import io.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.zeebe.engine.state.KeyGenerator;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.deployment.DeployedProcess;
 import io.zeebe.engine.state.immutable.ProcessState;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
 import io.zeebe.model.bpmn.instance.Process;
@@ -53,11 +53,12 @@ public final class DeploymentTransformer {
 
   public DeploymentTransformer(
       final StateWriter stateWriter,
-      final MutableZeebeState zeebeState,
-      final ExpressionProcessor expressionProcessor) {
+      final ZeebeState zeebeState,
+      final ExpressionProcessor expressionProcessor,
+      final KeyGenerator keyGenerator) {
     this.stateWriter = stateWriter;
     processState = zeebeState.getProcessState();
-    keyGenerator = zeebeState.getKeyGenerator();
+    this.keyGenerator = keyGenerator;
     validator = BpmnFactory.createValidator(expressionProcessor);
 
     try {
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobCancelProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobCancelProcessor.java
index 2ad117a..0514a78 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobCancelProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobCancelProcessor.java
@@ -9,8 +9,8 @@ package io.zeebe.engine.processing.job;
 
 import io.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecord;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.JobState;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.JobIntent;
@@ -21,7 +21,7 @@ public final class JobCancelProcessor implements CommandProcessor<JobRecord> {
       ""Expected to cancel job with key '%d', but no such job was found"";
   private final JobState jobState;
 
-  public JobCancelProcessor(final MutableZeebeState state) {
+  public JobCancelProcessor(final ZeebeState state) {
     jobState = state.getJobState();
   }
 
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobCompleteProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobCompleteProcessor.java
index 87b8577..54cb07d 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobCompleteProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobCompleteProcessor.java
@@ -14,10 +14,10 @@ import io.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.TypedEventWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.ElementInstanceState;
 import io.zeebe.engine.state.immutable.JobState;
 import io.zeebe.engine.state.instance.ElementInstance;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.zeebe.protocol.record.intent.Intent;
@@ -32,7 +32,7 @@ public final class JobCompleteProcessor implements CommandProcessor<JobRecord> {
   private final DefaultJobCommandPreconditionGuard<JobRecord> defaultProcessor;
   private final TypedEventWriter eventWriter;
 
-  public JobCompleteProcessor(final MutableZeebeState state, final Writers writers) {
+  public JobCompleteProcessor(final ZeebeState state, final Writers writers) {
     jobState = state.getJobState();
     elementInstanceState = state.getElementInstanceState();
     defaultProcessor =
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobEventProcessors.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobEventProcessors.java
index 5a6a3af..ef577d3 100755
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobEventProcessors.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobEventProcessors.java
@@ -27,12 +27,16 @@ public final class JobEventProcessors {
       final Writers writers) {
 
     final var jobState = zeebeState.getJobState();
+    final var keyGenerator = zeebeState.getKeyGenerator();
 
     typedRecordProcessors
         .onCommand(ValueType.JOB, JobIntent.CREATE, new CreateProcessor())
         .onCommand(ValueType.JOB, JobIntent.COMPLETE, new JobCompleteProcessor(zeebeState, writers))
         .onCommand(ValueType.JOB, JobIntent.FAIL, new JobFailProcessor(zeebeState))
-        .onCommand(ValueType.JOB, JobIntent.THROW_ERROR, new JobThrowErrorProcessor(zeebeState))
+        .onCommand(
+            ValueType.JOB,
+            JobIntent.THROW_ERROR,
+            new JobThrowErrorProcessor(zeebeState, keyGenerator))
         .onCommand(ValueType.JOB, JobIntent.TIME_OUT, new JobTimeOutProcessor(zeebeState))
         .onCommand(
             ValueType.JOB, JobIntent.UPDATE_RETRIES, new JobUpdateRetriesProcessor(zeebeState))
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobFailProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobFailProcessor.java
index 9b67e3e..9df8025 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobFailProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobFailProcessor.java
@@ -13,8 +13,8 @@ import io.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecord;
 import io.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.JobState;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.incident.IncidentRecord;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.record.intent.IncidentIntent;
@@ -31,7 +31,7 @@ public final class JobFailProcessor implements CommandProcessor<JobRecord> {
   private final JobState jobState;
   private final DefaultJobCommandPreconditionGuard<JobRecord> defaultProcessor;
 
-  public JobFailProcessor(final MutableZeebeState state) {
+  public JobFailProcessor(final ZeebeState state) {
     jobState = state.getJobState();
     defaultProcessor =
         new DefaultJobCommandPreconditionGuard<>(""fail"", jobState, this::acceptCommand);
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobThrowErrorProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobThrowErrorProcessor.java
index 65eb70e..7204313 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobThrowErrorProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobThrowErrorProcessor.java
@@ -16,12 +16,12 @@ import io.zeebe.engine.processing.streamprocessor.TypedRecord;
 import io.zeebe.engine.processing.streamprocessor.writers.StateWriter;
 import io.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
 import io.zeebe.engine.state.KeyGenerator;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.analyzers.CatchEventAnalyzer;
 import io.zeebe.engine.state.immutable.ElementInstanceState;
 import io.zeebe.engine.state.immutable.EventScopeInstanceState;
 import io.zeebe.engine.state.immutable.JobState;
 import io.zeebe.engine.state.instance.ElementInstance;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.incident.IncidentRecord;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
@@ -53,8 +53,8 @@ public class JobThrowErrorProcessor implements CommandProcessor<JobRecord> {
   private final KeyGenerator keyGenerator;
   private final EventScopeInstanceState eventScopeInstanceState;
 
-  public JobThrowErrorProcessor(final MutableZeebeState state) {
-    keyGenerator = state.getKeyGenerator();
+  public JobThrowErrorProcessor(final ZeebeState state, final KeyGenerator keyGenerator) {
+    this.keyGenerator = keyGenerator;
     jobState = state.getJobState();
     elementInstanceState = state.getElementInstanceState();
     eventScopeInstanceState = state.getEventScopeInstanceState();
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobTimeOutProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobTimeOutProcessor.java
index c82e2ba..9395d11 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobTimeOutProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobTimeOutProcessor.java
@@ -9,9 +9,9 @@ package io.zeebe.engine.processing.job;
 
 import io.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecord;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.JobState;
 import io.zeebe.engine.state.immutable.JobState.State;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.JobIntent;
@@ -21,7 +21,7 @@ public final class JobTimeOutProcessor implements CommandProcessor<JobRecord> {
       ""Expected to time out activated job with key '%d', but %s"";
   private final JobState jobState;
 
-  public JobTimeOutProcessor(final MutableZeebeState state) {
+  public JobTimeOutProcessor(final ZeebeState state) {
     jobState = state.getJobState();
   }
 
diff --git a/engine/src/main/java/io/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
index 6c6d352..64e1e27 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
@@ -9,8 +9,8 @@ package io.zeebe.engine.processing.job;
 
 import io.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecord;
+import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.JobState;
-import io.zeebe.engine.state.mutable.MutableZeebeState;
 import io.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.JobIntent;
@@ -25,7 +25,7 @@ public final class JobUpdateRetriesProcessor implements CommandProcessor<JobReco
 
   private final JobState jobState;
 
-  public JobUpdateRetriesProcessor(final MutableZeebeState state) {
+  public JobUpdateRetriesProcessor(final ZeebeState state) {
     jobState = state.getJobState();
   }
 
diff --git a/engine/src/main/java/io/zeebe/engine/state/ZeebeState.java b/engine/src/main/java/io/zeebe/engine/state/ZeebeState.java
index b57aa98..12e489b 100644
--- a/engine/src/main/java/io/zeebe/engine/state/ZeebeState.java
+++ b/engine/src/main/java/io/zeebe/engine/state/ZeebeState.java
@@ -16,10 +16,10 @@ import io.zeebe.engine.state.immutable.JobState;
 import io.zeebe.engine.state.immutable.MessageStartEventSubscriptionState;
 import io.zeebe.engine.state.immutable.MessageState;
 import io.zeebe.engine.state.immutable.MessageSubscriptionState;
+import io.zeebe.engine.state.immutable.ProcessInstanceSubscriptionState;
+import io.zeebe.engine.state.immutable.ProcessState;
 import io.zeebe.engine.state.immutable.TimerInstanceState;
 import io.zeebe.engine.state.immutable.VariableState;
-import io.zeebe.engine.state.immutable.WorkflowInstanceSubscriptionState;
-import io.zeebe.engine.state.immutable.WorkflowState;
 
 public interface ZeebeState {
 

diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
index 7e5bd0d..98e7f83 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingScheduleServiceImpl.java
@@ -26,6 +26,7 @@ public class ProcessingScheduleServiceImpl implements ProcessingScheduleService 
   private final StreamProcessorContext streamProcessorContext;
   private final AbortableRetryStrategy writeRetryStrategy;
 
+  // todo remove context from CTOR; will be cleaned up after engine abstraction is done
   public ProcessingScheduleServiceImpl(final StreamProcessorContext streamProcessorContext) {
     actorControl = streamProcessorContext.getActor();
     this.streamProcessorContext = streamProcessorContext;
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
index 74d608a..0ff5182 100755
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
@@ -103,8 +103,6 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
   private ProcessingStateMachine processingStateMachine;
   private ReplayStateMachine replayStateMachine;
 
-  private volatile Phase phase = Phase.INITIAL;
-
   private CompletableActorFuture<Void> openFuture;
   private final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();
   private volatile long lastTickTime;
@@ -183,7 +181,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
       if (!shouldProcess) {
         setStateToPausedAndNotifyListeners();
       } else {
-        phase = Phase.REPLAY;
+        streamProcessorContext.phase(Phase.REPLAY);
       }
 
       if (isInReplayOnlyMode()) {
@@ -245,7 +243,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
 
   @Override
   public void onActorFailed() {
-    phase = Phase.FAILED;
+    streamProcessorContext.phase(Phase.FAILED);
     isOpened.set(false);
     lifecycleAwareListeners.forEach(StreamProcessorLifecycleAware::onFailed);
     tearDown();
@@ -277,7 +275,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
 
       streamProcessorContext.logStreamBatchWriter(batchWriter);
 
-      phase = Phase.PROCESSING;
+      streamProcessorContext.phase(Phase.PROCESSING);
 
       processingStateMachine =
           new ProcessingStateMachine(
@@ -399,7 +397,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
   }
 
   public boolean isFailed() {
-    return phase == Phase.FAILED;
+    return streamProcessorContext.getPhase() == Phase.FAILED;
   }
 
   public ActorFuture<Long> getLastProcessedPositionAsync() {
@@ -447,7 +445,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
     // If healthCheckTick was not invoked it indicates the actor is blocked in a runUntilDone loop.
     if (ActorClock.currentTimeMillis() - lastTickTime > HEALTH_CHECK_TICK_DURATION.toMillis() * 2) {
       return HealthReport.unhealthy(this).withMessage(""actor appears blocked"");
-    } else if (phase == Phase.FAILED) {
+    } else if (streamProcessorContext.getPhase() == Phase.FAILED) {
       return HealthReport.unhealthy(this).withMessage(""in failed phase"");
     } else {
       return HealthReport.healthy(this);
@@ -465,7 +463,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
   }
 
   public ActorFuture<Phase> getCurrentPhase() {
-    return actor.call(() -> phase);
+    return actor.call(streamProcessorContext::getPhase);
   }
 
   public ActorFuture<Void> pauseProcessing() {
@@ -494,7 +492,7 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
     }
 
     shouldProcess = false;
-    phase = Phase.PAUSED;
+    streamProcessorContext.phase(Phase.PAUSED);
   }
 
   public void resumeProcessing() {
@@ -504,14 +502,14 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
             shouldProcess = true;
 
             if (isInReplayOnlyMode() || !replayCompletedFuture.isDone()) {
-              phase = Phase.REPLAY;
+              streamProcessorContext.phase(Phase.REPLAY);
               actor.submit(replayStateMachine::replayNextEvent);
               LOG.debug(""Resumed replay for partition {}"", partitionId);
             } else {
               // we only want to call the lifecycle listeners on processing resume
               // since the listeners are not recovered yet
               lifecycleAwareListeners.forEach(StreamProcessorLifecycleAware::onResumed);
-              phase = Phase.PROCESSING;
+              streamProcessorContext.phase(Phase.PROCESSING);
               if (processingStateMachine != null) {
                 actor.submit(processingStateMachine::readNextRecord);
               }
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
index 427d678..c4d9274 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorContext.java
@@ -22,6 +22,7 @@ import io.camunda.zeebe.logstreams.log.LogStreamBatchWriter;
 import io.camunda.zeebe.logstreams.log.LogStreamReader;
 import io.camunda.zeebe.logstreams.log.LoggedEvent;
 import io.camunda.zeebe.scheduler.ActorControl;
+import io.camunda.zeebe.streamprocessor.StreamProcessor.Phase;
 import io.camunda.zeebe.streamprocessor.state.MutableLastProcessedPositionState;
 import java.util.function.BooleanSupplier;
 
@@ -61,6 +62,9 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
   // safe structure here
   private boolean inProcessing;
 
+  // this is accessed outside, which is why we need to make sure that it is thread-safe
+  private volatile StreamProcessor.Phase phase = Phase.INITIAL;
+
   public StreamProcessorContext actor(final ActorControl actor) {
     this.actor = actor;
     processingScheduleService = new ProcessingScheduleServiceImpl(this);
@@ -226,4 +230,12 @@ public final class StreamProcessorContext implements ReadonlyStreamProcessorCont
   public void partitionCommandSender(final InterPartitionCommandSender partitionCommandSender) {
     this.partitionCommandSender = partitionCommandSender;
   }
+
+  public Phase getPhase() {
+    return phase;
+  }
+
+  public void phase(final Phase phase) {
+    this.phase = phase;
+  }
 }

diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
index ca56036..b0eae19 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
@@ -191,7 +191,7 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
     lastVotedFor = meta.loadVote();
 
     // Construct the core log, reader, writer, and compactor.
-    raftLog = storage.openLog();
+    raftLog = storage.openLog(threadContext);
 
     // Open the snapshot store.
     persistedSnapshotStore = storage.getPersistedSnapshotStore();
@@ -431,7 +431,7 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
     if (commitIndex > previousCommitIndex) {
       this.commitIndex = commitIndex;
       raftLog.setCommitIndex(Math.min(commitIndex, raftLog.getLastIndex()));
-      if (raftLog.shouldFlushExplicitly() && isLeader()) {
+      if (isLeader()) {
         // leader counts itself in quorum, so in order to commit the leader must persist
         raftLog.flush();
         setLastWrittenIndex(commitIndex);
@@ -528,21 +528,14 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
    * @return a future to be completed once the log is flushed to disk
    */
   public CompletableFuture<Void> flushLog() {
-    final CompletableFuture<Void> future = new CompletableFuture<>();
-    if (raftLog.shouldFlushExplicitly()) {
-      // If default explicit flush is enabled, then the log is flushed by default before committing.
-      // Hence, there is no need to flush them again here. This is an optimization to ensure we are
-      // not unnecessarily blocking raft thread to do an i/o.
-      future.complete(null);
-    } else {
-      threadContext.execute(
-          () -> {
-            raftLog.flush();
-            future.complete(null);
-          });
+    // If flush operations are synchronous on the Raft thread, then the log is guaranteed to be
+    // flushed by before committing. Hence, there is no need to flush them again here. This is an
+    // optimization to ensure we are not unnecessarily blocking raft thread to do an i/o.
+    if (raftLog.flushesDirectly()) {
+      return CompletableFuture.completedFuture(null);
     }
 
-    return future;
+    return threadContext.submit(raftLog::forceFlush);
   }
 
   /** Attempts to become the leader. */
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroup.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroup.java
index 0e5113f..cf7b450 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroup.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroup.java
@@ -30,7 +30,10 @@ import io.atomix.primitive.partition.PartitionGroup;
 import io.atomix.primitive.partition.PartitionId;
 import io.atomix.primitive.partition.PartitionManagementService;
 import io.atomix.primitive.partition.PartitionMetadata;
+import io.atomix.raft.storage.log.RaftLog;
+import io.atomix.raft.storage.log.RaftLogFlusher;
 import io.atomix.raft.zeebe.EntryValidator;
+import io.atomix.utils.concurrent.ThreadContext;
 import io.atomix.utils.serializer.Namespace;
 import io.atomix.utils.serializer.Namespaces;
 import io.camunda.zeebe.snapshots.ReceivableSnapshotStoreFactory;
@@ -357,13 +360,14 @@ public final class RaftPartitionGroup implements ManagedPartitionGroup {
     }
 
     /**
-     * Sets whether to flush logs to disk on commit.
+     * Sets the {@link RaftLogFlusher.Factory} to create a new flushing strategy for the {@link
+     * RaftLog} when {@link io.atomix.raft.storage.RaftStorage#openLog(ThreadContext)}} is called.
      *
-     * @param flushExplicitly whether to flush logs to disk on commit
+     * @param flusherFactory factory to create the flushing strategy for the {@link RaftLog}
      * @return the Raft partition group builder
      */
-    public Builder withFlushExplicitly(final boolean flushExplicitly) {
-      config.getStorageConfig().setFlushExplicitly(flushExplicitly);
+    public Builder withFlusherFactory(final RaftLogFlusher.Factory flusherFactory) {
+      config.getStorageConfig().setFlusherFactory(flusherFactory);
       return this;
     }
 
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftStorageConfig.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftStorageConfig.java
index e4ae645..c6c3900 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftStorageConfig.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/RaftStorageConfig.java
@@ -17,6 +17,9 @@
 package io.atomix.raft.partition;
 
 import com.esotericsoftware.kryo.serializers.FieldSerializer.Optional;
+import io.atomix.raft.storage.log.RaftLog;
+import io.atomix.raft.storage.log.RaftLogFlusher;
+import io.atomix.utils.concurrent.ThreadContext;
 import io.camunda.zeebe.snapshots.ReceivableSnapshotStoreFactory;
 
 /** Raft storage configuration. */
@@ -24,7 +27,8 @@ public class RaftStorageConfig {
 
   private static final String DATA_PREFIX = "".data"";
   private static final int DEFAULT_MAX_SEGMENT_SIZE = 1024 * 1024 * 32;
-  private static final boolean DEFAULT_FLUSH_EXPLICITLY = true;
+  private static final RaftLogFlusher.Factory DEFAULT_FLUSHER_FACTORY =
+      RaftLogFlusher.Factory::direct;
   private static final long DEFAULT_FREE_DISK_SPACE = 1024L * 1024 * 1024;
   private static final int DEFAULT_JOURNAL_INDEX_DENSITY = 100;
 
@@ -32,7 +36,7 @@ public class RaftStorageConfig {
 
   private String directory;
   private long segmentSize = DEFAULT_MAX_SEGMENT_SIZE;
-  private boolean flushExplicitly = DEFAULT_FLUSH_EXPLICITLY;
+  private RaftLogFlusher.Factory flusherFactory = DEFAULT_FLUSHER_FACTORY;
   private long freeDiskSpace = DEFAULT_FREE_DISK_SPACE;
   private int journalIndexDensity = DEFAULT_JOURNAL_INDEX_DENSITY;
   private boolean preallocateSegmentFiles = DEFAULT_PREALLOCATE_SEGMENT_FILES;
@@ -73,24 +77,24 @@ public class RaftStorageConfig {
   }
 
   /**
-   * Returns whether to flush logs to disk to guarantee correctness. If true, followers will flush
-   * on every append, and the leader will flush on commit.
+   * Returns the {@link RaftLogFlusher.Factory} to create a new flushing strategy for the {@link
+   * RaftLog} when * {@link io.atomix.raft.storage.RaftStorage#openLog(ThreadContext)} is called.
    *
-   * @return whether to flush logs to disk
+   * @return the flusher factory for this storage
    */
-  public boolean shouldFlushExplicitly() {
-    return flushExplicitly;
+  public RaftLogFlusher.Factory flusherFactory() {
+    return flusherFactory;
   }
 
   /**
-   * Sets whether to flush logs to disk to guarantee correctness. If true, followers will flush on
-   * every append, and the leader will flush on commit.
+   * Sets the {@link RaftLogFlusher.Factory} to create a new flushing strategy for the {@link
+   * RaftLog} when {@link io.atomix.raft.storage.RaftStorage#openLog(ThreadContext)} is called.
    *
-   * @param flushExplicitly whether to flush logs to disk
+   * @param flusherFactory factory to create the flushing strategy for the {@link RaftLog}
    * @return the Raft partition group configuration
    */
-  public RaftStorageConfig setFlushExplicitly(final boolean flushExplicitly) {
-    this.flushExplicitly = flushExplicitly;
+  public RaftStorageConfig setFlusherFactory(final RaftLogFlusher.Factory flusherFactory) {
+    this.flusherFactory = flusherFactory;
     return this;
   }
 
@@ -181,7 +185,7 @@ public class RaftStorageConfig {
         + "", segmentSize=""
         + segmentSize
         + "", flushExplicitly=""
-        + flushExplicitly
+        + flusherFactory
         + "", freeDiskSpace=""
         + freeDiskSpace
         + "", journalIndexDensity=""
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
index 1ffbd52..2a68c19 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
@@ -326,7 +326,7 @@ public class RaftPartitionServer implements Managed<RaftPartitionServer>, Health
         .withPartitionId(partition.id().id())
         .withDirectory(partition.dataDirectory())
         .withMaxSegmentSize((int) storageConfig.getSegmentSize())
-        .withFlushExplicitly(storageConfig.shouldFlushExplicitly())
+        .withFlusherFactory(storageConfig.flusherFactory())
         .withFreeDiskSpace(storageConfig.getFreeDiskSpace())
         .withSnapshotStore(persistedSnapshotStore)
         .withJournalIndexDensity(storageConfig.getJournalIndexDensity())
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
index ba6d5da..656ed9d 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java
@@ -542,7 +542,7 @@ public class PassiveRole extends InactiveRole {
   }
 
   private void flush(final long lastWrittenIndex, final long previousEntryIndex) {
-    if (raft.getLog().shouldFlushExplicitly() && lastWrittenIndex > previousEntryIndex) {
+    if (raft.getLog().flushesDirectly() && lastWrittenIndex > previousEntryIndex) {
       raft.getLog().flush();
       raft.setLastWrittenIndex(lastWrittenIndex);
     }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/storage/RaftStorage.java b/atomix/cluster/src/main/java/io/atomix/raft/storage/RaftStorage.java
index fcb0ead..32157d0 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/storage/RaftStorage.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/storage/RaftStorage.java
@@ -21,7 +21,9 @@ import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import io.atomix.raft.storage.log.RaftLog;
+import io.atomix.raft.storage.log.RaftLogFlusher;
 import io.atomix.raft.storage.system.MetaStore;
+import io.atomix.utils.concurrent.ThreadContext;
 import io.camunda.zeebe.snapshots.PersistedSnapshotStore;
 import io.camunda.zeebe.snapshots.ReceivableSnapshotStore;
 import io.camunda.zeebe.util.FileUtil;
@@ -57,10 +59,10 @@ public final class RaftStorage {
   private final File directory;
   private final int maxSegmentSize;
   private final long freeDiskSpace;
-  private final boolean flushExplicitly;
   private final ReceivableSnapshotStore persistedSnapshotStore;
   private final int journalIndexDensity;
   private final boolean preallocateSegmentFiles;
+  private final RaftLogFlusher.Factory flusherFactory;
 
   private RaftStorage(
       final String prefix,
@@ -68,7 +70,7 @@ public final class RaftStorage {
       final File directory,
       final int maxSegmentSize,
       final long freeDiskSpace,
-      final boolean flushExplicitly,
+      final RaftLogFlusher.Factory flusherFactory,
       final ReceivableSnapshotStore persistedSnapshotStore,
       final int journalIndexDensity,
       final boolean preallocateSegmentFiles) {
@@ -77,7 +79,7 @@ public final class RaftStorage {
     this.directory = directory;
     this.maxSegmentSize = maxSegmentSize;
     this.freeDiskSpace = freeDiskSpace;
-    this.flushExplicitly = flushExplicitly;
+    this.flusherFactory = flusherFactory;
     this.persistedSnapshotStore = persistedSnapshotStore;
     this.journalIndexDensity = journalIndexDensity;
     this.preallocateSegmentFiles = preallocateSegmentFiles;
@@ -179,7 +181,7 @@ public final class RaftStorage {
    *
    * @return The opened log.
    */
-  public RaftLog openLog() {
+  public RaftLog openLog(final ThreadContext flushContext) {
     final long lastWrittenIndex;
     try (final MetaStore metaStore = openMetaStore()) {
       lastWrittenIndex = metaStore.loadLastWrittenIndex();
@@ -191,10 +193,10 @@ public final class RaftStorage {
         .withDirectory(directory)
         .withMaxSegmentSize(maxSegmentSize)
         .withFreeDiskSpace(freeDiskSpace)
-        .withFlushExplicitly(flushExplicitly)
         .withJournalIndexDensity(journalIndexDensity)
         .withLastWrittenIndex(lastWrittenIndex)
         .withPreallocateSegmentFiles(preallocateSegmentFiles)
+        .withFlusher(flusherFactory.createFlusher(flushContext))
         .build();
   }
 
@@ -208,7 +210,8 @@ public final class RaftStorage {
    *
    * <p>The storage directory is the directory to which all {@link RaftLog}s write files. Segment
    * files for multiple logs may be stored in the storage directory, and files for each log instance
-   * will be identified by the {@code name} provided when the log is {@link #openLog() opened}.
+   * will be identified by the {@code name} provided when the log is {@link #openLog(ThreadContext)
+   * opened}.
    *
    * @return The storage directory.
    */
@@ -239,7 +242,8 @@ public final class RaftStorage {
         System.getProperty(""atomix.data"", System.getProperty(""user.dir""));
     private static final int DEFAULT_MAX_SEGMENT_SIZE = 1024 * 1024 * 32;
     private static final long DEFAULT_FREE_DISK_SPACE = 1024L * 1024 * 1024;
-    private static final boolean DEFAULT_FLUSH_EXPLICITLY = true;
+    private static final RaftLogFlusher.Factory DEFAULT_FLUSHER_FACTORY =
+        RaftLogFlusher.Factory::direct;
     private static final int DEFAULT_JOURNAL_INDEX_DENSITY = 100;
     private static final boolean DEFAULT_PREALLOCATE_SEGMENT_FILES = true;
 
@@ -250,7 +254,7 @@ public final class RaftStorage {
     private File directory = new File(DEFAULT_DIRECTORY);
     private int maxSegmentSize = DEFAULT_MAX_SEGMENT_SIZE;
     private long freeDiskSpace = DEFAULT_FREE_DISK_SPACE;
-    private boolean flushExplicitly = DEFAULT_FLUSH_EXPLICITLY;
+    private RaftLogFlusher.Factory flusherFactory = DEFAULT_FLUSHER_FACTORY;
     private ReceivableSnapshotStore persistedSnapshotStore;
     private int journalIndexDensity = DEFAULT_JOURNAL_INDEX_DENSITY;
     private boolean preallocateSegmentFiles = DEFAULT_PREALLOCATE_SEGMENT_FILES;
@@ -318,14 +322,14 @@ public final class RaftStorage {
     }
 
     /**
-     * Sets whether to flush logs to disk to guarantee correctness. If true, followers will flush on
-     * every append, and the leader will flush on commit.
+     * Sets the {@link RaftLogFlusher.Factory} to create a new flushing strategy for the {@link
+     * RaftLog} when {@link #openLog(ThreadContext)} is called.
      *
-     * @param flushExplicitly whether to flush buffers to disk
+     * @param flusherFactory factory to create the flushing strategy for the {@link RaftLog}
      * @return the storage builder.
      */
-    public Builder withFlushExplicitly(final boolean flushExplicitly) {
-      this.flushExplicitly = flushExplicitly;
+    public Builder withFlusherFactory(final RaftLogFlusher.Factory flusherFactory) {
+      this.flusherFactory = flusherFactory;
       return this;
     }
 
@@ -382,7 +386,7 @@ public final class RaftStorage {
           directory,
           maxSegmentSize,
           freeDiskSpace,
-          flushExplicitly,
+          flusherFactory,
           persistedSnapshotStore,
           journalIndexDensity,
           preallocateSegmentFiles);
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLog.java b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLog.java
index c77d66d..6defefb 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLog.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLog.java
@@ -29,16 +29,16 @@ import org.agrona.CloseHelper;
 
 /** Raft log. */
 public final class RaftLog implements Closeable {
-  private final Journal journal;
   private final RaftEntrySerializer serializer = new RaftEntrySBESerializer();
-  private final boolean flushExplicitly;
+  private final Journal journal;
+  private final RaftLogFlusher flusher;
 
   private IndexedRaftLogEntry lastAppendedEntry;
   private volatile long commitIndex;
 
-  RaftLog(final Journal journal, final boolean flushExplicitly) {
+  RaftLog(final Journal journal, final RaftLogFlusher flusher) {
     this.journal = journal;
-    this.flushExplicitly = flushExplicitly;
+    this.flusher = flusher;
   }
 
   /**
@@ -101,8 +101,8 @@ public final class RaftLog implements Closeable {
     commitIndex = index;
   }
 
-  public boolean shouldFlushExplicitly() {
-    return flushExplicitly;
+  public boolean flushesDirectly() {
+    return flusher.isDirect();
   }
 
   public long getFirstIndex() {
@@ -168,7 +168,22 @@ public final class RaftLog implements Closeable {
     lastAppendedEntry = null;
   }
 
+  /**
+   * Flushes the underlying journal using the configured flushing strategy. For guarantees, refer to
+   * the configured {@link RaftLogFlusher}.
+   */
   public void flush() {
+    flusher.flush(journal);
+  }
+
+  /**
+   * Flushes the underlying journal in a blocking, synchronous way. When this returns, it is
+   * guaranteed that any appended data since the last flush is persisted on disk.
+   *
+   * <p>NOTE: this bypasses the configured flushing strategy, and is meant to be used when certain
+   * guarantees are required.
+   */
+  public void forceFlush() {
     journal.flush();
   }
 
@@ -184,8 +199,6 @@ public final class RaftLog implements Closeable {
         + journal
         + "", serializer=""
         + serializer
-        + "", flushExplicitly=""
-        + flushExplicitly
         + "", lastAppendedEntry=""
         + lastAppendedEntry
         + "", commitIndex=""
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLogBuilder.java b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLogBuilder.java
index ddb8b99..a6ef880 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLogBuilder.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/RaftLogBuilder.java
@@ -15,6 +15,7 @@
  */
 package io.atomix.raft.storage.log;
 
+import io.atomix.raft.storage.log.RaftLogFlusher.DirectFlusher;
 import io.camunda.zeebe.journal.Journal;
 import io.camunda.zeebe.journal.file.SegmentedJournal;
 import io.camunda.zeebe.journal.file.SegmentedJournalBuilder;
@@ -23,7 +24,7 @@ import java.io.File;
 public class RaftLogBuilder implements io.atomix.utils.Builder<RaftLog> {
 
   private final SegmentedJournalBuilder journalBuilder = SegmentedJournal.builder();
-  private boolean flushExplicitly = true;
+  private RaftLogFlusher flusher = RaftLogFlusher.DIRECT;
 
   protected RaftLogBuilder() {}
 
@@ -83,18 +84,15 @@ public class RaftLogBuilder implements io.atomix.utils.Builder<RaftLog> {
   }
 
   /**
-   * Sets whether or not to flush buffered I/O explicitly at various points, returning the builder
-   * for chaining.
+   * Sets the flushing strategy. See implementations of {@link RaftLogFlusher} for which to use.
+   * Each strategy provides different guarantees to allow for a trade-off between performance and
+   * safety.
    *
-   * <p>Enabling this ensures that entries are flushed on followers before acknowledging a write,
-   * and are flushed on the leader before marking an entry as committed. This guarantees the
-   * correctness of various Raft properties.
-   *
-   * @param flushExplicitly whether to flush explicitly or not
+   * @param flusher the flushing strategy, defaults to {@link DirectFlusher}
    * @return this builder for chaining
    */
-  public RaftLogBuilder withFlushExplicitly(final boolean flushExplicitly) {
-    this.flushExplicitly = flushExplicitly;
+  public RaftLogBuilder withFlusher(final RaftLogFlusher flusher) {
+    this.flusher = flusher;
     return this;
   }
 
@@ -145,6 +143,6 @@ public class RaftLogBuilder implements io.atomix.utils.Builder<RaftLog> {
   @Override
   public RaftLog build() {
     final Journal journal = journalBuilder.build();
-    return new RaftLog(journal, flushExplicitly);
+    return new RaftLog(journal, flusher);
   }
 }
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java b/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
index 407f06a..ed52be5 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
@@ -56,7 +56,7 @@ public class PassiveRoleTest {
     ctx = mock(RaftContext.class);
 
     log = mock(RaftLog.class);
-    when(log.shouldFlushExplicitly()).thenReturn(true);
+    when(log.flushesDirectly()).thenReturn(true);
     when(ctx.getLog()).thenReturn(log);
 
     final PersistedSnapshot snapshot = mock(PersistedSnapshot.class);
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/storage/RaftStorageTest.java b/atomix/cluster/src/test/java/io/atomix/raft/storage/RaftStorageTest.java
index 7b75342..6d1eaa6 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/storage/RaftStorageTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/storage/RaftStorageTest.java
@@ -18,6 +18,7 @@ package io.atomix.raft.storage;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import io.atomix.raft.storage.log.RaftLogFlusher;
 import io.camunda.zeebe.util.FileUtil;
 import java.io.File;
 import java.io.IOException;
@@ -46,7 +47,7 @@ public class RaftStorageTest {
             .withDirectory(new File(PATH.toFile(), ""foo""))
             .withMaxSegmentSize(1024 * 1024)
             .withFreeDiskSpace(100)
-            .withFlushExplicitly(false)
+            .withFlusherFactory(RaftLogFlusher.Factory::noop)
             .build();
     assertThat(storage.prefix()).isEqualTo(""foo"");
     assertThat(storage.directory()).isEqualTo(new File(PATH.toFile(), ""foo""));
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/storage/log/RaftLogTest.java b/atomix/cluster/src/test/java/io/atomix/raft/storage/log/RaftLogTest.java
index 96ffbc8..791b9b5 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/storage/log/RaftLogTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/storage/log/RaftLogTest.java
@@ -18,11 +18,16 @@ package io.atomix.raft.storage.log;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
 import io.atomix.cluster.MemberId;
 import io.atomix.raft.cluster.RaftMember.Type;
 import io.atomix.raft.cluster.impl.DefaultRaftMember;
+import io.atomix.raft.storage.log.RaftLogFlusher.DirectFlusher;
+import io.atomix.raft.storage.log.RaftLogFlusher.NoOpFlusher;
 import io.atomix.raft.storage.log.entry.ApplicationEntry;
 import io.atomix.raft.storage.log.entry.ConfigurationEntry;
 import io.atomix.raft.storage.log.entry.InitialEntry;
@@ -37,6 +42,7 @@ import java.util.Set;
 import org.agrona.concurrent.UnsafeBuffer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
@@ -215,19 +221,6 @@ class RaftLogTest {
     assertThat(raftlog.getCommitIndex()).isEqualTo(10);
   }
 
-  @Test
-  void shouldFlushWhenFlushExplicitlyTrue() {
-    // given
-    final Journal journal = mock(Journal.class);
-    final var log = new RaftLog(journal, true);
-
-    // when
-    log.flush();
-
-    // then
-    verify(journal).flush();
-  }
-
   private ApplicationEntry createApplicationEntryAfter(final ApplicationEntry applicationEntry) {
     return createApplicationEntry(applicationEntry.highestPosition() + 1);
   }
@@ -237,4 +230,62 @@ class RaftLogTest {
     return new SerializedApplicationEntry(
         lowestPosition, lowestPosition + DEFAULT_APPLICATION_ENTRY_LENGTH - 1, data);
   }
+
+  @Nested
+  final class FlushTest {
+    @Test
+    void shouldUseFlusher() {
+      // given
+      final var journal = mock(Journal.class);
+      final var flusher = mock(RaftLogFlusher.class);
+      final var log = new RaftLog(journal, flusher);
+
+      // when
+      log.flush();
+
+      // then
+      verify(flusher, times(1)).flush(journal);
+    }
+
+    @Test
+    void shouldForceFlush() {
+      final var journal = mock(Journal.class);
+      final var flusher = mock(RaftLogFlusher.class);
+      final var log = new RaftLog(journal, flusher);
+
+      // when
+      log.forceFlush();
+
+      // then
+      verify(journal, times(1)).flush();
+    }
+
+    @Test
+    void shouldFlushDirectly() {
+      // given
+      final var journal = mock(Journal.class);
+      final var log = new RaftLog(journal, new DirectFlusher());
+
+      // when
+      log.flush();
+
+      // then
+      verify(journal, times(1)).flush();
+    }
+
+    @Test
+    void shouldDisableFlush() {
+      // given
+      final var journal = mock(Journal.class);
+      final var flusher = spy(new NoOpFlusher());
+      final var log = new RaftLog(journal, flusher);
+
+      // when
+      log.flush();
+
+      // then
+      verify(flusher, times(1)).flush(journal);
+      verify(journal, never()).flush();
+    }
+  }
 }
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/zeebe/util/ZeebeTestNode.java b/atomix/cluster/src/test/java/io/atomix/raft/zeebe/util/ZeebeTestNode.java
index a4ee63d..01032ba 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/zeebe/util/ZeebeTestNode.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/zeebe/util/ZeebeTestNode.java
@@ -91,7 +91,7 @@ public class ZeebeTestNode {
   }
 
   public RaftPartitionGroup getPartitionGroup() {
-    return this.dataPartitionGroup;
+    return dataPartitionGroup;
   }
 
   public MemberId getMemberId() {
@@ -119,7 +119,6 @@ public class ZeebeTestNode {
         .withMembers(members.toArray(new Member[0]))
         .withNumPartitions(1)
         .withPartitionSize(members.size())
-        .withFlushExplicitly(true)
         .withSegmentSize(1024L)
         .withSnapshotStoreFactory(
             (path, partition) -> new TestSnapshotStore(new AtomicReference<>()));

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
index 5ab95a2..a8bb679 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
@@ -10,7 +10,6 @@ package io.camunda.zeebe.engine.processing.processinstance;
 import static io.camunda.zeebe.util.buffer.BufferUtil.bufferAsString;
 import static io.camunda.zeebe.util.buffer.BufferUtil.wrapString;
 
-import io.camunda.zeebe.engine.Loggers;
 import io.camunda.zeebe.engine.metrics.ProcessEngineMetrics;
 import io.camunda.zeebe.engine.processing.bpmn.BpmnElementContextImpl;
 import io.camunda.zeebe.engine.processing.common.CatchEventBehavior;
@@ -28,7 +27,6 @@ import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.deployment.DeployedProcess;
 import io.camunda.zeebe.engine.state.immutable.ProcessState;
 import io.camunda.zeebe.msgpack.property.ArrayProperty;
-import io.camunda.zeebe.msgpack.spec.MsgpackReaderException;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceCreationRecord;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceCreationStartInstruction;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
@@ -53,10 +51,6 @@ public final class CreateProcessInstanceProcessor
       ""Expected to find process definition with key '%d', but none found"";
   private static final String ERROR_MESSAGE_NO_NONE_START_EVENT =
       ""Expected to create instance of process with none start event, but there is no such event"";
-  private static final String ERROR_INVALID_VARIABLES_REJECTION_MESSAGE =
-      ""Expected to set variables from document, but the document is invalid: '%s'"";
-  private static final String ERROR_INVALID_VARIABLES_LOGGED_MESSAGE =
-      ""Expected to set variables from document, but the document is invalid"";
 
   private final ProcessInstanceRecord newProcessInstance = new ProcessInstanceRecord();
 
@@ -105,10 +99,9 @@ public final class CreateProcessInstanceProcessor
     }
 
     final long processInstanceKey = keyGenerator.nextKey();
-    if (!setVariablesFromDocument(
-        controller, record, process.getKey(), processInstanceKey, process.getBpmnProcessId())) {
-      return true;
-    }
+
+    setVariablesFromDocument(
+        record, process.getKey(), processInstanceKey, process.getBpmnProcessId());
 
     final var processInstance = initProcessInstanceRecord(process, processInstanceKey);
     if (record.startInstructions().isEmpty()) {
@@ -213,29 +206,18 @@ public final class CreateProcessInstanceProcessor
     }
   }
 
-  private boolean setVariablesFromDocument(
-      final CommandControl<ProcessInstanceCreationRecord> controller,
+  private void setVariablesFromDocument(
       final ProcessInstanceCreationRecord record,
       final long processDefinitionKey,
       final long processInstanceKey,
       final DirectBuffer bpmnProcessId) {
-    try {
-      variableBehavior.mergeLocalDocument(
-          processInstanceKey,
-          processDefinitionKey,
-          processInstanceKey,
-          bpmnProcessId,
-          record.getVariablesBuffer());
-    } catch (final MsgpackReaderException e) {
-      Loggers.PROCESS_PROCESSOR_LOGGER.error(ERROR_INVALID_VARIABLES_LOGGED_MESSAGE, e);
-      controller.reject(
-          RejectionType.INVALID_ARGUMENT,
-          String.format(ERROR_INVALID_VARIABLES_REJECTION_MESSAGE, e.getMessage()));
 
-      return false;
-    }
-
-    return true;
+    variableBehavior.mergeLocalDocument(
+        processInstanceKey,
+        processDefinitionKey,
+        processInstanceKey,
+        bpmnProcessId,
+        record.getVariablesBuffer());
   }
 
   private ProcessInstanceRecord initProcessInstanceRecord(

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/BrokerStartupProcess.java b/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/BrokerStartupProcess.java
index 52fa3a9..d81c27a 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/BrokerStartupProcess.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/BrokerStartupProcess.java
@@ -50,21 +50,20 @@ public final class BrokerStartupProcess {
       // must be executed before any disk space usage listeners are registered
       result.add(new DiskSpaceUsageMonitorStep());
     }
-
     result.add(new MonitoringServerStep());
     result.add(new BrokerAdminServiceStep());
+
     result.add(new ClusterServicesCreationStep());
+    result.add(new ClusterServicesStep());
 
     result.add(new CommandApiServiceStep());
     result.add(new SubscriptionApiStep());
-
-    result.add(new ClusterServicesStep());
+    result.add(new LeaderManagementRequestHandlerStep());
 
     if (config.getGateway().isEnable()) {
       result.add(new EmbeddedGatewayServiceStep());
     }
 
-    result.add(new LeaderManagementRequestHandlerStep());
     result.add(new PartitionManagerStep());
 
     return result;

diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
index 550d763..f0507b7 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
@@ -22,9 +22,6 @@ import io.camunda.zeebe.model.bpmn.instance.BoundaryEvent;
 import io.camunda.zeebe.model.bpmn.instance.MultiInstanceLoopCharacteristics;
 import io.camunda.zeebe.model.bpmn.instance.bpmndi.BpmnShape;
 import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
-import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeInput;
-import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeIoMapping;
-import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeOutput;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
@@ -35,9 +32,12 @@ public abstract class AbstractActivityBuilder<
         B extends AbstractActivityBuilder<B, E>, E extends Activity>
     extends AbstractFlowNodeBuilder<B, E> implements ZeebeVariablesMappingBuilder<B> {
 
+  private final ZeebeVariablesMappingBuilder<B> variablesMappingBuilder;
+
   protected AbstractActivityBuilder(
       final BpmnModelInstance modelInstance, final E element, final Class<?> selfType) {
     super(modelInstance, element, selfType);
+    variablesMappingBuilder = new ZeebeVariableMappingBuilderImpl<>(myself);
   }
 
   public BoundaryEventBuilder boundaryEvent() {
@@ -143,33 +143,21 @@ public abstract class AbstractActivityBuilder<
 
   @Override
   public B zeebeInputExpression(final String sourceExpression, final String target) {
-    final String expression = asZeebeExpression(sourceExpression);
-    return zeebeInput(expression, target);
+    return variablesMappingBuilder.zeebeInputExpression(sourceExpression, target);
   }
 
   @Override
   public B zeebeOutputExpression(final String sourceExpression, final String target) {
-    final String expression = asZeebeExpression(sourceExpression);
-    return zeebeOutput(expression, target);
+    return variablesMappingBuilder.zeebeOutputExpression(sourceExpression, target);
   }
 
   @Override
   public B zeebeInput(final String source, final String target) {
-    final ZeebeIoMapping ioMapping = getCreateSingleExtensionElement(ZeebeIoMapping.class);
-    final ZeebeInput input = createChild(ioMapping, ZeebeInput.class);
-    input.setSource(source);
-    input.setTarget(target);
-
-    return myself;
+    return variablesMappingBuilder.zeebeInput(source, target);
   }
 
   @Override
   public B zeebeOutput(final String source, final String target) {
-    final ZeebeIoMapping ioMapping = getCreateSingleExtensionElement(ZeebeIoMapping.class);
-    final ZeebeOutput input = createChild(ioMapping, ZeebeOutput.class);
-    input.setSource(source);
-    input.setTarget(target);
-
-    return myself;
+    return variablesMappingBuilder.zeebeOutput(source, target);
   }
 }
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariableMappingBuilderImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariableMappingBuilderImpl.java
new file mode 100644
index 0000000..93ac87b
--- /dev/null
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariableMappingBuilderImpl.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.camunda.zeebe.model.bpmn.builder;
+
+import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeInput;
+import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeIoMapping;
+import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeOutput;
+
+public class ZeebeVariableMappingBuilderImpl<B extends AbstractBaseElementBuilder<?, ?>>
+    implements ZeebeVariablesMappingBuilder<B> {
+
+  private final B elementBuilder;
+
+  public ZeebeVariableMappingBuilderImpl(final B elementBuilder) {
+    this.elementBuilder = elementBuilder;
+  }
+
+  @Override
+  public B zeebeInputExpression(final String sourceExpression, final String target) {
+    final String expression = elementBuilder.asZeebeExpression(sourceExpression);
+    return zeebeInput(expression, target);
+  }
+
+  @Override
+  public B zeebeOutputExpression(final String sourceExpression, final String target) {
+    final String expression = elementBuilder.asZeebeExpression(sourceExpression);
+    return zeebeOutput(expression, target);
+  }
+
+  @Override
+  public B zeebeInput(final String source, final String target) {
+    final ZeebeIoMapping ioMapping =
+        elementBuilder.getCreateSingleExtensionElement(ZeebeIoMapping.class);
+    final ZeebeInput input = elementBuilder.createChild(ioMapping, ZeebeInput.class);
+    input.setSource(source);
+    input.setTarget(target);
+
+    return elementBuilder;
+  }
+
+  @Override
+  public B zeebeOutput(final String source, final String target) {
+    final ZeebeIoMapping ioMapping =
+        elementBuilder.getCreateSingleExtensionElement(ZeebeIoMapping.class);
+    final ZeebeOutput input = elementBuilder.createChild(ioMapping, ZeebeOutput.class);
+    input.setSource(source);
+    input.setTarget(target);
+
+    return elementBuilder;
+  }
+}
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariablesMappingBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariablesMappingBuilder.java
index eb69ea3..f022bb9 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariablesMappingBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ZeebeVariablesMappingBuilder.java
@@ -15,6 +15,7 @@
  */
 package io.camunda.zeebe.model.bpmn.builder;
 
+/** A fluent builder for elements with variable mappings. */
 public interface ZeebeVariablesMappingBuilder<B> {
 
   B zeebeInputExpression(String sourceExpression, String target);

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/Broker.java b/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
index 65ba15a..a00b839 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/Broker.java
@@ -11,8 +11,6 @@ import io.atomix.cluster.AtomixCluster;
 import io.camunda.zeebe.broker.bootstrap.BrokerContext;
 import io.camunda.zeebe.broker.bootstrap.BrokerStartupContextImpl;
 import io.camunda.zeebe.broker.bootstrap.BrokerStartupProcess;
-import io.camunda.zeebe.broker.bootstrap.CloseProcess;
-import io.camunda.zeebe.broker.bootstrap.StartProcess;
 import io.camunda.zeebe.broker.clustering.ClusterServices;
 import io.camunda.zeebe.broker.clustering.ClusterServicesImpl;
 import io.camunda.zeebe.broker.exporter.repo.ExporterLoadException;
@@ -48,7 +46,6 @@ public final class Broker implements AutoCloseable {
   private ClusterServicesImpl clusterServices;
   private CompletableFuture<Broker> startFuture;
   private final ActorScheduler scheduler;
-  private CloseProcess closeProcess;
   private BrokerHealthCheckService healthCheckService;
   private BrokerAdminService brokerAdminService;
 
@@ -110,10 +107,13 @@ public final class Broker implements AutoCloseable {
   }
 
   private void internalStart() {
-    final StartProcess startProcess = initStart();
-
     try {
-      closeProcess = startProcess.start();
+      brokerContext = brokerStartupActor.start().join();
+
+      testCompanionObject.embeddedGatewayService = brokerContext.getEmbeddedGatewayService();
+      testCompanionObject.diskSpaceUsageMonitor = brokerContext.getDiskSpaceUsageMonitor();
+      brokerAdminService = brokerContext.getBrokerAdminService();
+
       startFuture.complete(this);
       healthCheckService.setBrokerStarted();
     } catch (final Exception bootStrapException) {
@@ -128,27 +128,8 @@ public final class Broker implements AutoCloseable {
     }
   }
 
-  private StartProcess initStart() {
-    final StartProcess startContext = new StartProcess(""Broker-"" + localBroker.getNodeId());
-    startContext.addStep(""Migrated Startup Steps"", this::migratedStartupSteps);
-    return startContext;
-  }
-
-  private AutoCloseable migratedStartupSteps() {
-    brokerContext = brokerStartupActor.start().join();
-
     clusterServices = brokerContext.getClusterServices();
     testCompanionObject.atomix = clusterServices.getAtomixCluster();
-    testCompanionObject.embeddedGatewayService = brokerContext.getEmbeddedGatewayService();
-    testCompanionObject.diskSpaceUsageMonitor = brokerContext.getDiskSpaceUsageMonitor();
-    brokerAdminService = brokerContext.getBrokerAdminService();
-
-    return () -> {
-      brokerStartupActor.stop().join();
-      healthCheckService = null;
-    };
-  }
-
   private BrokerInfo createBrokerInfo(final BrokerCfg brokerCfg) {
     final var clusterCfg = brokerCfg.getCluster();
 
@@ -202,7 +183,8 @@ public final class Broker implements AutoCloseable {
             startFuture
                 .thenAccept(
                     b -> {
-                      closeProcess.closeReverse();
+                      brokerStartupActor.stop().join();
+                      healthCheckService = null;
                       isClosed = true;
                       testCompanionObject.atomix = null;
                       LOG.info(""Broker shut down."");

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
index fa6f8d4..2185b1e 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceProcessor.java
@@ -37,7 +37,6 @@ import io.camunda.zeebe.protocol.record.intent.ProcessInstanceCreationIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
 import io.camunda.zeebe.util.Either;
-import io.camunda.zeebe.util.collection.Tuple;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
@@ -236,21 +235,22 @@ public final class CreateProcessInstanceProcessor
     return startInstructions.stream()
         .map(
             instruction ->
-                Tuple.of(
+                new ElementIdAndType(
                     instruction.getElementId(),
                     process.getElementById(instruction.getElementIdBuffer()).getElementType()))
-        .filter(elementTuple -> UNSUPPORTED_ELEMENT_TYPES.contains(elementTuple.getRight()))
+        .filter(
+            elementIdAndType -> UNSUPPORTED_ELEMENT_TYPES.contains(elementIdAndType.elementType))
         .findAny()
         .map(
-            elementTypeTuple ->
+            elementIdAndType ->
                 Either.left(
                     new Rejection(
                         RejectionType.INVALID_ARGUMENT,
                         (""Expected to create instance of process with start instructions but the element with id '%s' targets unsupported element type '%s'. ""
                                 + ""Supported element types are: %s"")
                             .formatted(
-                                elementTypeTuple.getLeft(),
-                                elementTypeTuple.getRight(),
+                                elementIdAndType.elementId,
+                                elementIdAndType.elementType,
                                 Arrays.stream(BpmnElementType.values())
                                     .filter(
                                         elementType ->
@@ -493,4 +493,6 @@ public final class CreateProcessInstanceProcessor
   }
 
   record Rejection(RejectionType type, String reason) {}
+
+  record ElementIdAndType(String elementId, BpmnElementType elementType) {}
 }

diff --git a/scheduler/src/main/java/io/camunda/zeebe/scheduler/ActorTask.java b/scheduler/src/main/java/io/camunda/zeebe/scheduler/ActorTask.java
index f05dac0..7aa20dd 100644
--- a/scheduler/src/main/java/io/camunda/zeebe/scheduler/ActorTask.java
+++ b/scheduler/src/main/java/io/camunda/zeebe/scheduler/ActorTask.java
@@ -279,18 +279,21 @@ public class ActorTask {
   }
 
   public void onFailure(final Throwable failure) {
-    switch (lifecyclePhase) {
+    final var currentPhase = lifecyclePhase;
+    switch (currentPhase) {
       case STARTING -> {
         Loggers.ACTOR_LOGGER.error(
             ""Actor failed in phase 'STARTING'. Discard all jobs and stop immediately."", failure);
         lifecyclePhase = ActorLifecyclePhase.FAILED;
         discardNextJobs();
         startingFuture.completeExceptionally(failure);
-        closeFuture.complete(null);
+        closeFuture.completeExceptionally(failure);
       }
-      case CLOSING -> {
+      case CLOSING, CLOSE_REQUESTED -> {
         Loggers.ACTOR_LOGGER.error(
-            ""Actor failed in phase 'CLOSING'. Discard all jobs and stop immediately."", failure);
+            ""Actor failed in phase '{}'. Discard all jobs and stop immediately."",
+            currentPhase,
+            failure);
         lifecyclePhase = ActorLifecyclePhase.FAILED;
         discardNextJobs();
         closeFuture.completeExceptionally(failure);
@@ -517,7 +520,7 @@ public class ActorTask {
     }
 
     if (previousPhase != ActorLifecyclePhase.CLOSED) {
-      closeFuture.complete(null);
+      closeFuture.completeExceptionally(error);
     }
 
     discardNextJobs();
diff --git a/scheduler/src/test/java/io/camunda/zeebe/scheduler/lifecycle/ActorLifecyclePhasesTest.java b/scheduler/src/test/java/io/camunda/zeebe/scheduler/lifecycle/ActorLifecyclePhasesTest.java
index 16acfce..42573b1 100644
--- a/scheduler/src/test/java/io/camunda/zeebe/scheduler/lifecycle/ActorLifecyclePhasesTest.java
+++ b/scheduler/src/test/java/io/camunda/zeebe/scheduler/lifecycle/ActorLifecyclePhasesTest.java
@@ -377,7 +377,7 @@ public final class ActorLifecyclePhasesTest {
                 ActorLifecyclePhase.STARTING,
                 ActorLifecyclePhase.STARTED,
                 ActorLifecyclePhase.FAILED));
-    assertThat(closeFuture).succeedsWithin(Duration.ofSeconds(1));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
   }
 
   @Test
@@ -436,7 +436,7 @@ public final class ActorLifecyclePhasesTest {
                 ActorLifecyclePhase.CLOSE_REQUESTED,
                 ActorLifecyclePhase.CLOSING,
                 ActorLifecyclePhase.FAILED));
-    assertThat(closeFuture).succeedsWithin(Duration.ofSeconds(1));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
   }
 
   @Test
@@ -460,7 +460,7 @@ public final class ActorLifecyclePhasesTest {
     assertThat(actor.phases)
         .isEqualTo(List.of(ActorLifecyclePhase.STARTING, ActorLifecyclePhase.FAILED));
     assertThat(startFuture).failsWithin(Duration.ofSeconds(1));
-    assertThat(closeFuture).succeedsWithin(Duration.ofSeconds(1));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
   }
 
   @Test
@@ -483,6 +483,63 @@ public final class ActorLifecyclePhasesTest {
     // then
     assertThat(actor.phases).isEqualTo(List.of(ActorLifecyclePhase.STARTING));
     assertThat(startFuture).failsWithin(Duration.ofSeconds(1));
-    assertThat(closeFuture).succeedsWithin(Duration.ofSeconds(1));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
+  }
+
+  @Test
+  public void shouldCompleteCloseFutureWhenFailingOnCloseRequested() {
+    // given
+    final LifecycleRecordingActor actor =
+        new LifecycleRecordingActor() {
+          @Override
+          public void onActorCloseRequested() {
+            super.onActorCloseRequested();
+            actor.fail(new RuntimeException(""hello""));
+          }
+        };
+
+    // when
+    schedulerRule.submitActor(actor);
+    schedulerRule.workUntilDone();
+    final ActorFuture<Void> closeFuture = actor.closeAsync();
+    schedulerRule.workUntilDone();
+
+    // then
+    assertThat(actor.phases)
+        .isEqualTo(
+            List.of(
+                ActorLifecyclePhase.STARTING,
+                ActorLifecyclePhase.STARTED,
+                ActorLifecyclePhase.CLOSE_REQUESTED,
+                ActorLifecyclePhase.FAILED));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
+  }
+
+  @Test
+  public void shouldCompleteCloseFutureWhenExceptionOnCloseRequested() {
+    // given
+    final LifecycleRecordingActor actor =
+        new LifecycleRecordingActor() {
+          @Override
+          public void onActorCloseRequested() {
+            super.onActorCloseRequested();
+            throw new RuntimeException(""hello"");
+          }
+        };
+
+    // when
+    schedulerRule.submitActor(actor);
+    schedulerRule.workUntilDone();
+    final ActorFuture<Void> closeFuture = actor.closeAsync();
+    schedulerRule.workUntilDone();
+
+    // then
+    assertThat(actor.phases)
+        .isEqualTo(
+            List.of(
+                ActorLifecyclePhase.STARTING,
+                ActorLifecyclePhase.STARTED,
+                ActorLifecyclePhase.CLOSE_REQUESTED));
+    assertThat(closeFuture).failsWithin(Duration.ofSeconds(1));
   }
 }

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
index cc998c6..65c8550 100755
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
@@ -167,13 +167,8 @@ public final class ExporterDirectorDistributionTest {
    * <p>This makes sure that even if we miss one export position event, we distribute the event
    * later again, which makes tests less flaky.
    */
-  private static final class ClockShifter implements ConditionEvaluationListener<Void> {
-
-    private final ControlledActorClock clock;
-
-    public ClockShifter(final ControlledActorClock clock) {
-      this.clock = clock;
-    }
+  private record ClockShifter(ControlledActorClock clock)
+      implements ConditionEvaluationListener<Void> {
 
     @Override
     public void conditionEvaluated(final EvaluatedCondition<Void> condition) {

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
index 634d375..ae8f52c 100755
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
@@ -111,16 +111,16 @@ public final class CatchEventBehavior {
       final ExecutableCatchEvent event,
       final BpmnElementContext context) {
     return Either.<Failure, EvalResult>right(new EvalResult(event))
-        .flatMap(result -> evaluateMessageName(ep, event, context).map(result::withMessageName))
-        .flatMap(
-            result -> evaluateCorrelationKey(ep, event, context).map(result::withCorrelationKey))
-        .flatMap(result -> evaluateTimer(ep, event, context).map(result::withTimer));
+        .flatMap(result -> evaluateMessageName(ep, event, context, result))
+        .flatMap(result -> evaluateCorrelationKey(ep, event, context, result))
+        .flatMap(result -> evaluateTimer(ep, event, context, result));
   }
 
-  private Either<Failure, DirectBuffer> evaluateMessageName(
+  private Either<Failure, EvalResult> evaluateMessageName(
       final ExpressionProcessor expressionProcessor,
       final ExecutableCatchEvent event,
-      final BpmnElementContext context) {
+      final BpmnElementContext context,
+      final EvalResult result) {
     if (!event.isMessage()) {
       return Either.right(null);
     }
@@ -129,13 +129,15 @@ public final class CatchEventBehavior {
     final Expression messageNameExpression = message.getMessageNameExpression();
     return expressionProcessor
         .evaluateStringExpression(messageNameExpression, scopeKey)
-        .map(BufferUtil::wrapString);
+        .map(BufferUtil::wrapString)
+        .map(result::withMessageName);
   }
 
-  private Either<Failure, DirectBuffer> evaluateCorrelationKey(
+  private Either<Failure, EvalResult> evaluateCorrelationKey(
       final ExpressionProcessor expressionProcessor,
       final ExecutableCatchEvent event,
-      final BpmnElementContext context) {
+      final BpmnElementContext context,
+      final EvalResult result) {
     if (!event.isMessage()) {
       return Either.right(null);
     }
@@ -147,18 +149,20 @@ public final class CatchEventBehavior {
     return expressionProcessor
         .evaluateMessageCorrelationKeyExpression(expression, scopeKey)
         .map(BufferUtil::wrapString)
+        .map(result::withCorrelationKey)
         .mapLeft(f -> new Failure(f.getMessage(), f.getErrorType(), scopeKey));
   }
 
-  private Either<Failure, Timer> evaluateTimer(
+  private Either<Failure, EvalResult> evaluateTimer(
       final ExpressionProcessor expressionProcessor,
       final ExecutableCatchEvent event,
-      final BpmnElementContext context) {
+      final BpmnElementContext context,
+      final EvalResult result) {
     if (!event.isTimer()) {
       return Either.right(null);
     }
     final var scopeKey = context.getElementInstanceKey();
-    return event.getTimerFactory().apply(expressionProcessor, scopeKey);
+    return event.getTimerFactory().apply(expressionProcessor, scopeKey).map(result::withTimer);
   }
 
   private void subscribeToMessageEvents(

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/jobstream/StreamPusher.java b/broker/src/main/java/io/camunda/zeebe/broker/jobstream/StreamPusher.java
index e72d15a..db403ec 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/jobstream/StreamPusher.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/jobstream/StreamPusher.java
@@ -52,20 +52,11 @@ final class StreamPusher<P extends BufferWriter> {
           .send(request, streamId.receiver())
           .whenCompleteAsync((ok, error) -> onPush(payload, errorHandler, error), executor);
       if (LOG.isTraceEnabled()) {
-        LOG.trace(
-            ""Pushed {} to receiver {} of stream {}"",
-            payload,
-            streamId.receiver(),
-            streamId.streamId());
+        LOG.trace(""Pushed {} to stream {}"", payload, streamId);
       }
     } catch (final Exception e) {
       metrics.jobPushFailed();
-      LOG.debug(
-          ""Failed to push {} to receiver {} of stream {}"",
-          payload,
-          streamId.receiver(),
-          streamId.streamId(),
-          e);
+      LOG.debug(""Failed to push {} to stream {}"", payload, streamId, e);
       errorHandler.handleError(e, payload);
     }
   }
@@ -73,12 +64,7 @@ final class StreamPusher<P extends BufferWriter> {
   private void onPush(final P payload, final ErrorHandler<P> errorHandler, final Throwable error) {
     if (error != null) {
       metrics.jobPushFailed();
-      LOG.debug(
-          ""Failed to push {} to receiver {} of stream {}"",
-          payload,
-          streamId.receiver(),
-          streamId.streamId(),
-          error);
+      LOG.debug(""Failed to push {} to stream {}"", payload, streamId, error);
       errorHandler.handleError(error, payload);
     } else {
       metrics.jobPushed();

diff --git a/atomix/cluster/src/main/java/io/atomix/raft/RaftApplicationEntryCommittedPositionListener.java b/atomix/cluster/src/main/java/io/atomix/raft/RaftApplicationEntryCommittedPositionListener.java
new file mode 100644
index 0000000..57c28a9
--- /dev/null
+++ b/atomix/cluster/src/main/java/io/atomix/raft/RaftApplicationEntryCommittedPositionListener.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2016-present Open Networking Foundation
+ * Copyright © 2020 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.atomix.raft;
+
+/**
+ * This listener will only be called by the Leader, when it commits an application entry.
+ *
+ * <p>If RAFT is currently running in a follower role, it will not call this listener.
+ */
+@FunctionalInterface
+public interface RaftApplicationEntryCommittedPositionListener {
+
+  /**
+   * @param committedPosition the new committed position which is related to the application entries
+   */
+  void onCommit(long committedPosition);
+}
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java b/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java
deleted file mode 100644
index 3d11d75..0000000
--- a/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright 2016-present Open Networking Foundation
- * Copyright © 2020 camunda services GmbH (info@camunda.com)
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.atomix.raft;
-
-import io.atomix.raft.storage.log.IndexedRaftLogEntry;
-
-/**
- * This listener will only be called by the Leader, when it commits an entry. If RAFT is currently
- * running in a follower role, it will not call this listener.
- */
-@FunctionalInterface
-public interface RaftCommittedEntryListener {
-
-  /**
-   * @param indexedRaftLogEntry the new committed entry
-   */
-  void onCommit(IndexedRaftLogEntry indexedRaftLogEntry);
-}
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
index 1f4ee98..c177cb1 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java
@@ -27,8 +27,8 @@ import io.atomix.cluster.MemberId;
 import io.atomix.cluster.messaging.MessagingException.NoRemoteHandler;
 import io.atomix.cluster.messaging.MessagingException.NoSuchMemberException;
 import io.atomix.raft.ElectionTimer;
+import io.atomix.raft.RaftApplicationEntryCommittedPositionListener;
 import io.atomix.raft.RaftCommitListener;
-import io.atomix.raft.RaftCommittedEntryListener;
 import io.atomix.raft.RaftError;
 import io.atomix.raft.RaftException.ProtocolException;
 import io.atomix.raft.RaftRoleChangeListener;
@@ -61,7 +61,6 @@ import io.atomix.raft.roles.PromotableRole;
 import io.atomix.raft.roles.RaftRole;
 import io.atomix.raft.storage.RaftStorage;
 import io.atomix.raft.storage.StorageException;
-import io.atomix.raft.storage.log.IndexedRaftLogEntry;
 import io.atomix.raft.storage.log.RaftLog;
 import io.atomix.raft.storage.system.MetaStore;
 import io.atomix.raft.utils.StateUtil;
@@ -115,7 +114,7 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
   private final Set<Consumer<State>> stateChangeListeners = new CopyOnWriteArraySet<>();
   private final Set<Consumer<RaftMember>> electionListeners = new CopyOnWriteArraySet<>();
   private final Set<RaftCommitListener> commitListeners = new CopyOnWriteArraySet<>();
-  private final Set<RaftCommittedEntryListener> committedEntryListeners =
+  private final Set<RaftApplicationEntryCommittedPositionListener> committedEntryListeners =
       new CopyOnWriteArraySet<>();
   private final Set<SnapshotReplicationListener> snapshotReplicationListeners =
       new CopyOnWriteArraySet<>();
@@ -433,21 +432,23 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
    * <p>Note that it will be called on the Raft thread, and as such should not perform any heavy
    * computation.
    *
-   * @param raftCommittedEntryListener the listener to add
+   * @param raftApplicationEntryCommittedPositionListener the listener to add
    */
   public void addCommittedEntryListener(
-      final RaftCommittedEntryListener raftCommittedEntryListener) {
-    committedEntryListeners.add(raftCommittedEntryListener);
+      final RaftApplicationEntryCommittedPositionListener
+          raftApplicationEntryCommittedPositionListener) {
+    committedEntryListeners.add(raftApplicationEntryCommittedPositionListener);
   }
 
   /**
    * Removes registered committedEntryListener
    *
-   * @param raftCommittedEntryListener the listener to remove
+   * @param raftApplicationEntryCommittedPositionListener the listener to remove
    */
   public void removeCommittedEntryListener(
-      final RaftCommittedEntryListener raftCommittedEntryListener) {
-    committedEntryListeners.remove(raftCommittedEntryListener);
+      final RaftApplicationEntryCommittedPositionListener
+          raftApplicationEntryCommittedPositionListener) {
+    committedEntryListeners.remove(raftApplicationEntryCommittedPositionListener);
   }
 
   /**
@@ -464,7 +465,7 @@ public class RaftContext implements AutoCloseable, HealthMonitorable {
    *
    * @param committedEntry the most recently committed entry
    */
-  public void notifyCommittedEntryListeners(final IndexedRaftLogEntry committedEntry) {
+  public void notifyApplicationEntryCommittedPositionListeners(final long committedEntry) {
     committedEntryListeners.forEach(listener -> listener.onCommit(committedEntry));
   }
 
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
index 56c7172..d075fca 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
@@ -21,8 +21,8 @@ import io.atomix.cluster.MemberId;
 import io.atomix.cluster.messaging.ClusterCommunicationService;
 import io.atomix.primitive.partition.Partition;
 import io.atomix.primitive.partition.PartitionMetadata;
+import io.atomix.raft.RaftApplicationEntryCommittedPositionListener;
 import io.atomix.raft.RaftCommitListener;
-import io.atomix.raft.RaftCommittedEntryListener;
 import io.atomix.raft.RaftRoleChangeListener;
 import io.atomix.raft.RaftServer;
 import io.atomix.raft.RaftServer.Role;
@@ -205,16 +205,20 @@ public class RaftPartitionServer implements HealthMonitorable {
   }
 
   /**
-   * @see io.atomix.raft.impl.RaftContext#addCommittedEntryListener(RaftCommittedEntryListener)
+   * @see
+   *     io.atomix.raft.impl.RaftContext#addCommittedEntryListener(RaftApplicationEntryCommittedPositionListener)
    */
-  public void addCommittedEntryListener(final RaftCommittedEntryListener commitListener) {
+  public void addCommittedEntryListener(
+      final RaftApplicationEntryCommittedPositionListener commitListener) {
     server.getContext().addCommittedEntryListener(commitListener);
   }
 
   /**
-   * @see io.atomix.raft.impl.RaftContext#removeCommittedEntryListener(RaftCommittedEntryListener)
+   * @see
+   *     io.atomix.raft.impl.RaftContext#removeCommittedEntryListener(RaftApplicationEntryCommittedPositionListener)
    */
-  public void removeCommittedEntryListener(final RaftCommittedEntryListener commitListener) {
+  public void removeCommittedEntryListener(
+      final RaftApplicationEntryCommittedPositionListener commitListener) {
     server.getContext().removeCommittedEntryListener(commitListener);
   }
 
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java
index e54df1a..fcfd177 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java
@@ -630,27 +630,47 @@ public final class LeaderRole extends ActiveRole implements ZeebeLogAppender {
 
   private void replicate(final IndexedRaftLogEntry indexed, final AppendListener appendListener) {
     raft.checkThread();
-    appender
-        .appendEntries(indexed.index())
-        .whenCompleteAsync(
-            (commitIndex, commitError) -> {
-              if (!isRunning()) {
-                return;
-              }
+    final var appendEntriesFuture = appender.appendEntries(indexed.index());
+
+    final boolean applicationEntryWasCommitted = indexed.isApplicationEntry();
+    if (applicationEntryWasCommitted) {
+      // We have some services which are waiting for the application records, especially position
+      // to be committed. This is our glue code to notify them, instead of
+      // passing the complete object (IndexedRaftLogEntry) threw the listeners and
+      // keep them in heap until they are committed. This had the risk of going out of OOM
+      // if records can't be committed, see https://github.com/camunda/zeebe/issues/14275
+      final var committedPosition = indexed.getApplicationEntry().highestPosition();
+      appendEntriesFuture.whenCompleteAsync(
+          (commitIndex, commitError) -> {
+            if (!isRunning()) {
+              return;
+            }
+
+            if (commitError == null) {
+              raft.notifyApplicationEntryCommittedPositionListeners(committedPosition);
+            }
+          },
+          raft.getThreadContext());
+    }
 
-              // have the state machine apply the index which should do nothing but ensures it keeps
-              // up to date with the latest entries, so it can handle configuration and initial
-              // entries properly on fail over
-              if (commitError == null) {
-                appendListener.onCommit(indexed.index());
-                raft.notifyCommittedEntryListeners(indexed);
-              } else {
-                appendListener.onCommitError(indexed.index(), commitError);
-                // replicating the entry will be retried on the next append request
-                log.error(""Failed to replicate entry: {}"", indexed, commitError);
-              }
-            },
-            raft.getThreadContext());
+    appendEntriesFuture.whenCompleteAsync(
+        (commitIndex, commitError) -> {
+          if (!isRunning()) {
+            return;
+          }
+
+          // have the state machine apply the index which should do nothing but ensures it keeps
+          // up to date with the latest entries, so it can handle configuration and initial
+          // entries properly on fail over
+          if (commitError == null) {
+            appendListener.onCommit(indexed.index());
+          } else {
+            appendListener.onCommitError(indexed.index(), commitError);
+            // replicating the entry will be retried on the next append request
+            log.error(""Failed to replicate entry: {}"", indexed, commitError);
+          }
+        },
+        raft.getThreadContext());
   }
 
   public synchronized void onInitialEntriesCommitted(final Runnable runnable) {
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/RaftAppendTest.java b/atomix/cluster/src/test/java/io/atomix/raft/RaftAppendTest.java
index b217586..8029766 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/RaftAppendTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/RaftAppendTest.java
@@ -82,7 +82,7 @@ public class RaftAppendTest {
   @Test
   public void shouldNotifyCommittedEntryListenerOnLeaderOnly() throws Throwable {
     // given
-    final var committedEntryListener = mock(RaftCommittedEntryListener.class);
+    final var committedEntryListener = mock(RaftApplicationEntryCommittedPositionListener.class);
     raftRule.addCommittedEntryListener(committedEntryListener);
 
     // when
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java b/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
index 8f73cba..193a176 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
@@ -644,9 +644,12 @@ public final class RaftRule extends ExternalResource {
   }
 
   public void addCommittedEntryListener(
-      final RaftCommittedEntryListener raftCommittedEntryListener) {
+      final RaftApplicationEntryCommittedPositionListener
+          raftApplicationEntryCommittedPositionListener) {
     servers.forEach(
-        (id, raft) -> raft.getContext().addCommittedEntryListener(raftCommittedEntryListener));
+        (id, raft) ->
+            raft.getContext()
+                .addCommittedEntryListener(raftApplicationEntryCommittedPositionListener));
   }
 
   public void partition(final RaftServer follower) {
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
index a61571f..6c082d7 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
@@ -7,8 +7,7 @@
  */
 package io.camunda.zeebe.broker.system.partitions.impl;
 
-import io.atomix.raft.RaftCommittedEntryListener;
-import io.atomix.raft.storage.log.IndexedRaftLogEntry;
+import io.atomix.raft.RaftApplicationEntryCommittedPositionListener;
 import io.camunda.zeebe.broker.system.partitions.NoEntryAtSnapshotPosition;
 import io.camunda.zeebe.broker.system.partitions.StateController;
 import io.camunda.zeebe.logstreams.impl.Loggers;
@@ -36,7 +35,7 @@ import java.util.function.Consumer;
 import org.slf4j.Logger;
 
 public final class AsyncSnapshotDirector extends Actor
-    implements RaftCommittedEntryListener, HealthMonitorable {
+    implements RaftApplicationEntryCommittedPositionListener, HealthMonitorable {
 
   public static final Duration MINIMUM_SNAPSHOT_PERIOD = Duration.ofMinutes(1);
 
@@ -115,7 +114,7 @@ public final class AsyncSnapshotDirector extends Actor
   @Override
   protected void handleFailure(final Throwable failure) {
     LOG.error(
-        ""No snapshot was taken due to failure in '{}'. Will try to take snapshot after snapshot period {}. {}"",
+        ""No snapshot was taken due to failure in '{}'. Will try to take snapshot after snapshot period {}."",
         actorName,
         snapshotRate,
         failure);
@@ -407,13 +406,8 @@ public final class AsyncSnapshotDirector extends Actor
   }
 
   @Override
-  public void onCommit(final IndexedRaftLogEntry indexedRaftLogEntry) {
-    // is called by the Leader Role and gives the last committed entry, where we
-    // can extract the highest position, which corresponds to the last committed position
-    if (indexedRaftLogEntry.isApplicationEntry()) {
-      final var committedPosition = indexedRaftLogEntry.getApplicationEntry().highestPosition();
-      newPositionCommitted(committedPosition);
-    }
+  public void onCommit(final long committedPosition) {
+    newPositionCommitted(committedPosition);
   }
 
   public void newPositionCommitted(final long currentCommitPosition) {

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
index f47f830..68de52f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobCompleteProcessor.java
@@ -7,7 +7,6 @@
  */
 package io.camunda.zeebe.engine.processing.job;
 
-import io.camunda.zeebe.auth.impl.Authorization;
 import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.common.EventHandle;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
@@ -23,7 +22,6 @@ import io.camunda.zeebe.protocol.record.intent.Intent;
 import io.camunda.zeebe.protocol.record.intent.JobIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.stream.api.records.TypedRecord;
-import java.util.List;
 
 public final class JobCompleteProcessor implements CommandProcessor<JobRecord> {
 
@@ -81,9 +79,7 @@ public final class JobCompleteProcessor implements CommandProcessor<JobRecord> {
 
     final long jobKey = command.getKey();
 
-    final List<String> authorizedTenants =
-        (List<String>) command.getAuthorizations().get(Authorization.AUTHORIZED_TENANTS);
-    final JobRecord job = jobState.getJob(jobKey, authorizedTenants);
+    final JobRecord job = jobState.getJob(jobKey, command.getAuthorizations());
     if (job == null) {
       commandControl.reject(RejectionType.NOT_FOUND, String.format(NO_JOB_FOUND_MESSAGE, jobKey));
       return;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
index fbb6f77..bc1a46d 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobFailProcessor.java
@@ -11,7 +11,6 @@ import static io.camunda.zeebe.engine.EngineConfiguration.DEFAULT_MAX_ERROR_MESS
 import static io.camunda.zeebe.util.StringUtil.limitString;
 import static io.camunda.zeebe.util.buffer.BufferUtil.wrapString;
 
-import io.camunda.zeebe.auth.impl.Authorization;
 import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnBehaviors;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnJobActivationBehavior;
@@ -98,10 +97,7 @@ public final class JobFailProcessor implements TypedRecordProcessor<JobRecord> {
     final var retries = failJobCommandRecord.getRetries();
     final var retryBackOff = failJobCommandRecord.getRetryBackoff();
 
-    final List<String> authorizedTenants =
-        (List<String>) record.getAuthorizations().get(Authorization.AUTHORIZED_TENANTS);
-    final JobRecord failedJob = jobState.getJob(jobKey, authorizedTenants);
-
+    final JobRecord failedJob = jobState.getJob(jobKey, record.getAuthorizations());
     if (failedJob == null) {
       final String errorMessage = String.format(NO_JOB_FOUND_MESSAGE, jobKey);
       rejectionWriter.appendRejection(record, RejectionType.NOT_FOUND, errorMessage);
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
index 195113d..07fecf5 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobThrowErrorProcessor.java
@@ -10,7 +10,6 @@ package io.camunda.zeebe.engine.processing.job;
 import static io.camunda.zeebe.engine.EngineConfiguration.DEFAULT_MAX_ERROR_MESSAGE_SIZE;
 import static io.camunda.zeebe.util.StringUtil.limitString;
 
-import io.camunda.zeebe.auth.impl.Authorization;
 import io.camunda.zeebe.engine.metrics.JobMetrics;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnEventPublicationBehavior;
 import io.camunda.zeebe.engine.processing.common.Failure;
@@ -34,7 +33,6 @@ import io.camunda.zeebe.protocol.record.value.ErrorType;
 import io.camunda.zeebe.stream.api.records.TypedRecord;
 import io.camunda.zeebe.stream.api.state.KeyGenerator;
 import io.camunda.zeebe.util.Either;
-import java.util.List;
 import java.util.Optional;
 
 public class JobThrowErrorProcessor implements CommandProcessor<JobRecord> {
@@ -108,9 +106,7 @@ public class JobThrowErrorProcessor implements CommandProcessor<JobRecord> {
       final TypedRecord<JobRecord> command, final CommandControl<JobRecord> commandControl) {
     final long jobKey = command.getKey();
 
-    final List<String> authorizedTenants =
-        (List<String>) command.getAuthorizations().get(Authorization.AUTHORIZED_TENANTS);
-    final JobRecord job = jobState.getJob(jobKey, authorizedTenants);
+    final JobRecord job = jobState.getJob(jobKey, command.getAuthorizations());
     if (job == null) {
       commandControl.reject(RejectionType.NOT_FOUND, String.format(NO_JOB_FOUND_MESSAGE, jobKey));
       return;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
index 49ef2b3..5cdcb97 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/job/JobUpdateRetriesProcessor.java
@@ -7,7 +7,6 @@
  */
 package io.camunda.zeebe.engine.processing.job;
 
-import io.camunda.zeebe.auth.impl.Authorization;
 import io.camunda.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.camunda.zeebe.engine.state.immutable.JobState;
 import io.camunda.zeebe.engine.state.immutable.ProcessingState;
@@ -15,7 +14,6 @@ import io.camunda.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.JobIntent;
 import io.camunda.zeebe.stream.api.records.TypedRecord;
-import java.util.List;
 
 public final class JobUpdateRetriesProcessor implements CommandProcessor<JobRecord> {
 
@@ -38,9 +36,7 @@ public final class JobUpdateRetriesProcessor implements CommandProcessor<JobReco
     final int retries = command.getValue().getRetries();
 
     if (retries > 0) {
-      final List<String> authorizedTenants =
-          (List<String>) command.getAuthorizations().get(Authorization.AUTHORIZED_TENANTS);
-      final JobRecord job = jobState.getJob(key, authorizedTenants);
+      final JobRecord job = jobState.getJob(key, command.getAuthorizations());
 
       if (job != null) {
         // update retries for response sent to client
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/immutable/JobState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/immutable/JobState.java
index fbc3312..b0e87b5 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/immutable/JobState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/immutable/JobState.java
@@ -9,6 +9,7 @@ package io.camunda.zeebe.engine.state.immutable;
 
 import io.camunda.zeebe.protocol.impl.record.value.job.JobRecord;
 import java.util.List;
+import java.util.Map;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 import org.agrona.DirectBuffer;
@@ -30,7 +31,7 @@ public interface JobState {
 
   JobRecord getJob(long key);
 
-  JobRecord getJob(final long key, final List<String> authorizedTenantIds);
+  JobRecord getJob(final long key, final Map<String, Object> authorizations);
 
   long findBackedOffJobs(final long timestamp, final BiPredicate<Long, JobRecord> callback);
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
index 0791516..0a207f0 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/instance/DbJobState.java
@@ -7,6 +7,7 @@
  */
 package io.camunda.zeebe.engine.state.instance;
 
+import io.camunda.zeebe.auth.impl.Authorization;
 import io.camunda.zeebe.db.ColumnFamily;
 import io.camunda.zeebe.db.TransactionContext;
 import io.camunda.zeebe.db.ZeebeDb;
@@ -24,6 +25,7 @@ import io.camunda.zeebe.protocol.ZbColumnFamilies;
 import io.camunda.zeebe.protocol.impl.record.value.job.JobRecord;
 import io.camunda.zeebe.util.EnsureUtil;
 import java.util.List;
+import java.util.Map;
 import java.util.function.BiFunction;
 import java.util.function.BiPredicate;
 import org.agrona.DirectBuffer;
@@ -348,9 +350,9 @@ public final class DbJobState implements JobState, MutableJobState {
   }
 
   @Override
-  public JobRecord getJob(final long key, final List<String> authorizedTenantIds) {
+  public JobRecord getJob(final long key, final Map<String, Object> authorizations) {
     final JobRecord jobRecord = getJob(key);
-    if (authorizedTenantIds.contains(jobRecord.getTenantId())) {
+    if (getAuthorizedTenantIds(authorizations).contains(jobRecord.getTenantId())) {
       return jobRecord;
     }
     return null;
@@ -461,4 +463,8 @@ public final class DbJobState implements JobState, MutableJobState {
       backoffColumnFamily.deleteIfExists(backoffJobKey);
     }
   }
+
+  private List<String> getAuthorizedTenantIds(final Map<String, Object> authorizations) {
+    return (List<String>) authorizations.get(Authorization.AUTHORIZED_TENANTS);
+  }
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
index b428658..5bd4fcd 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
@@ -21,6 +21,12 @@ import io.camunda.zeebe.protocol.record.intent.Intent;
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * Implementation of {@code ProcessingResultBuilder} that uses direct access to the stream and to
+ * response writer. This implementation is here to support a bridge for legacy code. Legacy code can
+ * first be shaped into the interfaces defined in engine abstraction, and subseqeently the
+ * interfaces can be re-implemented to allow for buffered writing to stream and response writer
+ */
 final class DirectProcessingResultBuilder implements ProcessingResultBuilder {
 
   private final List<PostCommitTask> postCommitTasks = new ArrayList<>();
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
index 3df2377..b5fd57d 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
@@ -9,6 +9,8 @@ package io.camunda.zeebe.streamprocessor;
 
 import io.camunda.zeebe.db.TransactionContext;
 import io.camunda.zeebe.db.ZeebeDbTransaction;
+import io.camunda.zeebe.engine.api.ProcessingResult;
+import io.camunda.zeebe.engine.api.ProcessingResultBuilder;
 import io.camunda.zeebe.engine.api.TypedRecord;
 import io.camunda.zeebe.engine.metrics.StreamProcessorMetrics;
 import io.camunda.zeebe.engine.processing.streamprocessor.EventFilter;
@@ -44,6 +46,7 @@ import io.camunda.zeebe.util.exception.RecoverableException;
 import io.camunda.zeebe.util.exception.UnrecoverableException;
 import io.prometheus.client.Histogram;
 import java.time.Duration;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import org.slf4j.Logger;
 
@@ -157,10 +160,11 @@ public final class ProcessingStateMachine {
   private Histogram.Timer processingTimer;
   private boolean reachedEnd = true;
   private boolean inProcessing;
+  private final StreamProcessorContext context;
 
   public ProcessingStateMachine(
       final StreamProcessorContext context, final BooleanSupplier shouldProcessNext) {
-
+    this.context = context;
     actor = context.getActor();
     recordProcessorMap = context.getRecordProcessorMap();
     recordValues = context.getRecordValues();
@@ -263,6 +267,9 @@ public final class ProcessingStateMachine {
       final var value = recordValues.readRecordValue(command, metadata.getValueType());
       typedCommand.wrap(command, metadata, value);
 
+      final ProcessingResultBuilder resultBuilder = new DirectProcessingResultBuilder(context);
+      final AtomicReference<ProcessingResult> processingResultRef = new AtomicReference<>();
+
       metrics.processingLatency(command.getTimestamp(), processingStartTime);
 
       zeebeDbTransaction = transactionContext.getCurrentTransaction();
@@ -284,6 +291,9 @@ public final class ProcessingStateMachine {
                   this::setSideEffectProducer);
             }
 
+            final var processingResult = resultBuilder.build();
+            processingResultRef.set(processingResult);
+
             lastProcessedPositionState.markAsProcessed(position);
           });
 

diff --git a/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java b/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
index fff4802..c1394c7 100644
--- a/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
+++ b/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
@@ -69,7 +69,7 @@ final class CheckpointRecordsProcessorTest {
       final ProcessingScheduleService executor, final ZeebeDb zeebeDb) {
     final var context = zeebeDb.createContext();
     return new RecordProcessorContextImpl(
-        1, executor, zeebeDb, context, null, null, new DbKeyGenerator(1, zeebeDb, context));
+        1, executor, zeebeDb, context, null, new DbKeyGenerator(1, zeebeDb, context));
   }
 
   @AfterEach
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/StreamProcessorTransitionStep.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/StreamProcessorTransitionStep.java
index 9e22c26..03741ac 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/StreamProcessorTransitionStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/StreamProcessorTransitionStep.java
@@ -13,7 +13,6 @@ import io.camunda.zeebe.broker.system.partitions.PartitionTransitionStep;
 import io.camunda.zeebe.engine.Engine;
 import io.camunda.zeebe.engine.api.RecordProcessor;
 import io.camunda.zeebe.engine.api.TypedRecord;
-import io.camunda.zeebe.engine.state.appliers.EventAppliers;
 import io.camunda.zeebe.logstreams.log.LoggedEvent;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 import io.camunda.zeebe.streamprocessor.StreamProcessor;
@@ -144,7 +143,6 @@ public final class StreamProcessorTransitionStep implements PartitionTransitionS
         .actorSchedulingService(context.getActorSchedulingService())
         .zeebeDb(context.getZeebeDb())
         .recordProcessors(recordProcessors)
-        .eventApplierFactory(EventAppliers::new)
         .nodeId(context.getNodeId())
         .commandResponseWriter(context.getCommandResponseWriter())
         .listener(
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index cc64676..b66a6b7 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -23,6 +23,7 @@ import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessors;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
 import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.ZeebeDbState;
+import io.camunda.zeebe.engine.state.appliers.EventAppliers;
 import io.camunda.zeebe.engine.state.processing.DbBlackListState;
 import io.camunda.zeebe.logstreams.impl.Loggers;
 import io.camunda.zeebe.protocol.impl.record.value.error.ErrorRecord;
@@ -72,7 +73,7 @@ public class Engine implements RecordProcessor {
             recordProcessorContext.getZeebeDb(),
             recordProcessorContext.getTransactionContext(),
             recordProcessorContext.getKeyGenerator());
-    eventApplier = recordProcessorContext.getEventApplierFactory().apply(zeebeState);
+    eventApplier = new EventAppliers(zeebeState);
 
     writers = new Writers(resultBuilderMutex, eventApplier);
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessorContext.java b/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessorContext.java
index fc4a218..dd7c66d 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessorContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/api/RecordProcessorContext.java
@@ -9,11 +9,8 @@ package io.camunda.zeebe.engine.api;
 
 import io.camunda.zeebe.db.TransactionContext;
 import io.camunda.zeebe.db.ZeebeDb;
-import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.KeyGenerator;
-import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import java.util.List;
-import java.util.function.Function;
 
 public interface RecordProcessorContext {
 
@@ -25,8 +22,6 @@ public interface RecordProcessorContext {
 
   TransactionContext getTransactionContext();
 
-  Function<MutableZeebeState, EventApplier> getEventApplierFactory();
-
   List<StreamProcessorLifecycleAware> getLifecycleListeners();
 
   void addLifecycleListeners(final List<StreamProcessorLifecycleAware> lifecycleListeners);
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/RecordProcessorContextImpl.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/RecordProcessorContextImpl.java
index 0b04e24..f19ed08 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/RecordProcessorContextImpl.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/RecordProcessorContextImpl.java
@@ -13,13 +13,10 @@ import io.camunda.zeebe.engine.api.InterPartitionCommandSender;
 import io.camunda.zeebe.engine.api.ProcessingScheduleService;
 import io.camunda.zeebe.engine.api.RecordProcessorContext;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
-import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.KeyGenerator;
 import io.camunda.zeebe.engine.state.KeyGeneratorControls;
-import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.function.Function;
 
 public final class RecordProcessorContextImpl implements RecordProcessorContext {
 
@@ -27,7 +24,6 @@ public final class RecordProcessorContextImpl implements RecordProcessorContext 
   private final ProcessingScheduleService scheduleService;
   private final ZeebeDb zeebeDb;
   private final TransactionContext transactionContext;
-  private final Function<MutableZeebeState, EventApplier> eventApplierFactory;
   private final List<StreamProcessorLifecycleAware> lifecycleListeners = new ArrayList<>();
   private final InterPartitionCommandSender partitionCommandSender;
   private final KeyGenerator keyGenerator;
@@ -37,14 +33,12 @@ public final class RecordProcessorContextImpl implements RecordProcessorContext 
       final ProcessingScheduleService scheduleService,
       final ZeebeDb zeebeDb,
       final TransactionContext transactionContext,
-      final Function<MutableZeebeState, EventApplier> eventApplierFactory,
       final InterPartitionCommandSender partitionCommandSender,
       final KeyGeneratorControls keyGeneratorControls) {
     this.partitionId = partitionId;
     this.scheduleService = scheduleService;
     this.zeebeDb = zeebeDb;
     this.transactionContext = transactionContext;
-    this.eventApplierFactory = eventApplierFactory;
     this.partitionCommandSender = partitionCommandSender;
     keyGenerator = keyGeneratorControls;
   }
@@ -70,11 +64,6 @@ public final class RecordProcessorContextImpl implements RecordProcessorContext 
   }
 
   @Override
-  public Function<MutableZeebeState, EventApplier> getEventApplierFactory() {
-    return eventApplierFactory;
-  }
-
-  @Override
   public List<StreamProcessorLifecycleAware> getLifecycleListeners() {
     return lifecycleListeners;
   }
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
index 0cde429..3f4aaf0 100755
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessor.java
@@ -13,8 +13,6 @@ import io.camunda.zeebe.engine.api.RecordProcessor;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
 import io.camunda.zeebe.engine.metrics.StreamProcessorMetrics;
 import io.camunda.zeebe.engine.processing.streamprocessor.RecordValues;
-import io.camunda.zeebe.engine.state.EventApplier;
-import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.engine.state.processing.DbKeyGenerator;
 import io.camunda.zeebe.logstreams.impl.Loggers;
 import io.camunda.zeebe.logstreams.log.LogRecordAwaiter;
@@ -38,7 +36,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.function.Function;
 import org.slf4j.Logger;
 
 /*
@@ -87,7 +84,6 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
   private final ActorSchedulingService actorSchedulingService;
   private final AtomicBoolean isOpened = new AtomicBoolean(false);
   private final List<StreamProcessorLifecycleAware> lifecycleAwareListeners;
-  private final Function<MutableZeebeState, EventApplier> eventApplierFactory;
   private final Set<FailureListener> failureListeners = new HashSet<>();
   private final StreamProcessorMetrics metrics;
 
@@ -118,8 +114,6 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
     lifecycleAwareListeners = processorBuilder.getLifecycleListeners();
     zeebeDb = processorBuilder.getZeebeDb();
 
-    eventApplierFactory = processorBuilder.getEventApplierFactory();
-
     streamProcessorContext =
         processorBuilder
             .getProcessingContext()
@@ -340,7 +334,6 @@ public class StreamProcessor extends Actor implements HealthMonitorable, LogReco
             streamProcessorContext.getScheduleService(),
             zeebeDb,
             streamProcessorContext.getTransactionContext(),
-            eventApplierFactory,
             streamProcessorContext.getPartitionCommandSender(),
             streamProcessorContext.getKeyGeneratorControls());
 
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorBuilder.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorBuilder.java
index 031cb1c..5ea8f6e 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorBuilder.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/StreamProcessorBuilder.java
@@ -12,14 +12,11 @@ import io.camunda.zeebe.engine.api.CommandResponseWriter;
 import io.camunda.zeebe.engine.api.InterPartitionCommandSender;
 import io.camunda.zeebe.engine.api.RecordProcessor;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
-import io.camunda.zeebe.engine.state.EventApplier;
-import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.logstreams.log.LogStream;
 import io.camunda.zeebe.scheduler.ActorSchedulingService;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
-import java.util.function.Function;
 
 public final class StreamProcessorBuilder {
 
@@ -27,7 +24,6 @@ public final class StreamProcessorBuilder {
   private final List<StreamProcessorLifecycleAware> lifecycleListeners = new ArrayList<>();
   private ActorSchedulingService actorSchedulingService;
   private ZeebeDb zeebeDb;
-  private Function<MutableZeebeState, EventApplier> eventApplierFactory;
   private int nodeId;
 
   private List<RecordProcessor> recordProcessors;
@@ -73,12 +69,6 @@ public final class StreamProcessorBuilder {
     return this;
   }
 
-  public StreamProcessorBuilder eventApplierFactory(
-      final Function<MutableZeebeState, EventApplier> eventApplierFactory) {
-    this.eventApplierFactory = eventApplierFactory;
-    return this;
-  }
-
   public StreamProcessorBuilder streamProcessorMode(final StreamProcessorMode streamProcessorMode) {
     streamProcessorContext.processorMode(streamProcessorMode);
     return this;
@@ -114,10 +104,6 @@ public final class StreamProcessorBuilder {
     return recordProcessors;
   }
 
-  public Function<MutableZeebeState, EventApplier> getEventApplierFactory() {
-    return eventApplierFactory;
-  }
-
   public StreamProcessor build() {
     validate();
 
@@ -128,7 +114,6 @@ public final class StreamProcessorBuilder {
     Objects.requireNonNull(actorSchedulingService, ""No task scheduler provided."");
     Objects.requireNonNull(streamProcessorContext.getLogStream(), ""No log stream provided."");
     Objects.requireNonNull(zeebeDb, ""No database provided."");
-    Objects.requireNonNull(eventApplierFactory, ""No factory for the event supplier provided."");
     if (streamProcessorContext.getProcessorMode() == StreamProcessorMode.PROCESSING) {
       Objects.requireNonNull(
           streamProcessorContext.getPartitionCommandSender(),
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
index a4511ff..a9bbcee 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
@@ -13,7 +13,6 @@ import io.camunda.zeebe.db.ZeebeDbFactory;
 import io.camunda.zeebe.engine.api.CommandResponseWriter;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessorFactory;
 import io.camunda.zeebe.engine.state.DefaultZeebeDbFactory;
-import io.camunda.zeebe.engine.state.EventApplier;
 import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.engine.util.StreamProcessingComposite.StreamProcessorTestFactory;
 import io.camunda.zeebe.engine.util.TestStreams.FluentLogWriter;
@@ -36,7 +35,6 @@ import io.camunda.zeebe.util.allocation.DirectBufferAllocator;
 import java.io.File;
 import java.io.IOException;
 import java.util.Optional;
-import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.function.UnaryOperator;
 import org.junit.rules.ExternalResource;
@@ -123,12 +121,6 @@ public final class StreamProcessorRule implements TestRule {
     return chain.apply(base, description);
   }
 
-  public StreamProcessorRule withEventApplierFactory(
-      final Function<MutableZeebeState, EventApplier> eventApplierFactory) {
-    streams.withEventApplierFactory(eventApplierFactory);
-    return this;
-  }
-
   public StreamProcessorRule withStreamProcessorMode(
       final StreamProcessorMode streamProcessorMode) {
     this.streamProcessorMode = streamProcessorMode;
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
index 65e9ab9..eb36b5b 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
@@ -24,9 +24,6 @@ import io.camunda.zeebe.engine.api.ReadonlyStreamProcessorContext;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedEventRegistry;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessorFactory;
-import io.camunda.zeebe.engine.state.EventApplier;
-import io.camunda.zeebe.engine.state.appliers.EventAppliers;
-import io.camunda.zeebe.engine.state.mutable.MutableZeebeState;
 import io.camunda.zeebe.logstreams.log.LogStreamBatchWriter;
 import io.camunda.zeebe.logstreams.log.LogStreamReader;
 import io.camunda.zeebe.logstreams.log.LogStreamRecordWriter;
@@ -62,7 +59,6 @@ import java.util.Optional;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
-import java.util.function.Function;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 import org.junit.rules.TemporaryFolder;
@@ -88,7 +84,6 @@ public final class TestStreams {
   private final Map<String, ProcessorContext> streamContextMap = new HashMap<>();
   private boolean snapshotWasTaken = false;
 
-  private Function<MutableZeebeState, EventApplier> eventApplierFactory = EventAppliers::new;
   private StreamProcessorMode streamProcessorMode = StreamProcessorMode.PROCESSING;
 
   public TestStreams(
@@ -113,11 +108,6 @@ public final class TestStreams {
     mockStreamProcessorListener = mock(StreamProcessorListener.class);
   }
 
-  public void withEventApplierFactory(
-      final Function<MutableZeebeState, EventApplier> eventApplierFactory) {
-    this.eventApplierFactory = eventApplierFactory;
-  }
-
   public void withStreamProcessorMode(final StreamProcessorMode streamProcessorMode) {
     this.streamProcessorMode = streamProcessorMode;
   }
@@ -293,7 +283,6 @@ public final class TestStreams {
             .commandResponseWriter(mockCommandResponseWriter)
             .listener(new StreamProcessorListenerRelay(streamProcessorListeners))
             .recordProcessors(List.of(new Engine(wrappedFactory)))
-            .eventApplierFactory(eventApplierFactory)
             .streamProcessorMode(streamProcessorMode)
             .partitionCommandSender(mock(InterPartitionCommandSender.class));
 
diff --git a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
index 5dd235a..63db17b 100644
--- a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
+++ b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
@@ -23,7 +23,6 @@ import io.camunda.zeebe.engine.api.EmptyProcessingResult;
 import io.camunda.zeebe.engine.api.InterPartitionCommandSender;
 import io.camunda.zeebe.engine.api.RecordProcessor;
 import io.camunda.zeebe.engine.api.StreamProcessorLifecycleAware;
-import io.camunda.zeebe.engine.state.appliers.EventAppliers;
 import io.camunda.zeebe.engine.state.processing.DbKeyGenerator;
 import io.camunda.zeebe.engine.util.RecordToWrite;
 import io.camunda.zeebe.logstreams.impl.log.LoggedEventImpl;
@@ -265,7 +264,6 @@ public final class StreamPlatform {
             .actorSchedulingService(actorScheduler)
             .commandResponseWriter(mockCommandResponseWriter)
             .recordProcessors(recordProcessors)
-            .eventApplierFactory(EventAppliers::new) // todo remove this soon
             .streamProcessorMode(processorMode)
             .listener(mockStreamProcessorListener)
             .partitionCommandSender(mock(InterPartitionCommandSender.class));

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/JobStreamServiceStep.java b/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/JobStreamServiceStep.java
index fe12490..8abf545 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/JobStreamServiceStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/bootstrap/JobStreamServiceStep.java
@@ -7,6 +7,7 @@
  */
 package io.camunda.zeebe.broker.bootstrap;
 
+import io.camunda.zeebe.broker.jobstream.JobStreamMetrics;
 import io.camunda.zeebe.broker.jobstream.JobStreamService;
 import io.camunda.zeebe.broker.jobstream.RemoteJobStreamer;
 import io.camunda.zeebe.engine.processing.streamprocessor.ActivatedJob;
@@ -36,7 +37,9 @@ public final class JobStreamServiceStep extends AbstractBrokerStartupStep {
     final RemoteStreamService<JobActivationProperties, ActivatedJob> remoteStreamService =
         new TransportFactory(brokerStartupContext.getActorSchedulingService())
             .createRemoteStreamServer(
-                clusterServices.getCommunicationService(), DummyActivationProperties::new);
+                clusterServices.getCommunicationService(),
+                DummyActivationProperties::new,
+                new JobStreamMetrics());
 
     remoteStreamService
         .start(brokerStartupContext.getActorSchedulingService(), concurrencyControl)
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/jobstream/JobStreamMetrics.java b/broker/src/main/java/io/camunda/zeebe/broker/jobstream/JobStreamMetrics.java
new file mode 100644
index 0000000..90f7232
--- /dev/null
+++ b/broker/src/main/java/io/camunda/zeebe/broker/jobstream/JobStreamMetrics.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.jobstream;
+
+import io.camunda.zeebe.transport.stream.impl.RemoteStreamMetrics;
+import io.prometheus.client.Counter;
+import io.prometheus.client.Gauge;
+
+public class JobStreamMetrics implements RemoteStreamMetrics {
+  private static final String NAMESPACE = ""zeebe"";
+
+  private static final Gauge STREAM_COUNT =
+      Gauge.build()
+          .namespace(NAMESPACE)
+          .name(""broker_open_job_stream_count"")
+          .help(""Number of open job streams in broker"")
+          .register();
+
+  private static final Counter PUSH_SUCCESS_COUNT =
+      Counter.build()
+          .namespace(NAMESPACE)
+          .name(""broker_jobs_pushed_count"")
+          .help(""Total number of jobs pushed to all streams"")
+          .register();
+
+  private static final Counter PUSH_FAILED_COUNT =
+      Counter.build()
+          .namespace(NAMESPACE)
+          .name(""broker_jobs_push_fail_count"")
+          .help(""Total number of failures when pushing jobs to the streams"")
+          .register();
+
+  @Override
+  public void addStream() {
+    STREAM_COUNT.inc();
+  }
+
+  @Override
+  public void removeStream() {
+    STREAM_COUNT.dec();
+  }
+
+  @Override
+  public void pushSucceeded() {
+    PUSH_SUCCESS_COUNT.inc();
+  }
+
+  @Override
+  public void pushFailed() {
+    PUSH_FAILED_COUNT.inc();
+  }
+}
diff --git a/transport/pom.xml b/transport/pom.xml
index 2ba000a..24f1542 100644
--- a/transport/pom.xml
+++ b/transport/pom.xml
@@ -48,11 +48,6 @@
     </dependency>
 
     <dependency>
-      <groupId>io.prometheus</groupId>
-      <artifactId>simpleclient</artifactId>
-    </dependency>
-
-    <dependency>
       <groupId>io.camunda</groupId>
       <artifactId>zeebe-scheduler</artifactId>
       <classifier>tests</classifier>
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/TransportFactory.java b/transport/src/main/java/io/camunda/zeebe/transport/TransportFactory.java
index a0ebb7a..086e8d1 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/TransportFactory.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/TransportFactory.java
@@ -15,6 +15,7 @@ import io.camunda.zeebe.transport.impl.AtomixServerTransport;
 import io.camunda.zeebe.transport.stream.api.RemoteStreamService;
 import io.camunda.zeebe.transport.stream.impl.RemoteStreamApiHandler;
 import io.camunda.zeebe.transport.stream.impl.RemoteStreamEndpoint;
+import io.camunda.zeebe.transport.stream.impl.RemoteStreamMetrics;
 import io.camunda.zeebe.transport.stream.impl.RemoteStreamRegistry;
 import io.camunda.zeebe.transport.stream.impl.RemoteStreamServiceImpl;
 import io.camunda.zeebe.transport.stream.impl.RemoteStreamerImpl;
@@ -46,10 +47,11 @@ public final class TransportFactory {
   public <M extends BufferReader, P extends BufferWriter>
       RemoteStreamService<M, P> createRemoteStreamServer(
           final ClusterCommunicationService clusterCommunicationService,
-          final Supplier<M> metadataFactory) {
-    final RemoteStreamRegistry<M> registry = new RemoteStreamRegistry<>();
+          final Supplier<M> metadataFactory,
+          final RemoteStreamMetrics metrics) {
+    final RemoteStreamRegistry<M> registry = new RemoteStreamRegistry<>(metrics);
     return new RemoteStreamServiceImpl<>(
-        new RemoteStreamerImpl<>(clusterCommunicationService, registry),
+        new RemoteStreamerImpl<>(clusterCommunicationService, registry, metrics),
         new RemoteStreamEndpoint<>(
             clusterCommunicationService, new RemoteStreamApiHandler<>(registry, metadataFactory)));
   }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamMetrics.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamMetrics.java
index 6e16265..769079c 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamMetrics.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamMetrics.java
@@ -7,46 +7,17 @@
  */
 package io.camunda.zeebe.transport.stream.impl;
 
-import io.prometheus.client.Counter;
-import io.prometheus.client.Gauge;
+public interface RemoteStreamMetrics {
 
-public class RemoteStreamMetrics {
-  private static final String NAMESPACE = ""zeebe"";
+  /** Invoked after a stream is successfully added to the registry */
+  default void addStream() {}
 
-  private static final Gauge STREAM_COUNT =
-      Gauge.build()
-          .namespace(NAMESPACE)
-          .name(""broker_open_stream_count"")
-          .help(""Number of open job streams in broker"")
-          .register();
+  /** Invoked after a stream is removed from registry */
+  default void removeStream() {}
 
-  private static final Counter PUSH_SUCCESS_COUNT =
-      Counter.build()
-          .namespace(NAMESPACE)
-          .name(""broker_stream_pushed_count"")
-          .help(""Total number of jobs pushed to all streams"")
-          .register();
+  /** Invoked after a payload is successfully pushed to a stream */
+  default void pushSucceeded() {}
 
-  private static final Counter PUSH_FAILED_COUNT =
-      Counter.build()
-          .namespace(NAMESPACE)
-          .name(""broker_stream_push_fail_count"")
-          .help(""Total number of failures when pushing jobs to the streams"")
-          .register();
-
-  void addStream() {
-    STREAM_COUNT.inc();
-  }
-
-  void removeStream() {
-    STREAM_COUNT.dec();
-  }
-
-  void pushSucceeded() {
-    PUSH_SUCCESS_COUNT.inc();
-  }
-
-  void pushFailed() {
-    PUSH_FAILED_COUNT.inc();
-  }
+  /** Invoked if pushing a payload to a stream failed */
+  default void pushFailed() {}
 }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusher.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusher.java
index 08ba403..663fad7 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusher.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusher.java
@@ -26,13 +26,18 @@ import org.slf4j.LoggerFactory;
  */
 final class RemoteStreamPusher<P extends BufferWriter> {
   private static final Logger LOG = LoggerFactory.getLogger(RemoteStreamPusher.class);
-  private final RemoteStreamMetrics metrics = new RemoteStreamMetrics();
+  private final RemoteStreamMetrics metrics;
 
   private final StreamId streamId;
   private final Transport transport;
   private final Executor executor;
 
-  RemoteStreamPusher(final StreamId streamId, final Transport transport, final Executor executor) {
+  RemoteStreamPusher(
+      final StreamId streamId,
+      final Transport transport,
+      final Executor executor,
+      final RemoteStreamMetrics metrics) {
+    this.metrics = metrics;
     this.streamId = Objects.requireNonNull(streamId, ""must specify a target stream ID"");
     this.transport = Objects.requireNonNull(transport, ""must provide a network transport"");
     this.executor = Objects.requireNonNull(executor, ""must provide an asynchronous executor"");
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistry.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistry.java
index 9720711..eda0e32 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistry.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistry.java
@@ -29,13 +29,17 @@ import org.agrona.concurrent.UnsafeBuffer;
  * @param <M> the type of the properties of the stream.
  */
 public class RemoteStreamRegistry<M> implements ImmutableStreamRegistry<M> {
-  private final RemoteStreamMetrics metrics = new RemoteStreamMetrics();
+  private final RemoteStreamMetrics metrics;
 
   // Needs to be thread-safe for readers
   private final ConcurrentMap<UnsafeBuffer, Set<StreamConsumer<M>>> typeToConsumers =
       new ConcurrentHashMap<>();
   private final Map<StreamId, StreamConsumer<M>> idToConsumer = new HashMap<>();
 
+  public RemoteStreamRegistry(final RemoteStreamMetrics metrics) {
+    this.metrics = metrics;
+  }
+
   /**
    * Adds a stream receiver that can receive data from the stream with the given streamType.
    *
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
index d4c1193..5a599f3 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
@@ -40,11 +40,15 @@ public final class RemoteStreamerImpl<M extends BufferReader, P extends BufferWr
   private final RemoteStreamPicker<M> streamPicker = new RandomStreamPicker<>();
   private final ClusterCommunicationService transport;
   private final ImmutableStreamRegistry<M> registry;
+  private final RemoteStreamMetrics metrics;
 
   public RemoteStreamerImpl(
-      final ClusterCommunicationService transport, final ImmutableStreamRegistry<M> registry) {
+      final ClusterCommunicationService transport,
+      final ImmutableStreamRegistry<M> registry,
+      final RemoteStreamMetrics metrics) {
     this.transport = Objects.requireNonNull(transport, ""must specify a network transport"");
     this.registry = Objects.requireNonNull(registry, ""must specify a job stream registry"");
+    this.metrics = metrics;
   }
 
   @Override
@@ -57,7 +61,8 @@ public final class RemoteStreamerImpl<M extends BufferReader, P extends BufferWr
     final var target = streamPicker.pickStream(consumers);
     final RemoteStreamImpl<M, P> gatewayStream =
         new RemoteStreamImpl<>(
-            target.properties(), new RemoteStreamPusher<>(target.id(), this::send, actor::run));
+            target.properties(),
+            new RemoteStreamPusher<>(target.id(), this::send, actor::run, metrics));
     return Optional.of(gatewayStream);
   }
 
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamApiHandlerTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamApiHandlerTest.java
index 3917ac1..a70bd5e 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamApiHandlerTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamApiHandlerTest.java
@@ -29,7 +29,8 @@ final class RemoteStreamApiHandlerTest {
   private static final UnsafeBuffer SERIALIZED_METADATA =
       new UnsafeBuffer(ByteBuffer.allocate(4).order(ByteOrder.nativeOrder()).putInt(0, 1));
 
-  private final RemoteStreamRegistry<TestMetadata> registry = new RemoteStreamRegistry<>();
+  private final RemoteStreamRegistry<TestMetadata> registry =
+      new RemoteStreamRegistry<>(new RemoteStreamMetrics() {});
   private final RemoteStreamApiHandler<TestMetadata> server =
       new RemoteStreamApiHandler<>(registry, TestMetadata::new);
 
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusherTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusherTest.java
index c5ae28b..4583625 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusherTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamPusherTest.java
@@ -29,7 +29,7 @@ final class RemoteStreamPusherTest {
   private final TestTransport transport = new TestTransport();
   private final Executor executor = Runnable::run;
   private final RemoteStreamPusher<Payload> pusher =
-      new RemoteStreamPusher<>(streamId, transport, executor);
+      new RemoteStreamPusher<>(streamId, transport, executor, new RemoteStreamMetrics() {});
 
   @Test
   void shouldPushPayload() {
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistryTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistryTest.java
index 57e50e3..8a0c611 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistryTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamRegistryTest.java
@@ -19,7 +19,8 @@ import org.junit.jupiter.api.Test;
 
 final class RemoteStreamRegistryTest {
 
-  private final RemoteStreamRegistry<Integer> streamRegistry = new RemoteStreamRegistry<>();
+  private final RemoteStreamRegistry<Integer> streamRegistry =
+      new RemoteStreamRegistry<>(new RemoteStreamMetrics() {});
   private final MemberId gateway = MemberId.from(""gateway"");
   private final MemberId otherGateway = MemberId.from(""gateway-other"");
   private final UnsafeBuffer typeBar = new UnsafeBuffer(BufferUtil.wrapString(""bar""));
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerTest.java
index 0f9f95a..7163980 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerTest.java
@@ -41,7 +41,7 @@ final class RemoteStreamerTest {
   private final TestRegistry registry = new TestRegistry();
 
   private final RemoteStreamerImpl<TestMetadata, TestPayload> streamer =
-      new RemoteStreamerImpl<>(communicationService, registry);
+      new RemoteStreamerImpl<>(communicationService, registry, new RemoteStreamMetrics() {});
 
   @RegisterExtension
   private final ControlledActorSchedulerExtension scheduler =

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverImpl.java b/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverImpl.java
index 088fbfb..3b66010 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverImpl.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverImpl.java
@@ -14,6 +14,7 @@ import io.camunda.zeebe.broker.protocol.InterPartitionMessageDecoder;
 import io.camunda.zeebe.broker.protocol.MessageHeaderDecoder;
 import io.camunda.zeebe.logstreams.log.LogAppendEntry;
 import io.camunda.zeebe.logstreams.log.LogStreamWriter;
+import io.camunda.zeebe.logstreams.log.LogStreamWriter.WriteFailure;
 import io.camunda.zeebe.protocol.impl.record.RecordMetadata;
 import io.camunda.zeebe.protocol.impl.record.UnifiedRecordValue;
 import io.camunda.zeebe.protocol.impl.record.value.management.CheckpointRecord;
@@ -22,6 +23,7 @@ import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.Intent;
 import io.camunda.zeebe.protocol.record.intent.management.CheckpointIntent;
 import io.camunda.zeebe.stream.impl.TypedEventRegistry;
+import io.camunda.zeebe.util.Either;
 import io.camunda.zeebe.util.ReflectUtil;
 import java.util.Optional;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -53,32 +55,46 @@ final class InterPartitionCommandReceiverImpl {
       return;
     }
 
-    if (!writeCheckpoint(decoded)) {
-      LOG.warn(
-          ""Failed to write new command for checkpoint {} (currently at {}), ignoring command {} {} from {}"",
-          decoded.checkpointId,
-          checkpointId,
-          decoded.metadata.getValueType(),
-          decoded.metadata.getIntent(),
-          memberId);
+    final var checkpointWritten = writeCheckpoint(decoded);
+    if (checkpointWritten.isLeft()) {
       // It's unsafe to write this record without first writing the checkpoint, bail out early.
+      logCheckpointFailure(memberId, decoded, checkpointWritten);
       return;
     }
 
-    if (!writeCommand(decoded)) {
-      LOG.warn(
-          ""Failed to write command {} {} from {} to logstream"",
-          decoded.metadata.getValueType(),
-          decoded.metadata.getIntent(),
-          memberId);
-    }
+    writeCommand(decoded).ifLeft(failure -> logWriteFailure(memberId, decoded, failure));
   }
 
-  private boolean writeCheckpoint(final DecodedMessage decoded) {
+  private void logCheckpointFailure(
+      final MemberId memberId,
+      final DecodedMessage decoded,
+      final Either<WriteFailure, Long> checkpointWritten) {
+    LOG.warn(
+        ""Failed to write new command for checkpoint {} (currently at {}), ignoring command {} {} from {} (error = {})"",
+        decoded.checkpointId,
+        checkpointId,
+        decoded.metadata.getValueType(),
+        decoded.metadata.getIntent(),
+        memberId,
+        checkpointWritten.getLeft());
+  }
+
+  private void logWriteFailure(
+      final MemberId memberId, final DecodedMessage decoded, final WriteFailure failure) {
+    LOG.warn(
+        ""Failed to write command {} {} from {} to logstream (error = {})"",
+        decoded.metadata.getValueType(),
+        decoded.metadata.getIntent(),
+        memberId,
+        failure);
+  }
+
+  private Either<WriteFailure, Long> writeCheckpoint(final DecodedMessage decoded) {
     if (decoded.checkpointId <= checkpointId) {
       // No need to write a new checkpoint create record
-      return true;
+      return Either.right(checkpointId);
     }
+
     LOG.debug(
         ""Received command with checkpoint {}, current checkpoint is {}"",
         decoded.checkpointId,
@@ -89,17 +105,17 @@ final class InterPartitionCommandReceiverImpl {
             .intent(CheckpointIntent.CREATE)
             .valueType(ValueType.CHECKPOINT);
     final var checkpointRecord = new CheckpointRecord().setCheckpointId(decoded.checkpointId);
-    return logStreamWriter.tryWrite(LogAppendEntry.of(metadata, checkpointRecord)).isRight();
+    return logStreamWriter.tryWrite(LogAppendEntry.of(metadata, checkpointRecord));
   }
 
-  private boolean writeCommand(final DecodedMessage decoded) {
+  private Either<WriteFailure, Long> writeCommand(final DecodedMessage decoded) {
     final var appendEntry =
         decoded
             .recordKey()
             .map(key -> LogAppendEntry.of(key, decoded.metadata(), decoded.command()))
             .orElseGet(() -> LogAppendEntry.of(decoded.metadata(), decoded.command()));
 
-    return logStreamWriter.tryWrite(appendEntry).isRight();
+    return logStreamWriter.tryWrite(appendEntry);
   }
 
   void setDiskSpaceAvailable(final boolean available) {

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyMessageState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyMessageState.java
index 47877cf..404ac34 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyMessageState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyMessageState.java
@@ -7,9 +7,6 @@
  */
 package io.camunda.zeebe.engine.state.migration.to_8_3.legacy;
 
-import static io.camunda.zeebe.util.EnsureUtil.ensureGreaterThan;
-import static io.camunda.zeebe.util.EnsureUtil.ensureNotNullOrEmpty;
-
 import io.camunda.zeebe.db.ColumnFamily;
 import io.camunda.zeebe.db.TransactionContext;
 import io.camunda.zeebe.db.ZeebeDb;
@@ -19,15 +16,10 @@ import io.camunda.zeebe.db.impl.DbLong;
 import io.camunda.zeebe.db.impl.DbNil;
 import io.camunda.zeebe.db.impl.DbString;
 import io.camunda.zeebe.engine.metrics.BufferedMessagesMetrics;
-import io.camunda.zeebe.engine.state.immutable.MessageState.ExpiredMessageVisitor;
-import io.camunda.zeebe.engine.state.immutable.MessageState.Index;
-import io.camunda.zeebe.engine.state.immutable.MessageState.MessageVisitor;
 import io.camunda.zeebe.engine.state.message.StoredMessage;
 import io.camunda.zeebe.protocol.ZbColumnFamilies;
 import io.camunda.zeebe.protocol.impl.record.value.message.MessageRecord;
-import io.camunda.zeebe.stream.api.ReadonlyStreamProcessorContext;
 import org.agrona.DirectBuffer;
-import org.agrona.collections.MutableBoolean;
 
 public final class LegacyMessageState {
 
@@ -195,15 +187,6 @@ public final class LegacyMessageState {
     bufferedMessagesMetrics = new BufferedMessagesMetrics(partitionId);
   }
 
-  public void onRecovered(final ReadonlyStreamProcessorContext context) {
-    if (!messagesDeadlineCountColumnFamily.isEmpty()) {
-      localMessageDeadlineCount =
-          messagesDeadlineCountColumnFamily.get(messagesDeadlineCountKey).getValue();
-    }
-
-    bufferedMessagesMetrics.setBufferedMessagesCounter(localMessageDeadlineCount);
-  }
-
   public void put(final long key, final MessageRecord record) {
     messageKey.wrapLong(key);
     message.setMessageKey(key).setMessage(record);
@@ -228,184 +211,6 @@ public final class LegacyMessageState {
     }
   }
 
-  public void putMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
-    ensureGreaterThan(""message key"", messageKey, 0);
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-
-    this.messageKey.wrapLong(messageKey);
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-    correlatedMessageColumnFamily.insert(messageBpmnProcessIdKey, DbNil.INSTANCE);
-  }
-
-  public void removeMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
-    ensureGreaterThan(""message key"", messageKey, 0);
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-
-    this.messageKey.wrapLong(messageKey);
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-
-    correlatedMessageColumnFamily.deleteExisting(messageBpmnProcessIdKey);
-  }
-
-  public void putActiveProcessInstance(
-      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-    ensureNotNullOrEmpty(""correlation key"", correlationKey);
-
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-    this.correlationKey.wrapBuffer(correlationKey);
-    activeProcessInstancesByCorrelationKeyColumnFamily.insert(
-        bpmnProcessIdCorrelationKey, DbNil.INSTANCE);
-  }
-
-  public void removeActiveProcessInstance(
-      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-    ensureNotNullOrEmpty(""correlation key"", correlationKey);
-
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-    this.correlationKey.wrapBuffer(correlationKey);
-    activeProcessInstancesByCorrelationKeyColumnFamily.deleteExisting(bpmnProcessIdCorrelationKey);
-  }
-
-  public void putProcessInstanceCorrelationKey(
-      final long processInstanceKey, final DirectBuffer correlationKey) {
-    ensureGreaterThan(""process instance key"", processInstanceKey, 0);
-    ensureNotNullOrEmpty(""correlation key"", correlationKey);
-
-    this.processInstanceKey.wrapLong(processInstanceKey);
-    this.correlationKey.wrapBuffer(correlationKey);
-    processInstanceCorrelationKeyColumnFamily.insert(this.processInstanceKey, this.correlationKey);
-  }
-
-  public void removeProcessInstanceCorrelationKey(final long processInstanceKey) {
-    ensureGreaterThan(""process instance key"", processInstanceKey, 0);
-
-    this.processInstanceKey.wrapLong(processInstanceKey);
-    processInstanceCorrelationKeyColumnFamily.deleteExisting(this.processInstanceKey);
-  }
-
-  public void remove(final long key) {
-    final StoredMessage storedMessage = getMessage(key);
-    if (storedMessage == null) {
-      return;
-    }
-
-    messageKey.wrapLong(storedMessage.getMessageKey());
-    messageColumnFamily.deleteExisting(messageKey);
-
-    messageName.wrapBuffer(storedMessage.getMessage().getNameBuffer());
-    correlationKey.wrapBuffer(storedMessage.getMessage().getCorrelationKeyBuffer());
-
-    nameCorrelationMessageColumnFamily.deleteExisting(nameCorrelationMessageKey);
-
-    final DirectBuffer messageId = storedMessage.getMessage().getMessageIdBuffer();
-    if (messageId.capacity() > 0) {
-      this.messageId.wrapBuffer(messageId);
-      messageIdColumnFamily.deleteExisting(nameCorrelationMessageIdKey);
-    }
-
-    deadline.wrapLong(storedMessage.getMessage().getDeadline());
-    deadlineColumnFamily.deleteExisting(deadlineMessageKey);
-
-    localMessageDeadlineCount -= 1L;
-    messagesDeadlineCount.wrapLong(localMessageDeadlineCount);
-    messagesDeadlineCountColumnFamily.upsert(messagesDeadlineCountKey, messagesDeadlineCount);
-    bufferedMessagesMetrics.setBufferedMessagesCounter(localMessageDeadlineCount);
-
-    correlatedMessageColumnFamily.whileEqualPrefix(
-        messageKey,
-        ((compositeKey, zbNil) -> {
-          correlatedMessageColumnFamily.deleteExisting(compositeKey);
-        }));
-  }
-
-  public boolean existMessageCorrelation(final long messageKey, final DirectBuffer bpmnProcessId) {
-    ensureGreaterThan(""message key"", messageKey, 0);
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-
-    this.messageKey.wrapLong(messageKey);
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-
-    return correlatedMessageColumnFamily.exists(messageBpmnProcessIdKey);
-  }
-
-  public DirectBuffer getProcessInstanceCorrelationKey(final long processInstanceKey) {
-    ensureGreaterThan(""process instance key"", processInstanceKey, 0);
-
-    this.processInstanceKey.wrapLong(processInstanceKey);
-    final var correlationKey =
-        processInstanceCorrelationKeyColumnFamily.get(this.processInstanceKey);
-
-    return correlationKey != null ? correlationKey.getBuffer() : null;
-  }
-
-  public StoredMessage getMessage(final long messageKey) {
-    this.messageKey.wrapLong(messageKey);
-    return messageColumnFamily.get(this.messageKey);
-  }
-
-  public boolean visitMessagesWithDeadlineBeforeTimestamp(
-      final long timestamp, final Index startAt, final ExpiredMessageVisitor visitor) {
-    final DbCompositeKey<DbLong, DbForeignKey<DbLong>> startAtKey;
-    if (startAt != null) {
-      deadline.wrapLong(startAt.deadline());
-      messageKey.wrapLong(startAt.key());
-      startAtKey = deadlineMessageKey;
-    } else {
-      startAtKey = null;
-    }
-    final var stoppedByVisitor = new MutableBoolean(false);
-    deadlineColumnFamily.whileTrue(
-        startAtKey,
-        (key, value) -> {
-          boolean shouldContinue = false;
-          final long deadlineEntry = key.first().getValue();
-          if (deadlineEntry <= timestamp) {
-            final long messageKeyEntry = key.second().inner().getValue();
-            shouldContinue = visitor.visit(deadlineEntry, messageKeyEntry);
-            stoppedByVisitor.set(!shouldContinue);
-          }
-          return shouldContinue;
-        });
-
-    return stoppedByVisitor.get();
-  }
-
-  public boolean existActiveProcessInstance(
-      final DirectBuffer bpmnProcessId, final DirectBuffer correlationKey) {
-    ensureNotNullOrEmpty(""BPMN process id"", bpmnProcessId);
-    ensureNotNullOrEmpty(""correlation key"", correlationKey);
-
-    bpmnProcessIdKey.wrapBuffer(bpmnProcessId);
-    this.correlationKey.wrapBuffer(correlationKey);
-    return activeProcessInstancesByCorrelationKeyColumnFamily.exists(bpmnProcessIdCorrelationKey);
-  }
-
-  public void visitMessages(
-      final DirectBuffer name, final DirectBuffer correlationKey, final MessageVisitor visitor) {
-
-    messageName.wrapBuffer(name);
-    this.correlationKey.wrapBuffer(correlationKey);
-
-    nameCorrelationMessageColumnFamily.whileEqualPrefix(
-        nameAndCorrelationKey,
-        (compositeKey, nil) -> {
-          final long messageKey = compositeKey.second().inner().getValue();
-          final StoredMessage message = getMessage(messageKey);
-          return visitor.visit(message);
-        });
-  }
-
-  public boolean exist(
-      final DirectBuffer name, final DirectBuffer correlationKey, final DirectBuffer messageId) {
-    messageName.wrapBuffer(name);
-    this.correlationKey.wrapBuffer(correlationKey);
-    this.messageId.wrapBuffer(messageId);
-
-    return messageIdColumnFamily.exists(nameCorrelationMessageIdKey);
-  }
-
   public ColumnFamily<
           DbCompositeKey<DbCompositeKey<DbString, DbString>, DbForeignKey<DbLong>>, DbNil>
       getNameCorrelationMessageColumnFamily() {

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/ProcessEventProcessors.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/ProcessEventProcessors.java
index 1d0b444..0a5f77c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/ProcessEventProcessors.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/ProcessEventProcessors.java
@@ -17,7 +17,7 @@ import io.camunda.zeebe.engine.processing.message.ProcessMessageSubscriptionDele
 import io.camunda.zeebe.engine.processing.message.command.SubscriptionCommandSender;
 import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceBatchActivateProcessor;
 import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceBatchTerminateProcessor;
-import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceCommandProcessor;
+import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceCancelProcessor;
 import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceCreationCreateProcessor;
 import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceCreationCreateWithResultProcessor;
 import io.camunda.zeebe.engine.processing.processinstance.ProcessInstanceModificationProcessor;
@@ -63,8 +63,7 @@ public final class ProcessEventProcessors {
 
     final var processEngineMetrics = new ProcessEngineMetrics(processingState.getPartitionId());
 
-    addProcessInstanceCommandProcessor(
-        writers, typedRecordProcessors, processingState.getElementInstanceState());
+    addProcessInstanceCommandProcessor(writers, typedRecordProcessors, processingState);
 
     final var bpmnStreamProcessor =
         new BpmnStreamProcessor(bpmnBehaviors, processingState, writers, processEngineMetrics);
@@ -98,17 +97,11 @@ public final class ProcessEventProcessors {
   private static void addProcessInstanceCommandProcessor(
       final Writers writers,
       final TypedRecordProcessors typedRecordProcessors,
-      final MutableElementInstanceState elementInstanceState) {
-
-    final ProcessInstanceCommandProcessor commandProcessor =
-        new ProcessInstanceCommandProcessor(writers, elementInstanceState);
-
-    Arrays.stream(ProcessInstanceIntent.values())
-        .filter(ProcessInstanceIntent::isProcessInstanceCommand)
-        .forEach(
-            intent ->
-                typedRecordProcessors.onCommand(
-                    ValueType.PROCESS_INSTANCE, intent, commandProcessor));
+      final ProcessingState processingState) {
+    typedRecordProcessors.onCommand(
+        ValueType.PROCESS_INSTANCE,
+        ProcessInstanceIntent.CANCEL,
+        new ProcessInstanceCancelProcessor(processingState, writers));
   }
 
   private static void addBpmnStepProcessor(
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCancelProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCancelProcessor.java
index e4003a0..1587800 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCancelProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCancelProcessor.java
@@ -8,13 +8,21 @@
 package io.camunda.zeebe.engine.processing.processinstance;
 
 import io.camunda.zeebe.auth.impl.TenantAuthorizationCheckerImpl;
+import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedCommandWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedRejectionWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.TypedResponseWriter;
+import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.immutable.ElementInstanceState;
+import io.camunda.zeebe.engine.state.immutable.ProcessingState;
 import io.camunda.zeebe.engine.state.instance.ElementInstance;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.stream.api.records.TypedRecord;
 
-public final class ProcessInstanceCancelProcessor implements ProcessInstanceCommandHandler {
+public final class ProcessInstanceCancelProcessor
+    implements TypedRecordProcessor<ProcessInstanceRecord> {
 
   private static final String MESSAGE_PREFIX =
       ""Expected to cancel a process instance with key '%d', but "";
@@ -26,55 +34,76 @@ public final class ProcessInstanceCancelProcessor implements ProcessInstanceComm
       MESSAGE_PREFIX
           + ""it is created by a parent process instance. Cancel the root process instance '%d' instead."";
 
-  @Override
-  public void handle(final ProcessInstanceCommandContext commandContext) {
+  private final ElementInstanceState elementInstanceState;
+  private final TypedResponseWriter responseWriter;
+  private final TypedCommandWriter commandWriter;
+  private final TypedRejectionWriter rejectionWriter;
+
+  public ProcessInstanceCancelProcessor(
+      final ProcessingState processingState, final Writers writers) {
+    elementInstanceState = processingState.getElementInstanceState();
+    responseWriter = writers.response();
+    commandWriter = writers.command();
+    rejectionWriter = writers.rejection();
+  }
 
-    final TypedRecord<ProcessInstanceRecord> command = commandContext.getRecord();
-    final ElementInstance elementInstance = commandContext.getElementInstance();
+  @Override
+  public void processRecord(final TypedRecord<ProcessInstanceRecord> command) {
+    final var elementInstance = elementInstanceState.getInstance(command.getKey());
 
-    if (!validateCommand(commandContext, command, elementInstance)) {
+    if (!validateCommand(command, elementInstance)) {
       return;
     }
 
     final ProcessInstanceRecord value = elementInstance.getValue();
 
-    commandContext
-        .getCommandWriter()
-        .appendFollowUpCommand(command.getKey(), ProcessInstanceIntent.TERMINATE_ELEMENT, value);
-
-    commandContext
-        .getResponseWriter()
-        .writeEventOnCommand(
-            command.getKey(), ProcessInstanceIntent.ELEMENT_TERMINATING, value, command);
+    commandWriter.appendFollowUpCommand(
+        command.getKey(), ProcessInstanceIntent.TERMINATE_ELEMENT, value);
+    responseWriter.writeEventOnCommand(
+        command.getKey(), ProcessInstanceIntent.ELEMENT_TERMINATING, value, command);
   }
 
   private boolean validateCommand(
-      final ProcessInstanceCommandContext commandContext,
-      final TypedRecord<ProcessInstanceRecord> command,
-      final ElementInstance elementInstance) {
+      final TypedRecord<ProcessInstanceRecord> command, final ElementInstance elementInstance) {
 
     if (elementInstance == null
         || !elementInstance.canTerminate()
         || elementInstance.getParentKey() > 0) {
-
-      commandContext.reject(
-          RejectionType.NOT_FOUND, String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
+      rejectionWriter.appendRejection(
+          command,
+          RejectionType.NOT_FOUND,
+          String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
+      responseWriter.writeRejectionOnCommand(
+          command,
+          RejectionType.NOT_FOUND,
+          String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
       return false;
     }
 
     if (!TenantAuthorizationCheckerImpl.fromAuthorizationMap(command.getAuthorizations())
         .isAuthorized(elementInstance.getValue().getTenantId())) {
-      commandContext.reject(
-          RejectionType.NOT_FOUND, String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
+      rejectionWriter.appendRejection(
+          command,
+          RejectionType.NOT_FOUND,
+          String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
+      responseWriter.writeRejectionOnCommand(
+          command,
+          RejectionType.NOT_FOUND,
+          String.format(PROCESS_NOT_FOUND_MESSAGE, command.getKey()));
       return false;
     }
 
     final var parentProcessInstanceKey = elementInstance.getValue().getParentProcessInstanceKey();
     if (parentProcessInstanceKey > 0) {
 
-      final var rootProcessInstanceKey =
-          getRootProcessInstanceKey(commandContext, parentProcessInstanceKey);
-      commandContext.reject(
+      final var rootProcessInstanceKey = getRootProcessInstanceKey(parentProcessInstanceKey);
+
+      rejectionWriter.appendRejection(
+          command,
+          RejectionType.INVALID_STATE,
+          String.format(PROCESS_NOT_ROOT_MESSAGE, command.getKey(), rootProcessInstanceKey));
+      responseWriter.writeRejectionOnCommand(
+          command,
           RejectionType.INVALID_STATE,
           String.format(PROCESS_NOT_ROOT_MESSAGE, command.getKey(), rootProcessInstanceKey));
       return false;
@@ -83,16 +112,15 @@ public final class ProcessInstanceCancelProcessor implements ProcessInstanceComm
     return true;
   }
 
-  private long getRootProcessInstanceKey(
-      final ProcessInstanceCommandContext context, final long instanceKey) {
+  private long getRootProcessInstanceKey(final long instanceKey) {
 
-    final var instance = context.getElementInstanceState().getInstance(instanceKey);
+    final var instance = elementInstanceState.getInstance(instanceKey);
     if (instance != null) {
 
       final var parentProcessInstanceKey = instance.getValue().getParentProcessInstanceKey();
       if (parentProcessInstanceKey > 0) {
 
-        return getRootProcessInstanceKey(context, parentProcessInstanceKey);
+        return getRootProcessInstanceKey(parentProcessInstanceKey);
       }
     }
     return instanceKey;
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandler.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandler.java
deleted file mode 100644
index 31d8215..0000000
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandler.java
+++ /dev/null
@@ -1,13 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.processinstance;
-
-public interface ProcessInstanceCommandHandler {
-
-  void handle(ProcessInstanceCommandContext commandContext);
-}
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandlers.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandlers.java
deleted file mode 100644
index 9f8e901..0000000
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandHandlers.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.processinstance;
-
-import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
-import java.util.HashMap;
-import java.util.Map;
-
-public final class ProcessInstanceCommandHandlers {
-
-  private final Map<ProcessInstanceIntent, ProcessInstanceCommandHandler> handlers =
-      new HashMap<>();
-
-  public ProcessInstanceCommandHandlers() {
-    handlers.put(ProcessInstanceIntent.CANCEL, new ProcessInstanceCancelProcessor());
-  }
-
-  public void handle(final ProcessInstanceCommandContext context) {
-    final ProcessInstanceCommandHandler handler = handlers.get(context.getCommand());
-    if (handler != null) {
-      handler.handle(context);
-    }
-  }
-}
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandProcessor.java
deleted file mode 100644
index 7962511..0000000
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceCommandProcessor.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.engine.processing.processinstance;
-
-import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessor;
-import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
-import io.camunda.zeebe.engine.state.immutable.ElementInstanceState;
-import io.camunda.zeebe.engine.state.instance.ElementInstance;
-import io.camunda.zeebe.engine.state.mutable.MutableElementInstanceState;
-import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
-import io.camunda.zeebe.stream.api.records.TypedRecord;
-
-public final class ProcessInstanceCommandProcessor
-    implements TypedRecordProcessor<ProcessInstanceRecord> {
-
-  private final ProcessInstanceCommandHandlers commandHandlers;
-  private final ElementInstanceState elementInstanceState;
-  private final ProcessInstanceCommandContext context;
-
-  public ProcessInstanceCommandProcessor(
-      final Writers writers, final MutableElementInstanceState elementInstanceState) {
-    this.elementInstanceState = elementInstanceState;
-    commandHandlers = new ProcessInstanceCommandHandlers();
-    context = new ProcessInstanceCommandContext(elementInstanceState, writers);
-  }
-
-  @Override
-  public void processRecord(final TypedRecord<ProcessInstanceRecord> record) {
-    populateCommandContext(record);
-    commandHandlers.handle(context);
-  }
-
-  private void populateCommandContext(final TypedRecord<ProcessInstanceRecord> record) {
-    context.setRecord(record);
-
-    final ElementInstance elementInstance = elementInstanceState.getInstance(record.getKey());
-    context.setElementInstance(elementInstance);
-  }
-}

diff --git a/clients/go/cmd/zbctl/internal/commands/deployProcess.go b/clients/go/cmd/zbctl/internal/commands/deployProcess.go
index edef5c6..5906a66 100644
--- a/clients/go/cmd/zbctl/internal/commands/deployProcess.go
+++ b/clients/go/cmd/zbctl/internal/commands/deployProcess.go
@@ -16,7 +16,6 @@ package commands
 import (
 	""context""
 	""fmt""
-	""github.com/camunda-cloud/zeebe/clients/go/pkg/pb""
 	""github.com/spf13/cobra""
 	""io/ioutil""
 )
@@ -40,7 +39,7 @@ var deployProcessCmd = &cobra.Command{
 				return err
 			}
 
-			zbCmd.AddResource(bytes, resourceNamesFlag[i], pb.ProcessRequestObject_FILE)
+			zbCmd.AddResource(bytes, resourceNamesFlag[i])
 		}
 
 		for i := len(resourceNamesFlag); i < len(args); i++ {
diff --git a/clients/go/pkg/commands/deploy.go b/clients/go/pkg/commands/deploy.go
index 2ba31ee..dcba804 100644
--- a/clients/go/pkg/commands/deploy.go
+++ b/clients/go/pkg/commands/deploy.go
@@ -31,11 +31,11 @@ func (cmd *DeployCommand) AddResourceFile(path string) *DeployCommand {
 	if err != nil {
 		log.Fatal(err)
 	}
-	return cmd.AddResource(b, path, pb.ProcessRequestObject_FILE)
+	return cmd.AddResource(b, path)
 }
 
-func (cmd *DeployCommand) AddResource(definition []byte, name string, resourceType pb.ProcessRequestObject_ResourceType) *DeployCommand {
-	cmd.request.Processes = append(cmd.request.Processes, &pb.ProcessRequestObject{Definition: definition, Name: name, Type: resourceType})
+func (cmd *DeployCommand) AddResource(definition []byte, name string) *DeployCommand {
+	cmd.request.Processes = append(cmd.request.Processes, &pb.ProcessRequestObject{Definition: definition, Name: name})
 	return cmd
 }
 
diff --git a/clients/go/pkg/commands/deploy_test.go b/clients/go/pkg/commands/deploy_test.go
index 357fc83..592ae55 100644
--- a/clients/go/pkg/commands/deploy_test.go
+++ b/clients/go/pkg/commands/deploy_test.go
@@ -39,12 +39,10 @@ func TestDeployCommand_AddResourceFile(t *testing.T) {
 		Processes: []*pb.ProcessRequestObject{
 			{
 				Name:       demoName,
-				Type:       pb.ProcessRequestObject_FILE,
 				Definition: demoBytes,
 			},
 			{
 				Name:       anotherName,
-				Type:       pb.ProcessRequestObject_FILE,
 				Definition: anotherBytes,
 			},
 		},
@@ -82,7 +80,6 @@ func TestDeployCommand_AddResource(t *testing.T) {
 		Processes: []*pb.ProcessRequestObject{
 			{
 				Name:       demoName,
-				Type:       pb.ProcessRequestObject_BPMN,
 				Definition: demoBytes,
 			},
 		},
@@ -97,7 +94,7 @@ func TestDeployCommand_AddResource(t *testing.T) {
 	defer cancel()
 
 	response, err := command.
-		AddResource(demoBytes, demoName, pb.ProcessRequestObject_BPMN).
+		AddResource(demoBytes, demoName).
 		Send(ctx)
 
 	if err != nil {

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
index e4ffc70..07707fe 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
@@ -150,12 +150,12 @@ public class TopologyChangeCoordinatorImpl implements TopologyChangeCoordinator 
       final ClusterTopology updatedTopology,
       final TopologyChangeAppliersImpl topologyChangeSimulator,
       final ActorFuture<ClusterTopology> simulationCompleted) {
-    if (!updatedTopology.changes().hasPendingChanges()) {
+    if (!updatedTopology.hasPendingChanges()) {
       simulationCompleted.complete(updatedTopology);
       return;
     }
 
-    final var operation = updatedTopology.changes().nextPendingOperation();
+    final var operation = updatedTopology.nextPendingOperation();
     final OperationApplier applier = topologyChangeSimulator.getApplier(operation);
     final var result = applier.init(updatedTopology);
     if (result.isLeft()) {
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java b/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
index a521721..1f89665 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/serializer/ProtoBufSerializer.java
@@ -23,7 +23,6 @@ import io.camunda.zeebe.topology.protocol.Requests.ChangeStatus;
 import io.camunda.zeebe.topology.protocol.Topology;
 import io.camunda.zeebe.topology.protocol.Topology.CompletedChange;
 import io.camunda.zeebe.topology.protocol.Topology.MemberState;
-import io.camunda.zeebe.topology.protocol.Topology.PendingChange;
 import io.camunda.zeebe.topology.state.ClusterChangePlan;
 import io.camunda.zeebe.topology.state.ClusterChangePlan.CompletedOperation;
 import io.camunda.zeebe.topology.state.ClusterTopology;
@@ -98,10 +97,17 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
             .map(e -> Map.entry(MemberId.from(e.getKey()), decodeMemberState(e.getValue())))
             .collect(Collectors.toMap(Entry::getKey, Entry::getValue));
 
-    final var changes = decodeChangePlan(encodedClusterTopology.getChanges());
+    final Optional<io.camunda.zeebe.topology.state.CompletedChange> completedChange =
+        encodedClusterTopology.hasLastChange()
+            ? Optional.of(decodeCompletedChange(encodedClusterTopology.getLastChange()))
+            : Optional.empty();
+    final Optional<ClusterChangePlan> currentChange =
+        encodedClusterTopology.hasCurrentChange()
+            ? Optional.of(decodeChangePlan(encodedClusterTopology.getCurrentChange()))
+            : Optional.empty();
 
     return new io.camunda.zeebe.topology.state.ClusterTopology(
-        encodedClusterTopology.getVersion(), members, changes);
+        encodedClusterTopology.getVersion(), members, completedChange, currentChange);
   }
 
   private Topology.ClusterTopology encodeClusterTopology(
@@ -110,12 +116,19 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
         clusterTopology.members().entrySet().stream()
             .collect(Collectors.toMap(e -> e.getKey().id(), e -> encodeMemberState(e.getValue())));
 
-    final var encodedChangePlan = encodeChangePlan(clusterTopology.changes());
-    return Topology.ClusterTopology.newBuilder()
-        .setVersion(clusterTopology.version())
-        .putAllMembers(members)
-        .setChanges(encodedChangePlan)
-        .build();
+    final var builder =
+        Topology.ClusterTopology.newBuilder()
+            .setVersion(clusterTopology.version())
+            .putAllMembers(members);
+
+    clusterTopology
+        .lastChange()
+        .ifPresent(lastChange -> builder.setLastChange(encodeCompletedChange(lastChange)));
+    clusterTopology
+        .changes()
+        .ifPresent(changePlan -> builder.setCurrentChange(encodeChangePlan(changePlan)));
+
+    return builder.build();
   }
 
   private io.camunda.zeebe.topology.state.MemberState decodeMemberState(
@@ -207,17 +220,28 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
   }
 
   private Topology.ClusterChangePlan encodeChangePlan(final ClusterChangePlan changes) {
-    final var builder = Topology.ClusterChangePlan.newBuilder().setVersion(changes.version());
-    if (changes.ongoingChange().isPresent()) {
-      builder.setPendingChange(encodePendingChange(changes.ongoingChange().get()));
-    } else if (changes.lastChange().isPresent()) {
-      builder.setCompletedChange(encodeCompletedChange(changes.lastChange().get()));
-    }
+    final var builder =
+        Topology.ClusterChangePlan.newBuilder()
+            .setVersion(changes.version())
+            .setId(changes.id())
+            .setStatus(fromTopologyChangeStatus(changes.status()))
+            .setStartedAt(
+                Timestamp.newBuilder()
+                    .setSeconds(changes.startedAt().getEpochSecond())
+                    .setNanos(changes.startedAt().getNano())
+                    .build());
+    changes
+        .pendingOperations()
+        .forEach(operation -> builder.addPendingOperations(encodeOperation(operation)));
+    changes
+        .completedOperations()
+        .forEach(operation -> builder.addCompletedOperations(encodeCompletedOperation(operation)));
+
     return builder.build();
   }
 
   private CompletedChange encodeCompletedChange(
-      final ClusterChangePlan.CompletedChange completedChange) {
+      final io.camunda.zeebe.topology.state.CompletedChange completedChange) {
     final var builder = Topology.CompletedChange.newBuilder();
     builder
         .setId(completedChange.id())
@@ -236,27 +260,6 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
     return builder.build();
   }
 
-  private Topology.PendingChange encodePendingChange(
-      final ClusterChangePlan.PendingChange pendingChange) {
-    final var builder = Topology.PendingChange.newBuilder();
-    builder
-        .setId(pendingChange.id())
-        .setStatus(fromTopologyChangeStatus(pendingChange.status()))
-        .setStartedAt(
-            Timestamp.newBuilder()
-                .setSeconds(pendingChange.startedAt().getEpochSecond())
-                .setNanos(pendingChange.startedAt().getNano())
-                .build());
-    pendingChange
-        .pendingOperations()
-        .forEach(operation -> builder.addPendingOperations(encodeOperation(operation)));
-    pendingChange
-        .completedOperations()
-        .forEach(operation -> builder.addCompletedOperations(encodeCompletedOperation(operation)));
-
-    return builder.build();
-  }
-
   private Topology.TopologyChangeOperation encodeOperation(
       final io.camunda.zeebe.topology.state.TopologyChangeOperation operation) {
     final var builder =
@@ -298,22 +301,31 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
   }
 
   private ClusterChangePlan decodeChangePlan(final Topology.ClusterChangePlan clusterChangePlan) {
+
     final var version = clusterChangePlan.getVersion();
-    final Optional<ClusterChangePlan.PendingChange> pendingChange =
-        clusterChangePlan.hasPendingChange()
-            ? Optional.of(decodePendingChange(clusterChangePlan.getPendingChange()))
-            : Optional.empty();
-    final Optional<ClusterChangePlan.CompletedChange> completedChange =
-        clusterChangePlan.hasCompletedChange()
-            ? Optional.of(decodeCompletedChange(clusterChangePlan.getCompletedChange()))
-            : Optional.empty();
+    final var pendingOperations =
+        clusterChangePlan.getPendingOperationsList().stream()
+            .map(this::decodeOperation)
+            .collect(Collectors.toList());
+    final var completedOperations =
+        clusterChangePlan.getCompletedOperationsList().stream()
+            .map(this::decodeCompletedOperation)
+            .collect(Collectors.toList());
 
-    return new ClusterChangePlan(version, completedChange, pendingChange);
+    return new ClusterChangePlan(
+        clusterChangePlan.getId(),
+        clusterChangePlan.getVersion(),
+        toChangeStatus(clusterChangePlan.getStatus()),
+        Instant.ofEpochSecond(
+            clusterChangePlan.getStartedAt().getSeconds(),
+            clusterChangePlan.getStartedAt().getNanos()),
+        completedOperations,
+        pendingOperations);
   }
 
-  private ClusterChangePlan.CompletedChange decodeCompletedChange(
+  private io.camunda.zeebe.topology.state.CompletedChange decodeCompletedChange(
       final CompletedChange completedChange) {
-    return new ClusterChangePlan.CompletedChange(
+    return new io.camunda.zeebe.topology.state.CompletedChange(
         completedChange.getId(),
         toChangeStatus(completedChange.getStatus()),
         Instant.ofEpochSecond(
@@ -323,25 +335,6 @@ public class ProtoBufSerializer implements ClusterTopologySerializer, TopologyRe
             completedChange.getCompletedAt().getNanos()));
   }
 
-  private ClusterChangePlan.PendingChange decodePendingChange(final PendingChange pendingChange) {
-    final var pendingOperations =
-        pendingChange.getPendingOperationsList().stream()
-            .map(this::decodeOperation)
-            .collect(Collectors.toList());
-    final var completedOperations =
-        pendingChange.getCompletedOperationsList().stream()
-            .map(this::decodeCompletedOperation)
-            .collect(Collectors.toList());
-
-    return new ClusterChangePlan.PendingChange(
-        pendingChange.getId(),
-        toChangeStatus(pendingChange.getStatus()),
-        Instant.ofEpochSecond(
-            pendingChange.getStartedAt().getSeconds(), pendingChange.getStartedAt().getNanos()),
-        completedOperations,
-        pendingOperations);
-  }
-
   private TopologyChangeOperation decodeOperation(
       final Topology.TopologyChangeOperation topologyChangeOperation) {
     if (topologyChangeOperation.hasPartitionJoin()) {
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterChangePlan.java b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterChangePlan.java
index 49ed70f..97a29ba 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterChangePlan.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterChangePlan.java
@@ -11,7 +11,6 @@ import io.atomix.cluster.MemberId;
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Optional;
 
 /**
  * Represents the ongoing cluster topology changes. The pendingOperations are executed sequentially.
@@ -23,50 +22,32 @@ import java.util.Optional;
  * gossip update out of order.
  */
 public record ClusterChangePlan(
-    int version, Optional<CompletedChange> lastChange, Optional<PendingChange> ongoingChange) {
-  public static ClusterChangePlan empty() {
-    return new ClusterChangePlan(0, Optional.empty(), Optional.empty());
-  }
+    long id,
+    int version,
+    Status status,
+    Instant startedAt,
+    List<CompletedOperation> completedOperations,
+    List<TopologyChangeOperation> pendingOperations) {
 
   public static ClusterChangePlan init(
       final long id, final List<TopologyChangeOperation> operations) {
     return new ClusterChangePlan(
-        1,
-        Optional.empty(),
-        Optional.of(
-            new PendingChange(
-                id, Status.IN_PROGRESS, Instant.now(), List.of(), List.copyOf(operations))));
+        id, 1, Status.IN_PROGRESS, Instant.now(), List.of(), List.copyOf(operations));
   }
 
   /** To be called when the first operation is completed. */
   ClusterChangePlan advance() {
     // List#subList hold on to the original list. Make a copy to prevent a potential memory leak.
-    final PendingChange pendingChange = ongoingChange.orElseThrow();
-    final List<TopologyChangeOperation> pendingOperations = pendingChange.pendingOperations();
     final var nextPendingOperations =
         List.copyOf(pendingOperations.subList(1, pendingOperations.size()));
-    final var newCompletedOperations = new ArrayList<>(pendingChange.completedOperations());
+    final var newCompletedOperations = new ArrayList<>(completedOperations);
     newCompletedOperations.add(new CompletedOperation(pendingOperations.get(0), Instant.now()));
     return new ClusterChangePlan(
-        version + 1,
-        lastChange,
-        Optional.of(
-            new PendingChange(
-                pendingChange.id(),
-                pendingChange.status(),
-                pendingChange.startedAt(),
-                newCompletedOperations,
-                nextPendingOperations)));
+        id, version + 1, status, startedAt(), newCompletedOperations, nextPendingOperations);
   }
 
-  ClusterChangePlan completed() {
-    final var pendingChange = ongoingChange.orElseThrow();
-    return new ClusterChangePlan(
-        0, // reset version
-        Optional.of(
-            new CompletedChange(
-                pendingChange.id(), Status.COMPLETED, pendingChange.startedAt(), Instant.now())),
-        Optional.empty());
+  CompletedChange completed() {
+    return new CompletedChange(id, Status.COMPLETED, startedAt(), Instant.now());
   }
 
   public ClusterChangePlan merge(final ClusterChangePlan other) {
@@ -81,35 +62,22 @@ public record ClusterChangePlan(
   }
 
   public boolean hasPendingChangesFor(final MemberId memberId) {
-    if (ongoingChange.isEmpty()) {
-      return false;
-    }
-    final var pendingOperations = ongoingChange.get().pendingOperations();
     return !pendingOperations.isEmpty() && pendingOperations.get(0).memberId().equals(memberId);
   }
 
   public TopologyChangeOperation nextPendingOperation() {
-    return ongoingChange.orElseThrow().pendingOperations().get(0);
+    return pendingOperations().get(0);
   }
 
   public boolean hasPendingChanges() {
-    return ongoingChange.isPresent() && !ongoingChange.get().pendingOperations().isEmpty();
+    return !pendingOperations().isEmpty();
   }
 
-  public record CompletedChange(long id, Status status, Instant startedAt, Instant completedAt) {}
-
-  public record PendingChange(
-      long id,
-      Status status,
-      Instant startedAt,
-      List<CompletedOperation> completedOperations,
-      List<TopologyChangeOperation> pendingOperations) {}
-
   public record CompletedOperation(TopologyChangeOperation operation, Instant completedAt) {}
 
   public enum Status {
     IN_PROGRESS,
     COMPLETED,
-    FAILED
+    FAILED;
   }
 }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
index 544118a..3494832 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/state/ClusterTopology.java
@@ -12,6 +12,8 @@ import io.atomix.cluster.MemberId;
 import io.camunda.zeebe.topology.state.MemberState.State;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
+import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.function.UnaryOperator;
@@ -32,12 +34,15 @@ import java.util.stream.Stream;
  * <p>This class is immutable. Each mutable methods returns a new instance with the updated state.
  */
 public record ClusterTopology(
-    long version, Map<MemberId, MemberState> members, ClusterChangePlan changes) {
+    long version,
+    Map<MemberId, MemberState> members,
+    Optional<CompletedChange> lastChange,
+    Optional<ClusterChangePlan> changes) {
 
   private static final int UNINITIALIZED_VERSION = -1;
 
   public static ClusterTopology uninitialized() {
-    return new ClusterTopology(UNINITIALIZED_VERSION, Map.of(), ClusterChangePlan.empty());
+    return new ClusterTopology(UNINITIALIZED_VERSION, Map.of(), Optional.empty(), Optional.empty());
   }
 
   public boolean isUninitialized() {
@@ -45,7 +50,7 @@ public record ClusterTopology(
   }
 
   public static ClusterTopology init() {
-    return new ClusterTopology(0, Map.of(), ClusterChangePlan.empty());
+    return new ClusterTopology(0, Map.of(), Optional.empty(), Optional.empty());
   }
 
   public ClusterTopology addMember(final MemberId memberId, final MemberState state) {
@@ -58,7 +63,7 @@ public record ClusterTopology(
 
     final var newMembers =
         ImmutableMap.<MemberId, MemberState>builder().putAll(members).put(memberId, state).build();
-    return new ClusterTopology(version, newMembers, changes);
+    return new ClusterTopology(version, newMembers, lastChange, changes);
   }
 
   /**
@@ -96,7 +101,7 @@ public record ClusterTopology(
     }
 
     final var newMembers = mapBuilder.buildKeepingLast();
-    return new ClusterTopology(version, newMembers, changes);
+    return new ClusterTopology(version, newMembers, lastChange, changes);
   }
 
   public ClusterTopology startTopologyChange(final List<TopologyChangeOperation> operations) {
@@ -110,7 +115,10 @@ public record ClusterTopology(
     } else {
       final long newVersion = version + 1;
       return new ClusterTopology(
-          newVersion, members, ClusterChangePlan.init(newVersion, operations));
+          newVersion,
+          members,
+          lastChange,
+          Optional.of(ClusterChangePlan.init(newVersion, operations)));
     }
   }
 
@@ -130,20 +138,28 @@ public record ClusterTopology(
     } else {
       final var mergedMembers =
           Stream.concat(members.entrySet().stream(), other.members().entrySet().stream())
-              .collect(
-                  Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, MemberState::merge));
+              .collect(Collectors.toMap(Entry::getKey, Entry::getValue, MemberState::merge));
 
-      final var mergedChanges = changes.merge(other.changes);
-      return new ClusterTopology(version, ImmutableMap.copyOf(mergedMembers), mergedChanges);
+      final Optional<ClusterChangePlan> mergedChanges =
+          Stream.of(changes, other.changes)
+              .flatMap(Optional::stream)
+              .reduce(ClusterChangePlan::merge);
+
+      return new ClusterTopology(
+          version, ImmutableMap.copyOf(mergedMembers), lastChange, mergedChanges);
     }
   }
 
+  public boolean hasPendingChanges() {
+    return changes.isPresent() && changes.orElseThrow().hasPendingChanges();
+  }
+
   /**
    * @return true if the next operation in pending changes is applicable for the given memberId,
    *     otherwise returns false.
    */
   private boolean hasPendingChangesFor(final MemberId memberId) {
-    return changes.hasPendingChangesFor(memberId);
+    return changes.isPresent() && changes.get().hasPendingChangesFor(memberId);
   }
 
   /**
@@ -157,7 +173,7 @@ public record ClusterTopology(
     if (!hasPendingChangesFor(memberId)) {
       return Optional.empty();
     }
-    return Optional.of(changes.nextPendingOperation());
+    return Optional.of(changes.orElseThrow().nextPendingOperation());
   }
 
   /**
@@ -179,7 +195,9 @@ public record ClusterTopology(
       throw new IllegalStateException(
           ""Expected to advance the topology change, but there is no pending change"");
     }
-    final ClusterTopology result = new ClusterTopology(version, members, changes.advance());
+    final ClusterTopology result =
+        new ClusterTopology(
+            version, members, lastChange, Optional.of(changes.orElseThrow().advance()));
 
     if (!result.hasPendingChanges()) {
       // The last change has been applied. Clean up the members that are marked as LEFT in the
@@ -194,7 +212,9 @@ public record ClusterTopology(
               .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
 
       // Increment the version so that other members can merge by overwriting their local topology.
-      return new ClusterTopology(result.version() + 1, currentMembers, changes.completed());
+      final var completedChange = changes.orElseThrow().completed();
+      return new ClusterTopology(
+          result.version() + 1, currentMembers, Optional.of(completedChange), Optional.empty());
     }
 
     return result;
@@ -208,10 +228,6 @@ public record ClusterTopology(
     return members().get(memberId);
   }
 
-  public boolean hasPendingChanges() {
-    return changes.hasPendingChanges();
-  }
-
   public int clusterSize() {
     return (int)
         members.entrySet().stream()
@@ -226,4 +242,11 @@ public record ClusterTopology(
     return (int)
         members.values().stream().flatMap(m -> m.partitions().keySet().stream()).distinct().count();
   }
+
+  public TopologyChangeOperation nextPendingOperation() {
+    if (!hasPendingChanges()) {
+      throw new NoSuchElementException();
+    }
+    return changes.orElseThrow().nextPendingOperation();
+  }
 }
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/state/CompletedChange.java b/topology/src/main/java/io/camunda/zeebe/topology/state/CompletedChange.java
new file mode 100644
index 0000000..7031e88
--- /dev/null
+++ b/topology/src/main/java/io/camunda/zeebe/topology/state/CompletedChange.java
@@ -0,0 +1,13 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.topology.state;
+
+import io.camunda.zeebe.topology.state.ClusterChangePlan.Status;
+import java.time.Instant;
+
+public record CompletedChange(long id, Status status, Instant startedAt, Instant completedAt) {}
diff --git a/topology/src/main/java/io/camunda/zeebe/topology/util/TopologyUtil.java b/topology/src/main/java/io/camunda/zeebe/topology/util/TopologyUtil.java
index 5861c7c..ef94a1f 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/util/TopologyUtil.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/util/TopologyUtil.java
@@ -10,13 +10,13 @@ package io.camunda.zeebe.topology.util;
 import io.atomix.cluster.MemberId;
 import io.atomix.primitive.partition.PartitionId;
 import io.atomix.primitive.partition.PartitionMetadata;
-import io.camunda.zeebe.topology.state.ClusterChangePlan;
 import io.camunda.zeebe.topology.state.ClusterTopology;
 import io.camunda.zeebe.topology.state.MemberState;
 import io.camunda.zeebe.topology.state.PartitionState;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 
@@ -42,7 +42,7 @@ public final class TopologyUtil {
     }
 
     return new io.camunda.zeebe.topology.state.ClusterTopology(
-        0, Map.copyOf(memberStates), ClusterChangePlan.empty());
+        0, Map.copyOf(memberStates), Optional.empty(), Optional.empty());
   }
 
   public static Set<PartitionMetadata> getPartitionDistributionFrom(

diff --git a/engine/src/main/java/io/zeebe/engine/processing/incident/CreateIncidentProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/incident/CreateIncidentProcessor.java
index d7aa0b4..531d316 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/incident/CreateIncidentProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/incident/CreateIncidentProcessor.java
@@ -11,10 +11,10 @@ import io.zeebe.engine.processing.streamprocessor.CommandProcessor;
 import io.zeebe.engine.processing.streamprocessor.TypedRecord;
 import io.zeebe.engine.state.ZeebeState;
 import io.zeebe.engine.state.immutable.ElementInstanceState;
-import io.zeebe.engine.state.immutable.IncidentState;
 import io.zeebe.engine.state.immutable.JobState;
 import io.zeebe.engine.state.immutable.JobState.State;
 import io.zeebe.engine.state.instance.IndexedRecord;
+import io.zeebe.engine.state.mutable.MutableIncidentState;
 import io.zeebe.protocol.impl.record.value.incident.IncidentRecord;
 import io.zeebe.protocol.record.RejectionType;
 import io.zeebe.protocol.record.intent.IncidentIntent;
@@ -29,10 +29,14 @@ public final class CreateIncidentProcessor implements CommandProcessor<IncidentR
   private static final String NO_FAILED_JOB_MESSAGE =
       ""Expected to create incident for failed job with key '%d', but no such job was found"";
 
-  private final ZeebeState zeebeState;
+  private final ElementInstanceState elementInstanceState;
+  private final JobState jobState;
+  private final MutableIncidentState incidentState;
 
   public CreateIncidentProcessor(final ZeebeState zeebeState) {
-    this.zeebeState = zeebeState;
+    jobState = zeebeState.getJobState();
+    elementInstanceState = zeebeState.getElementInstanceState();
+    incidentState = zeebeState.getIncidentState();
   }
 
   @Override
@@ -41,51 +45,53 @@ public final class CreateIncidentProcessor implements CommandProcessor<IncidentR
       final CommandControl<IncidentRecord> commandControl) {
     final IncidentRecord incidentEvent = command.getValue();
 
-    final boolean incidentIsNotRejected = !rejectIncidentCreation(incidentEvent, commandControl);
+    final boolean incidentIsNotRejected = !tryRejectIncidentCreation(incidentEvent, commandControl);
 
     if (incidentIsNotRejected) {
       final long incidentKey = commandControl.accept(IncidentIntent.CREATED, incidentEvent);
-      zeebeState.getIncidentState().createIncident(incidentKey, incidentEvent);
+      incidentState.createIncident(incidentKey, incidentEvent);
     }
 
     return true;
   }
 
-  public boolean rejectIncidentCreation(
+  /** @return true if rejected, otherwise false */
+  public boolean tryRejectIncidentCreation(
       final IncidentRecord incidentEvent, final CommandControl<IncidentRecord> commandControl) {
-    final IncidentState incidentState = zeebeState.getIncidentState();
 
     final boolean isJobIncident = incidentState.isJobIncident(incidentEvent);
 
     if (isJobIncident) {
-      return rejectJobIncident(incidentEvent.getJobKey(), commandControl);
+      return tryRejectJobIncident(incidentEvent.getJobKey(), commandControl);
     } else {
-      return rejectWorkflowInstanceIncident(incidentEvent.getElementInstanceKey(), commandControl);
+      return tryRejectWorkflowInstanceIncident(
+          incidentEvent.getElementInstanceKey(), commandControl);
     }
   }
 
-  private boolean rejectJobIncident(
+  /** @return true if rejected, otherwise false */
+  private boolean tryRejectJobIncident(
       final long jobKey, final CommandControl<IncidentRecord> commandControl) {
-    final JobState state = zeebeState.getJobState();
-    final JobState.State jobState = state.getState(jobKey);
 
-    if (jobState == State.NOT_FOUND) {
+    final JobState.State currentJobState = jobState.getState(jobKey);
+
+    if (currentJobState == State.NOT_FOUND) {
       commandControl.reject(RejectionType.NOT_FOUND, String.format(NO_FAILED_JOB_MESSAGE, jobKey));
       return true;
 
-    } else if (jobState != State.FAILED && jobState != State.ERROR_THROWN) {
+    } else if (currentJobState != State.FAILED && currentJobState != State.ERROR_THROWN) {
       commandControl.reject(
-          RejectionType.INVALID_STATE, String.format(INVALID_JOB_STATE_MESSAGE, jobKey, jobState));
+          RejectionType.INVALID_STATE,
+          String.format(INVALID_JOB_STATE_MESSAGE, jobKey, currentJobState));
       return true;
     }
 
     return false;
   }
 
-  private boolean rejectWorkflowInstanceIncident(
+  /** @return true if rejected, otherwise false */
+  private boolean tryRejectWorkflowInstanceIncident(
       final long elementInstanceKey, final CommandControl<IncidentRecord> commandControl) {
-    final ElementInstanceState elementInstanceState = zeebeState.getElementInstanceState();
-
     final IndexedRecord failedRecord = elementInstanceState.getFailedRecord(elementInstanceKey);
     final boolean noFailedRecord = failedRecord == null;
     if (noFailedRecord) {

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
index 6ee5797..bcfcc72 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/AsyncSnapshotDirector.java
@@ -224,7 +224,6 @@ public final class AsyncSnapshotDirector extends Actor
   private void takeSnapshot() {
     final var transientSnapshotFuture =
         stateController.takeTransientSnapshot(lowerBoundSnapshotPosition);
-
     transientSnapshotFuture.onComplete(
         (optionalTransientSnapshot, snapshotTakenError) -> {
           if (snapshotTakenError != null) {
@@ -237,27 +236,31 @@ public final class AsyncSnapshotDirector extends Actor
             takingSnapshot = false;
             return;
           }
-          pendingSnapshot = optionalTransientSnapshot.get();
-          onRecovered();
-
-          final ActorFuture<Long> lastWrittenPosition =
-              streamProcessor.getLastWrittenPositionAsync();
-          actor.runOnCompletion(
-              lastWrittenPosition,
-              (endPosition, error) -> {
-                if (error == null) {
-                  LOG.info(LOG_MSG_WAIT_UNTIL_COMMITTED, endPosition, commitPosition);
-                  lastWrittenEventPosition = endPosition;
-                  persistingSnapshot = false;
-                  persistSnapshotIfLastWrittenPositionCommitted();
-                } else {
-                  resetStateOnFailure();
-                  LOG.error(ERROR_MSG_ON_RESOLVE_WRITTEN_POS, error);
-                }
-              });
+          onTransientSnapshotTaken(optionalTransientSnapshot.get());
         });
   }
 
+  private void onTransientSnapshotTaken(final TransientSnapshot transientSnapshot) {
+
+    pendingSnapshot = transientSnapshot;
+    onRecovered();
+
+    final ActorFuture<Long> lastWrittenPosition = streamProcessor.getLastWrittenPositionAsync();
+    actor.runOnCompletion(lastWrittenPosition, this::onLastWrittenPositionReceived);
+  }
+
+  private void onLastWrittenPositionReceived(final Long endPosition, final Throwable error) {
+    if (error == null) {
+      LOG.info(LOG_MSG_WAIT_UNTIL_COMMITTED, endPosition, commitPosition);
+      lastWrittenEventPosition = endPosition;
+      persistingSnapshot = false;
+      persistSnapshotIfLastWrittenPositionCommitted();
+    } else {
+      resetStateOnFailure();
+      LOG.error(ERROR_MSG_ON_RESOLVE_WRITTEN_POS, error);
+    }
+  }
+
   private void onRecovered() {
     if (healthStatus != HealthStatus.HEALTHY) {
       healthStatus = HealthStatus.HEALTHY;

diff --git a/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTest.java b/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTest.java
index bb7560e..ed16e7d 100644
--- a/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTest.java
@@ -61,6 +61,7 @@ import org.junit.jupiter.api.condition.OS;
 final class NettyMessagingServiceTest {
 
   private static final String IP_STRING = ""127.0.0.1"";
+  private static final int UID_COLUMN = 7;
 
   @AutoCloseResource private NettyMessagingService netty1;
   private Address address1;
@@ -747,12 +748,13 @@ final class NettyMessagingServiceTest {
     final var uid = new UnixSystem().getUid();
     lines.remove(0);
 
-    // then filter out any sockets not opened by the current user
+    // the UDP file is a table, where each row is whitespace separated and here we're only
+    // interested in the lines where the UID column happens to match our user ID
     return lines.stream()
         .filter(
             line -> {
               final String[] columns = line.trim().split(""\\s+"");
-              return Long.parseLong(columns[7]) == uid;
+              return Long.parseLong(columns[UID_COLUMN]) == uid;
             })
         .count();
   }

diff --git a/restore/src/main/java/io/camunda/zeebe/restore/PartitionRestoreService.java b/restore/src/main/java/io/camunda/zeebe/restore/PartitionRestoreService.java
index 69b06b6..a4fcb77 100644
--- a/restore/src/main/java/io/camunda/zeebe/restore/PartitionRestoreService.java
+++ b/restore/src/main/java/io/camunda/zeebe/restore/PartitionRestoreService.java
@@ -112,7 +112,7 @@ public class PartitionRestoreService {
         SegmentedJournal.builder()
             .withDirectory(dataDirectory.toFile())
             .withName(partition.name())
-            .withLastWrittenIndex(-1)
+            .withLastFlushedIndex(-1)
             .build()) {
 
       resetJournal(checkpointPosition, journal);

diff --git a/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentedJournalWriter.java b/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentedJournalWriter.java
index f0c8639..d5c8246 100644
--- a/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentedJournalWriter.java
+++ b/journal/src/main/java/io/camunda/zeebe/journal/file/SegmentedJournalWriter.java
@@ -99,8 +99,8 @@ final class SegmentedJournalWriter {
 
     // Truncate down to the current index, such that the last index is `index`, and the next index
     // `index + 1`
-    currentWriter.truncate(index);
     flusher.setLastFlushedIndex(index);
+    currentWriter.truncate(index);
   }
 
   void flush() {

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
index 0d79088..59a0b95 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeCoordinatorImpl.java
@@ -59,6 +59,21 @@ public class TopologyChangeCoordinatorImpl implements TopologyChangeCoordinator 
                   if (!validateCancel(changeId, clusterTopology, future)) {
                     return clusterTopology;
                   }
+                  final var completedOperation =
+                      clusterTopology
+                          .pendingChanges()
+                          .map(ClusterChangePlan::completedOperations)
+                          .orElse(List.of());
+                  final var cancelledOperations =
+                      clusterTopology
+                          .pendingChanges()
+                          .map(ClusterChangePlan::pendingOperations)
+                          .orElse(List.of());
+                  LOG.info(
+                      ""Cancelling topology change '{}'. Following operations have been already applied: {}. Following pending operations won't be applied: {}"",
+                      changeId,
+                      completedOperation,
+                      cancelledOperations);
                   final var cancelledTopology = clusterTopology.cancelPendingChanges();
                   future.complete(cancelledTopology);
                   return cancelledTopology;

diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManager.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManager.java
index b4589f4..f4c70b3 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManager.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManager.java
@@ -110,6 +110,7 @@ final class ClientStreamRequestManager<M extends BufferWriter, P extends BufferR
             // TODO: use backoff delay
             executor.schedule(RETRY_DELAY, () -> doRemove(request, brokerId, clientStream));
           } else {
+            LOG.debug(""Removed stream {} to node {}"", clientStream, brokerId);
             clientStream.remove(brokerId);
           }
         },

diff --git a/engine/src/main/java/io/zeebe/engine/state/immutable/ElementInstanceState.java b/engine/src/main/java/io/zeebe/engine/state/immutable/ElementInstanceState.java
index a4bb1ba..b97e93c 100644
--- a/engine/src/main/java/io/zeebe/engine/state/immutable/ElementInstanceState.java
+++ b/engine/src/main/java/io/zeebe/engine/state/immutable/ElementInstanceState.java
@@ -18,12 +18,15 @@ public interface ElementInstanceState {
 
   ElementInstance getInstance(long key);
 
+  @Deprecated
   StoredRecord getStoredRecord(long recordKey);
 
   List<ElementInstance> getChildren(long parentKey);
 
+  @Deprecated
   List<IndexedRecord> getDeferredRecords(long scopeKey);
 
+  @Deprecated
   IndexedRecord getFailedRecord(long key);
 
   AwaitProcessInstanceResultMetadata getAwaitResultRequestMetadata(long processInstanceKey);
diff --git a/engine/src/main/java/io/zeebe/engine/state/instance/StoredRecord.java b/engine/src/main/java/io/zeebe/engine/state/instance/StoredRecord.java
index 11e4c74..ceb7d8c 100644
--- a/engine/src/main/java/io/zeebe/engine/state/instance/StoredRecord.java
+++ b/engine/src/main/java/io/zeebe/engine/state/instance/StoredRecord.java
@@ -12,6 +12,7 @@ import io.zeebe.msgpack.UnpackedObject;
 import io.zeebe.msgpack.property.EnumProperty;
 import io.zeebe.msgpack.property.ObjectProperty;
 
+@Deprecated
 public final class StoredRecord extends UnpackedObject implements DbValue {
 
   private final ObjectProperty<IndexedRecord> recordProp =
@@ -46,6 +47,7 @@ public final class StoredRecord extends UnpackedObject implements DbValue {
     return recordProp.getValue().getKey();
   }
 
+  @Deprecated
   public enum Purpose {
     // Order is important, as we use the ordinal for persistence
     DEFERRED,
diff --git a/engine/src/main/java/io/zeebe/engine/state/mutable/MutableElementInstanceState.java b/engine/src/main/java/io/zeebe/engine/state/mutable/MutableElementInstanceState.java
index 9c7dd60..b2f055b 100644
--- a/engine/src/main/java/io/zeebe/engine/state/mutable/MutableElementInstanceState.java
+++ b/engine/src/main/java/io/zeebe/engine/state/mutable/MutableElementInstanceState.java
@@ -29,6 +29,7 @@ public interface MutableElementInstanceState extends ElementInstanceState {
 
   void updateInstance(long key, Consumer<ElementInstance> modifier);
 
+  @Deprecated
   void storeRecord(
       long key,
       long scopeKey,
@@ -36,6 +37,7 @@ public interface MutableElementInstanceState extends ElementInstanceState {
       ProcessInstanceIntent intent,
       Purpose purpose);
 
+  @Deprecated
   void removeStoredRecord(long scopeKey, long recordKey, Purpose purpose);
 
   void setAwaitResultRequestMetadata(
"
camunda/zeebe,style,"diff --git a/benchmarks/project/src/main/java/io/camunda/zeebe/Starter.java b/benchmarks/project/src/main/java/io/camunda/zeebe/Starter.java
index 96fef04..1efe5fe 100644
--- a/benchmarks/project/src/main/java/io/camunda/zeebe/Starter.java
+++ b/benchmarks/project/src/main/java/io/camunda/zeebe/Starter.java
@@ -135,9 +135,7 @@ public class Starter extends App {
                   .correlationKey("""") // for start-events it is empty
                   .variables(variables)
                   .send());
-        }
-        else
-        {
+        } else {
           startViaCommand(starterCfg, processId, requestFutures, client, variables);
         }
 
@@ -149,9 +147,13 @@ public class Starter extends App {
     }
   }
 
-  private static void startViaCommand(final StarterCfg starterCfg, final String processId,
-      final BlockingQueue<Future<?>> requestFutures, final ZeebeClient client,
-      final String variables) throws InterruptedException {
+  private static void startViaCommand(
+      final StarterCfg starterCfg,
+      final String processId,
+      final BlockingQueue<Future<?>> requestFutures,
+      final ZeebeClient client,
+      final String variables)
+      throws InterruptedException {
     if (starterCfg.isWithResults()) {
       requestFutures.put(
           client
diff --git a/benchmarks/project/src/main/java/io/camunda/zeebe/config/StarterCfg.java b/benchmarks/project/src/main/java/io/camunda/zeebe/config/StarterCfg.java
index 42106f1..81accc1 100644
--- a/benchmarks/project/src/main/java/io/camunda/zeebe/config/StarterCfg.java
+++ b/benchmarks/project/src/main/java/io/camunda/zeebe/config/StarterCfg.java
@@ -114,6 +114,4 @@ public class StarterCfg {
   public void setDurationLimit(final int durationLimit) {
     this.durationLimit = durationLimit;
   }
-
-
 }

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarClassLoaderTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarClassLoaderTest.java
index e2049e6..b2fbb11 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarClassLoaderTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarClassLoaderTest.java
@@ -28,13 +28,13 @@ public final class ExporterJarClassLoaderTest {
   public void shouldLoadClassesPackagedInJar() throws Exception {
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = createExporterJar(exporterClass);
-    final ExporterJarClassLoader classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
+    final var classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
 
     // when
-    final Class<?> loadedClass = classLoader.loadClass(ExternalExporter.EXPORTER_CLASS_NAME);
+    final var loadedClass = classLoader.loadClass(ExternalExporter.EXPORTER_CLASS_NAME);
 
     // then
-    final Constructor<?> constructor = loadedClass.getConstructor();
+    final var constructor = loadedClass.getConstructor();
     assertThat(loadedClass.getDeclaredField(""FOO"").get(loadedClass)).isEqualTo(""bar"");
     assertThat(constructor.newInstance()).isInstanceOf(Exporter.class);
   }
@@ -43,10 +43,10 @@ public final class ExporterJarClassLoaderTest {
   public void shouldLoadSystemClassesFromSystemClassLoader() throws Exception {
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = createExporterJar(exporterClass);
-    final ExporterJarClassLoader classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
+    final var classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
 
     // when
-    final Class<?> loadedClass = classLoader.loadClass(String.class.getCanonicalName());
+    final var loadedClass = classLoader.loadClass(String.class.getCanonicalName());
 
     // then
     assertThat(loadedClass).isEqualTo(String.class);
@@ -56,10 +56,10 @@ public final class ExporterJarClassLoaderTest {
   public void shouldLoadZbExporterClassesFromSystemClassLoader() throws Exception {
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = createExporterJar(exporterClass);
-    final ExporterJarClassLoader classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
+    final var classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
 
     // when
-    final Class<?> loadedClass = classLoader.loadClass(Exporter.class.getCanonicalName());
+    final var loadedClass = classLoader.loadClass(Exporter.class.getCanonicalName());
 
     // then
     assertThat(loadedClass).isEqualTo(Exporter.class);
@@ -69,10 +69,10 @@ public final class ExporterJarClassLoaderTest {
   public void shouldLoadSL4JClassesFromSystemClassLoader() throws Exception {
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = createExporterJar(exporterClass);
-    final ExporterJarClassLoader classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
+    final var classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
 
     // when
-    final Class<?> loadedClass = classLoader.loadClass(Logger.class.getCanonicalName());
+    final var loadedClass = classLoader.loadClass(Logger.class.getCanonicalName());
 
     // then
     assertThat(loadedClass).isEqualTo(Logger.class);
@@ -82,10 +82,10 @@ public final class ExporterJarClassLoaderTest {
   public void shouldLoadLog4JClassesFromSystemClassLoader() throws Exception {
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = createExporterJar(exporterClass);
-    final ExporterJarClassLoader classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
+    final var classLoader = ExporterJarClassLoader.ofPath(jarFile.toPath());
 
     // when
-    final Class<?> loadedClass = classLoader.loadClass(LogManager.class.getCanonicalName());
+    final var loadedClass = classLoader.loadClass(LogManager.class.getCanonicalName());
 
     // then
     assertThat(loadedClass).isEqualTo(LogManager.class);
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarRepositoryTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarRepositoryTest.java
index 50e6a99..9a41595 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarRepositoryTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/jar/ExporterJarRepositoryTest.java
@@ -25,7 +25,7 @@ public final class ExporterJarRepositoryTest {
   @Test
   public void shouldThrowExceptionOnLoadIfNotAJar() throws IOException {
     // given
-    final File fake = temporaryFolder.newFile(""fake-file"");
+    final var fake = temporaryFolder.newFile(""fake-file"");
 
     // then
     assertThatThrownBy(() -> jarRepository.load(fake.getAbsolutePath()))
@@ -35,7 +35,7 @@ public final class ExporterJarRepositoryTest {
   @Test
   public void shouldThrowExceptionIfJarMissing() throws IOException {
     // given
-    final File dummy = temporaryFolder.newFile(""missing.jar"");
+    final var dummy = temporaryFolder.newFile(""missing.jar"");
 
     // when
     assertThat(dummy.delete()).isTrue();
@@ -48,7 +48,7 @@ public final class ExporterJarRepositoryTest {
   @Test
   public void shouldLoadClassLoaderForJar() throws IOException {
     // given
-    final File dummy = temporaryFolder.newFile(""readable.jar"");
+    final var dummy = temporaryFolder.newFile(""readable.jar"");
 
     // when (ignoring test if file cannot be set to be readable)
     assumeTrue(dummy.setReadable(true));
@@ -65,7 +65,7 @@ public final class ExporterJarRepositoryTest {
     final var jarFile = exporterClass.toJar(temporaryFolder.newFile(""exporter.jar""));
 
     // when
-    final ExporterJarClassLoader classLoader = jarRepository.load(jarFile.toPath());
+    final var classLoader = jarRepository.load(jarFile.toPath());
 
     // then
     assertThat(jarRepository.load(jarFile.toPath())).isEqualTo(classLoader);
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/repo/ExporterRepositoryTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/repo/ExporterRepositoryTest.java
index a43f974..19c0573 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/repo/ExporterRepositoryTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/repo/ExporterRepositoryTest.java
@@ -33,11 +33,11 @@ public final class ExporterRepositoryTest {
   @Test
   public void shouldCacheDescriptorOnceLoaded() throws ExporterLoadException {
     // given
-    final String id = ""myExporter"";
-    final Class<? extends Exporter> exporterClass = MinimalExporter.class;
+    final var id = ""myExporter"";
+    final var exporterClass = MinimalExporter.class;
 
     // when
-    final ExporterDescriptor descriptor = repository.load(id, exporterClass, null);
+    final var descriptor = repository.load(id, exporterClass, null);
 
     // then
     assertThat(descriptor).isNotNull();
@@ -47,8 +47,8 @@ public final class ExporterRepositoryTest {
   @Test
   public void shouldFailToLoadIfExporterInvalid() {
     // given
-    final String id = ""exporter"";
-    final Class<? extends Exporter> exporterClass = InvalidExporter.class;
+    final var id = ""exporter"";
+    final var exporterClass = InvalidExporter.class;
 
     // then
     assertThatThrownBy(() -> repository.load(id, exporterClass))
@@ -59,12 +59,12 @@ public final class ExporterRepositoryTest {
   @Test
   public void shouldLoadInternalExporter() throws ExporterLoadException, ExporterJarLoadException {
     // given
-    final ExporterCfg config = new ExporterCfg();
+    final var config = new ExporterCfg();
     config.setClassName(ControlledTestExporter.class.getCanonicalName());
     config.setJarPath(null);
 
     // when
-    final ExporterDescriptor descriptor = repository.load(""controlled"", config);
+    final var descriptor = repository.load(""controlled"", config);
 
     // then
     assertThat(config.isExternal()).isFalse();
@@ -76,7 +76,7 @@ public final class ExporterRepositoryTest {
     // given
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = exporterClass.toJar(temporaryFolder.newFile(""exporter.jar""));
-    final ExporterCfg config = new ExporterCfg();
+    final var config = new ExporterCfg();
     final Map<String, Object> args = new HashMap<>();
 
     // when
@@ -88,7 +88,7 @@ public final class ExporterRepositoryTest {
     args.put(""bar"", false);
 
     // when
-    final ExporterDescriptor descriptor = repository.load(""exported"", config);
+    final var descriptor = repository.load(""exported"", config);
 
     // then
     assertThat(config.isExternal()).isTrue();
@@ -104,7 +104,7 @@ public final class ExporterRepositoryTest {
     final var externalClass =
         new ByteBuddy().subclass(Object.class).name(""com.acme.MyObject"").make();
     final var jarFile = externalClass.toJar(temporaryFolder.newFile(""library.jar""));
-    final ExporterCfg config = new ExporterCfg();
+    final var config = new ExporterCfg();
     final Map<String, Object> args = new HashMap<>();
 
     // when
@@ -123,7 +123,7 @@ public final class ExporterRepositoryTest {
     // given
     final var exporterClass = ExternalExporter.createUnloadedExporterClass();
     final var jarFile = exporterClass.toJar(temporaryFolder.newFile(""exporter.jar""));
-    final ExporterCfg config = new ExporterCfg();
+    final var config = new ExporterCfg();
     final Map<String, Object> args = new HashMap<>();
 
     // when

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
index 5818d57..ae86dc1 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/Engine.java
@@ -83,7 +83,8 @@ public class Engine implements RecordProcessor {
     final TypedRecordProcessors typedRecordProcessors =
         typedRecordProcessorFactory.createProcessors(typedProcessorContext);
 
-    recordProcessorContext.setStreamProcessorListener(typedProcessorContext.getStreamProcessorListener());
+    recordProcessorContext.setStreamProcessorListener(
+        typedProcessorContext.getStreamProcessorListener());
 
     recordProcessorContext.setLifecycleListeners(typedRecordProcessors.getLifecycleListeners());
     recordProcessorMap = typedRecordProcessors.getRecordProcessorMap();

diff --git a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
index 097a634..5dd235a 100644
--- a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
+++ b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
@@ -245,7 +245,9 @@ public final class StreamPlatform {
   }
 
   public StreamProcessor buildStreamProcessor(
-      final SynchronousLogStream stream, final boolean awaitOpening, final StreamProcessorMode processorMode) {
+      final SynchronousLogStream stream,
+      final boolean awaitOpening,
+      final StreamProcessorMode processorMode) {
     final var storage = createRuntimeFolder(stream);
     final var snapshot = storage.getParent().resolve(SNAPSHOT_FOLDER);
 

diff --git a/atomix/cluster/src/test/java/io/atomix/raft/roles/LeaderRoleTest.java b/atomix/cluster/src/test/java/io/atomix/raft/roles/LeaderRoleTest.java
index 08ee4d2..eee9b48 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/roles/LeaderRoleTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/roles/LeaderRoleTest.java
@@ -340,7 +340,7 @@ public class LeaderRoleTest {
     verify(log, timeout(1000).atLeast(3)).append(any(RaftLogEntry.class));
 
     assertThat(entries).hasSize(2);
-    assertThat(entries.get(0).highestPosition()).isEqualTo(1);
+    assertThat(entries.get(0).highestPosition()).isOne();
     assertThat(entries.get(1).highestPosition()).isEqualTo(2);
   }
 
@@ -387,32 +387,8 @@ public class LeaderRoleTest {
     verify(leaderRole.raft, timeout(2000).atLeast(1)).transition(Role.FOLLOWER);
   }
 
-  private static class TestIndexedRaftLogEntry implements IndexedRaftLogEntry {
-
-    private final long index;
-    private final long term;
-    private final RaftEntry entry;
-
-    public TestIndexedRaftLogEntry(final long index, final long term, final RaftEntry entry) {
-      this.index = index;
-      this.term = term;
-      this.entry = entry;
-    }
-
-    @Override
-    public long index() {
-      return index;
-    }
-
-    @Override
-    public long term() {
-      return term;
-    }
-
-    @Override
-    public RaftEntry entry() {
-      return entry;
-    }
+  private record TestIndexedRaftLogEntry(long index, long term, RaftEntry entry)
+      implements IndexedRaftLogEntry {
 
     @Override
     public boolean isApplicationEntry() {

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
index cc67e6f..a360e6a 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
@@ -874,21 +874,21 @@ public class MultiTenancyMigrationTest {
     @Test
     void shouldMigrateActivatableJobsColumnFamily() {
       // given
-      final long jobKey = 1l;
+      final long jobKey = 1L;
       final String jobWorker = ""jobWorker"";
       final String jobType = ""jobType"";
       final int retries = 5;
-      final long deadline = 111l;
-      final long recurringTime = 222l;
-      final long retryBackoff = 333l;
+      final long deadline = 111L;
+      final long recurringTime = 222L;
+      final long retryBackoff = 333L;
       final String errorMessage = ""jobErrorMessage"";
       final String errorCode = ""jobErrorCode"";
       final String processId = ""jobProcess"";
-      final long processDefinitionKey = 444l;
-      final long processInstanceKey = 555l;
+      final long processDefinitionKey = 444L;
+      final long processInstanceKey = 555L;
       final int version = 3;
       final String elementId = ""jobElement"";
-      final long elementInstanceKey = 666l;
+      final long elementInstanceKey = 666L;
       final Map<String, String> customHeaders = Collections.singletonMap(""workerVersion"", ""42"");
       final var jobRecord =
           new JobRecord()
@@ -918,7 +918,7 @@ public class MultiTenancyMigrationTest {
           wrapString(jobType),
           List.of(TenantOwned.DEFAULT_TENANT_IDENTIFIER),
           (key, job) -> {
-            assertThat(key).isEqualTo(1l);
+            assertThat(key).isEqualTo(jobKey);
             Assertions.assertThat(job)
                 .hasWorker(jobWorker)
                 .hasType(jobType)

diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshot.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshot.java
index b26ee7f..3841296 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshot.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshot.java
@@ -7,8 +7,6 @@
  */
 package io.camunda.zeebe.snapshots.impl;
 
-import static java.nio.file.StandardOpenOption.CREATE_NEW;
-
 import io.camunda.zeebe.snapshots.PersistedSnapshot;
 import io.camunda.zeebe.snapshots.ReceivedSnapshot;
 import io.camunda.zeebe.snapshots.SnapshotChunk;
@@ -173,7 +171,11 @@ public class FileBasedReceivedSnapshot implements ReceivedSnapshot {
 
   private boolean writeReceivedSnapshotChunk(
       final SnapshotChunk snapshotChunk, final Path snapshotFile) throws IOException {
-    Files.write(snapshotFile, snapshotChunk.getContent(), CREATE_NEW, StandardOpenOption.WRITE);
+    Files.write(
+        snapshotFile,
+        snapshotChunk.getContent(),
+        StandardOpenOption.CREATE_NEW,
+        StandardOpenOption.WRITE);
     LOGGER.trace(""Wrote replicated snapshot chunk to file {}"", snapshotFile);
     return SUCCESS;
   }

diff --git a/dist/src/main/java/io/camunda/zeebe/shared/management/RebalancingEndpoint.java b/dist/src/main/java/io/camunda/zeebe/shared/management/RebalancingEndpoint.java
index 5e8d79d..8769fec 100644
--- a/dist/src/main/java/io/camunda/zeebe/shared/management/RebalancingEndpoint.java
+++ b/dist/src/main/java/io/camunda/zeebe/shared/management/RebalancingEndpoint.java
@@ -28,6 +28,7 @@ public final class RebalancingEndpoint {
   }
 
   @WriteOperation
+  @SuppressWarnings(""UnusedReturnValue"")
   public WebEndpointResponse<Void> rebalance() {
     LOG.info(""Rebalancing leaders of all partitions"");
     service.rebalanceCluster();

diff --git a/atomix/cluster/src/main/java/io/atomix/cluster/AtomixCluster.java b/atomix/cluster/src/main/java/io/atomix/cluster/AtomixCluster.java
index 6b78f9d..e1efb3d 100644
--- a/atomix/cluster/src/main/java/io/atomix/cluster/AtomixCluster.java
+++ b/atomix/cluster/src/main/java/io/atomix/cluster/AtomixCluster.java
@@ -208,13 +208,11 @@ public class AtomixCluster implements BootstrapService, Managed<Void> {
   }
 
   @Override
-  @SuppressWarnings(""unchecked"")
   public synchronized CompletableFuture<Void> start() {
     if (closeFuture != null) {
-      final Throwable t =
+      return CompletableFuture.failedFuture(
           new IllegalStateException(
-              ""AtomixCluster instance "" + (closeFuture.isDone() ? ""shutdown"" : ""shutting down""));
-      return CompletableFuture.failedFuture(t);
+              ""Cluster instance is "" + (closeFuture.isDone() ? ""shutdown"" : ""shutting down"")));
     }
 
     if (openFuture != null) {
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/AbstractRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/AbstractRole.java
index f7a236d..73aecbb 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/AbstractRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/AbstractRole.java
@@ -94,8 +94,7 @@ public abstract class AbstractRole implements RaftRole {
     final CompletableFuture<U> future = new CompletableFuture<>();
     final DefaultRaftMember leader = raft.getLeader();
     if (leader == null) {
-      final Throwable t = new RaftException.NoLeader(""No leader found"");
-      return CompletableFuture.failedFuture(t);
+      return CompletableFuture.failedFuture(new RaftException.NoLeader(""No leader found""));
     }
 
     function
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/roles/InactiveRole.java b/atomix/cluster/src/main/java/io/atomix/raft/roles/InactiveRole.java
index 860696f..e0bc4db 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/roles/InactiveRole.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/roles/InactiveRole.java
@@ -77,7 +77,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<InstallResponse> onInstall(final InstallRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.InstallResponse result =
+    final var result =
         logResponse(
             InstallResponse.builder()
                 .withStatus(Status.ERROR)
@@ -89,7 +89,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<ReconfigureResponse> onReconfigure(final ReconfigureRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.ReconfigureResponse result =
+    final var result =
         logResponse(
             ReconfigureResponse.builder()
                 .withStatus(Status.ERROR)
@@ -101,7 +101,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<TransferResponse> onTransfer(final TransferRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.TransferResponse result =
+    final var result =
         logResponse(
             TransferResponse.builder()
                 .withStatus(Status.ERROR)
@@ -113,7 +113,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<AppendResponse> onAppend(final AppendRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.AppendResponse result =
+    final var result =
         logResponse(
             AppendResponse.builder()
                 .withStatus(Status.ERROR)
@@ -125,7 +125,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<PollResponse> onPoll(final PollRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.PollResponse result =
+    final var result =
         logResponse(
             PollResponse.builder()
                 .withStatus(Status.ERROR)
@@ -137,7 +137,7 @@ public class InactiveRole extends AbstractRole {
   @Override
   public CompletableFuture<VoteResponse> onVote(final VoteRequest request) {
     logRequest(request);
-    final io.atomix.raft.protocol.VoteResponse result =
+    final var result =
         logResponse(
             VoteResponse.builder()
                 .withStatus(Status.ERROR)
diff --git a/atomix/cluster/src/test/java/io/atomix/cluster/AtomixClusterTest.java b/atomix/cluster/src/test/java/io/atomix/cluster/AtomixClusterTest.java
index c1aef3b..bde787b 100644
--- a/atomix/cluster/src/test/java/io/atomix/cluster/AtomixClusterTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/cluster/AtomixClusterTest.java
@@ -97,7 +97,7 @@ public class AtomixClusterTest {
     } catch (final ExecutionException ex) {
       // then
       assertTrue(ex.getCause() instanceof IllegalStateException);
-      assertEquals(""AtomixCluster instance shutdown"", ex.getCause().getMessage());
+      assertEquals(""Cluster instance is shutdown"", ex.getCause().getMessage());
     }
   }
 

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
index 5d6b610..437541f 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
@@ -516,13 +516,11 @@ public final class StreamProcessorTest {
 
     // it doesn't send the staged command response
     verify(commandResponseWriter, TIMEOUT.times(1)).key(-1);
-    verify(commandResponseWriter, TIMEOUT.times(1))
-        .intent(ProcessInstanceIntent.ACTIVATE_ELEMENT);
+    verify(commandResponseWriter, TIMEOUT.times(1)).intent(ProcessInstanceIntent.ACTIVATE_ELEMENT);
     verify(commandResponseWriter, TIMEOUT.times(1)).recordType(RecordType.COMMAND_REJECTION);
     verify(commandResponseWriter, TIMEOUT.times(1)).valueType(ValueType.PROCESS_INSTANCE);
     // instead, it sends a rejection response because of the failure
-    verify(commandResponseWriter, TIMEOUT.times(1))
-        .rejectionType(RejectionType.PROCESSING_ERROR);
+    verify(commandResponseWriter, TIMEOUT.times(1)).rejectionType(RejectionType.PROCESSING_ERROR);
     verify(commandResponseWriter, TIMEOUT.times(1)).tryWriteResponse(anyInt(), anyLong());
   }
 

diff --git a/atomix/cluster/src/main/java/io/atomix/cluster/impl/DefaultClusterMembershipService.java b/atomix/cluster/src/main/java/io/atomix/cluster/impl/DefaultClusterMembershipService.java
index dab6411..4ae6e16 100644
--- a/atomix/cluster/src/main/java/io/atomix/cluster/impl/DefaultClusterMembershipService.java
+++ b/atomix/cluster/src/main/java/io/atomix/cluster/impl/DefaultClusterMembershipService.java
@@ -43,15 +43,13 @@ public class DefaultClusterMembershipService
     implements ManagedClusterMembershipService {
 
   private static final Logger LOGGER = getLogger(DefaultClusterMembershipService.class);
-
   private static final String HEARTBEAT_MESSAGE = ""atomix-cluster-membership"";
 
   private final ManagedNodeDiscoveryService discoveryService;
   private final BootstrapService bootstrapService;
   private final GroupMembershipProtocol protocol;
-
-  private final AtomicBoolean started = new AtomicBoolean();
   private final StatefulMember localMember;
+  private final AtomicBoolean started = new AtomicBoolean();
   private final GroupMembershipEventListener membershipEventListener = this::handleMembershipEvent;
 
   public DefaultClusterMembershipService(
@@ -89,13 +87,6 @@ public class DefaultClusterMembershipService
     return protocol.getMember(memberId);
   }
 
-  /** Handles a group membership event. */
-  private void handleMembershipEvent(final GroupMembershipEvent event) {
-    post(
-        new ClusterMembershipEvent(
-            ClusterMembershipEvent.Type.valueOf(event.type().name()), event.member()));
-  }
-
   @Override
   public CompletableFuture<ClusterMembershipService> start() {
     if (started.compareAndSet(false, true)) {
@@ -110,7 +101,7 @@ public class DefaultClusterMembershipService
               })
           .thenApply(
               v -> {
-                LOGGER.info(""Started"");
+                LOGGER.info(""Started cluster membership service for member {}"", localMember);
                 return this;
               });
     }
@@ -134,9 +125,16 @@ public class DefaultClusterMembershipService
                 localMember.setReachable(false);
                 bootstrapService.getMessagingService().unregisterHandler(HEARTBEAT_MESSAGE);
                 protocol.removeListener(membershipEventListener);
-                LOGGER.info(""Stopped"");
+                LOGGER.info(""Stopped cluster membership service for member {}"", localMember);
               });
     }
     return CompletableFuture.completedFuture(null);
   }
+
+  /** Handles a group membership event. */
+  private void handleMembershipEvent(final GroupMembershipEvent event) {
+    post(
+        new ClusterMembershipEvent(
+            ClusterMembershipEvent.Type.valueOf(event.type().name()), event.member()));
+  }
 }

diff --git a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
index d65c7d6..1af1d33 100644
--- a/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
+++ b/topology/src/main/java/io/camunda/zeebe/topology/changes/TopologyChangeAppliersImpl.java
@@ -40,7 +40,9 @@ public class TopologyChangeAppliersImpl implements TopologyChangeAppliers {
     } else if (operation instanceof final PartitionLeaveOperation leaveOperation) {
       return new PartitionLeaveApplier(
           leaveOperation.partitionId(), localMemberId, partitionChangeExecutor);
-    } else return new FailingApplier(operation);
+    } else {
+      return new FailingApplier(operation);
+    }
   }
 
   static class FailingApplier implements OperationApplier {

diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/AggregatedRemoteStream.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/AggregatedRemoteStream.java
index ecc85ed..415bae5 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/AggregatedRemoteStream.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/AggregatedRemoteStream.java
@@ -8,7 +8,6 @@
 package io.camunda.zeebe.transport.stream.impl;
 
 import io.atomix.cluster.MemberId;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
index f646ae9..8df144d 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/RemoteStreamerImpl.java
@@ -26,7 +26,6 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ThreadLocalRandom;
 import java.util.function.Function;
 import org.agrona.DirectBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/TestSerializableData.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/TestSerializableData.java
index df75055..0a7d059 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/TestSerializableData.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/TestSerializableData.java
@@ -54,10 +54,14 @@ class TestSerializableData implements BufferReader, BufferWriter {
 
   @Override
   public boolean equals(final Object o) {
-    if (this == o)
+    if (this == o) {
       return true;
-    if (o == null || getClass() != o.getClass())
+    }
+
+    if (o == null || getClass() != o.getClass()) {
       return false;
+    }
+
     final TestSerializableData data1 = (TestSerializableData) o;
     return data == data1.data;
   }

diff --git a/atomix/cluster/src/test/java/io/atomix/raft/RaftTest.java b/atomix/cluster/src/test/java/io/atomix/raft/RaftTest.java
index b51a86e..d965bf7 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/RaftTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/RaftTest.java
@@ -19,11 +19,7 @@ package io.atomix.raft;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;
 import static org.hamcrest.core.Is.is;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
@@ -217,7 +213,7 @@ public class RaftTest extends ConcurrentTestCase {
     final RaftServer follower = servers.stream().filter(RaftServer::isFollower).findFirst().get();
     follower.promote().thenRun(this::resume);
     await(15000, 1001);
-    assertTrue(follower.isLeader());
+    assertThat(follower.isLeader()).isTrue();
   }
 
   /** Tests demoting the leader. */
@@ -229,13 +225,13 @@ public class RaftTest extends ConcurrentTestCase {
         servers.stream()
             .filter(s -> s.cluster().getLocalMember().equals(s.cluster().getLeader()))
             .findFirst()
-            .get();
+            .orElseThrow();
 
     final RaftServer follower =
         servers.stream()
             .filter(s -> !s.cluster().getLocalMember().equals(s.cluster().getLeader()))
             .findFirst()
-            .get();
+            .orElseThrow();
 
     follower
         .cluster()
@@ -345,7 +341,7 @@ public class RaftTest extends ConcurrentTestCase {
       throw new RuntimeException(e);
     }
 
-    assertTrue(condition.getAsBoolean());
+    assertThat(condition.getAsBoolean()).isTrue();
   }
 
   @Test
@@ -370,7 +366,7 @@ public class RaftTest extends ConcurrentTestCase {
     previousLeader.stepDown();
 
     // then
-    assertTrue(transitionCompleted.await(1000, TimeUnit.SECONDS));
+    assertThat(transitionCompleted.await(1000, TimeUnit.SECONDS)).isTrue();
   }
 
   private Optional<RaftServer> getLeader(final List<RaftServer> servers) {
@@ -393,7 +389,7 @@ public class RaftTest extends ConcurrentTestCase {
       final IndexedRaftLogEntry entry = raftLogReader.next();
 
       assertThat(entry.entry()).isInstanceOf(InitialEntry.class);
-      assertEquals(term, entry.term());
+      assertThat(entry.term()).isEqualTo(term);
       transitionCompleted.countDown();
     }
   }
@@ -429,7 +425,7 @@ public class RaftTest extends ConcurrentTestCase {
   @Test
   public void shouldLeaderStepDownOnDisconnect() throws Throwable {
     final List<RaftServer> servers = createServers(3);
-    final RaftServer leader = getLeader(servers).get();
+    final RaftServer leader = getLeader(servers).orElseThrow();
     final MemberId leaderId = leader.getContext().getCluster().getLocalMember().memberId();
 
     final CountDownLatch stepDownListener = new CountDownLatch(1);
@@ -444,15 +440,15 @@ public class RaftTest extends ConcurrentTestCase {
     protocolFactory.partition(leaderId);
 
     // then
-    assertTrue(stepDownListener.await(30, TimeUnit.SECONDS));
-    assertFalse(leader.isLeader());
+    assertThat(stepDownListener.await(30, TimeUnit.SECONDS)).isTrue();
+    assertThat(leader.isLeader()).isFalse();
   }
 
   @Test
   public void shouldReconnect() throws Throwable {
     // given
     final List<RaftServer> servers = createServers(3);
-    final RaftServer leader = getLeader(servers).get();
+    final RaftServer leader = getLeader(servers).orElseThrow();
     final MemberId leaderId = leader.getContext().getCluster().getLocalMember().memberId();
     final AtomicLong commitIndex = new AtomicLong();
     leader.getContext().addCommitListener(commitIndex::set);
@@ -462,7 +458,7 @@ public class RaftTest extends ConcurrentTestCase {
 
     // when
     final var newLeader = servers.stream().filter(RaftServer::isLeader).findFirst().orElseThrow();
-    assertNotEquals(newLeader, leader);
+    assertThat(leader).isNotEqualTo(newLeader);
     final var secondCommit = appendEntry(newLeader);
     protocolFactory.heal(leaderId);
 
@@ -474,7 +470,7 @@ public class RaftTest extends ConcurrentTestCase {
   public void shouldFailOverOnLeaderDisconnect() throws Throwable {
     final List<RaftServer> servers = createServers(3);
 
-    final RaftServer leader = getLeader(servers).get();
+    final RaftServer leader = getLeader(servers).orElseThrow();
     final MemberId leaderId = leader.getContext().getCluster().getLocalMember().memberId();
 
     final CountDownLatch newLeaderElected = new CountDownLatch(1);
@@ -492,8 +488,8 @@ public class RaftTest extends ConcurrentTestCase {
     protocolFactory.partition(leaderId);
 
     // then
-    assertTrue(newLeaderElected.await(30, TimeUnit.SECONDS));
-    assertNotEquals(newLeaderId.get(), leaderId);
+    assertThat(newLeaderElected.await(30, TimeUnit.SECONDS)).isTrue();
+    assertThat(leaderId).isNotEqualTo(newLeaderId.get());
   }
 
   @Test

diff --git a/gateway-protocol/src/main/proto/proto.lock b/gateway-protocol/src/main/proto/proto.lock
index f06a996..c2b8c93 100644
--- a/gateway-protocol/src/main/proto/proto.lock
+++ b/gateway-protocol/src/main/proto/proto.lock
@@ -1214,4 +1214,4 @@
       }
     }
   ]
-}
+}
\ No newline at end of file

diff --git a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/variable/VariableRecord.java b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/variable/VariableRecord.java
index 14baddf..09aafd1 100644
--- a/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/variable/VariableRecord.java
+++ b/protocol-impl/src/main/java/io/camunda/zeebe/protocol/impl/record/value/variable/VariableRecord.java
@@ -45,10 +45,22 @@ public final class VariableRecord extends UnifiedRecordValue implements Variable
     return MsgPackConverter.convertToJson(valueProp.getValue());
   }
 
+  @Override
   public long getScopeKey() {
     return scopeKeyProp.getValue();
   }
 
+  public VariableRecord setScopeKey(final long scopeKey) {
+    scopeKeyProp.setValue(scopeKey);
+    return this;
+  }
+
+  @Override
+  public long getProcessInstanceKey() {
+    return processInstanceKeyProp.getValue();
+  }
+
+  @Override
   public long getProcessDefinitionKey() {
     return processDefinitionKeyProp.getValue();
   }
@@ -58,18 +70,23 @@ public final class VariableRecord extends UnifiedRecordValue implements Variable
     return this;
   }
 
-  public VariableRecord setScopeKey(final long scopeKey) {
-    scopeKeyProp.setValue(scopeKey);
+  @Override
+  public String getBpmnProcessId() {
+    return BufferUtil.bufferAsString(bpmnProcessIdProp.getValue());
+  }
+
+  public VariableRecord setBpmnProcessId(final DirectBuffer bpmnProcessId) {
+    bpmnProcessIdProp.setValue(bpmnProcessId);
     return this;
   }
 
-  public VariableRecord setValue(final DirectBuffer value) {
-    valueProp.setValue(value);
+  public VariableRecord setProcessInstanceKey(final long processInstanceKey) {
+    processInstanceKeyProp.setValue(processInstanceKey);
     return this;
   }
 
-  public VariableRecord setValue(final DirectBuffer value, final int offset, final int length) {
-    valueProp.setValue(value, offset, length);
+  public VariableRecord setValue(final DirectBuffer value) {
+    valueProp.setValue(value);
     return this;
   }
 
@@ -78,6 +95,11 @@ public final class VariableRecord extends UnifiedRecordValue implements Variable
     return this;
   }
 
+  public VariableRecord setValue(final DirectBuffer value, final int offset, final int length) {
+    valueProp.setValue(value, offset, length);
+    return this;
+  }
+
   @JsonIgnore
   public DirectBuffer getNameBuffer() {
     return nameProp.getValue();
@@ -88,27 +110,8 @@ public final class VariableRecord extends UnifiedRecordValue implements Variable
     return valueProp.getValue();
   }
 
-  public long getProcessInstanceKey() {
-    return processInstanceKeyProp.getValue();
-  }
-
-  public VariableRecord setProcessInstanceKey(final long processInstanceKey) {
-    processInstanceKeyProp.setValue(processInstanceKey);
-    return this;
-  }
-
   @JsonIgnore
   public DirectBuffer getBpmnProcessIdBuffer() {
     return bpmnProcessIdProp.getValue();
   }
-
-  @Override
-  public String getBpmnProcessId() {
-    return BufferUtil.bufferAsString(bpmnProcessIdProp.getValue());
-  }
-
-  public VariableRecord setBpmnProcessId(final DirectBuffer bpmnProcessId) {
-    bpmnProcessIdProp.setValue(bpmnProcessId);
-    return this;
-  }
 }

diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
index 441d5f7..61ba152 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/DirectProcessingResultBuilder.java
@@ -40,8 +40,7 @@ final class DirectProcessingResultBuilder implements ProcessingResultBuilder {
   private final RecordBatch mutableRecordBatch;
   private ProcessingResponseImpl processingResponse;
 
-  DirectProcessingResultBuilder(
-      final RecordBatchSizePredicate predicate) {
+  DirectProcessingResultBuilder(final RecordBatchSizePredicate predicate) {
     mutableRecordBatch = new RecordBatch(predicate);
   }
 
diff --git a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
index aa22b5e..e8a0360 100644
--- a/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
+++ b/engine/src/main/java/io/camunda/zeebe/streamprocessor/ProcessingStateMachine.java
@@ -323,8 +323,7 @@ public final class ProcessingStateMachine {
         () -> {
           final long position = typedCommand.getPosition();
           final ProcessingResultBuilder processingResultBuilder =
-              new DirectProcessingResultBuilder(
-                  logStreamBatchWriter::canWriteAdditionalEvent);
+              new DirectProcessingResultBuilder(logStreamBatchWriter::canWriteAdditionalEvent);
           // todo(#10047): replace this reset method by using Buffered Writers
           processingResultBuilder.reset();
 
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
index 17ab52e..9c8fbcc 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorHealthTest.java
@@ -27,10 +27,11 @@ import org.junit.jupiter.api.extension.ExtendWith;
 public class StreamProcessorHealthTest {
 
   private static final ProcessInstanceRecord PROCESS_INSTANCE_RECORD = Records.processInstance(1);
+
   @SuppressWarnings(""unused"") // injected by the extension
   private StreamPlatform streamPlatform;
-  private StreamProcessor streamProcessor;
 
+  private StreamProcessor streamProcessor;
 
   @Test
   void shouldBeHealthyOnStart() {
@@ -49,16 +50,18 @@ public class StreamProcessorHealthTest {
 
     final var mockProcessor = streamPlatform.getDefaultRecordProcessor();
     when(mockProcessor.process(any(), any())).thenThrow(new RuntimeException(""expected""));
-    when(mockProcessor.onProcessingError(any(), any(), any())).thenThrow(new RuntimeException(""expected""));
+    when(mockProcessor.onProcessingError(any(), any(), any()))
+        .thenThrow(new RuntimeException(""expected""));
 
     // when
     // since processing fails we will write error event
     // we want to fail error even transaction
-    streamPlatform.writeBatch(RecordToWrite.command().processInstance(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD));
+    streamPlatform.writeBatch(
+        RecordToWrite.command().processInstance(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD));
 
     // then
     Awaitility.await(""wait to become unhealthy"")
-            .until(() -> streamProcessor.getHealthReport().isUnhealthy());
+        .until(() -> streamProcessor.getHealthReport().isUnhealthy());
   }
 
   @Test
@@ -70,13 +73,15 @@ public class StreamProcessorHealthTest {
     final var mockProcessor = streamPlatform.getDefaultRecordProcessor();
     when(mockProcessor.process(any(), any())).thenThrow(new RuntimeException(""expected""));
     when(mockProcessor.onProcessingError(any(), any(), any()))
-        .thenAnswer(invocationOnMock -> {
-          if (shouldFail.get()) {
-            throw new RuntimeException(""expected"");
-          }
-          return EmptyProcessingResult.INSTANCE;
-        });
-    streamPlatform.writeBatch(RecordToWrite.command().processInstance(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD));
+        .thenAnswer(
+            invocationOnMock -> {
+              if (shouldFail.get()) {
+                throw new RuntimeException(""expected"");
+              }
+              return EmptyProcessingResult.INSTANCE;
+            });
+    streamPlatform.writeBatch(
+        RecordToWrite.command().processInstance(ACTIVATE_ELEMENT, PROCESS_INSTANCE_RECORD));
     Awaitility.await(""wait to become unhealthy"")
         .until(() -> streamProcessor.getHealthReport().isUnhealthy());
 
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamPlatform.java b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamPlatform.java
index e9536dc..759ab95 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamPlatform.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamPlatform.java
@@ -187,8 +187,7 @@ public final class StreamPlatform {
   }
 
   public StreamProcessor buildStreamProcessor(
-      final SynchronousLogStream stream,
-      final boolean awaitOpening) {
+      final SynchronousLogStream stream, final boolean awaitOpening) {
     final var storage = createRuntimeFolder(stream);
     final var snapshot = storage.getParent().resolve(SNAPSHOT_FOLDER);
 
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
index f5e6cc9..65e9ab9 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
@@ -240,11 +240,7 @@ public final class TestStreams {
       final Optional<StreamProcessorListener> streamProcessorListenerOpt) {
     final SynchronousLogStream stream = getLogStream(log);
     return buildStreamProcessor(
-        stream,
-        zeebeDbFactory,
-        typedRecordProcessorFactory,
-        true,
-        streamProcessorListenerOpt);
+        stream, zeebeDbFactory, typedRecordProcessorFactory, true, streamProcessorListenerOpt);
   }
 
   public StreamProcessor startStreamProcessorNotAwaitOpening(
@@ -254,11 +250,7 @@ public final class TestStreams {
       final Optional<StreamProcessorListener> streamProcessorListenerOpt) {
     final SynchronousLogStream stream = getLogStream(log);
     return buildStreamProcessor(
-        stream,
-        zeebeDbFactory,
-        typedRecordProcessorFactory,
-        false,
-        streamProcessorListenerOpt);
+        stream, zeebeDbFactory, typedRecordProcessorFactory, false, streamProcessorListenerOpt);
   }
 
   public StreamProcessor buildStreamProcessor(

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
index 486fd47..782219f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/processinstance/ProcessInstanceModificationProcessor.java
@@ -78,7 +78,7 @@ public final class ProcessInstanceModificationProcessor
   private static final String ERROR_MESSAGE_VARIABLE_SCOPE_NOT_FLOW_SCOPE =
       """"""
       Expected to modify instance of process '%s' but it contains one or more variable instructions \
-      with a scope element that doesn't belong to the element's flow scope: '%s'. \
+      with a scope element that doesn't belong to the activating element's flow scope. \
       These variables should be set before or after the modification."""""";
 
   private static final Set<BpmnElementType> UNSUPPORTED_ELEMENT_TYPES =
@@ -444,8 +444,7 @@ public final class ProcessInstanceModificationProcessor
 
     final var reason =
         ERROR_MESSAGE_VARIABLE_SCOPE_NOT_FLOW_SCOPE.formatted(
-            BufferUtil.bufferAsString(process.getBpmnProcessId()),
-            String.join(""', '"", nonFlowScopeIds));
+            BufferUtil.bufferAsString(process.getBpmnProcessId()));
     return Either.left(new Rejection(RejectionType.INVALID_ARGUMENT, reason));
   }
 
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
index 679da9c..6925b99 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
@@ -300,8 +300,8 @@ public class ModifyProcessInstanceRejectionTest {
             String.format(
                 """"""
                 Expected to modify instance of process '%s' but it contains one or more variable \
-                instructions with a scope element that doesn't belong to the element's flow scope: \
-                'A', 'B'. These variables should be set before or after the modification."""""",
+                instructions with a scope element that doesn't belong to the activating element's \
+                flow scope. These variables should be set before or after the modification."""""",
                 PROCESS_ID));
   }
 }

diff --git a/engine/src/main/java/io/zeebe/engine/processing/bpmn/task/ServiceTaskProcessor.java b/engine/src/main/java/io/zeebe/engine/processing/bpmn/task/ServiceTaskProcessor.java
index d83cf58..0e872a9 100644
--- a/engine/src/main/java/io/zeebe/engine/processing/bpmn/task/ServiceTaskProcessor.java
+++ b/engine/src/main/java/io/zeebe/engine/processing/bpmn/task/ServiceTaskProcessor.java
@@ -65,19 +65,6 @@ public final class ServiceTaskProcessor implements BpmnElementProcessor<Executab
             failure -> incidentBehavior.createIncident(failure, context));
   }
 
-  private Either<Failure, Tuple<String, Long>> evaluateJobExpressions(
-      final ExecutableServiceTask element, final BpmnElementContext context) {
-    final var scopeKey = context.getElementInstanceKey();
-
-    return expressionBehavior
-        .evaluateStringExpression(element.getType(), scopeKey)
-        .flatMap(
-            jobType ->
-                expressionBehavior
-                    .evaluateLongExpression(element.getRetries(), scopeKey)
-                    .map(retries -> new Tuple<>(jobType, retries)));
-  }
-
   @Override
   public void onComplete(final ExecutableServiceTask element, final BpmnElementContext context) {
     variableMappingBehavior
@@ -119,4 +106,17 @@ public final class ServiceTaskProcessor implements BpmnElementProcessor<Executab
               stateTransitionBehavior.onElementTerminated(element, terminated);
             });
   }
+
+  private Either<Failure, Tuple<String, Long>> evaluateJobExpressions(
+      final ExecutableServiceTask element, final BpmnElementContext context) {
+    final var scopeKey = context.getElementInstanceKey();
+
+    return expressionBehavior
+        .evaluateStringExpression(element.getType(), scopeKey)
+        .flatMap(
+            jobType ->
+                expressionBehavior
+                    .evaluateLongExpression(element.getRetries(), scopeKey)
+                    .map(retries -> new Tuple<>(jobType, retries)));
+  }
 }

diff --git a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/MessagingConfig.java b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/MessagingConfig.java
index b39c3a1..8453cd5 100644
--- a/atomix/cluster/src/main/java/io/atomix/cluster/messaging/MessagingConfig.java
+++ b/atomix/cluster/src/main/java/io/atomix/cluster/messaging/MessagingConfig.java
@@ -83,7 +83,9 @@ public class MessagingConfig implements Config {
     return connectionPoolSize;
   }
 
-  /** @return the configured shutdown quiet period */
+  /**
+   * @return the configured shutdown quiet period
+   */
   public Duration getShutdownQuietPeriod() {
     return shutdownQuietPeriod;
   }
@@ -100,7 +102,9 @@ public class MessagingConfig implements Config {
     return this;
   }
 
-  /** @return the configured shutdown timeout */
+  /**
+   * @return the configured shutdown timeout
+   */
   public Duration getShutdownTimeout() {
     return shutdownTimeout;
   }
@@ -116,7 +120,9 @@ public class MessagingConfig implements Config {
     return this;
   }
 
-  /** @return true if TLS is enabled for inter-cluster communication */
+  /**
+   * @return true if TLS is enabled for inter-cluster communication
+   */
   public boolean isTlsEnabled() {
     return tlsEnabled;
   }
@@ -182,7 +188,9 @@ public class MessagingConfig implements Config {
     return this;
   }
 
-  /** @return the private key of the certificate chain */
+  /**
+   * @return the private key of the certificate chain
+   */
   public File getPrivateKey() {
     return privateKey;
   }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java b/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java
index 994dad5..3d11d75 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/RaftCommittedEntryListener.java
@@ -25,6 +25,8 @@ import io.atomix.raft.storage.log.IndexedRaftLogEntry;
 @FunctionalInterface
 public interface RaftCommittedEntryListener {
 
-  /** @param indexedRaftLogEntry the new committed entry */
+  /**
+   * @param indexedRaftLogEntry the new committed entry
+   */
   void onCommit(IndexedRaftLogEntry indexedRaftLogEntry);
 }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
index b542713..da1c582 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftPartitionServer.java
@@ -245,17 +245,23 @@ public class RaftPartitionServer implements Managed<RaftPartitionServer>, Health
     server.removeRoleChangeListener(listener);
   }
 
-  /** @see io.atomix.raft.impl.RaftContext#addCommitListener(RaftCommitListener) */
+  /**
+   * @see io.atomix.raft.impl.RaftContext#addCommitListener(RaftCommitListener)
+   */
   public void addCommitListener(final RaftCommitListener commitListener) {
     server.getContext().addCommitListener(commitListener);
   }
 
-  /** @see io.atomix.raft.impl.RaftContext#removeCommitListener(RaftCommitListener) */
+  /**
+   * @see io.atomix.raft.impl.RaftContext#removeCommitListener(RaftCommitListener)
+   */
   public void removeCommitListener(final RaftCommitListener commitListener) {
     server.getContext().removeCommitListener(commitListener);
   }
 
-  /** @see io.atomix.raft.impl.RaftContext#addCommittedEntryListener(RaftCommittedEntryListener) */
+  /**
+   * @see io.atomix.raft.impl.RaftContext#addCommittedEntryListener(RaftCommittedEntryListener)
+   */
   public void addCommittedEntryListener(final RaftCommittedEntryListener commitListener) {
     server.getContext().addCommittedEntryListener(commitListener);
   }
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/protocol/ConfigureRequest.java b/atomix/cluster/src/main/java/io/atomix/raft/protocol/ConfigureRequest.java
index 91dcdaa..862ad39 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/protocol/ConfigureRequest.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/protocol/ConfigureRequest.java
@@ -224,7 +224,9 @@ public class ConfigureRequest extends AbstractRaftRequest {
       return this;
     }
 
-    /** @throws IllegalStateException if member is null */
+    /**
+     * @throws IllegalStateException if member is null
+     */
     @Override
     public ConfigureRequest build() {
       validate();
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/protocol/InstallRequest.java b/atomix/cluster/src/main/java/io/atomix/raft/protocol/InstallRequest.java
index 765d077..ec34b3f 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/protocol/InstallRequest.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/protocol/InstallRequest.java
@@ -144,7 +144,9 @@ public class InstallRequest extends AbstractRaftRequest {
     return nextChunkId;
   }
 
-  /** @return true if this is the first chunk of a snapshot */
+  /**
+   * @return true if this is the first chunk of a snapshot
+   */
   public boolean isInitial() {
     return initial;
   }
@@ -336,7 +338,9 @@ public class InstallRequest extends AbstractRaftRequest {
       return this;
     }
 
-    /** @throws IllegalStateException if member is null */
+    /**
+     * @throws IllegalStateException if member is null
+     */
     @Override
     public InstallRequest build() {
       validate();
diff --git a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/IndexedRaftLogEntry.java b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/IndexedRaftLogEntry.java
index ca6298c..6eaa6fa 100644
--- a/atomix/cluster/src/main/java/io/atomix/raft/storage/log/IndexedRaftLogEntry.java
+++ b/atomix/cluster/src/main/java/io/atomix/raft/storage/log/IndexedRaftLogEntry.java
@@ -43,7 +43,9 @@ public interface IndexedRaftLogEntry {
    */
   RaftEntry entry();
 
-  /** @return true if {@code entry()} is an {@link ApplicationEntry}, otherwise false */
+  /**
+   * @return true if {@code entry()} is an {@link ApplicationEntry}, otherwise false
+   */
   default boolean isApplicationEntry() {
     return false;
   }
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Bpmn.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Bpmn.java
index d927158..81bbdd8 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Bpmn.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Bpmn.java
@@ -645,12 +645,16 @@ public class Bpmn {
     ZeebeCalledDecisionImpl.registerType(bpmnModelBuilder);
   }
 
-  /** @return the {@link Model} instance to use */
+  /**
+   * @return the {@link Model} instance to use
+   */
   public Model getBpmnModel() {
     return bpmnModel;
   }
 
-  /** @param bpmnModel the bpmnModel to set */
+  /**
+   * @param bpmnModel the bpmnModel to set
+   */
   public void setBpmnModel(final Model bpmnModel) {
     this.bpmnModel = bpmnModel;
   }
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelInstance.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelInstance.java
index fe0b2fb..a229dc1 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelInstance.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelInstance.java
@@ -26,7 +26,9 @@ import org.camunda.bpm.model.xml.ModelInstance;
  */
 public interface BpmnModelInstance extends ModelInstance {
 
-  /** @return the {@link Definitions}, root element of the Bpmn Model. */
+  /**
+   * @return the {@link Definitions}, root element of the Bpmn Model.
+   */
   Definitions getDefinitions();
 
   /**
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelType.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelType.java
index 1348398..3e655b1 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelType.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/BpmnModelType.java
@@ -18,5 +18,7 @@ package io.camunda.zeebe.model.bpmn;
 
 import org.camunda.bpm.model.xml.type.ModelElementType;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 public interface BpmnModelType extends ModelElementType {}
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Query.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Query.java
index 4200568..459bad2 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Query.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/Query.java
@@ -21,7 +21,9 @@ import java.util.stream.Stream;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public interface Query<T extends ModelElementInstance> {
 
   Stream<T> stream();
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/TransactionMethod.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/TransactionMethod.java
index 7a671ec..6bd8b40 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/TransactionMethod.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/TransactionMethod.java
@@ -16,7 +16,9 @@
 
 package io.camunda.zeebe.model.bpmn;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public enum TransactionMethod {
   Compensate(""##Compensate""),
   Image(""##Image""),
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
index f0507b7..9daf0d9 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractActivityBuilder.java
@@ -27,7 +27,9 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.function.Consumer;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractActivityBuilder<
         B extends AbstractActivityBuilder<B, E>, E extends Activity>
     extends AbstractFlowNodeBuilder<B, E> implements ZeebeVariablesMappingBuilder<B> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBaseElementBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBaseElementBuilder.java
index ed8df55..f24deeb 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBaseElementBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBaseElementBuilder.java
@@ -52,7 +52,9 @@ import java.util.Iterator;
 import java.util.function.Consumer;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractBaseElementBuilder<
         B extends AbstractBaseElementBuilder<B, E>, E extends BaseElement>
     extends AbstractBpmnModelElementBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBoundaryEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBoundaryEventBuilder.java
index f6dd51c..1345523 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBoundaryEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBoundaryEventBuilder.java
@@ -26,7 +26,9 @@ import io.camunda.zeebe.model.bpmn.instance.bpmndi.BpmnShape;
 import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
 import io.camunda.zeebe.model.bpmn.instance.di.Waypoint;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractBoundaryEventBuilder<B extends AbstractBoundaryEventBuilder<B>>
     extends AbstractCatchEventBuilder<B, BoundaryEvent> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBpmnModelElementBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBpmnModelElementBuilder.java
index 14a01b7..37663dd 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBpmnModelElementBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBpmnModelElementBuilder.java
@@ -25,7 +25,9 @@ import io.camunda.zeebe.model.bpmn.instance.SubProcess;
 import io.camunda.zeebe.model.bpmn.instance.Transaction;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractBpmnModelElementBuilder<
     B extends AbstractBpmnModelElementBuilder<B, E>, E extends BpmnModelElementInstance> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBusinessRuleTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBusinessRuleTaskBuilder.java
index ab07ffe..1fca178 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBusinessRuleTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractBusinessRuleTaskBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.BusinessRuleTask;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeCalledDecision;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractBusinessRuleTaskBuilder<B extends AbstractBusinessRuleTaskBuilder<B>>
     extends AbstractJobWorkerTaskBuilder<B, BusinessRuleTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallActivityBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallActivityBuilder.java
index 9a5722d..c4d2dde 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallActivityBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallActivityBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.CallActivity;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeCalledElement;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AbstractCallActivityBuilder<B extends AbstractCallActivityBuilder<B>>
     extends AbstractActivityBuilder<B, CallActivity> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallableElementBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallableElementBuilder.java
index 86eeec0..b74fd53 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallableElementBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCallableElementBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.CallableElement;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractCallableElementBuilder<
         B extends AbstractCallableElementBuilder<B, E>, E extends CallableElement>
     extends AbstractRootElementBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java
index 2c52294..dd59a23 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractCatchEventBuilder.java
@@ -33,7 +33,9 @@ import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeIoMapping;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeOutput;
 import java.util.function.Consumer;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractCatchEventBuilder<
         B extends AbstractCatchEventBuilder<B, E>, E extends CatchEvent>
     extends AbstractEventBuilder<B, E> implements ZeebeVariablesMappingBuilder<B> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractComplexGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractComplexGatewayBuilder.java
index 4138899..ff4ea90 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractComplexGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractComplexGatewayBuilder.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.instance.ActivationCondition;
 import io.camunda.zeebe.model.bpmn.instance.ComplexGateway;
 import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AbstractComplexGatewayBuilder<B extends AbstractComplexGatewayBuilder<B>>
     extends AbstractGatewayBuilder<B, ComplexGateway> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEmbeddedSubProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEmbeddedSubProcessBuilder.java
index f0f7d68..40871ec 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEmbeddedSubProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEmbeddedSubProcessBuilder.java
@@ -16,7 +16,9 @@
 
 package io.camunda.zeebe.model.bpmn.builder;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 @SuppressWarnings(""rawtypes"")
 public class AbstractEmbeddedSubProcessBuilder<
     B extends AbstractEmbeddedSubProcessBuilder<B, E>, E extends AbstractSubProcessBuilder> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEndEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEndEventBuilder.java
index 74f01fc..ba94af2 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEndEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEndEventBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.EndEvent;
 import io.camunda.zeebe.model.bpmn.instance.ErrorEventDefinition;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractEndEventBuilder<B extends AbstractEndEventBuilder<B>>
     extends AbstractThrowEventBuilder<B, EndEvent> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBasedGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBasedGatewayBuilder.java
index 4db0853..4de2f8c 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBasedGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBasedGatewayBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.EventBasedGatewayType;
 import io.camunda.zeebe.model.bpmn.instance.EventBasedGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AbstractEventBasedGatewayBuilder<B extends AbstractEventBasedGatewayBuilder<B>>
     extends AbstractGatewayBuilder<B, EventBasedGateway> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBuilder.java
index 885df7d..91822ea 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.Event;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractEventBuilder<B extends AbstractEventBuilder<B, E>, E extends Event>
     extends AbstractFlowNodeBuilder<B, E> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractExclusiveGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractExclusiveGatewayBuilder.java
index 5ca3deb..f2a37ce 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractExclusiveGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractExclusiveGatewayBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ExclusiveGateway;
 import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractExclusiveGatewayBuilder<B extends AbstractExclusiveGatewayBuilder<B>>
     extends AbstractGatewayBuilder<B, ExclusiveGateway> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowElementBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowElementBuilder.java
index ec69a5b..26c75cb 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowElementBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowElementBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.FlowElement;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractFlowElementBuilder<
         B extends AbstractFlowElementBuilder<B, E>, E extends FlowElement>
     extends AbstractBaseElementBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowNodeBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowNodeBuilder.java
index f1622d7..6210543 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowNodeBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractFlowNodeBuilder.java
@@ -49,7 +49,9 @@ import io.camunda.zeebe.model.bpmn.instance.bpmndi.BpmnShape;
 import java.util.function.Consumer;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractFlowNodeBuilder<
         B extends AbstractFlowNodeBuilder<B, E>, E extends FlowNode>
     extends AbstractFlowElementBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractGatewayBuilder.java
index 3e4dab7..c94a853 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractGatewayBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.GatewayDirection;
 import io.camunda.zeebe.model.bpmn.instance.Gateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractGatewayBuilder<
         B extends AbstractGatewayBuilder<B, E>, E extends Gateway>
     extends AbstractFlowNodeBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractInclusiveGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractInclusiveGatewayBuilder.java
index 2470aa6..2bfcc0f 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractInclusiveGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractInclusiveGatewayBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.InclusiveGateway;
 import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractInclusiveGatewayBuilder<B extends AbstractInclusiveGatewayBuilder<B>>
     extends AbstractGatewayBuilder<B, InclusiveGateway> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateCatchEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateCatchEventBuilder.java
index 97eefa8..64f3b81 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateCatchEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateCatchEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.IntermediateCatchEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractIntermediateCatchEventBuilder<
         B extends AbstractIntermediateCatchEventBuilder<B>>
     extends AbstractCatchEventBuilder<B, IntermediateCatchEvent> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateThrowEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateThrowEventBuilder.java
index ddb5675..7e98d23 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateThrowEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractIntermediateThrowEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.IntermediateThrowEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractIntermediateThrowEventBuilder<
         B extends AbstractIntermediateThrowEventBuilder<B>>
     extends AbstractThrowEventBuilder<B, IntermediateThrowEvent> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractManualTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractManualTaskBuilder.java
index 72f479e..ead36b5 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractManualTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractManualTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ManualTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractManualTaskBuilder<B extends AbstractManualTaskBuilder<B>>
     extends AbstractTaskBuilder<B, ManualTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java
index 4682236..4358f98 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractMultiInstanceLoopCharacteristicsBuilder.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.LoopCardinality;
 import io.camunda.zeebe.model.bpmn.instance.MultiInstanceLoopCharacteristics;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeLoopCharacteristics;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class AbstractMultiInstanceLoopCharacteristicsBuilder<
         B extends AbstractMultiInstanceLoopCharacteristicsBuilder<B>>
     extends AbstractBaseElementBuilder<B, MultiInstanceLoopCharacteristics> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractParallelGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractParallelGatewayBuilder.java
index 22a8619..603e199 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractParallelGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractParallelGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ParallelGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AbstractParallelGatewayBuilder<B extends AbstractParallelGatewayBuilder<B>>
     extends AbstractGatewayBuilder<B, ParallelGateway> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractProcessBuilder.java
index 7599aa7..fb17400 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractProcessBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.ProcessType;
 import io.camunda.zeebe.model.bpmn.instance.Process;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractProcessBuilder<B extends AbstractProcessBuilder<B>>
     extends AbstractCallableElementBuilder<B, Process> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractReceiveTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractReceiveTaskBuilder.java
index b5e41a7..3cccee5 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractReceiveTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractReceiveTaskBuilder.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.Operation;
 import io.camunda.zeebe.model.bpmn.instance.ReceiveTask;
 import java.util.function.Consumer;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractReceiveTaskBuilder<B extends AbstractReceiveTaskBuilder<B>>
     extends AbstractTaskBuilder<B, ReceiveTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractRootElementBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractRootElementBuilder.java
index dd26844..705f09c 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractRootElementBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractRootElementBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.RootElement;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractRootElementBuilder<
         B extends AbstractRootElementBuilder<B, E>, E extends RootElement>
     extends AbstractBaseElementBuilder<B, E> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractScriptTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractScriptTaskBuilder.java
index 0e98225..bf5b8f3 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractScriptTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractScriptTaskBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.Script;
 import io.camunda.zeebe.model.bpmn.instance.ScriptTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractScriptTaskBuilder<B extends AbstractScriptTaskBuilder<B>>
     extends AbstractJobWorkerTaskBuilder<B, ScriptTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSendTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSendTaskBuilder.java
index 805d35a..45082a3 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSendTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSendTaskBuilder.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.instance.Message;
 import io.camunda.zeebe.model.bpmn.instance.Operation;
 import io.camunda.zeebe.model.bpmn.instance.SendTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractSendTaskBuilder<B extends AbstractSendTaskBuilder<B>>
     extends AbstractJobWorkerTaskBuilder<B, SendTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSequenceFlowBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSequenceFlowBuilder.java
index 232cfad..3af4f82 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSequenceFlowBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSequenceFlowBuilder.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.instance.ConditionExpression;
 import io.camunda.zeebe.model.bpmn.instance.FlowNode;
 import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractSequenceFlowBuilder<B extends AbstractSequenceFlowBuilder<B>>
     extends AbstractFlowElementBuilder<B, SequenceFlow> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractServiceTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractServiceTaskBuilder.java
index 40867ed..90c902e 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractServiceTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractServiceTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ServiceTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractServiceTaskBuilder<B extends AbstractServiceTaskBuilder<B>>
     extends AbstractJobWorkerTaskBuilder<B, ServiceTask> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractStartEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractStartEventBuilder.java
index 51c30e9..36b540a 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractStartEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractStartEventBuilder.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.ErrorEventDefinition;
 import io.camunda.zeebe.model.bpmn.instance.EscalationEventDefinition;
 import io.camunda.zeebe.model.bpmn.instance.StartEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractStartEventBuilder<B extends AbstractStartEventBuilder<B>>
     extends AbstractCatchEventBuilder<B, StartEvent> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSubProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSubProcessBuilder.java
index 56efc43..1e8f6b6 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSubProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractSubProcessBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.SubProcess;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AbstractSubProcessBuilder<B extends AbstractSubProcessBuilder<B>>
     extends AbstractActivityBuilder<B, SubProcess> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTaskBuilder.java
index 07580b2..0375214 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.Task;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractTaskBuilder<B extends AbstractTaskBuilder<B, E>, E extends Task>
     extends AbstractActivityBuilder<B, E> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractThrowEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractThrowEventBuilder.java
index 0b69277..e9f9594 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractThrowEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractThrowEventBuilder.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.MessageEventDefinition;
 import io.camunda.zeebe.model.bpmn.instance.SignalEventDefinition;
 import io.camunda.zeebe.model.bpmn.instance.ThrowEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractThrowEventBuilder<
         B extends AbstractThrowEventBuilder<B, E>, E extends ThrowEvent>
     extends AbstractEventBuilder<B, E> implements ZeebeJobWorkerElementBuilder<B> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTransactionBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTransactionBuilder.java
index 0ae97ef..e760d6e 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTransactionBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractTransactionBuilder.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.TransactionMethod;
 import io.camunda.zeebe.model.bpmn.instance.Transaction;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class AbstractTransactionBuilder<B extends AbstractTransactionBuilder<B>>
     extends AbstractSubProcessBuilder<B> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractUserTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractUserTaskBuilder.java
index 6241b1b..95401c3 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractUserTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/AbstractUserTaskBuilder.java
@@ -27,7 +27,9 @@ import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeHeader;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeTaskHeaders;
 import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeUserTaskForm;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractUserTaskBuilder<B extends AbstractUserTaskBuilder<B>>
     extends AbstractTaskBuilder<B, UserTask> implements ZeebeUserTaskPropertiesBuilder<B> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BoundaryEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BoundaryEventBuilder.java
index c7dce4f..ae8c4db 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BoundaryEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BoundaryEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.BoundaryEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BoundaryEventBuilder extends AbstractBoundaryEventBuilder<BoundaryEventBuilder> {
 
   public BoundaryEventBuilder(final BpmnModelInstance modelInstance, final BoundaryEvent element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BusinessRuleTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BusinessRuleTaskBuilder.java
index 866f3b7..b53af7d 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BusinessRuleTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/BusinessRuleTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.BusinessRuleTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BusinessRuleTaskBuilder
     extends AbstractBusinessRuleTaskBuilder<BusinessRuleTaskBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/CallActivityBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/CallActivityBuilder.java
index 20fb2c3..a425203 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/CallActivityBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/CallActivityBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.CallActivity;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CallActivityBuilder extends AbstractCallActivityBuilder<CallActivityBuilder> {
 
   public CallActivityBuilder(final BpmnModelInstance modelInstance, final CallActivity element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ComplexGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ComplexGatewayBuilder.java
index f74838c..3fd58c8 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ComplexGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ComplexGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ComplexGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ComplexGatewayBuilder extends AbstractComplexGatewayBuilder<ComplexGatewayBuilder> {
 
   public ComplexGatewayBuilder(
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EmbeddedSubProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EmbeddedSubProcessBuilder.java
index 734c47f..c1400a7 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EmbeddedSubProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EmbeddedSubProcessBuilder.java
@@ -24,7 +24,9 @@ import io.camunda.zeebe.model.bpmn.instance.bpmndi.BpmnShape;
 import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
 import java.util.function.Consumer;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EmbeddedSubProcessBuilder
     extends AbstractEmbeddedSubProcessBuilder<
         EmbeddedSubProcessBuilder, AbstractSubProcessBuilder<?>> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EndEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EndEventBuilder.java
index 6c9ffe5..ea25c71 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EndEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EndEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.EndEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EndEventBuilder extends AbstractEndEventBuilder<EndEventBuilder> {
 
   public EndEventBuilder(final BpmnModelInstance modelInstance, final EndEvent element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EventBasedGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EventBasedGatewayBuilder.java
index 191084f..ef24975 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EventBasedGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/EventBasedGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.EventBasedGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EventBasedGatewayBuilder
     extends AbstractEventBasedGatewayBuilder<EventBasedGatewayBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ExclusiveGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ExclusiveGatewayBuilder.java
index 178cb02..5dfb27c 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ExclusiveGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ExclusiveGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ExclusiveGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExclusiveGatewayBuilder
     extends AbstractExclusiveGatewayBuilder<ExclusiveGatewayBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/InclusiveGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/InclusiveGatewayBuilder.java
index 31a36f3..cfa8685 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/InclusiveGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/InclusiveGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.InclusiveGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class InclusiveGatewayBuilder
     extends AbstractInclusiveGatewayBuilder<InclusiveGatewayBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateCatchEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateCatchEventBuilder.java
index da4ee74..c4932d6 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateCatchEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateCatchEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.IntermediateCatchEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IntermediateCatchEventBuilder
     extends AbstractIntermediateCatchEventBuilder<IntermediateCatchEventBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateThrowEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateThrowEventBuilder.java
index da5562a..b293519 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateThrowEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/IntermediateThrowEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.IntermediateThrowEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IntermediateThrowEventBuilder
     extends AbstractIntermediateThrowEventBuilder<IntermediateThrowEventBuilder> {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ManualTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ManualTaskBuilder.java
index aeff6a0..8a218c6 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ManualTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ManualTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ManualTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ManualTaskBuilder extends AbstractManualTaskBuilder<ManualTaskBuilder> {
 
   public ManualTaskBuilder(final BpmnModelInstance modelInstance, final ManualTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/MultiInstanceLoopCharacteristicsBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/MultiInstanceLoopCharacteristicsBuilder.java
index d9815a3..5bde84a 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/MultiInstanceLoopCharacteristicsBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/MultiInstanceLoopCharacteristicsBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.MultiInstanceLoopCharacteristics;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class MultiInstanceLoopCharacteristicsBuilder
     extends AbstractMultiInstanceLoopCharacteristicsBuilder<
         MultiInstanceLoopCharacteristicsBuilder> {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ParallelGatewayBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ParallelGatewayBuilder.java
index 221d47a..536c217 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ParallelGatewayBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ParallelGatewayBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ParallelGateway;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ParallelGatewayBuilder extends AbstractParallelGatewayBuilder<ParallelGatewayBuilder> {
 
   public ParallelGatewayBuilder(
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ProcessBuilder.java
index 34669f5..bcde254 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ProcessBuilder.java
@@ -25,7 +25,9 @@ import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
 import java.util.Collection;
 import java.util.function.Consumer;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ProcessBuilder extends AbstractProcessBuilder<ProcessBuilder> {
 
   public ProcessBuilder(final BpmnModelInstance modelInstance, final Process process) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ReceiveTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ReceiveTaskBuilder.java
index 9906288..3e725d8 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ReceiveTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ReceiveTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ReceiveTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ReceiveTaskBuilder extends AbstractReceiveTaskBuilder<ReceiveTaskBuilder> {
 
   public ReceiveTaskBuilder(final BpmnModelInstance modelInstance, final ReceiveTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ScriptTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ScriptTaskBuilder.java
index 10569af..99aa48e 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ScriptTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ScriptTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ScriptTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ScriptTaskBuilder extends AbstractScriptTaskBuilder<ScriptTaskBuilder> {
 
   public ScriptTaskBuilder(final BpmnModelInstance modelInstance, final ScriptTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SendTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SendTaskBuilder.java
index 92bde22..4f56c1b 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SendTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SendTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.SendTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SendTaskBuilder extends AbstractSendTaskBuilder<SendTaskBuilder> {
 
   public SendTaskBuilder(final BpmnModelInstance modelInstance, final SendTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SequenceFlowBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SequenceFlowBuilder.java
index ccf8c53..611458c 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SequenceFlowBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SequenceFlowBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SequenceFlowBuilder extends AbstractSequenceFlowBuilder<SequenceFlowBuilder> {
 
   public SequenceFlowBuilder(final BpmnModelInstance modelInstance, final SequenceFlow element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ServiceTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ServiceTaskBuilder.java
index c894373..c521ab6 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ServiceTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/ServiceTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.ServiceTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ServiceTaskBuilder extends AbstractServiceTaskBuilder<ServiceTaskBuilder> {
 
   public ServiceTaskBuilder(final BpmnModelInstance modelInstance, final ServiceTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/StartEventBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/StartEventBuilder.java
index 721e2b8..89bf765 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/StartEventBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/StartEventBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.StartEvent;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class StartEventBuilder extends AbstractStartEventBuilder<StartEventBuilder> {
 
   public StartEventBuilder(final BpmnModelInstance modelInstance, final StartEvent element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SubProcessBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SubProcessBuilder.java
index 1eea679..68be5ba 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SubProcessBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/SubProcessBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.SubProcess;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SubProcessBuilder extends AbstractSubProcessBuilder<SubProcessBuilder> {
 
   public SubProcessBuilder(final BpmnModelInstance modelInstance, final SubProcess element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/TransactionBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/TransactionBuilder.java
index 4a0d92c..0bc6c09 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/TransactionBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/TransactionBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.Transaction;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class TransactionBuilder extends AbstractTransactionBuilder<TransactionBuilder> {
 
   protected TransactionBuilder(final BpmnModelInstance modelInstance, final Transaction element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/UserTaskBuilder.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/UserTaskBuilder.java
index 0779df9..4b6b6d8 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/UserTaskBuilder.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/builder/UserTaskBuilder.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.builder;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import io.camunda.zeebe.model.bpmn.instance.UserTask;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class UserTaskBuilder extends AbstractUserTaskBuilder<UserTaskBuilder> {
 
   public UserTaskBuilder(final BpmnModelInstance modelInstance, final UserTask element) {
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/QueryImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/QueryImpl.java
index 77674d2..1581fb2 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/QueryImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/QueryImpl.java
@@ -25,7 +25,9 @@ import java.util.stream.Stream;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class QueryImpl<T extends ModelElementInstance> implements Query<T> {
 
   private final Collection<T> collection;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/AssociationImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/AssociationImpl.java
index b795240..7c978c1 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/AssociationImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/AssociationImpl.java
@@ -34,7 +34,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceP
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AssociationImpl extends ArtifactImpl implements Association {
 
   protected static AttributeReference<BaseElement> sourceRefAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataObjectReferenceImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataObjectReferenceImpl.java
index ca8c106..412f867 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataObjectReferenceImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataObjectReferenceImpl.java
@@ -33,7 +33,9 @@ import org.camunda.bpm.model.xml.type.child.ChildElement;
 import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class DataObjectReferenceImpl extends FlowElementImpl implements DataObjectReference {
 
   protected static AttributeReference<ItemDefinition> itemSubjectRefAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputImpl.java
index 8393f4d..15bb0be 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputImpl.java
@@ -29,7 +29,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceProvider;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataOutputImpl extends ItemAwareElementImpl implements DataOutput {
 
   protected static Attribute<String> nameAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStateImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStateImpl.java
index 84007ad..f9cb226 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStateImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStateImpl.java
@@ -28,7 +28,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceProvider;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataStateImpl extends BaseElementImpl implements DataState {
 
   protected static Attribute<String> nameAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStoreReferenceImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStoreReferenceImpl.java
index a2aefc8..b4e775d 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStoreReferenceImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/DataStoreReferenceImpl.java
@@ -33,7 +33,9 @@ import org.camunda.bpm.model.xml.type.child.ChildElement;
 import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Giulio Piccinin */
+/**
+ * @author Giulio Piccinin
+ */
 public class DataStoreReferenceImpl extends FlowElementImpl implements DataStoreReference {
 
   protected static AttributeReference<ItemDefinition> itemSubjectRefAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorImpl.java
index 23a31ec..c021d64 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorImpl.java
@@ -32,7 +32,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceP
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ErrorImpl extends RootElementImpl implements Error {
 
   protected static Attribute<String> nameAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemAwareElementImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemAwareElementImpl.java
index efd713a..6d19379 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemAwareElementImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemAwareElementImpl.java
@@ -31,7 +31,9 @@ import org.camunda.bpm.model.xml.type.child.ChildElement;
 import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class ItemAwareElementImpl extends BaseElementImpl implements ItemAwareElement {
 
   protected static AttributeReference<ItemDefinition> itemSubjectRefAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemDefinitionImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemDefinitionImpl.java
index a31d759..2feeda8 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemDefinitionImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/ItemDefinitionImpl.java
@@ -30,7 +30,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceProvider;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ItemDefinitionImpl extends RootElementImpl implements ItemDefinition {
 
   protected static Attribute<String> structureRefAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/MessageEventDefinitionImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/MessageEventDefinitionImpl.java
index 0b69479..a128d68 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/MessageEventDefinitionImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/MessageEventDefinitionImpl.java
@@ -31,7 +31,9 @@ import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 import org.camunda.bpm.model.xml.type.reference.ElementReference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessageEventDefinitionImpl extends EventDefinitionImpl
     implements MessageEventDefinition {
 
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/TransactionImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/TransactionImpl.java
index 57420fe..1dda69c 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/TransactionImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/TransactionImpl.java
@@ -29,7 +29,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder.ModelTypeInstanceProvider;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class TransactionImpl extends SubProcessImpl implements Transaction {
 
   protected static Attribute<TransactionMethod> methodAttribute;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/di/EdgeImpl.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/di/EdgeImpl.java
index 3ccb72e..001419d 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/di/EdgeImpl.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/impl/instance/di/EdgeImpl.java
@@ -29,7 +29,9 @@ import org.camunda.bpm.model.xml.type.ModelElementTypeBuilder;
 import org.camunda.bpm.model.xml.type.child.ChildElementCollection;
 import org.camunda.bpm.model.xml.type.child.SequenceBuilder;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class EdgeImpl extends DiagramElementImpl implements Edge {
 
   protected static ChildElementCollection<Waypoint> waypointCollection;
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/Transaction.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/Transaction.java
index 4f0d9a0..7a78364 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/Transaction.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/Transaction.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import io.camunda.zeebe.model.bpmn.TransactionMethod;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public interface Transaction extends SubProcess {
 
   TransactionMethod getMethod();
diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/zeebe/ZeebeCalledDecision.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/zeebe/ZeebeCalledDecision.java
index a4841a8..85c92f9 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/zeebe/ZeebeCalledDecision.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/instance/zeebe/ZeebeCalledDecision.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstance;
 /** Zeebe extension element for a called decision. It can be used for business rule tasks. */
 public interface ZeebeCalledDecision extends BpmnModelElementInstance {
 
-  /** @return the id of the decision that is called */
+  /**
+   * @return the id of the decision that is called
+   */
   String getDecisionId();
 
   /**
@@ -30,7 +32,9 @@ public interface ZeebeCalledDecision extends BpmnModelElementInstance {
    */
   void setDecisionId(String decisionId);
 
-  /** @return the name of the result variable */
+  /**
+   * @return the name of the result variable
+   */
   String getResultVariable();
 
   /**
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnDiTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnDiTest.java
index 5582924..eacd700 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnDiTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnDiTest.java
@@ -55,7 +55,9 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnDiTest {
 
   private BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnModelTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnModelTest.java
index 07cbacf..92d7164 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnModelTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnModelTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.util.ParseBpmnModelRule;
 import org.junit.Before;
 import org.junit.Rule;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 public class BpmnModelTest {
 
   @Rule public final ParseBpmnModelRule parseBpmnModelRule = new ParseBpmnModelRule();
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTest.java
index d742dd9..9531d80 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTest.java
@@ -20,7 +20,9 @@ import static org.assertj.core.api.Assertions.assertThat;
 
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnTest {
 
   @Test
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTestConstants.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTestConstants.java
index ca32ec6..3f8c7b4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTestConstants.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/BpmnTestConstants.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn;
 import java.util.Arrays;
 import java.util.List;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public final class BpmnTestConstants {
 
   public static final String COLLABORATION_ID = ""collaboration"";
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CollaborationParserTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CollaborationParserTest.java
index 745220e..0a0ea7a 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CollaborationParserTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CollaborationParserTest.java
@@ -31,7 +31,9 @@ import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CollaborationParserTest {
 
   private static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ConditionalSequenceFlowTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ConditionalSequenceFlowTest.java
index a43a516..38024cf 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ConditionalSequenceFlowTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ConditionalSequenceFlowTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.SequenceFlow;
 import org.junit.Before;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConditionalSequenceFlowTest {
 
   protected BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CreateModelTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CreateModelTest.java
index fd09f11..36a3dd8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CreateModelTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/CreateModelTest.java
@@ -30,7 +30,9 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CreateModelTest {
 
   public BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataObjectsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataObjectsTest.java
index ce79855..bde7151 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataObjectsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataObjectsTest.java
@@ -29,7 +29,9 @@ import java.util.Collection;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class DataObjectsTest {
 
   private static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataStoreTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataStoreTest.java
index d5f2d0e..bf05a1b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataStoreTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DataStoreTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.DataStoreReference;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Falko Menge */
+/**
+ * @author Falko Menge
+ */
 public class DataStoreTest {
 
   private static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DefinitionsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DefinitionsTest.java
index d9ee7c9..58cf6c0 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DefinitionsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/DefinitionsTest.java
@@ -40,7 +40,9 @@ import org.camunda.bpm.model.xml.impl.util.IoUtil;
 import org.junit.Assert;
 import org.junit.Test;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 public class DefinitionsTest extends BpmnModelTest {
 
   @Test
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ProcessTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ProcessTest.java
index 194c7a2..0949621 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ProcessTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ProcessTest.java
@@ -25,7 +25,9 @@ import java.util.Collection;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.junit.Test;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 public class ProcessTest extends BpmnModelTest {
 
   @Test
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/QueryTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/QueryTest.java
index b9064cc..567be4a 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/QueryTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/QueryTest.java
@@ -27,7 +27,9 @@ import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class QueryTest {
 
   private static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ReferenceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ReferenceTest.java
index 39a3e1d..3cfb9ca 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ReferenceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ReferenceTest.java
@@ -29,7 +29,9 @@ import java.util.Collection;
 import org.junit.Before;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ReferenceTest extends BpmnModelTest {
 
   private BpmnModelInstance testBpmnModelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ResourceRolesTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ResourceRolesTest.java
index fa8e694..94ee257 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ResourceRolesTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/ResourceRolesTest.java
@@ -27,7 +27,9 @@ import java.util.Collection;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class ResourceRolesTest {
 
   private static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CategoryValueRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CategoryValueRefTest.java
index bfa4bd8..e3336d0 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CategoryValueRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CategoryValueRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CategoryValueRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ChildLaneSetTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ChildLaneSetTest.java
index edd1177..8100f3c 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ChildLaneSetTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ChildLaneSetTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.LaneSet;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ChildLaneSetTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CorrelationPropertyRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CorrelationPropertyRefTest.java
index 3371cf6..fafa6bc 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CorrelationPropertyRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/CorrelationPropertyRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationPropertyRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataInputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataInputRefsTest.java
index 6875014..bc47413 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataInputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataInputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataInputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputRefsTest.java
index 8bc2490..ff8e744 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataOutputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataOutputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataPathTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataPathTest.java
index 503dde1..444277e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataPathTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/DataPathTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.FormalExpression;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataPathTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorRefTest.java
index f928340..c17e281 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ErrorRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ErrorRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/EventDefinitionRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/EventDefinitionRefTest.java
index ce31140..955e766 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/EventDefinitionRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/EventDefinitionRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EventDefinitionRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FlowNodeRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FlowNodeRefTest.java
index c8443bb..e104cf3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FlowNodeRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FlowNodeRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FlowNodeRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FromTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FromTest.java
index 444c68e..67318b3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FromTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/FromTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.Expression;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FromTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InMessageRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InMessageRefTest.java
index b120d2e..58d1def 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InMessageRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InMessageRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class InMessageRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/IncomingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/IncomingTest.java
index 312c8f0..227e645 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/IncomingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/IncomingTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IncomingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InputSetRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InputSetRefsTest.java
index ce33b85..7c4625e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InputSetRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/InputSetRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class InputSetRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/MessagePathTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/MessagePathTest.java
index 0cbb981..8af8288 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/MessagePathTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/MessagePathTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.FormalExpression;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessagePathTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OperationRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OperationRefTest.java
index b7f3e87..8832f78 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OperationRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OperationRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OperationRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalInputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalInputRefsTest.java
index a1bbbda..676c130 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalInputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalInputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OptionalInputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalOutputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalOutputRefsTest.java
index 75278fa..904fe53 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalOutputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OptionalOutputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OptionalOutputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutMessageRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutMessageRefTest.java
index 92a4a67..8a3a04e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutMessageRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutMessageRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OutMessageRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutgoingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutgoingTest.java
index e33866b..98fe5be 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutgoingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutgoingTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OutgoingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutputSetRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutputSetRefsTest.java
index 78c8741..748c100 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutputSetRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/OutputSetRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OutputSetRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/PartitionElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/PartitionElementTest.java
index e42ead3..311a617 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/PartitionElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/PartitionElementTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BaseElement;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class PartitionElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ResourceRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ResourceRefTest.java
index 22d14e2..40b01a9 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ResourceRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ResourceRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceRefTest.java
index 6e9e374..c0da767 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SourceRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceTest.java
index a2a7798..90688f9 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SourceTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SourceTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportedInterfaceRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportedInterfaceRefTest.java
index ed8bebc..85ab54b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportedInterfaceRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportedInterfaceRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SupportedInterfaceRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportsTest.java
index 0431bb3..5dd0aff 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/SupportsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SupportsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetRefTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetRefTest.java
index 3dacf86..31cdcef 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetRefTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetRefTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class TargetRefTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetTest.java
index e2f5971..29a3359 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TargetTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class TargetTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ToTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ToTest.java
index 9953889..1613cdd 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ToTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/ToTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.Expression;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ToTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TransformationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TransformationTest.java
index 74b5f21..c5cf530 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TransformationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/TransformationTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.FormalExpression;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class TransformationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingInputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingInputRefsTest.java
index 494d52e..3972732 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingInputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingInputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class WhileExecutingInputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingOutputRefsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingOutputRefsTest.java
index ab46fa1..069bcfb 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingOutputRefsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/impl/instance/WhileExecutingOutputRefsTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.impl.instance;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class WhileExecutingOutputRefsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AbstractGatewayTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AbstractGatewayTest.java
index 30b72ee..307cb54 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AbstractGatewayTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AbstractGatewayTest.java
@@ -26,7 +26,9 @@ import org.camunda.bpm.model.xml.impl.util.ReflectUtil;
 import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.junit.Before;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractGatewayTest<G extends Gateway> extends BpmnModelElementInstanceTest {
 
   protected G gateway;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ActivityTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ActivityTest.java
index 06c1504..a9c7fc0 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ActivityTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ActivityTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ActivityTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ArtifactTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ArtifactTest.java
index 38cfc30..3a0c93d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ArtifactTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ArtifactTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ArtifactTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssignmentTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssignmentTest.java
index 2bbcdce..4578c80 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssignmentTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssignmentTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.To;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AssignmentTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssociationTest.java
index 14e8dfe..8ce7dca 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AssociationTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.AssociationDirection;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AuditingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AuditingTest.java
index aacf2c0..d90279e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AuditingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/AuditingTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AuditingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BaseElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BaseElementTest.java
index 31e854e..1a01c74 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BaseElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BaseElementTest.java
@@ -22,7 +22,9 @@ import java.util.Arrays;
 import java.util.Collection;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BaseElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BoundaryEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BoundaryEventTest.java
index c1306d3..a570bf5 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BoundaryEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BoundaryEventTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BoundaryEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BpmnModelElementInstanceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BpmnModelElementInstanceTest.java
index 33c08b0..29fecf6 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BpmnModelElementInstanceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BpmnModelElementInstanceTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.util.GetBpmnModelElementTypeRule;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class BpmnModelElementInstanceTest extends AbstractModelElementInstanceTest {
 
   @ClassRule
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BusinessRuleTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BusinessRuleTaskTest.java
index 1c9b09c..feefcf8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BusinessRuleTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/BusinessRuleTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BusinessRuleTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallActivityTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallActivityTest.java
index b8c3a68..1d0a08f 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallActivityTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallActivityTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CallActivityTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallConversationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallConversationTest.java
index cb3feff..6ab7aee 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallConversationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallConversationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CallConversationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallableElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallableElementTest.java
index 4dade51..4969f60 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallableElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CallableElementTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.SupportedInterfaceRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CallableElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CatchEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CatchEventTest.java
index f35b9a0..1faca13 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CatchEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CatchEventTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.EventDefinitionRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CatchEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CategoryValueTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CategoryValueTest.java
index c485ce2..ba42d20 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CategoryValueTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CategoryValueTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CategoryValueTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CollaborationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CollaborationTest.java
index 80fd743..4974bcc 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CollaborationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CollaborationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CollaborationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CompletionConditionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CompletionConditionTest.java
index 7bf9313..22dad96 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CompletionConditionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CompletionConditionTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class CompletionConditionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ComplexBehaviorDefinitionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ComplexBehaviorDefinitionTest.java
index 8cdbed7..384a909 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ComplexBehaviorDefinitionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ComplexBehaviorDefinitionTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class ComplexBehaviorDefinitionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConditionExpressionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConditionExpressionTest.java
index 5258273..d275ad8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConditionExpressionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConditionExpressionTest.java
@@ -21,7 +21,9 @@ import static io.camunda.zeebe.model.bpmn.impl.BpmnModelConstants.XSI_NS;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConditionExpressionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationAssociationTest.java
index 0027140..3b9cf07 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationAssociationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConversationAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationLinkTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationLinkTest.java
index 7a0d9f4..b07edb1 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationLinkTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationLinkTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConversationLinkTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationNodeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationNodeTest.java
index 9aaf4ea..c88f3bf 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationNodeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationNodeTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.ParticipantRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConversationNodeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationTest.java
index 8ae7a65..10afb6b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ConversationTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ConversationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationKeyTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationKeyTest.java
index 80d77a7..dbd47ef 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationKeyTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationKeyTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.CorrelationPropertyRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationKeyTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyBindingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyBindingTest.java
index bdb5c4f..711e3d7 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyBindingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyBindingTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.DataPath;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationPropertyBindingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyRetrievalExpressionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyRetrievalExpressionTest.java
index 583dec7..54e0d18 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyRetrievalExpressionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyRetrievalExpressionTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.MessagePath;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationPropertyRetrievalExpressionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyTest.java
index 49f42db..062a31f 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationPropertyTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationPropertyTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationSubscriptionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationSubscriptionTest.java
index 6469cba..0f7bb40 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationSubscriptionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/CorrelationSubscriptionTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class CorrelationSubscriptionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataAssociationTest.java
index 92884be..9f1d478 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataAssociationTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.Transformation;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputAssociationTest.java
index d8d7185..07796c4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputAssociationTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataInputAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputTest.java
index 8e88e71..5a52f50 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataInputTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataInputTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectReferenceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectReferenceTest.java
index 932f895..f5d605b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectReferenceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectReferenceTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class DataObjectReferenceTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectTest.java
index ce49d8d..5086d72 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataObjectTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class DataObjectTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputAssociationTest.java
index c702792..64dae1b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputAssociationTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataOutputAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputTest.java
index 70fad5e..30f52e7 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataOutputTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataOutputTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStateTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStateTest.java
index 76a51a0..a53b6e8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStateTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStateTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DataStateTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreReferenceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreReferenceTest.java
index e0128ee..f4bba57 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreReferenceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreReferenceTest.java
@@ -20,7 +20,9 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 
-/** @author Giulio Piccinin */
+/**
+ * @author Giulio Piccinin
+ */
 public class DataStoreReferenceTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreTest.java
index 3b50172..4e38ef3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DataStoreTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Falko Menge */
+/**
+ * @author Falko Menge
+ */
 public class DataStoreTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DefinitionsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DefinitionsTest.java
index 6ae289e..dee3a0e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DefinitionsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DefinitionsTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.bpmndi.BpmnDiagram;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DefinitionsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DocumentationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DocumentationTest.java
index 2e36c21..3faed91 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DocumentationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/DocumentationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DocumentationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndEventTest.java
index daaf265..4aab9b7 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndEventTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EndEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndPointTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndPointTest.java
index ddda04e..a8675e1 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndPointTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EndPointTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EndPointTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ErrorTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ErrorTest.java
index dd42288..030c6b8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ErrorTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ErrorTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ErrorTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventDefinitionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventDefinitionTest.java
index 805eb77..d6e0c6d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventDefinitionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventDefinitionTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EventDefinitionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventTest.java
index 43e9852..43a6490 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/EventTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExclusiveGatewayTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExclusiveGatewayTest.java
index 3c9e623..8f69615 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExclusiveGatewayTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExclusiveGatewayTest.java
@@ -22,7 +22,9 @@ import java.util.Arrays;
 import java.util.Collection;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExclusiveGatewayTest extends AbstractGatewayTest<ExclusiveGateway> {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExpressionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExpressionTest.java
index 5368e8b..2714cf2 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExpressionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExpressionTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExpressionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionElementsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionElementsTest.java
index 0ccfc13..5006728 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionElementsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionElementsTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExtensionElementsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionTest.java
index 3282de3..e344901 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ExtensionTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExtensionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowElementTest.java
index f289d57..a3f46a8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowElementTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.CategoryValueRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FlowElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowNodeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowNodeTest.java
index a59ba2d..27f913e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowNodeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FlowNodeTest.java
@@ -26,7 +26,9 @@ import java.util.Arrays;
 import java.util.Collection;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FlowNodeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FormalExpressionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FormalExpressionTest.java
index b3549a6..01db8f8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FormalExpressionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/FormalExpressionTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FormalExpressionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GatewayTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GatewayTest.java
index 5b9ed29..5a168f3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GatewayTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GatewayTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.GatewayDirection;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class GatewayTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GlobalConversationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GlobalConversationTest.java
index 0d9754e..41a2eb0 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GlobalConversationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/GlobalConversationTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class GlobalConversationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/HumanPerformerTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/HumanPerformerTest.java
index 2420775..d43bb70 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/HumanPerformerTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/HumanPerformerTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class HumanPerformerTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ImportTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ImportTest.java
index 911339d..a602d62 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ImportTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ImportTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ImportTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputDataItemTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputDataItemTest.java
index 4c3faee..3fc1277 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputDataItemTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputDataItemTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class InputDataItemTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputSetTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputSetTest.java
index c02c997..a0a59a5 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputSetTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InputSetTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.WhileExecutingInputRefs;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class InputSetTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InterfaceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InterfaceTest.java
index 91893a4..57f5439 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InterfaceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/InterfaceTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class InterfaceTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateCatchEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateCatchEventTest.java
index 29211dc..5f11339 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateCatchEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateCatchEventTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IntermediateCatchEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateThrowEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateThrowEventTest.java
index 88bb3db..37fffe3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateThrowEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IntermediateThrowEventTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IntermediateThrowEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoBindingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoBindingTest.java
index 204665e..77acf21 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoBindingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoBindingTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IoBindingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoSpecificationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoSpecificationTest.java
index 79ee667..7e4da99 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoSpecificationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/IoSpecificationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class IoSpecificationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemAwareElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemAwareElementTest.java
index a74cd8f..57f9be4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemAwareElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemAwareElementTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ItemAwareElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemDefinitionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemDefinitionTest.java
index 239ec8e..6383931 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemDefinitionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ItemDefinitionTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.ItemKind;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ItemDefinitionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneSetTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneSetTest.java
index 02a7119..716ede6 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneSetTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneSetTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LaneSetTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneTest.java
index 162b549..7bd6e6a 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LaneTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.PartitionElement;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LaneTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCardinalityTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCardinalityTest.java
index ef632bc..10b792c 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCardinalityTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCardinalityTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class LoopCardinalityTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCharacteristicsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCharacteristicsTest.java
index 27a91df..2ef234e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCharacteristicsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/LoopCharacteristicsTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LoopCharacteristicsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ManualTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ManualTaskTest.java
index f29c359..2248df4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ManualTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ManualTaskTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ManualTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageEventDefinitionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageEventDefinitionTest.java
index 13f064d..3d747ae 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageEventDefinitionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageEventDefinitionTest.java
@@ -23,7 +23,9 @@ import java.util.Arrays;
 import java.util.Collection;
 import org.junit.Test;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessageEventDefinitionTest extends AbstractEventDefinitionTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowAssociationTest.java
index 50b8ee6..ddcdaac 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowAssociationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessageFlowAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowTest.java
index 15cf9ec..f8c7972 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageFlowTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessageFlowTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageTest.java
index 1037428..576ceb1 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MessageTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MessageTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MonitoringTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MonitoringTest.java
index 2651501..f377c1b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MonitoringTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MonitoringTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class MonitoringTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MultiInstanceLoopCharacteristicsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MultiInstanceLoopCharacteristicsTest.java
index e49a7dd..dec35d9 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MultiInstanceLoopCharacteristicsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/MultiInstanceLoopCharacteristicsTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.LoopDataOutputRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class MultiInstanceLoopCharacteristicsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OperationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OperationTest.java
index f3245af..0d046d3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OperationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OperationTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.OutMessageRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OperationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputDataItemTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputDataItemTest.java
index 98141ae..2d9cad2 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputDataItemTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputDataItemTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class OutputDataItemTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputSetTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputSetTest.java
index 8013f75..f45df17 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputSetTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/OutputSetTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.WhileExecutingOutputRefs;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class OutputSetTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParallelGatewayTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParallelGatewayTest.java
index ff70312..0079984 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParallelGatewayTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParallelGatewayTest.java
@@ -16,5 +16,7 @@
 
 package io.camunda.zeebe.model.bpmn.instance;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ParallelGatewayTest extends AbstractGatewayTest<ParallelGateway> {}
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantAssociationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantAssociationTest.java
index 61f29eb..972507f 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantAssociationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantAssociationTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.OuterParticipantRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ParticipantAssociationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantMultiplicityTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantMultiplicityTest.java
index fb3d2ba..1d56351 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantMultiplicityTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantMultiplicityTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ParticipantMultiplicityTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantTest.java
index d2c9d4a..5fab4c3 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ParticipantTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.InterfaceRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ParticipantTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PerformerTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PerformerTest.java
index 46cc596..5084051 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PerformerTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PerformerTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class PerformerTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PotentialOwnerTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PotentialOwnerTest.java
index 1d71862..38fbb31 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PotentialOwnerTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PotentialOwnerTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Dario Campagna */
+/**
+ * @author Dario Campagna
+ */
 public class PotentialOwnerTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ProcessTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ProcessTest.java
index 2fdeab9..cee274e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ProcessTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ProcessTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.Supports;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ProcessTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PropertyTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PropertyTest.java
index 62bb03e..3af833b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PropertyTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/PropertyTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class PropertyTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ReceiveTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ReceiveTaskTest.java
index 00314ef..928cd96 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ReceiveTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ReceiveTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ReceiveTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RelationshipTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RelationshipTest.java
index 02544f9..a866d81 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RelationshipTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RelationshipTest.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.Target;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class RelationshipTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RenderingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RenderingTest.java
index c676382..ccd43f0 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RenderingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RenderingTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class RenderingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceAssignmentExpressionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceAssignmentExpressionTest.java
index 9c38290..4e754cb 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceAssignmentExpressionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceAssignmentExpressionTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceAssignmentExpressionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterBindingTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterBindingTest.java
index 3945e69..327785d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterBindingTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterBindingTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceParameterBindingTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterTest.java
index 5a09726..927188d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceParameterTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceParameterTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceRoleTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceRoleTest.java
index bf1adc7..2ff188f 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceRoleTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceRoleTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.ResourceRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceRoleTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceTest.java
index 76ac3a5..5980634 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ResourceTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ResourceTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RootElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RootElementTest.java
index 8665e4c..cab9040 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RootElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/RootElementTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class RootElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTaskTest.java
index 2b96488..ec7c1a5 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ScriptTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTest.java
index 0a14dd8..8d59835 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ScriptTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ScriptTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SendTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SendTaskTest.java
index 1475054..c6848d8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SendTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SendTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SendTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SequenceFlowTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SequenceFlowTest.java
index 545115b..d3c598d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SequenceFlowTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SequenceFlowTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SequenceFlowTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ServiceTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ServiceTaskTest.java
index 667b1d3..62099f8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ServiceTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ServiceTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ServiceTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/StartEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/StartEventTest.java
index 8d84fed..7ecef93 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/StartEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/StartEventTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class StartEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubConversationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubConversationTest.java
index baa9fe3..9814d3f 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubConversationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubConversationTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SubConversationTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubProcessTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubProcessTest.java
index 0b825b6..76203d5 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubProcessTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/SubProcessTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class SubProcessTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TaskTest.java
index df82f3f..46c3baf 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TaskTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class TaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextAnnotationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextAnnotationTest.java
index d80b4c9..cb6214c 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextAnnotationTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextAnnotationTest.java
@@ -25,7 +25,9 @@ import java.util.Collection;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class TextAnnotationTest extends BpmnModelElementInstanceTest {
 
   protected static BpmnModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextTest.java
index bb7624a..f675b44 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TextTest.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 
 import java.util.Collection;
 
-/** @author Filip Hrisafov */
+/**
+ * @author Filip Hrisafov
+ */
 public class TextTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ThrowEventTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ThrowEventTest.java
index c67617e..75ace1a 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ThrowEventTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/ThrowEventTest.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.model.bpmn.impl.instance.EventDefinitionRef;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ThrowEventTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TransactionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TransactionTest.java
index f9b8b5a..b3651a4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TransactionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/TransactionTest.java
@@ -38,7 +38,9 @@ import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
 
-/** @author Thorben Lindhauer */
+/**
+ * @author Thorben Lindhauer
+ */
 public class TransactionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/UserTaskTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/UserTaskTest.java
index 4a17d8e..d39bcf7 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/UserTaskTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/UserTaskTest.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.instance;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class UserTaskTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnDiagramTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnDiagramTest.java
index 18c222f..cade6cd 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnDiagramTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnDiagramTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.Diagram;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnDiagramTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnEdgeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnEdgeTest.java
index ee0f779..4473fe2 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnEdgeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnEdgeTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.LabeledEdge;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnEdgeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelStyleTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelStyleTest.java
index e3038a6..bab86a8 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelStyleTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelStyleTest.java
@@ -25,7 +25,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.Style;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnLabelStyleTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelTest.java
index 5049bd5..38428b1 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnLabelTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.Label;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnLabelTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnPlaneTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnPlaneTest.java
index fdb912f..6d0d2ce 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnPlaneTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnPlaneTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.Plane;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnPlaneTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnShapeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnShapeTest.java
index 9f43513..eb2eb37 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnShapeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/bpmndi/BpmnShapeTest.java
@@ -23,7 +23,9 @@ import io.camunda.zeebe.model.bpmn.instance.di.LabeledShape;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BpmnShapeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/BoundsTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/BoundsTest.java
index 42c5e76..34f7914 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/BoundsTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/BoundsTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class BoundsTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/FontTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/FontTest.java
index 6f18190..03e4c34 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/FontTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/FontTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class FontTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/PointTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/PointTest.java
index 054f50c..e6d1d13 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/PointTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/dc/PointTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class PointTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramElementTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramElementTest.java
index c075cf4..4be4401 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramElementTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramElementTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DiagramElementTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramTest.java
index 790a8d6..bba5a16 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/DiagramTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class DiagramTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/EdgeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/EdgeTest.java
index 97e23b7..9f7f5c4 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/EdgeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/EdgeTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class EdgeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ExtensionTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ExtensionTest.java
index 9617d46..1442cee 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ExtensionTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ExtensionTest.java
@@ -21,7 +21,9 @@ import static io.camunda.zeebe.model.bpmn.impl.BpmnModelConstants.DI_NS;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ExtensionTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabelTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabelTest.java
index 6c70477..806fc3e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabelTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabelTest.java
@@ -24,7 +24,9 @@ import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LabelTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledEdgeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledEdgeTest.java
index 1b7e921..4ff6410 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledEdgeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledEdgeTest.java
@@ -21,7 +21,9 @@ import static io.camunda.zeebe.model.bpmn.impl.BpmnModelConstants.DI_NS;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LabeledEdgeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledShapeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledShapeTest.java
index 53bb1cd..d1cb6f6 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledShapeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/LabeledShapeTest.java
@@ -21,7 +21,9 @@ import static io.camunda.zeebe.model.bpmn.impl.BpmnModelConstants.DI_NS;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class LabeledShapeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/NodeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/NodeTest.java
index ef8a4b0..299c2cb 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/NodeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/NodeTest.java
@@ -21,7 +21,9 @@ import static io.camunda.zeebe.model.bpmn.impl.BpmnModelConstants.DI_NS;
 import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class NodeTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/PlaneTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/PlaneTest.java
index 42adf77..445d4fe 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/PlaneTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/PlaneTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class PlaneTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ShapeTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ShapeTest.java
index c267b07..6326d8b 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ShapeTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/ShapeTest.java
@@ -24,7 +24,9 @@ import io.camunda.zeebe.model.bpmn.instance.dc.Bounds;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ShapeTest extends BpmnModelElementInstanceTest {
   @Override
   public TypeAssumption getTypeAssumption() {
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/StyleTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/StyleTest.java
index 0ef5576..ba444cc 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/StyleTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/StyleTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import java.util.Arrays;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class StyleTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/WaypointTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/WaypointTest.java
index 4c70fad..c19f0c9 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/WaypointTest.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/instance/di/WaypointTest.java
@@ -22,7 +22,9 @@ import io.camunda.zeebe.model.bpmn.instance.BpmnModelElementInstanceTest;
 import io.camunda.zeebe.model.bpmn.instance.dc.Point;
 import java.util.Collection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class WaypointTest extends BpmnModelElementInstanceTest {
 
   @Override
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AbstractReferenceAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AbstractReferenceAssert.java
index 041ba99..b2bccdf 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AbstractReferenceAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AbstractReferenceAssert.java
@@ -21,7 +21,9 @@ import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.reference.Reference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public abstract class AbstractReferenceAssert<
         S extends AbstractReferenceAssert<S, T>, T extends Reference<?>>
     extends AbstractAssert<S, T> {
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeAssert.java
index 9951a4e..322b0fd 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeAssert.java
@@ -24,7 +24,9 @@ import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.reference.Reference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AttributeAssert extends AbstractAssert<AttributeAssert, Attribute<?>> {
 
   private final String attributeName;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeReferenceAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeReferenceAssert.java
index f853a7a..a06b430 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeReferenceAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/AttributeReferenceAssert.java
@@ -19,7 +19,9 @@ package io.camunda.zeebe.model.bpmn.test.assertions;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class AttributeReferenceAssert
     extends AbstractReferenceAssert<AttributeReferenceAssert, AttributeReference<?>> {
 
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ChildElementAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ChildElementAssert.java
index 6280f9c..d5f887d 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ChildElementAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ChildElementAssert.java
@@ -21,7 +21,9 @@ import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.camunda.bpm.model.xml.type.child.ChildElementCollection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ChildElementAssert
     extends AbstractAssert<ChildElementAssert, ChildElementCollection<?>> {
 
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ElementReferenceCollectionAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ElementReferenceCollectionAssert.java
index 3ab2053..b7fe26c 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ElementReferenceCollectionAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ElementReferenceCollectionAssert.java
@@ -18,7 +18,9 @@ package io.camunda.zeebe.model.bpmn.test.assertions;
 
 import org.camunda.bpm.model.xml.type.reference.ElementReferenceCollection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ElementReferenceCollectionAssert
     extends AbstractReferenceAssert<
         ElementReferenceCollectionAssert, ElementReferenceCollection<?, ?>> {
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelAssertions.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelAssertions.java
index c222bf0..96d69fa 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelAssertions.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelAssertions.java
@@ -23,7 +23,9 @@ import org.camunda.bpm.model.xml.type.child.ChildElementCollection;
 import org.camunda.bpm.model.xml.type.reference.AttributeReference;
 import org.camunda.bpm.model.xml.type.reference.ElementReferenceCollection;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ModelAssertions extends Assertions {
 
   public static AttributeAssert assertThat(final Attribute<?> actual) {
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelElementTypeAssert.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelElementTypeAssert.java
index 9a4823a..d979c5e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelElementTypeAssert.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/test/assertions/ModelElementTypeAssert.java
@@ -27,7 +27,9 @@ import org.camunda.bpm.model.xml.instance.ModelElementInstance;
 import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.camunda.bpm.model.xml.type.attribute.Attribute;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class ModelElementTypeAssert
     extends AbstractAssert<ModelElementTypeAssert, ModelElementType> {
 
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/BpmnModelResource.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/BpmnModelResource.java
index 7c2a2e2..6949c8e 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/BpmnModelResource.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/BpmnModelResource.java
@@ -21,7 +21,9 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface BpmnModelResource {}
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/GetBpmnModelElementTypeRule.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/GetBpmnModelElementTypeRule.java
index 170a3aa..70fa144 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/GetBpmnModelElementTypeRule.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/GetBpmnModelElementTypeRule.java
@@ -25,7 +25,9 @@ import org.camunda.bpm.model.xml.type.ModelElementType;
 import org.junit.rules.TestWatcher;
 import org.junit.runner.Description;
 
-/** @author Sebastian Menski */
+/**
+ * @author Sebastian Menski
+ */
 public class GetBpmnModelElementTypeRule extends TestWatcher implements GetModelElementTypeRule {
 
   private ModelInstance modelInstance;
diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/ParseBpmnModelRule.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/ParseBpmnModelRule.java
index fb460a9..b1a4811 100644
--- a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/ParseBpmnModelRule.java
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/util/ParseBpmnModelRule.java
@@ -23,7 +23,9 @@ import org.camunda.bpm.model.xml.impl.util.IoUtil;
 import org.junit.rules.TestWatcher;
 import org.junit.runner.Description;
 
-/** @author Daniel Meyer */
+/**
+ * @author Daniel Meyer
+ */
 public class ParseBpmnModelRule extends TestWatcher {
 
   protected BpmnModelInstance bpmnModelInstance;
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpExporter.java b/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpExporter.java
index 51a4895..34f6a4e 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpExporter.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpExporter.java
@@ -13,7 +13,9 @@ import io.camunda.zeebe.exporter.api.context.Context;
 import io.camunda.zeebe.protocol.record.Record;
 import org.slf4j.Logger;
 
-/** @deprecated to be removed >= 1.4. There will be no replacement for this exporter */
+/**
+ * @deprecated to be removed >= 1.4. There will be no replacement for this exporter
+ */
 @Deprecated(since = ""1.3"", forRemoval = true)
 public final class DebugHttpExporter implements Exporter {
 
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpServer.java b/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpServer.java
index 3b57a4f..55efa07 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpServer.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/exporter/debug/DebugHttpServer.java
@@ -19,7 +19,9 @@ import java.net.InetSocketAddress;
 import java.nio.charset.Charset;
 import java.util.LinkedList;
 
-/** @deprecated to be removed >= 1.4. There will be no replacement for this exporter */
+/**
+ * @deprecated to be removed >= 1.4. There will be no replacement for this exporter
+ */
 @Deprecated(since = ""1.3"", forRemoval = true)
 public final class DebugHttpServer {
 
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/partitioning/distribution/FixedPartitionDistributorBuilder.java b/broker/src/main/java/io/camunda/zeebe/broker/partitioning/distribution/FixedPartitionDistributorBuilder.java
index dccef49..54c757f 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/partitioning/distribution/FixedPartitionDistributorBuilder.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/partitioning/distribution/FixedPartitionDistributorBuilder.java
@@ -74,7 +74,9 @@ public final class FixedPartitionDistributorBuilder {
     return this;
   }
 
-  /** @return a distributor configured for a map of partitions to members */
+  /**
+   * @return a distributor configured for a map of partitions to members
+   */
   public FixedPartitionDistributor build() {
     return new FixedPartitionDistributor(partitions);
   }
diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionTransitionStep.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionTransitionStep.java
index 478354f..58dafac 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionTransitionStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/PartitionTransitionStep.java
@@ -70,6 +70,8 @@ public interface PartitionTransitionStep {
   ActorFuture<Void> transitionTo(
       final PartitionTransitionContext context, final long term, final Role targetRole);
 
-  /** @return A log-friendly identification of the PartitionTransitionStep. */
+  /**
+   * @return A log-friendly identification of the PartitionTransitionStep.
+   */
   String getName();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/ClientProperties.java b/clients/java/src/main/java/io/camunda/zeebe/client/ClientProperties.java
index 2dcbade..4f91171 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/ClientProperties.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/ClientProperties.java
@@ -19,43 +19,69 @@ import java.time.Duration;
 
 public final class ClientProperties {
 
-  /** @see ZeebeClientBuilder#gatewayAddress(String) */
+  /**
+   * @see ZeebeClientBuilder#gatewayAddress(String)
+   */
   public static final String GATEWAY_ADDRESS = ""zeebe.client.gateway.address"";
 
-  /** @see ZeebeClientBuilder#numJobWorkerExecutionThreads(int) */
+  /**
+   * @see ZeebeClientBuilder#numJobWorkerExecutionThreads(int)
+   */
   public static final String JOB_WORKER_EXECUTION_THREADS = ""zeebe.client.worker.threads"";
 
-  /** @see ZeebeClientBuilder#defaultJobWorkerMaxJobsActive(int) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobWorkerMaxJobsActive(int)
+   */
   public static final String JOB_WORKER_MAX_JOBS_ACTIVE = ""zeebe.client.worker.maxJobsActive"";
 
-  /** @see ZeebeClientBuilder#defaultJobWorkerName(String) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobWorkerName(String)
+   */
   public static final String DEFAULT_JOB_WORKER_NAME = ""zeebe.client.worker.name"";
 
-  /** @see ZeebeClientBuilder#defaultJobTimeout(java.time.Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobTimeout(java.time.Duration)
+   */
   public static final String DEFAULT_JOB_TIMEOUT = ""zeebe.client.job.timeout"";
 
-  /** @see ZeebeClientBuilder#defaultJobPollInterval(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobPollInterval(Duration)
+   */
   public static final String DEFAULT_JOB_POLL_INTERVAL = ""zeebe.client.job.pollinterval"";
 
-  /** @see ZeebeClientBuilder#defaultMessageTimeToLive(java.time.Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultMessageTimeToLive(java.time.Duration)
+   */
   public static final String DEFAULT_MESSAGE_TIME_TO_LIVE = ""zeebe.client.message.timeToLive"";
 
-  /** @see ZeebeClientBuilder#defaultRequestTimeout(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultRequestTimeout(Duration)
+   */
   public static final String DEFAULT_REQUEST_TIMEOUT = ""zeebe.client.requestTimeout"";
 
-  /** @see ZeebeClientBuilder#usePlaintext() */
+  /**
+   * @see ZeebeClientBuilder#usePlaintext()
+   */
   public static final String USE_PLAINTEXT_CONNECTION = ""zeebe.client.security.plaintext"";
 
-  /** @see ZeebeClientBuilder#caCertificatePath(String) */
+  /**
+   * @see ZeebeClientBuilder#caCertificatePath(String)
+   */
   public static final String CA_CERTIFICATE_PATH = ""zeebe.client.security.certpath"";
 
-  /** @see ZeebeClientBuilder#keepAlive(Duration) */
+  /**
+   * @see ZeebeClientBuilder#keepAlive(Duration)
+   */
   public static final String KEEP_ALIVE = ""zeebe.client.keepalive"";
 
-  /** @see ZeebeClientBuilder#overrideAuthority(String) */
+  /**
+   * @see ZeebeClientBuilder#overrideAuthority(String)
+   */
   public static final String OVERRIDE_AUTHORITY = ""zeebe.client.overrideauthority"";
 
-  /** @see ZeebeClientCloudBuilderStep1#withClusterId(java.lang.String) */
+  /**
+   * @see ZeebeClientCloudBuilderStep1#withClusterId(java.lang.String)
+   */
   public static final String CLOUD_CLUSTER_ID = ""zeebe.client.cloud.clusterId"";
 
   /**
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/CredentialsProvider.java b/clients/java/src/main/java/io/camunda/zeebe/client/CredentialsProvider.java
index c55dd49..8fd2f96 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/CredentialsProvider.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/CredentialsProvider.java
@@ -38,7 +38,9 @@ public interface CredentialsProvider {
    */
   boolean shouldRetryRequest(Throwable throwable);
 
-  /** @return a builder to configure and create a new {@link OAuthCredentialsProvider}. */
+  /**
+   * @return a builder to configure and create a new {@link OAuthCredentialsProvider}.
+   */
   static OAuthCredentialsProviderBuilder newCredentialsProviderBuilder() {
     return new OAuthCredentialsProviderBuilder();
   }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
index cbd39d0..4f66064 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClient.java
@@ -45,17 +45,23 @@ public interface ZeebeClient extends AutoCloseable, JobClient {
     return newClientBuilder().build();
   }
 
-  /** @return a new {@link ZeebeClient} using the provided configuration. */
+  /**
+   * @return a new {@link ZeebeClient} using the provided configuration.
+   */
   static ZeebeClient newClient(final ZeebeClientConfiguration configuration) {
     return new ZeebeClientImpl(configuration);
   }
 
-  /** @return a builder to configure and create a new {@link ZeebeClient}. */
+  /**
+   * @return a builder to configure and create a new {@link ZeebeClient}.
+   */
   static ZeebeClientBuilder newClientBuilder() {
     return new ZeebeClientBuilderImpl();
   }
 
-  /** @return a builder with convenient methods to connect to the Camunda Cloud cluster. */
+  /**
+   * @return a builder with convenient methods to connect to the Camunda Cloud cluster.
+   */
   static ZeebeClientCloudBuilderStep1 newCloudClientBuilder() {
     return new ZeebeClientCloudBuilderImpl();
   }
@@ -80,7 +86,9 @@ public interface ZeebeClient extends AutoCloseable, JobClient {
    */
   TopologyRequestStep1 newTopologyRequest();
 
-  /** @return the client's configuration */
+  /**
+   * @return the client's configuration
+   */
   ZeebeClientConfiguration getConfiguration();
 
   @Override
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientBuilder.java b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientBuilder.java
index fba9f3c..fc8d9bb 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientBuilder.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientBuilder.java
@@ -108,6 +108,8 @@ public interface ZeebeClientBuilder {
    */
   ZeebeClientBuilder overrideAuthority(String authority);
 
-  /** @return a new {@link ZeebeClient} with the provided configuration options. */
+  /**
+   * @return a new {@link ZeebeClient} with the provided configuration options.
+   */
   ZeebeClient build();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientConfiguration.java b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientConfiguration.java
index 6d2bb8e..ee60b7e 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientConfiguration.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/ZeebeClientConfiguration.java
@@ -21,47 +21,75 @@ import java.time.Duration;
 import java.util.List;
 
 public interface ZeebeClientConfiguration {
-  /** @see ZeebeClientBuilder#gatewayAddress(String) */
+  /**
+   * @see ZeebeClientBuilder#gatewayAddress(String)
+   */
   String getGatewayAddress();
 
-  /** @see ZeebeClientBuilder#numJobWorkerExecutionThreads(int) */
+  /**
+   * @see ZeebeClientBuilder#numJobWorkerExecutionThreads(int)
+   */
   int getNumJobWorkerExecutionThreads();
 
-  /** @see ZeebeClientBuilder#defaultJobWorkerMaxJobsActive(int) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobWorkerMaxJobsActive(int)
+   */
   int getDefaultJobWorkerMaxJobsActive();
 
-  /** @see ZeebeClientBuilder#defaultJobWorkerName(String) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobWorkerName(String)
+   */
   String getDefaultJobWorkerName();
 
-  /** @see ZeebeClientBuilder#defaultJobTimeout(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobTimeout(Duration)
+   */
   Duration getDefaultJobTimeout();
 
-  /** @see ZeebeClientBuilder#defaultJobPollInterval(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultJobPollInterval(Duration)
+   */
   Duration getDefaultJobPollInterval();
 
-  /** @see ZeebeClientBuilder#defaultMessageTimeToLive(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultMessageTimeToLive(Duration)
+   */
   Duration getDefaultMessageTimeToLive();
 
-  /** @see ZeebeClientBuilder#defaultRequestTimeout(Duration) */
+  /**
+   * @see ZeebeClientBuilder#defaultRequestTimeout(Duration)
+   */
   Duration getDefaultRequestTimeout();
 
-  /** @see ZeebeClientBuilder#usePlaintext() */
+  /**
+   * @see ZeebeClientBuilder#usePlaintext()
+   */
   boolean isPlaintextConnectionEnabled();
 
-  /** @see ZeebeClientBuilder#caCertificatePath(String) */
+  /**
+   * @see ZeebeClientBuilder#caCertificatePath(String)
+   */
   String getCaCertificatePath();
 
-  /** @see ZeebeClientBuilder#credentialsProvider(CredentialsProvider) */
+  /**
+   * @see ZeebeClientBuilder#credentialsProvider(CredentialsProvider)
+   */
   CredentialsProvider getCredentialsProvider();
 
-  /** @see ZeebeClientBuilder#keepAlive(Duration) */
+  /**
+   * @see ZeebeClientBuilder#keepAlive(Duration)
+   */
   Duration getKeepAlive();
 
   List<ClientInterceptor> getInterceptors();
 
-  /** @see ZeebeClientBuilder#withJsonMapper(io.camunda.zeebe.client.api.JsonMapper) */
+  /**
+   * @see ZeebeClientBuilder#withJsonMapper(io.camunda.zeebe.client.api.JsonMapper)
+   */
   JsonMapper getJsonMapper();
 
-  /** @see ZeebeClientBuilder#overrideAuthority(String) */
+  /**
+   * @see ZeebeClientBuilder#overrideAuthority(String)
+   */
   String getOverrideAuthority();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/command/DeployProcessCommandStep1.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/command/DeployProcessCommandStep1.java
index e219f8a..87df4d3 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/command/DeployProcessCommandStep1.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/command/DeployProcessCommandStep1.java
@@ -21,7 +21,9 @@ import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
 import java.io.InputStream;
 import java.nio.charset.Charset;
 
-/** @deprecated since 8 for removal with 8.1, replaced by {@link DeployResourceCommandStep1} */
+/**
+ * @deprecated since 8 for removal with 8.1, replaced by {@link DeployResourceCommandStep1}
+ */
 @Deprecated
 public interface DeployProcessCommandStep1 {
 
@@ -99,7 +101,9 @@ public interface DeployProcessCommandStep1 {
   DeployProcessCommandBuilderStep2 addProcessModel(
       BpmnModelInstance processDefinition, String resourceName);
 
-  /** @deprecated since 8 for removal with 8.1, replaced by {@link DeployResourceCommandStep2} */
+  /**
+   * @deprecated since 8 for removal with 8.1, replaced by {@link DeployResourceCommandStep2}
+   */
   @Deprecated
   interface DeployProcessCommandBuilderStep2
       extends DeployProcessCommandStep1, FinalCommandStep<DeploymentEvent> {
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivateJobsResponse.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivateJobsResponse.java
index 538f886..57929c5 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivateJobsResponse.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivateJobsResponse.java
@@ -19,6 +19,8 @@ import java.util.List;
 
 public interface ActivateJobsResponse {
 
-  /** @return the list of activated jobs */
+  /**
+   * @return the list of activated jobs
+   */
   List<ActivatedJob> getJobs();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivatedJob.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivatedJob.java
index 759258a..bc36387 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivatedJob.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/ActivatedJob.java
@@ -19,37 +19,59 @@ import java.util.Map;
 
 public interface ActivatedJob {
 
-  /** @return the unique key of the job */
+  /**
+   * @return the unique key of the job
+   */
   long getKey();
 
-  /** @return the type of the job */
+  /**
+   * @return the type of the job
+   */
   String getType();
 
-  /** @return key of the process instance */
+  /**
+   * @return key of the process instance
+   */
   long getProcessInstanceKey();
 
-  /** @return BPMN process id of the process */
+  /**
+   * @return BPMN process id of the process
+   */
   String getBpmnProcessId();
 
-  /** @return version of the process */
+  /**
+   * @return version of the process
+   */
   int getProcessDefinitionVersion();
 
-  /** @return key of the process */
+  /**
+   * @return key of the process
+   */
   long getProcessDefinitionKey();
 
-  /** @return id of the process element */
+  /**
+   * @return id of the process element
+   */
   String getElementId();
 
-  /** @return key of the element instance */
+  /**
+   * @return key of the element instance
+   */
   long getElementInstanceKey();
 
-  /** @return user-defined headers associated with this job */
+  /**
+   * @return user-defined headers associated with this job
+   */
   Map<String, String> getCustomHeaders();
 
-  /** @return the assigned worker to complete the job */
+  /**
+   * @return the assigned worker to complete the job
+   */
   String getWorker();
 
-  /** @return remaining retries */
+  /**
+   * @return remaining retries
+   */
   int getRetries();
 
   /**
@@ -59,15 +81,23 @@ public interface ActivatedJob {
    */
   long getDeadline();
 
-  /** @return JSON-formatted variables */
+  /**
+   * @return JSON-formatted variables
+   */
   String getVariables();
 
-  /** @return de-serialized variables as map */
+  /**
+   * @return de-serialized variables as map
+   */
   Map<String, Object> getVariablesAsMap();
 
-  /** @return de-serialized variables as the given type */
+  /**
+   * @return de-serialized variables as the given type
+   */
   <T> T getVariablesAsType(Class<T> variableType);
 
-  /** @return the record encoded as JSON */
+  /**
+   * @return the record encoded as JSON
+   */
   String toJson();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/BrokerInfo.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/BrokerInfo.java
index e033e9c..87d31a6 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/BrokerInfo.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/BrokerInfo.java
@@ -18,21 +18,33 @@ package io.camunda.zeebe.client.api.response;
 import java.util.List;
 
 public interface BrokerInfo {
-  /** @return the node if of the broker */
+  /**
+   * @return the node if of the broker
+   */
   int getNodeId();
 
-  /** @return the address host of the broker */
+  /**
+   * @return the address host of the broker
+   */
   String getHost();
 
-  /** @return the address port of the broker */
+  /**
+   * @return the address port of the broker
+   */
   int getPort();
 
-  /** @return the address (host+port) of the broker */
+  /**
+   * @return the address (host+port) of the broker
+   */
   String getAddress();
 
-  /** @return the version of the broker */
+  /**
+   * @return the version of the broker
+   */
   String getVersion();
 
-  /** @return all partitions of the broker */
+  /**
+   * @return all partitions of the broker
+   */
   List<PartitionInfo> getPartitions();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Decision.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Decision.java
index 99c11f3..9d59bd3 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Decision.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Decision.java
@@ -23,13 +23,19 @@ public interface Decision {
    */
   String getDmnDecisionId();
 
-  /** @return the dmn name of the decision, as parsed during deployment */
+  /**
+   * @return the dmn name of the decision, as parsed during deployment
+   */
   String getDmnDecisionName();
 
-  /** @return the assigned decision version */
+  /**
+   * @return the assigned decision version
+   */
   int getVersion();
 
-  /** @return the assigned decision key, which acts as a unique identifier for this decision */
+  /**
+   * @return the assigned decision key, which acts as a unique identifier for this decision
+   */
   long getDecisionKey();
 
   /**
@@ -38,6 +44,8 @@ public interface Decision {
    */
   String getDmnDecisionRequirementsId();
 
-  /** @return the assigned key of the decision requirements graph that this decision is part of */
+  /**
+   * @return the assigned key of the decision requirements graph that this decision is part of
+   */
   long getDecisionRequirementsKey();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DecisionRequirements.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DecisionRequirements.java
index 774a52a..a29275b 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DecisionRequirements.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DecisionRequirements.java
@@ -23,10 +23,14 @@ public interface DecisionRequirements {
    */
   String getDmnDecisionRequirementsId();
 
-  /** @return the dmn name of the decision requirements, as parsed during deployment */
+  /**
+   * @return the dmn name of the decision requirements, as parsed during deployment
+   */
   String getDmnDecisionRequirementsName();
 
-  /** @return the assigned decision requirements version */
+  /**
+   * @return the assigned decision requirements version
+   */
   int getVersion();
 
   /**
@@ -35,6 +39,8 @@ public interface DecisionRequirements {
    */
   long getDecisionRequirementsKey();
 
-  /** @return the resource name (i.e. filename) from which this decision requirements was parsed */
+  /**
+   * @return the resource name (i.e. filename) from which this decision requirements was parsed
+   */
   String getResourceName();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DeploymentEvent.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DeploymentEvent.java
index 3026ea6..cde8575 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DeploymentEvent.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/DeploymentEvent.java
@@ -18,15 +18,23 @@ package io.camunda.zeebe.client.api.response;
 import java.util.List;
 
 public interface DeploymentEvent {
-  /** @return the unique key of the deployment */
+  /**
+   * @return the unique key of the deployment
+   */
   long getKey();
 
-  /** @return the processes which are deployed */
+  /**
+   * @return the processes which are deployed
+   */
   List<Process> getProcesses();
 
-  /** @return the decisions which are deployed */
+  /**
+   * @return the decisions which are deployed
+   */
   List<Decision> getDecisions();
 
-  /** @return the decision requirements which are deployed */
+  /**
+   * @return the decision requirements which are deployed
+   */
   List<DecisionRequirements> getDecisionRequirements();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/PartitionInfo.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/PartitionInfo.java
index 8bd7c0d..a8b862f 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/PartitionInfo.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/PartitionInfo.java
@@ -16,13 +16,19 @@
 package io.camunda.zeebe.client.api.response;
 
 public interface PartitionInfo {
-  /** @return the partition's id */
+  /**
+   * @return the partition's id
+   */
   int getPartitionId();
 
-  /** @return the current role of the broker for this partition (i.e. leader or follower) */
+  /**
+   * @return the current role of the broker for this partition (i.e. leader or follower)
+   */
   PartitionBrokerRole getRole();
 
-  /** @return <code>true</code> if the broker is the current leader of this partition */
+  /**
+   * @return <code>true</code> if the broker is the current leader of this partition
+   */
   boolean isLeader();
 
   /**
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Process.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Process.java
index d7cd531..c5547ce 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Process.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Process.java
@@ -16,15 +16,23 @@
 package io.camunda.zeebe.client.api.response;
 
 public interface Process {
-  /** @return the BPMN process id of the process */
+  /**
+   * @return the BPMN process id of the process
+   */
   String getBpmnProcessId();
 
-  /** @return the version of the deployed process */
+  /**
+   * @return the version of the deployed process
+   */
   int getVersion();
 
-  /** @return the key of the deployed process */
+  /**
+   * @return the key of the deployed process
+   */
   long getProcessDefinitionKey();
 
-  /** @return the name of the deployment resource which contains the process */
+  /**
+   * @return the name of the deployment resource which contains the process
+   */
   String getResourceName();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/SetVariablesResponse.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/SetVariablesResponse.java
index 77f667d..78a1c27 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/SetVariablesResponse.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/SetVariablesResponse.java
@@ -17,6 +17,8 @@ package io.camunda.zeebe.client.api.response;
 
 public interface SetVariablesResponse {
 
-  /** @return key of the set variables command */
+  /**
+   * @return key of the set variables command
+   */
   long getKey();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Topology.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Topology.java
index 8f02c9f..9825cc7 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Topology.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/response/Topology.java
@@ -18,18 +18,28 @@ package io.camunda.zeebe.client.api.response;
 import java.util.List;
 
 public interface Topology {
-  /** @return all (known) brokers of the cluster */
+  /**
+   * @return all (known) brokers of the cluster
+   */
   List<BrokerInfo> getBrokers();
 
-  /** @return the size of the Zeebe broker cluster */
+  /**
+   * @return the size of the Zeebe broker cluster
+   */
   int getClusterSize();
 
-  /** @return the configured number of partitions */
+  /**
+   * @return the configured number of partitions
+   */
   int getPartitionsCount();
 
-  /** @return the configured replication factor for every partition */
+  /**
+   * @return the configured replication factor for every partition
+   */
   int getReplicationFactor();
 
-  /** @return the gateway version or an empty string if none was found */
+  /**
+   * @return the gateway version or an empty string if none was found
+   */
   String getGatewayVersion();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/api/worker/ExponentialBackoffBuilder.java b/clients/java/src/main/java/io/camunda/zeebe/client/api/worker/ExponentialBackoffBuilder.java
index 5fff577..90ef000 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/api/worker/ExponentialBackoffBuilder.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/api/worker/ExponentialBackoffBuilder.java
@@ -75,6 +75,8 @@ public interface ExponentialBackoffBuilder {
    */
   ExponentialBackoffBuilder random(Random random);
 
-  /** @return a new {@link BackoffSupplier} with the provided configuration options. */
+  /**
+   * @return a new {@link BackoffSupplier} with the provided configuration options.
+   */
   BackoffSupplier build();
 }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/oauth/OAuthCredentialsProviderBuilder.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/oauth/OAuthCredentialsProviderBuilder.java
index a93d848..3f012c4 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/oauth/OAuthCredentialsProviderBuilder.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/oauth/OAuthCredentialsProviderBuilder.java
@@ -52,7 +52,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see OAuthCredentialsProviderBuilder#clientId(String) */
+  /**
+   * @see OAuthCredentialsProviderBuilder#clientId(String)
+   */
   String getClientId() {
     return clientId;
   }
@@ -63,7 +65,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see OAuthCredentialsProviderBuilder#clientSecret(String) */
+  /**
+   * @see OAuthCredentialsProviderBuilder#clientSecret(String)
+   */
   String getClientSecret() {
     return clientSecret;
   }
@@ -74,7 +78,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see OAuthCredentialsProviderBuilder#audience(String) */
+  /**
+   * @see OAuthCredentialsProviderBuilder#audience(String)
+   */
   String getAudience() {
     return audience;
   }
@@ -86,7 +92,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see OAuthCredentialsProviderBuilder#authorizationServerUrl(String) */
+  /**
+   * @see OAuthCredentialsProviderBuilder#authorizationServerUrl(String)
+   */
   URL getAuthorizationServer() {
     return authorizationServer;
   }
@@ -100,7 +108,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see OAuthCredentialsProviderBuilder#credentialsCachePath(String) */
+  /**
+   * @see OAuthCredentialsProviderBuilder#credentialsCachePath(String)
+   */
   File getCredentialsCache() {
     return credentialsCache;
   }
@@ -114,7 +124,9 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see #connectTimeout(Duration) */
+  /**
+   * @see #connectTimeout(Duration)
+   */
   public Duration getConnectTimeout() {
     return connectTimeout;
   }
@@ -128,12 +140,16 @@ public final class OAuthCredentialsProviderBuilder {
     return this;
   }
 
-  /** @see #readTimeout(Duration) */
+  /**
+   * @see #readTimeout(Duration)
+   */
   public Duration getReadTimeout() {
     return readTimeout;
   }
 
-  /** @return a new {@link OAuthCredentialsProvider} with the provided configuration options. */
+  /**
+   * @return a new {@link OAuthCredentialsProvider} with the provided configuration options.
+   */
   public OAuthCredentialsProvider build() {
     checkEnvironmentOverrides();
     applyDefaults();
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/util/VersionUtil.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/util/VersionUtil.java
index 8b91653..c9ee77a 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/util/VersionUtil.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/util/VersionUtil.java
@@ -33,7 +33,9 @@ public final class VersionUtil {
 
   private VersionUtil() {}
 
-  /** @return the current version or 'development' if none can be determined. */
+  /**
+   * @return the current version or 'development' if none can be determined.
+   */
   public static String getVersion() {
     if (version == null) {
       // read version from file
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/worker/JobWorkerImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/worker/JobWorkerImpl.java
index 2e6a4cc..9b2a155 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/worker/JobWorkerImpl.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/worker/JobWorkerImpl.java
@@ -146,7 +146,9 @@ public final class JobWorkerImpl implements JobWorker, Closeable {
             });
   }
 
-  /** @return an optional job poller if not already in use, otherwise an empty optional */
+  /**
+   * @return an optional job poller if not already in use, otherwise an empty optional
+   */
   private Optional<JobPoller> tryClaimJobPoller() {
     return Optional.ofNullable(claimableJobPoller.getAndSet(null));
   }
diff --git a/dispatcher/src/main/java/io/camunda/zeebe/dispatcher/ClaimedFragmentBatch.java b/dispatcher/src/main/java/io/camunda/zeebe/dispatcher/ClaimedFragmentBatch.java
index ec31d59..8184493 100644
--- a/dispatcher/src/main/java/io/camunda/zeebe/dispatcher/ClaimedFragmentBatch.java
+++ b/dispatcher/src/main/java/io/camunda/zeebe/dispatcher/ClaimedFragmentBatch.java
@@ -71,12 +71,16 @@ public class ClaimedFragmentBatch {
     this.onCompleteHandler = onCompleteHandler;
   }
 
-  /** @return the claimed batch buffer to write in. */
+  /**
+   * @return the claimed batch buffer to write in.
+   */
   public MutableDirectBuffer getBuffer() {
     return buffer;
   }
 
-  /** @return the buffer offset of the last batch fragment */
+  /**
+   * @return the buffer offset of the last batch fragment
+   */
   public int getFragmentOffset() {
     return currentOffset + HEADER_LENGTH;
   }
diff --git a/dist/src/main/java/io/camunda/zeebe/shared/management/ActorClockService.java b/dist/src/main/java/io/camunda/zeebe/shared/management/ActorClockService.java
index 760115b..b7d77b9 100644
--- a/dist/src/main/java/io/camunda/zeebe/shared/management/ActorClockService.java
+++ b/dist/src/main/java/io/camunda/zeebe/shared/management/ActorClockService.java
@@ -18,10 +18,14 @@ import java.util.Optional;
 @FunctionalInterface
 public interface ActorClockService {
 
-  /** @return the current instant of the clock */
+  /**
+   * @return the current instant of the clock
+   */
   long epochMilli();
 
-  /** @return a mutable variant of the underlying clock, or nothing if the clock is immutable */
+  /**
+   * @return a mutable variant of the underlying clock, or nothing if the clock is immutable
+   */
   default Optional<MutableClock> mutable() {
     return Optional.empty();
   }
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionContext.java b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionContext.java
index ef296f4..8771abb 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionContext.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionContext.java
@@ -18,6 +18,8 @@ import java.util.Map;
  */
 public interface DecisionContext {
 
-  /** @return the Context as map */
+  /**
+   * @return the Context as map
+   */
   Map<String, Object> toMap();
 }
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEngineFactory.java b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEngineFactory.java
index 9b7bf66..05e666d 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEngineFactory.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEngineFactory.java
@@ -12,7 +12,9 @@ import io.camunda.zeebe.dmn.impl.DmnScalaDecisionEngine;
 /** The entry point to create a new {@link DecisionEngine}. */
 public final class DecisionEngineFactory {
 
-  /** @return a new instance of the {@link DecisionEngine} */
+  /**
+   * @return a new instance of the {@link DecisionEngine}
+   */
   public static DecisionEngine createDecisionEngine() {
     return new DmnScalaDecisionEngine();
   }
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEvaluationResult.java b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEvaluationResult.java
index 6473c82..c0079f1 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEvaluationResult.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/DecisionEvaluationResult.java
@@ -18,7 +18,9 @@ import org.agrona.DirectBuffer;
  */
 public interface DecisionEvaluationResult {
 
-  /** @return {@code true} if the evaluation was not successful, otherwise {@code false} */
+  /**
+   * @return {@code true} if the evaluation was not successful, otherwise {@code false}
+   */
   boolean isFailure();
 
   /**
@@ -39,7 +41,9 @@ public interface DecisionEvaluationResult {
    */
   String getFailedDecisionId();
 
-  /** @return the output of the decision if it was made successfully, otherwise {@code null} */
+  /**
+   * @return the output of the decision if it was made successfully, otherwise {@code null}
+   */
   DirectBuffer getOutput();
 
   /**
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedDecision.java b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedDecision.java
index b2eb5e7..148f635 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedDecision.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedDecision.java
@@ -15,13 +15,19 @@ import org.agrona.DirectBuffer;
  */
 public interface EvaluatedDecision {
 
-  /** @return the id of the evaluated decision */
+  /**
+   * @return the id of the evaluated decision
+   */
   String decisionId();
 
-  /** @return the name of the evaluated decision */
+  /**
+   * @return the name of the evaluated decision
+   */
   String decisionName();
 
-  /** @return the type of the evaluated decision */
+  /**
+   * @return the type of the evaluated decision
+   */
   DecisionType decisionType();
 
   /**
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedInput.java b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedInput.java
index f10f1b5..34b0f71 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedInput.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedInput.java
@@ -15,7 +15,9 @@ import org.agrona.DirectBuffer;
  */
 public interface EvaluatedInput {
 
-  /** @return the id of the evaluated input */
+  /**
+   * @return the id of the evaluated input
+   */
   String inputId();
 
   /**
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedOutput.java b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedOutput.java
index 1571bfb..e890530 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedOutput.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/EvaluatedOutput.java
@@ -15,7 +15,9 @@ import org.agrona.DirectBuffer;
  */
 public interface EvaluatedOutput {
 
-  /** @return the id of the evaluated output */
+  /**
+   * @return the id of the evaluated output
+   */
   String outputId();
 
   /**
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/MatchedRule.java b/dmn/src/main/java/io/camunda/zeebe/dmn/MatchedRule.java
index 2189483..fa99d5c 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/MatchedRule.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/MatchedRule.java
@@ -12,7 +12,9 @@ import java.util.List;
 /** A matched rule of a decision table. It contains details of the rule and its outputs. */
 public interface MatchedRule {
 
-  /** @return the id of the matched rule */
+  /**
+   * @return the id of the matched rule
+   */
   String ruleId();
 
   /**
@@ -22,6 +24,8 @@ public interface MatchedRule {
    */
   int ruleIndex();
 
-  /** @return the evaluated outputs of the rule */
+  /**
+   * @return the evaluated outputs of the rule
+   */
   List<EvaluatedOutput> evaluatedOutputs();
 }
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecision.java b/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecision.java
index 3df3f6f..78cf965 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecision.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecision.java
@@ -16,9 +16,13 @@ package io.camunda.zeebe.dmn;
  */
 public interface ParsedDecision {
 
-  /** @return the name of the decision */
+  /**
+   * @return the name of the decision
+   */
   String getName();
 
-  /** @return the id of the decision */
+  /**
+   * @return the id of the decision
+   */
   String getId();
 }
diff --git a/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecisionRequirementsGraph.java b/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecisionRequirementsGraph.java
index d9c792e..8d33490 100644
--- a/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecisionRequirementsGraph.java
+++ b/dmn/src/main/java/io/camunda/zeebe/dmn/ParsedDecisionRequirementsGraph.java
@@ -17,13 +17,19 @@ import java.util.Collection;
  */
 public interface ParsedDecisionRequirementsGraph {
 
-  /** @return the id of the DRG, or {@code null} if the DMN is not valid */
+  /**
+   * @return the id of the DRG, or {@code null} if the DMN is not valid
+   */
   String getId();
 
-  /** @return the name of the DRG, or {@code null} if the DMN is not valid */
+  /**
+   * @return the name of the DRG, or {@code null} if the DMN is not valid
+   */
   String getName();
 
-  /** @return the namespace of the DRG, or {@code null} if the DMN is not valid */
+  /**
+   * @return the namespace of the DRG, or {@code null} if the DMN is not valid
+   */
   String getNamespace();
 
   /**
@@ -32,7 +38,9 @@ public interface ParsedDecisionRequirementsGraph {
    */
   Collection<ParsedDecision> getDecisions();
 
-  /** @return {@code true} if the DMN is valid */
+  /**
+   * @return {@code true} if the DMN is valid
+   */
   boolean isValid();
 
   /**
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/BpmnElementProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
index ed3e5c8..8f66445 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/BpmnElementProcessor.java
@@ -20,7 +20,9 @@ import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableFlo
  */
 public interface BpmnElementProcessor<T extends ExecutableFlowElement> {
 
-  /** @return the class that represents the BPMN element */
+  /**
+   * @return the class that represents the BPMN element
+   */
   Class<T> getType();
 
   /**
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
index 9bd4ef1..6593e62 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnEventSubscriptionBehavior.java
@@ -59,7 +59,9 @@ public final class BpmnEventSubscriptionBehavior {
     this.keyGenerator = keyGenerator;
   }
 
-  /** @return either a failure or nothing */
+  /**
+   * @return either a failure or nothing
+   */
   public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(
       final T element, final BpmnElementContext context) {
     return catchEventBehavior.subscribeToEvents(context, element, sideEffects, commandWriter);
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
index 208ffe2..7d49c1d 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/bpmn/behavior/BpmnStateTransitionBehavior.java
@@ -67,7 +67,9 @@ public final class BpmnStateTransitionBehavior {
     this.elementInstanceState = elementInstanceState;
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public BpmnElementContext transitionToActivating(final BpmnElementContext context) {
 
     final var elementInstance = stateBehavior.getElementInstance(context);
@@ -98,7 +100,9 @@ public final class BpmnStateTransitionBehavior {
     return transitionTo(transitionContext, ProcessInstanceIntent.ELEMENT_ACTIVATING);
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public BpmnElementContext transitionToActivated(final BpmnElementContext context) {
     final BpmnElementContext transitionedContext =
         transitionTo(context, ProcessInstanceIntent.ELEMENT_ACTIVATED);
@@ -106,7 +110,9 @@ public final class BpmnStateTransitionBehavior {
     return transitionedContext;
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public BpmnElementContext transitionToCompleting(final BpmnElementContext context) {
     final var elementInstance = stateBehavior.getElementInstance(context);
     if (elementInstance.getState() == ProcessInstanceIntent.ELEMENT_COMPLETING) {
@@ -146,7 +152,9 @@ public final class BpmnStateTransitionBehavior {
     }
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public <T extends ExecutableFlowNode> Either<Failure, BpmnElementContext> transitionToCompleted(
       final T element, final BpmnElementContext context) {
     final boolean endOfExecutionPath;
@@ -180,7 +188,9 @@ public final class BpmnStateTransitionBehavior {
     return Either.right(completed);
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public BpmnElementContext transitionToTerminating(final BpmnElementContext context) {
     if (context.getIntent() == ProcessInstanceIntent.ELEMENT_TERMINATING) {
       throw new IllegalStateException(
@@ -192,7 +202,9 @@ public final class BpmnStateTransitionBehavior {
     return transitionTo(context, ProcessInstanceIntent.ELEMENT_TERMINATING);
   }
 
-  /** @return context with updated intent */
+  /**
+   * @return context with updated intent
+   */
   public BpmnElementContext transitionToTerminated(final BpmnElementContext context) {
     final var transitionedContext = transitionTo(context, ProcessInstanceIntent.ELEMENT_TERMINATED);
     metrics.elementInstanceTerminated(context);
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
index a95eebc..129a934 100755
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/common/CatchEventBehavior.java
@@ -83,7 +83,9 @@ public final class CatchEventBehavior {
     unsubscribeFromMessageEvents(context, sideEffects);
   }
 
-  /** @return either a failure or nothing */
+  /**
+   * @return either a failure or nothing
+   */
   public Either<Failure, Void> subscribeToEvents(
       final BpmnElementContext context,
       final ExecutableCatchEventSupplier supplier,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
index 316c57a..3de9df6 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/CommandProcessor.java
@@ -43,7 +43,9 @@ public interface CommandProcessor<T extends UnifiedRecordValue> {
 
   interface CommandControl<T> {
 
-    /** @return the key of the entity */
+    /**
+     * @return the key of the entity
+     */
     long accept(Intent newState, T updatedValue);
 
     void reject(RejectionType type, String reason);
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/ReadonlyProcessingContext.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/ReadonlyProcessingContext.java
index 0602d3f..062e46f 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/ReadonlyProcessingContext.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/ReadonlyProcessingContext.java
@@ -19,13 +19,19 @@ import java.util.function.BooleanSupplier;
 
 public interface ReadonlyProcessingContext {
 
-  /** @return the actor on which the processing runs */
+  /**
+   * @return the actor on which the processing runs
+   */
   ActorControl getActor();
 
-  /** @return the logstream, on which the processor runs */
+  /**
+   * @return the logstream, on which the processor runs
+   */
   LogStream getLogStream();
 
-  /** @return the reader, which is used by the processor to read next events */
+  /**
+   * @return the reader, which is used by the processor to read next events
+   */
   LogStreamReader getLogStreamReader();
 
   /**
@@ -34,27 +40,43 @@ public interface ReadonlyProcessingContext {
    */
   int getMaxFragmentSize();
 
-  /** @return the actual log stream writer, used to write any record */
+  /**
+   * @return the actual log stream writer, used to write any record
+   */
   TypedStreamWriter getLogStreamWriter();
 
-  /** @return the specific writers, like command, response, etc */
+  /**
+   * @return the specific writers, like command, response, etc
+   */
   Writers getWriters();
 
-  /** @return the pool, which contains the mapping from ValueType to UnpackedObject (record) */
+  /**
+   * @return the pool, which contains the mapping from ValueType to UnpackedObject (record)
+   */
   RecordValues getRecordValues();
 
-  /** @return the map of processors, which are executed during processing */
+  /**
+   * @return the map of processors, which are executed during processing
+   */
   RecordProcessorMap getRecordProcessorMap();
 
-  /** @return the state, where the data is stored during processing */
+  /**
+   * @return the state, where the data is stored during processing
+   */
   MutableZeebeState getZeebeState();
 
-  /** @return the transaction context for the current actor */
+  /**
+   * @return the transaction context for the current actor
+   */
   TransactionContext getTransactionContext();
 
-  /** @return condition which indicates, whether the processing should stop or not */
+  /**
+   * @return condition which indicates, whether the processing should stop or not
+   */
   BooleanSupplier getAbortCondition();
 
-  /** @return the consumer of events to apply their state changes */
+  /**
+   * @return the consumer of events to apply their state changes
+   */
   EventApplier getEventApplier();
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
index ed5df33..c34fe57 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/TypedRecordProcessor.java
@@ -19,13 +19,17 @@ import java.util.function.Consumer;
 public interface TypedRecordProcessor<T extends UnifiedRecordValue>
     extends StreamProcessorLifecycleAware {
 
-  /** @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer) */
+  /**
+   * @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer)
+   */
   default void processRecord(
       final TypedRecord<T> record,
       final TypedResponseWriter responseWriter,
       final TypedStreamWriter streamWriter) {}
 
-  /** @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer) */
+  /**
+   * @see #processRecord(TypedRecord, TypedResponseWriter, TypedStreamWriter, Consumer)
+   */
   default void processRecord(
       final TypedRecord<T> record,
       final TypedResponseWriter responseWriter,
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
index aabb075..1279f0e 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedCommandWriter.java
@@ -19,6 +19,8 @@ public interface TypedCommandWriter {
 
   void reset();
 
-  /** @return position of new record, negative value on failure */
+  /**
+   * @return position of new record, negative value on failure
+   */
   long flush();
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedEventWriter.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedEventWriter.java
index 133a09a..1852520 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedEventWriter.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/TypedEventWriter.java
@@ -37,6 +37,8 @@ public interface TypedEventWriter {
     return eventLength <= getMaxEventLength();
   }
 
-  /** @return the maximum event length */
+  /**
+   * @return the maximum event length
+   */
   int getMaxEventLength();
 }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
index f6df1fb..d55adc0 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/streamprocessor/writers/Writers.java
@@ -21,17 +21,23 @@ public final class Writers {
     this.response = response;
   }
 
-  /** @return the writer, which is used by the processors to write (follow-up) commands */
+  /**
+   * @return the writer, which is used by the processors to write (follow-up) commands
+   */
   public TypedCommandWriter command() {
     return stream;
   }
 
-  /** @return the writer, which is used by the processors to write command rejections */
+  /**
+   * @return the writer, which is used by the processors to write command rejections
+   */
   public TypedRejectionWriter rejection() {
     return stream;
   }
 
-  /** @return the writer of events that also changes state for each event it writes */
+  /**
+   * @return the writer of events that also changes state for each event it writes
+   */
   public StateWriter state() {
     return state;
   }
diff --git a/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Configuration.java b/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Configuration.java
index 3c69ffe..5dbbc1d 100644
--- a/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Configuration.java
+++ b/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Configuration.java
@@ -19,10 +19,14 @@ import java.util.Map;
 
 /** Encapsulates the configuration of the exporter. */
 public interface Configuration {
-  /** @return the configured ID of the exporter */
+  /**
+   * @return the configured ID of the exporter
+   */
   String getId();
 
-  /** @return raw map of the parsed arguments from the configuration file */
+  /**
+   * @return raw map of the parsed arguments from the configuration file
+   */
   Map<String, Object> getArguments();
 
   /**
diff --git a/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Context.java b/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Context.java
index 3650d76..5820a73 100644
--- a/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Context.java
+++ b/exporter-api/src/main/java/io/camunda/zeebe/exporter/api/context/Context.java
@@ -22,10 +22,14 @@ import org.slf4j.Logger;
 /** Encapsulates context associated with the exporter on open. */
 public interface Context {
 
-  /** @return pre-configured logger for this exporter */
+  /**
+   * @return pre-configured logger for this exporter
+   */
   Logger getLogger();
 
-  /** @return configuration for this exporter */
+  /**
+   * @return configuration for this exporter
+   */
   Configuration getConfiguration();
 
   /**
diff --git a/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchClient.java b/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchClient.java
index f58f72f..06d7c43 100644
--- a/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchClient.java
+++ b/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchClient.java
@@ -183,7 +183,9 @@ public class ElasticsearchClient {
     return bulkRequest.stream().mapToInt(String::length).sum();
   }
 
-  /** @return true if request was acknowledged */
+  /**
+   * @return true if request was acknowledged
+   */
   public boolean putIndexTemplate(final ValueType valueType) {
     final String templateName = indexPrefixForValueType(valueType);
     final String aliasName = aliasNameForValueType(valueType);
@@ -191,7 +193,9 @@ public class ElasticsearchClient {
     return putIndexTemplate(templateName, aliasName, filename);
   }
 
-  /** @return true if request was acknowledged */
+  /**
+   * @return true if request was acknowledged
+   */
   public boolean putIndexTemplate(
       final String templateName, final String aliasName, final String filename) {
     final Map<String, Object> template = getTemplateFromClasspath(filename);
@@ -262,7 +266,9 @@ public class ElasticsearchClient {
     }
   }
 
-  /** @return true if request was acknowledged */
+  /**
+   * @return true if request was acknowledged
+   */
   public boolean createComponentTemplate(final String templateName, final String filename) {
     final Map<String, Object> template = getTemplateFromClasspath(filename);
 
@@ -292,7 +298,9 @@ public class ElasticsearchClient {
     return template;
   }
 
-  /** @return true if request was acknowledged */
+  /**
+   * @return true if request was acknowledged
+   */
   private boolean putIndexTemplate(final String templateName, final Object body) {
     try {
       final var request = new Request(""PUT"", ""/_index_template/"" + templateName);
@@ -307,7 +315,9 @@ public class ElasticsearchClient {
     }
   }
 
-  /** @return true if request was acknowledged */
+  /**
+   * @return true if request was acknowledged
+   */
   private boolean putComponentTemplate(final String templateName, final Object body) {
     try {
       final var request = new Request(""PUT"", ""/_component_template/"" + templateName);
diff --git a/exporters/elasticsearch-exporter/src/test/java/io/camunda/zeebe/exporter/util/it/ExporterIntegrationRule.java b/exporters/elasticsearch-exporter/src/test/java/io/camunda/zeebe/exporter/util/it/ExporterIntegrationRule.java
index 63f5b86..332cf6e 100644
--- a/exporters/elasticsearch-exporter/src/test/java/io/camunda/zeebe/exporter/util/it/ExporterIntegrationRule.java
+++ b/exporters/elasticsearch-exporter/src/test/java/io/camunda/zeebe/exporter/util/it/ExporterIntegrationRule.java
@@ -149,7 +149,9 @@ public class ExporterIntegrationRule extends ExternalResource {
     return brokerRule.getBrokerCfg();
   }
 
-  /** @return the currently configured exporters */
+  /**
+   * @return the currently configured exporters
+   */
   public List<ExporterCfg> getConfiguredExporters() {
     return getBrokerConfig().getExporters().entrySet().stream()
         .filter(entry -> !entry.getKey().equals(TEST_RECORD_EXPORTER_ID))
@@ -157,7 +159,9 @@ public class ExporterIntegrationRule extends ExternalResource {
         .collect(Collectors.toList());
   }
 
-  /** @return true if any exporter has been configured for the broker, false otherwise */
+  /**
+   * @return true if any exporter has been configured for the broker, false otherwise
+   */
   public boolean hasConfiguredExporters() {
     return getConfiguredExporters().isEmpty();
   }
diff --git a/expression-language/src/main/java/io/camunda/zeebe/el/EvaluationResult.java b/expression-language/src/main/java/io/camunda/zeebe/el/EvaluationResult.java
index e387106..0fca478 100644
--- a/expression-language/src/main/java/io/camunda/zeebe/el/EvaluationResult.java
+++ b/expression-language/src/main/java/io/camunda/zeebe/el/EvaluationResult.java
@@ -16,10 +16,14 @@ import org.agrona.DirectBuffer;
 /** The result of an expression evaluation. */
 public interface EvaluationResult {
 
-  /** @return the (raw) expression as string */
+  /**
+   * @return the (raw) expression as string
+   */
   String getExpression();
 
-  /** @return {@code true} if the evaluation was not successful */
+  /**
+   * @return {@code true} if the evaluation was not successful
+   */
   boolean isFailure();
 
   /**
@@ -30,7 +34,9 @@ public interface EvaluationResult {
    */
   String getFailureMessage();
 
-  /** @return the type of the evaluation result, or {@code null} if the evaluation failed */
+  /**
+   * @return the type of the evaluation result, or {@code null} if the evaluation failed
+   */
   ResultType getType();
 
   /**
diff --git a/expression-language/src/main/java/io/camunda/zeebe/el/Expression.java b/expression-language/src/main/java/io/camunda/zeebe/el/Expression.java
index 3e53dc3..4773a66 100644
--- a/expression-language/src/main/java/io/camunda/zeebe/el/Expression.java
+++ b/expression-language/src/main/java/io/camunda/zeebe/el/Expression.java
@@ -12,7 +12,9 @@ import java.util.Optional;
 /** A parsed expression. */
 public interface Expression {
 
-  /** @return the (raw) expression as string */
+  /**
+   * @return the (raw) expression as string
+   */
   String getExpression();
 
   /**
@@ -27,7 +29,9 @@ public interface Expression {
    */
   boolean isStatic();
 
-  /** @return {@code true} if the expression is valid and can be evaluated */
+  /**
+   * @return {@code true} if the expression is valid and can be evaluated
+   */
   boolean isValid();
 
   /**
diff --git a/expression-language/src/main/java/io/camunda/zeebe/el/ExpressionLanguageFactory.java b/expression-language/src/main/java/io/camunda/zeebe/el/ExpressionLanguageFactory.java
index 247281d..2856abd 100644
--- a/expression-language/src/main/java/io/camunda/zeebe/el/ExpressionLanguageFactory.java
+++ b/expression-language/src/main/java/io/camunda/zeebe/el/ExpressionLanguageFactory.java
@@ -13,7 +13,9 @@ import io.camunda.zeebe.util.sched.clock.ActorClock;
 /** The entry point to create the default {@link ExpressionLanguage}. */
 public class ExpressionLanguageFactory {
 
-  /** @return a new instance of the {@link ExpressionLanguage} */
+  /**
+   * @return a new instance of the {@link ExpressionLanguage}
+   */
   public static ExpressionLanguage createExpressionLanguage() {
     return new FeelExpressionLanguage(ActorClock.current());
   }
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/admin/BrokerAdminRequest.java b/gateway/src/main/java/io/camunda/zeebe/gateway/admin/BrokerAdminRequest.java
index b7f6120..f1c6f01 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/admin/BrokerAdminRequest.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/admin/BrokerAdminRequest.java
@@ -50,7 +50,9 @@ public class BrokerAdminRequest extends BrokerRequest<Void> {
     return true;
   }
 
-  /** @return null to avoid writing any serialized value */
+  /**
+   * @return null to avoid writing any serialized value
+   */
   @Override
   public BufferWriter getRequestWriter() {
     return null;
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/RequestDispatchStrategy.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/RequestDispatchStrategy.java
index 622d6c4..a681efe 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/RequestDispatchStrategy.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/RequestDispatchStrategy.java
@@ -12,6 +12,8 @@ import io.camunda.zeebe.gateway.impl.broker.cluster.BrokerClusterState;
 /** Implementations must be thread-safe. */
 public interface RequestDispatchStrategy {
 
-  /** @return {@link BrokerClusterState#PARTITION_ID_NULL} if no partition can be determined */
+  /**
+   * @return {@link BrokerClusterState#PARTITION_ID_NULL} if no partition can be determined
+   */
   int determinePartition();
 }
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
index 7e35513..806bb94 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/broker/cluster/BrokerTopologyManagerImpl.java
@@ -36,7 +36,9 @@ public final class BrokerTopologyManagerImpl extends Actor
     topology = new AtomicReference<>(null);
   }
 
-  /** @return the current known cluster state or null if the topology was not fetched yet */
+  /**
+   * @return the current known cluster state or null if the topology was not fetched yet
+   */
   @Override
   public BrokerClusterState getTopology() {
     return topology.get();
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/InterceptorCfg.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/InterceptorCfg.java
index 0b51b6a..29e7209 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/InterceptorCfg.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/InterceptorCfg.java
@@ -23,7 +23,9 @@ public final class InterceptorCfg {
   private String jarPath;
   private String className;
 
-  /** @return true if the class must be loaded from an external JAR, false otherwise */
+  /**
+   * @return true if the class must be loaded from an external JAR, false otherwise
+   */
   public boolean isExternal() {
     return !isEmpty(jarPath);
   }
@@ -38,7 +40,9 @@ public final class InterceptorCfg {
     return id == null ? className : id;
   }
 
-  /** @param id the interceptor's new debug identifier */
+  /**
+   * @param id the interceptor's new debug identifier
+   */
   public void setId(final String id) {
     this.id = id;
   }
@@ -66,7 +70,9 @@ public final class InterceptorCfg {
     this.jarPath = jarPath;
   }
 
-  /** @return the fully qualified class name of the interceptor implementation */
+  /**
+   * @return the fully qualified class name of the interceptor implementation
+   */
   public String getClassName() {
     return className;
   }
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/query/impl/BrokerExecuteQuery.java b/gateway/src/main/java/io/camunda/zeebe/gateway/query/impl/BrokerExecuteQuery.java
index 11833c6..234685c 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/query/impl/BrokerExecuteQuery.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/query/impl/BrokerExecuteQuery.java
@@ -54,7 +54,9 @@ public final class BrokerExecuteQuery extends BrokerRequest<String> {
     return true;
   }
 
-  /** @return null to avoid writing any serialized value */
+  /**
+   * @return null to avoid writing any serialized value
+   */
   @Override
   public BufferWriter getRequestWriter() {
     return null;
diff --git a/journal/src/main/java/io/camunda/zeebe/journal/file/JournalSegmentFile.java b/journal/src/main/java/io/camunda/zeebe/journal/file/JournalSegmentFile.java
index 58c266a..f6cfdbd 100644
--- a/journal/src/main/java/io/camunda/zeebe/journal/file/JournalSegmentFile.java
+++ b/journal/src/main/java/io/camunda/zeebe/journal/file/JournalSegmentFile.java
@@ -37,7 +37,9 @@ final class JournalSegmentFile {
   private final File file;
   private Path fileMarkedForDeletion;
 
-  /** @throws IllegalArgumentException if {@code file} is not a valid segment file */
+  /**
+   * @throws IllegalArgumentException if {@code file} is not a valid segment file
+   */
   JournalSegmentFile(final File file) {
     this.file = file;
   }
diff --git a/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LogStream.java b/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LogStream.java
index 95b4070..1ea1006 100644
--- a/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LogStream.java
+++ b/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LogStream.java
@@ -21,12 +21,16 @@ import io.camunda.zeebe.util.sched.future.ActorFuture;
  */
 public interface LogStream extends AsyncClosable, AutoCloseable, HealthMonitorable {
 
-  /** @return a new default LogStream builder */
+  /**
+   * @return a new default LogStream builder
+   */
   static LogStreamBuilder builder() {
     return new LogStreamBuilderImpl();
   }
 
-  /** @return the partition id of the log stream */
+  /**
+   * @return the partition id of the log stream
+   */
   int getPartitionId();
 
   /**
@@ -36,7 +40,9 @@ public interface LogStream extends AsyncClosable, AutoCloseable, HealthMonitorab
    */
   String getLogName();
 
-  /** @return a future, when successfully completed it returns a newly created log stream reader */
+  /**
+   * @return a future, when successfully completed it returns a newly created log stream reader
+   */
   ActorFuture<LogStreamReader> newLogStreamReader();
 
   /**
diff --git a/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LoggedEvent.java b/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LoggedEvent.java
index 59070e3..7d226b7 100644
--- a/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LoggedEvent.java
+++ b/logstreams/src/main/java/io/camunda/zeebe/logstreams/log/LoggedEvent.java
@@ -13,7 +13,9 @@ import org.agrona.DirectBuffer;
 
 /** Represents an event on the log stream. */
 public interface LoggedEvent extends BufferWriter {
-  /** @return the event's position in the log. */
+  /**
+   * @return the event's position in the log.
+   */
   long getPosition();
 
   /**
@@ -22,10 +24,14 @@ public interface LoggedEvent extends BufferWriter {
    */
   long getSourceEventPosition();
 
-  /** @return the key of the event */
+  /**
+   * @return the key of the event
+   */
   long getKey();
 
-  /** @return the timestamp of the event, the ActorClock current time when the event was written */
+  /**
+   * @return the timestamp of the event, the ActorClock current time when the event was written
+   */
   long getTimestamp();
 
   /**
@@ -34,10 +40,14 @@ public interface LoggedEvent extends BufferWriter {
    */
   DirectBuffer getMetadata();
 
-  /** @return the offset of the event's metadata */
+  /**
+   * @return the offset of the event's metadata
+   */
   int getMetadataOffset();
 
-  /** @return the length of the event's metadata */
+  /**
+   * @return the length of the event's metadata
+   */
   short getMetadataLength();
 
   /**
@@ -53,10 +63,14 @@ public interface LoggedEvent extends BufferWriter {
    */
   DirectBuffer getValueBuffer();
 
-  /** @return the buffer offset where the event's value can read from */
+  /**
+   * @return the buffer offset where the event's value can read from
+   */
   int getValueOffset();
 
-  /** @return the length of the event's value */
+  /**
+   * @return the length of the event's value
+   */
   int getValueLength();
 
   /**
diff --git a/logstreams/src/test/java/io/camunda/zeebe/logstreams/util/SynchronousLogStream.java b/logstreams/src/test/java/io/camunda/zeebe/logstreams/util/SynchronousLogStream.java
index c884b14..41fd042 100644
--- a/logstreams/src/test/java/io/camunda/zeebe/logstreams/util/SynchronousLogStream.java
+++ b/logstreams/src/test/java/io/camunda/zeebe/logstreams/util/SynchronousLogStream.java
@@ -25,7 +25,9 @@ public interface SynchronousLogStream extends AutoCloseable {
 
   LogStream getAsyncLogStream();
 
-  /** @return the partition id of the log stream */
+  /**
+   * @return the partition id of the log stream
+   */
   int getPartitionId();
 
   /**
@@ -39,7 +41,9 @@ public interface SynchronousLogStream extends AutoCloseable {
   @Override
   void close();
 
-  /** @return the current commit position, or a negative value if no entry is committed. */
+  /**
+   * @return the current commit position, or a negative value if no entry is committed.
+   */
   long getLastWrittenPosition();
 
   /** sets the new commit position * */
@@ -47,9 +51,13 @@ public interface SynchronousLogStream extends AutoCloseable {
 
   LogStreamReader newLogStreamReader();
 
-  /** @return a new created log stream record writer */
+  /**
+   * @return a new created log stream record writer
+   */
   LogStreamRecordWriter newLogStreamRecordWriter();
 
-  /** @return a new created log stream batch writer */
+  /**
+   * @return a new created log stream batch writer
+   */
   LogStreamBatchWriter newLogStreamBatchWriter();
 }
diff --git a/protocol-test-util/src/main/java/io/camunda/zeebe/test/broker/protocol/ProtocolFactory.java b/protocol-test-util/src/main/java/io/camunda/zeebe/test/broker/protocol/ProtocolFactory.java
index d87535d..7dfcc5e 100644
--- a/protocol-test-util/src/main/java/io/camunda/zeebe/test/broker/protocol/ProtocolFactory.java
+++ b/protocol-test-util/src/main/java/io/camunda/zeebe/test/broker/protocol/ProtocolFactory.java
@@ -71,7 +71,9 @@ public final class ProtocolFactory {
     registerRandomizers();
   }
 
-  /** @return a stream of random records */
+  /**
+   * @return a stream of random records
+   */
   public Stream<Record<RecordValue>> generateRecords() {
     return generateRecords(UnaryOperator.identity());
   }
@@ -112,7 +114,9 @@ public final class ProtocolFactory {
         .map(valueType -> generateRecord(valueType, modifier));
   }
 
-  /** @return a random record with a random value type */
+  /**
+   * @return a random record with a random value type
+   */
   public Record<RecordValue> generateRecord() {
     return generateRecord(UnaryOperator.identity());
   }
@@ -184,7 +188,9 @@ public final class ProtocolFactory {
     return random.nextObject(objectClass);
   }
 
-  /** @return the seed used when creating this factory */
+  /**
+   * @return the seed used when creating this factory
+   */
   public long getSeed() {
     return parameters.getSeed();
   }
diff --git a/protocol-util/src/main/java/io/camunda/zeebe/protocol/util/ValueTypeMapping.java b/protocol-util/src/main/java/io/camunda/zeebe/protocol/util/ValueTypeMapping.java
index bfc589a..904ad50 100644
--- a/protocol-util/src/main/java/io/camunda/zeebe/protocol/util/ValueTypeMapping.java
+++ b/protocol-util/src/main/java/io/camunda/zeebe/protocol/util/ValueTypeMapping.java
@@ -94,7 +94,9 @@ public final class ValueTypeMapping {
     return typeInfo;
   }
 
-  /** @return the set of mappable value types */
+  /**
+   * @return the set of mappable value types
+   */
   public static Set<ValueType> getAcceptedValueTypes() {
     return Singleton.INSTANCE.acceptedValueTypes;
   }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/Record.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/Record.java
index 5a52c3f..89ca7eb 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/Record.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/Record.java
@@ -50,16 +50,24 @@ public interface Record<T extends RecordValue> extends JsonSerializable {
    */
   long getKey();
 
-  /** @return the unix timestamp at which the record was published on the partition. */
+  /**
+   * @return the unix timestamp at which the record was published on the partition.
+   */
   long getTimestamp();
 
-  /** @return the intent of the record */
+  /**
+   * @return the intent of the record
+   */
   Intent getIntent();
 
-  /** @return the partition ID on which the record was published */
+  /**
+   * @return the partition ID on which the record was published
+   */
   int getPartitionId();
 
-  /** @return the type of the record (event, command or command rejection) */
+  /**
+   * @return the type of the record (event, command or command rejection)
+   */
   RecordType getRecordType();
 
   /**
@@ -74,10 +82,14 @@ public interface Record<T extends RecordValue> extends JsonSerializable {
    */
   String getRejectionReason();
 
-  /** @return the version of the broker that wrote this record */
+  /**
+   * @return the version of the broker that wrote this record
+   */
   String getBrokerVersion();
 
-  /** @return the type of the record (e.g. job, process, process instance, etc.) */
+  /**
+   * @return the type of the record (e.g. job, process, process instance, etc.)
+   */
   ValueType getValueType();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/RecordValueWithVariables.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/RecordValueWithVariables.java
index 9ae0165..a302cb2 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/RecordValueWithVariables.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/RecordValueWithVariables.java
@@ -20,6 +20,8 @@ import java.util.Map;
 /** Shared behaviour for all record values containing a variables document. */
 public interface RecordValueWithVariables extends RecordValue {
 
-  /** @return the variables of this record. Can be empty. */
+  /**
+   * @return the variables of this record. Can be empty.
+   */
   Map<String, Object> getVariables();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DecisionEvaluationRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DecisionEvaluationRecordValue.java
index f1feca3..fe66728 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DecisionEvaluationRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DecisionEvaluationRecordValue.java
@@ -25,40 +25,64 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface DecisionEvaluationRecordValue extends RecordValue {
 
-  /** @return the key of the evaluated decision */
+  /**
+   * @return the key of the evaluated decision
+   */
   long getDecisionKey();
 
-  /** @return the id of the evaluated decision in the DMN */
+  /**
+   * @return the id of the evaluated decision in the DMN
+   */
   String getDecisionId();
 
-  /** @return the name of the evaluated decision in the DMN */
+  /**
+   * @return the name of the evaluated decision in the DMN
+   */
   String getDecisionName();
 
-  /** @return the version of the evaluated decision */
+  /**
+   * @return the version of the evaluated decision
+   */
   int getDecisionVersion();
 
-  /** @return the id of the DRG in the DMN the evaluated decision belongs to */
+  /**
+   * @return the id of the DRG in the DMN the evaluated decision belongs to
+   */
   String getDecisionRequirementsId();
 
-  /** @return the key of the deployed DRG the evaluated decision belongs to */
+  /**
+   * @return the key of the deployed DRG the evaluated decision belongs to
+   */
   long getDecisionRequirementsKey();
 
-  /** @return the output of the evaluated decision as JSON string */
+  /**
+   * @return the output of the evaluated decision as JSON string
+   */
   String getDecisionOutput();
 
-  /** @return the BPMN process id in which context the decision was evaluated */
+  /**
+   * @return the BPMN process id in which context the decision was evaluated
+   */
   String getBpmnProcessId();
 
-  /** @return the key of the process in which context the decision was evaluated */
+  /**
+   * @return the key of the process in which context the decision was evaluated
+   */
   long getProcessDefinitionKey();
 
-  /** @return the key of the process instance in which context the decision was evaluated */
+  /**
+   * @return the key of the process instance in which context the decision was evaluated
+   */
   long getProcessInstanceKey();
 
-  /** @return the id of the element in the BPMN in which context the decision was evaluated */
+  /**
+   * @return the id of the element in the BPMN in which context the decision was evaluated
+   */
   String getElementId();
 
-  /** @return the key of the element instance in which context the decision was evaluated */
+  /**
+   * @return the key of the element instance in which context the decision was evaluated
+   */
   long getElementInstanceKey();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentDistributionRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentDistributionRecordValue.java
index e41af2b..1738551 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentDistributionRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentDistributionRecordValue.java
@@ -23,6 +23,8 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface DeploymentDistributionRecordValue extends RecordValue {
 
-  /** @return the partition where the deployment should be distributed */
+  /**
+   * @return the partition where the deployment should be distributed
+   */
   int getPartitionId();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentRecordValue.java
index e34f2f9..49daedd 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/DeploymentRecordValue.java
@@ -33,15 +33,23 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface DeploymentRecordValue extends RecordValue {
-  /** @return the resources to deploy */
+  /**
+   * @return the resources to deploy
+   */
   List<DeploymentResource> getResources();
 
-  /** @return the deployed processes */
+  /**
+   * @return the deployed processes
+   */
   List<ProcessMetadataValue> getProcessesMetadata();
 
-  /** @return the deployed decisions */
+  /**
+   * @return the deployed decisions
+   */
   List<DecisionRecordValue> getDecisionsMetadata();
 
-  /** @return the deployed decision requirements (DRGs) */
+  /**
+   * @return the deployed decision requirements (DRGs)
+   */
   List<DecisionRequirementsMetadataValue> getDecisionRequirementsMetadata();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ErrorRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ErrorRecordValue.java
index 1415c18..404393f 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ErrorRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ErrorRecordValue.java
@@ -24,13 +24,19 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface ErrorRecordValue extends RecordValue {
 
-  /** @return the exception message, which causes this error record. */
+  /**
+   * @return the exception message, which causes this error record.
+   */
   String getExceptionMessage();
 
-  /** @return the stacktrace, which belongs to the exception */
+  /**
+   * @return the stacktrace, which belongs to the exception
+   */
   String getStacktrace();
 
-  /** @return the position of the event, which causes this error */
+  /**
+   * @return the position of the event, which causes this error
+   */
   long getErrorEventPosition();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedDecisionValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedDecisionValue.java
index b4390d8..ace45e4 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedDecisionValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedDecisionValue.java
@@ -27,22 +27,34 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface EvaluatedDecisionValue extends RecordValue {
 
-  /** @return the id of the evaluated decision */
+  /**
+   * @return the id of the evaluated decision
+   */
   String getDecisionId();
 
-  /** @return the name of the evaluated decision */
+  /**
+   * @return the name of the evaluated decision
+   */
   String getDecisionName();
 
-  /** @return the key of the evaluated decision */
+  /**
+   * @return the key of the evaluated decision
+   */
   long getDecisionKey();
 
-  /** @return the version of the evaluated decision */
+  /**
+   * @return the version of the evaluated decision
+   */
   long getDecisionVersion();
 
-  /** @return the type of the evaluated decision */
+  /**
+   * @return the type of the evaluated decision
+   */
   String getDecisionType();
 
-  /** @return the output of the evaluated decision as JSON string */
+  /**
+   * @return the output of the evaluated decision as JSON string
+   */
   String getDecisionOutput();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedInputValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedInputValue.java
index cd8ed00..be6d56f 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedInputValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedInputValue.java
@@ -27,12 +27,18 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface EvaluatedInputValue extends RecordValue {
 
-  /** @return the id of the evaluated input */
+  /**
+   * @return the id of the evaluated input
+   */
   String getInputId();
 
-  /** @return the name of the evaluated input */
+  /**
+   * @return the name of the evaluated input
+   */
   String getInputName();
 
-  /** @return the value of the evaluated input expression as JSON string */
+  /**
+   * @return the value of the evaluated input expression as JSON string
+   */
   String getInputValue();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedOutputValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedOutputValue.java
index 7794024..5f3017a 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedOutputValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/EvaluatedOutputValue.java
@@ -27,12 +27,18 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface EvaluatedOutputValue extends RecordValue {
 
-  /** @return the id of the evaluated output */
+  /**
+   * @return the id of the evaluated output
+   */
   String getOutputId();
 
-  /** @return the name of the evaluated output */
+  /**
+   * @return the name of the evaluated output
+   */
   String getOutputName();
 
-  /** @return the value of the evaluated output expression as JSON string */
+  /**
+   * @return the value of the evaluated output expression as JSON string
+   */
   String getOutputValue();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobBatchRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobBatchRecordValue.java
index b51393a..a40b3fa 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobBatchRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobBatchRecordValue.java
@@ -29,10 +29,14 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface JobBatchRecordValue extends RecordValue {
-  /** @return the type of the job */
+  /**
+   * @return the type of the job
+   */
   String getType();
 
-  /** @return the assigned worker to complete the job */
+  /**
+   * @return the assigned worker to complete the job
+   */
   String getWorker();
 
   /**
@@ -42,15 +46,23 @@ public interface JobBatchRecordValue extends RecordValue {
    */
   long getTimeout();
 
-  /** @return the number of jobs to handle */
+  /**
+   * @return the number of jobs to handle
+   */
   int getMaxJobsToActivate();
 
-  /** @return list of the keys from the jobs assigned to this batch */
+  /**
+   * @return list of the keys from the jobs assigned to this batch
+   */
   List<Long> getJobKeys();
 
-  /** @return the jobs assigned to this batch */
+  /**
+   * @return the jobs assigned to this batch
+   */
   List<JobRecordValue> getJobs();
 
-  /** @return the broker has more JobRecords that couldn't fit in this batch */
+  /**
+   * @return the broker has more JobRecords that couldn't fit in this batch
+   */
   boolean isTruncated();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobRecordValue.java
index 16dabbb..ecd5cd4 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/JobRecordValue.java
@@ -30,16 +30,24 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface JobRecordValue extends RecordValueWithVariables, ProcessInstanceRelated {
 
-  /** @return the type of the job */
+  /**
+   * @return the type of the job
+   */
   String getType();
 
-  /** @return user-defined headers associated with this job */
+  /**
+   * @return user-defined headers associated with this job
+   */
   Map<String, String> getCustomHeaders();
 
-  /** @return the assigned worker to complete the job */
+  /**
+   * @return the assigned worker to complete the job
+   */
   String getWorker();
 
-  /** @return remaining retries */
+  /**
+   * @return remaining retries
+   */
   int getRetries();
 
   /**
@@ -74,18 +82,28 @@ public interface JobRecordValue extends RecordValueWithVariables, ProcessInstanc
    */
   String getErrorCode();
 
-  /** @return the element id of the corresponding service task */
+  /**
+   * @return the element id of the corresponding service task
+   */
   String getElementId();
 
-  /** @return the element instance key of the corresponding service task */
+  /**
+   * @return the element instance key of the corresponding service task
+   */
   long getElementInstanceKey();
 
-  /** @return the bpmn process id of the corresponding process definition */
+  /**
+   * @return the bpmn process id of the corresponding process definition
+   */
   String getBpmnProcessId();
 
-  /** @return the version of the corresponding process definition */
+  /**
+   * @return the version of the corresponding process definition
+   */
   int getProcessDefinitionVersion();
 
-  /** @return the process key of the corresponding process definition */
+  /**
+   * @return the process key of the corresponding process definition
+   */
   long getProcessDefinitionKey();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MatchedRuleValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MatchedRuleValue.java
index 6cb83c5..49d10c0 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MatchedRuleValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MatchedRuleValue.java
@@ -28,7 +28,9 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface MatchedRuleValue extends RecordValue {
 
-  /** @return the id of the matched rule */
+  /**
+   * @return the id of the matched rule
+   */
   String getRuleId();
 
   /**
@@ -38,6 +40,8 @@ public interface MatchedRuleValue extends RecordValue {
    */
   int getRuleIndex();
 
-  /** @return the evaluated outputs of the rule */
+  /**
+   * @return the evaluated outputs of the rule
+   */
   List<EvaluatedOutputValue> getEvaluatedOutputs();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageRecordValue.java
index 109bd13..626dad1 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageRecordValue.java
@@ -28,10 +28,14 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface MessageRecordValue extends RecordValueWithVariables {
-  /** @return the name of the message */
+  /**
+   * @return the name of the message
+   */
   String getName();
 
-  /** @return the correlation key of the message */
+  /**
+   * @return the correlation key of the message
+   */
   String getCorrelationKey();
 
   /**
@@ -42,7 +46,9 @@ public interface MessageRecordValue extends RecordValueWithVariables {
    */
   String getMessageId();
 
-  /** @return the time to live of the message */
+  /**
+   * @return the time to live of the message
+   */
   long getTimeToLive();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageStartEventSubscriptionRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageStartEventSubscriptionRecordValue.java
index 79e70d9..cdd9d37 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageStartEventSubscriptionRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageStartEventSubscriptionRecordValue.java
@@ -29,16 +29,24 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface MessageStartEventSubscriptionRecordValue extends RecordValueWithVariables {
 
-  /** @return the process key tied to the subscription */
+  /**
+   * @return the process key tied to the subscription
+   */
   long getProcessDefinitionKey();
 
-  /** @return the BPMN process id tied to the subscription */
+  /**
+   * @return the BPMN process id tied to the subscription
+   */
   String getBpmnProcessId();
 
-  /** @return the id of the start event tied to the subscription */
+  /**
+   * @return the id of the start event tied to the subscription
+   */
   String getStartEventId();
 
-  /** @return the name of the message */
+  /**
+   * @return the name of the message
+   */
   String getMessageName();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageSubscriptionRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageSubscriptionRecordValue.java
index 75b7e86..0e43bac 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageSubscriptionRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/MessageSubscriptionRecordValue.java
@@ -30,23 +30,35 @@ import org.immutables.value.Value;
 public interface MessageSubscriptionRecordValue
     extends RecordValueWithVariables, ProcessInstanceRelated {
 
-  /** @return the process instance key tied to the subscription */
+  /**
+   * @return the process instance key tied to the subscription
+   */
   @Override
   long getProcessInstanceKey();
 
-  /** @return the element instance key tied to the subscription */
+  /**
+   * @return the element instance key tied to the subscription
+   */
   long getElementInstanceKey();
 
-  /** @return the BPMN process id tied to the subscription */
+  /**
+   * @return the BPMN process id tied to the subscription
+   */
   String getBpmnProcessId();
 
-  /** @return the name of the message */
+  /**
+   * @return the name of the message
+   */
   String getMessageName();
 
-  /** @return the correlation key */
+  /**
+   * @return the correlation key
+   */
   String getCorrelationKey();
 
-  /** @return the key of the correlated message */
+  /**
+   * @return the key of the correlated message
+   */
   long getMessageKey();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessEventRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessEventRecordValue.java
index 90811cd..b4c8977 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessEventRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessEventRecordValue.java
@@ -40,12 +40,18 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface ProcessEventRecordValue extends RecordValueWithVariables, ProcessInstanceRelated {
 
-  /** @return the key identifying the event's scope */
+  /**
+   * @return the key identifying the event's scope
+   */
   long getScopeKey();
 
-  /** @return the ID of the element which should react to the event */
+  /**
+   * @return the ID of the element which should react to the event
+   */
   String getTargetElementId();
 
-  /** @return the key of the deployed process this instance belongs to. */
+  /**
+   * @return the key of the deployed process this instance belongs to.
+   */
   long getProcessDefinitionKey();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceCreationRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceCreationRecordValue.java
index 08d8ae7..ca80008 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceCreationRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceCreationRecordValue.java
@@ -23,12 +23,18 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface ProcessInstanceCreationRecordValue
     extends RecordValueWithVariables, ProcessInstanceRelated {
-  /** @return the BPMN process id to create a process from */
+  /**
+   * @return the BPMN process id to create a process from
+   */
   String getBpmnProcessId();
 
-  /** @return the version of the BPMN process to create a process from */
+  /**
+   * @return the version of the BPMN process to create a process from
+   */
   int getVersion();
 
-  /** @return the unique key of the BPMN process definition to create a process from */
+  /**
+   * @return the unique key of the BPMN process definition to create a process from
+   */
   long getProcessDefinitionKey();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRecordValue.java
index 7582651..86d7618 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRecordValue.java
@@ -28,20 +28,30 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface ProcessInstanceRecordValue extends RecordValue, ProcessInstanceRelated {
-  /** @return the BPMN process id this process instance belongs to. */
+  /**
+   * @return the BPMN process id this process instance belongs to.
+   */
   String getBpmnProcessId();
 
-  /** @return the version of the deployed process this instance belongs to. */
+  /**
+   * @return the version of the deployed process this instance belongs to.
+   */
   int getVersion();
 
-  /** @return the key of the deployed process this instance belongs to. */
+  /**
+   * @return the key of the deployed process this instance belongs to.
+   */
   long getProcessDefinitionKey();
 
-  /** @return the key of the process instance */
+  /**
+   * @return the key of the process instance
+   */
   @Override
   long getProcessInstanceKey();
 
-  /** @return the id of the current process element, or empty if the id is not specified. */
+  /**
+   * @return the id of the current process element, or empty if the id is not specified.
+   */
   String getElementId();
 
   /**
@@ -50,7 +60,9 @@ public interface ProcessInstanceRecordValue extends RecordValue, ProcessInstance
    */
   long getFlowScopeKey();
 
-  /** @return the BPMN type of the current process element. */
+  /**
+   * @return the BPMN type of the current process element.
+   */
   BpmnElementType getBpmnElementType();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRelated.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRelated.java
index 0c8edf5..ca33fea 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRelated.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceRelated.java
@@ -17,6 +17,8 @@ package io.camunda.zeebe.protocol.record.value;
 
 public interface ProcessInstanceRelated {
 
-  /** @return the key of the corresponding process instance */
+  /**
+   * @return the key of the corresponding process instance
+   */
   long getProcessInstanceKey();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceResultRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceResultRecordValue.java
index 9505473..48ee9d0 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceResultRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessInstanceResultRecordValue.java
@@ -29,16 +29,24 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface ProcessInstanceResultRecordValue
     extends RecordValueWithVariables, ProcessInstanceRelated {
-  /** @return the BPMN process id this process instance belongs to. */
+  /**
+   * @return the BPMN process id this process instance belongs to.
+   */
   String getBpmnProcessId();
 
-  /** @return the version of the deployed process this instance belongs to. */
+  /**
+   * @return the version of the deployed process this instance belongs to.
+   */
   int getVersion();
 
-  /** @return the key of the deployed process this instance belongs to. */
+  /**
+   * @return the key of the deployed process this instance belongs to.
+   */
   long getProcessDefinitionKey();
 
-  /** @return the key of the process instance */
+  /**
+   * @return the key of the process instance
+   */
   @Override
   long getProcessInstanceKey();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessMessageSubscriptionRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessMessageSubscriptionRecordValue.java
index b1023ca..f4703d4 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessMessageSubscriptionRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/ProcessMessageSubscriptionRecordValue.java
@@ -29,26 +29,40 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface ProcessMessageSubscriptionRecordValue
     extends RecordValueWithVariables, ProcessInstanceRelated {
-  /** @return the process instance key */
+  /**
+   * @return the process instance key
+   */
   @Override
   long getProcessInstanceKey();
 
-  /** @return the element instance key */
+  /**
+   * @return the element instance key
+   */
   long getElementInstanceKey();
 
-  /** @return the BPMN process id */
+  /**
+   * @return the BPMN process id
+   */
   String getBpmnProcessId();
 
-  /** @return the key of the correlated message */
+  /**
+   * @return the key of the correlated message
+   */
   long getMessageKey();
 
-  /** @return the message name */
+  /**
+   * @return the message name
+   */
   String getMessageName();
 
-  /** @return the correlation key */
+  /**
+   * @return the correlation key
+   */
   String getCorrelationKey();
 
-  /** @return the id of the element tied to the subscription. */
+  /**
+   * @return the id of the element tied to the subscription.
+   */
   String getElementId();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/TimerRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/TimerRecordValue.java
index 9b6d406..395532f 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/TimerRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/TimerRecordValue.java
@@ -29,17 +29,25 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface TimerRecordValue extends RecordValue, ProcessInstanceRelated {
 
-  /** @return the key of the process in which this timer was created */
+  /**
+   * @return the key of the process in which this timer was created
+   */
   long getProcessDefinitionKey();
 
-  /** @return the key of the related element instance. */
+  /**
+   * @return the key of the related element instance.
+   */
   long getElementInstanceKey();
 
-  /** @return the key of the related process instance */
+  /**
+   * @return the key of the related process instance
+   */
   @Override
   long getProcessInstanceKey();
 
-  /** @return the due date of the timer as Unix timestamp in millis. */
+  /**
+   * @return the due date of the timer as Unix timestamp in millis.
+   */
   long getDueDate();
 
   /**
@@ -52,6 +60,8 @@ public interface TimerRecordValue extends RecordValue, ProcessInstanceRelated {
    */
   String getTargetElementId();
 
-  /** @return the number of times this timer should trigger */
+  /**
+   * @return the number of times this timer should trigger
+   */
   int getRepetitions();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableDocumentRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableDocumentRecordValue.java
index de09594..40d5819 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableDocumentRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableDocumentRecordValue.java
@@ -23,7 +23,9 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface VariableDocumentRecordValue extends RecordValueWithVariables {
 
-  /** @return the scope key associated with the variable document */
+  /**
+   * @return the scope key associated with the variable document
+   */
   long getScopeKey();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableRecordValue.java
index 56cb966..c8ec15c 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/VariableRecordValue.java
@@ -29,22 +29,34 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface VariableRecordValue extends RecordValue, ProcessInstanceRelated {
 
-  /** @return the name of the variable. */
+  /**
+   * @return the name of the variable.
+   */
   String getName();
 
-  /** @return the value of the variable as JSON string. */
+  /**
+   * @return the value of the variable as JSON string.
+   */
   String getValue();
 
-  /** @return the key of the scope the variable belongs to. */
+  /**
+   * @return the key of the scope the variable belongs to.
+   */
   long getScopeKey();
 
-  /** @return the key of the process instance the variable belongs to */
+  /**
+   * @return the key of the process instance the variable belongs to
+   */
   @Override
   long getProcessInstanceKey();
 
-  /** @return the key of the process the variable belongs to */
+  /**
+   * @return the key of the process the variable belongs to
+   */
   long getProcessDefinitionKey();
 
-  /** @return the BPMN process id this process instance belongs to. */
+  /**
+   * @return the BPMN process id this process instance belongs to.
+   */
   String getBpmnProcessId();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRecordValue.java
index 30d3fe0..89b41fa 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRecordValue.java
@@ -28,22 +28,34 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface DecisionRecordValue extends RecordValue {
 
-  /** @return the ID of the decision in the DMN */
+  /**
+   * @return the ID of the decision in the DMN
+   */
   String getDecisionId();
 
-  /** @return the name of the decision in the DMN */
+  /**
+   * @return the name of the decision in the DMN
+   */
   String getDecisionName();
 
-  /** @return the version of the deployed decision */
+  /**
+   * @return the version of the deployed decision
+   */
   int getVersion();
 
-  /** @return the key of the deployed decision */
+  /**
+   * @return the key of the deployed decision
+   */
   long getDecisionKey();
 
-  /** @return the ID of the DRG in the DMN this decision belongs to */
+  /**
+   * @return the ID of the DRG in the DMN this decision belongs to
+   */
   String getDecisionRequirementsId();
 
-  /** @return the key of the deployed DRG this decision belongs to */
+  /**
+   * @return the key of the deployed DRG this decision belongs to
+   */
   long getDecisionRequirementsKey();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsMetadataValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsMetadataValue.java
index 1c947c1..07f374f 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsMetadataValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsMetadataValue.java
@@ -27,25 +27,39 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface DecisionRequirementsMetadataValue {
 
-  /** @return the ID of the DRG in the DMN */
+  /**
+   * @return the ID of the DRG in the DMN
+   */
   String getDecisionRequirementsId();
 
-  /** @return the name of the DRG in the DMN */
+  /**
+   * @return the name of the DRG in the DMN
+   */
   String getDecisionRequirementsName();
 
-  /** @return the version of the deployed DRG */
+  /**
+   * @return the version of the deployed DRG
+   */
   int getDecisionRequirementsVersion();
 
-  /** @return the key of the deployed DRG */
+  /**
+   * @return the key of the deployed DRG
+   */
   long getDecisionRequirementsKey();
 
-  /** @return the namespace of the DRG in the DMN */
+  /**
+   * @return the namespace of the DRG in the DMN
+   */
   String getNamespace();
 
-  /** @return the name of the resource through which this DRG was deployed */
+  /**
+   * @return the name of the resource through which this DRG was deployed
+   */
   String getResourceName();
 
-  /** @return the checksum of the DMN resource (MD5) */
+  /**
+   * @return the checksum of the DMN resource (MD5)
+   */
   byte[] getChecksum();
 
   /**
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsRecordValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsRecordValue.java
index 0ff2b58..a19a4fb 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsRecordValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DecisionRequirementsRecordValue.java
@@ -28,6 +28,8 @@ import org.immutables.value.Value;
 public interface DecisionRequirementsRecordValue
     extends RecordValue, DecisionRequirementsMetadataValue {
 
-  /** @return the binary DMN resource */
+  /**
+   * @return the binary DMN resource
+   */
   byte[] getResource();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DeploymentResource.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DeploymentResource.java
index 8783f70..18dceb7 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DeploymentResource.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/DeploymentResource.java
@@ -23,9 +23,13 @@ import org.immutables.value.Value;
 @ImmutableProtocol
 public interface DeploymentResource {
 
-  /** @return the resource contents */
+  /**
+   * @return the resource contents
+   */
   byte[] getResource();
 
-  /** @return the name of the resource */
+  /**
+   * @return the name of the resource
+   */
   String getResourceName();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/Process.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/Process.java
index 567a2e6..37888b7 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/Process.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/Process.java
@@ -22,6 +22,8 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface Process extends ProcessMetadataValue {
-  /** @return returns the corresponding binary resource */
+  /**
+   * @return returns the corresponding binary resource
+   */
   byte[] getResource();
 }
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/ProcessMetadataValue.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/ProcessMetadataValue.java
index 39e8531..287f539 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/ProcessMetadataValue.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/deployment/ProcessMetadataValue.java
@@ -23,19 +23,29 @@ import org.immutables.value.Value;
 @Value.Immutable
 @ImmutableProtocol
 public interface ProcessMetadataValue extends RecordValue {
-  /** @return the bpmn process ID of this process */
+  /**
+   * @return the bpmn process ID of this process
+   */
   String getBpmnProcessId();
 
-  /** @return the version of this process */
+  /**
+   * @return the version of this process
+   */
   int getVersion();
 
-  /** @return the key of this process */
+  /**
+   * @return the key of this process
+   */
   long getProcessDefinitionKey();
 
-  /** @return the name of the resource through which this process was deployed */
+  /**
+   * @return the name of the resource through which this process was deployed
+   */
   String getResourceName();
 
-  /** @return the checksum of the process (MD5) */
+  /**
+   * @return the checksum of the process (MD5)
+   */
   byte[] getChecksum();
 
   /**
diff --git a/qa/update-tests/src/test/java/io/camunda/zeebe/test/ContainerState.java b/qa/update-tests/src/test/java/io/camunda/zeebe/test/ContainerState.java
index c384176..24a5c5c 100644
--- a/qa/update-tests/src/test/java/io/camunda/zeebe/test/ContainerState.java
+++ b/qa/update-tests/src/test/java/io/camunda/zeebe/test/ContainerState.java
@@ -186,7 +186,9 @@ final class ContainerState implements CloseableResource {
         String.format(""\""intent\"":\""%s\"""", intent));
   }
 
-  /** @return true if the message was found in the specified intent. Otherwise, returns false */
+  /**
+   * @return true if the message was found in the specified intent. Otherwise, returns false
+   */
   public boolean hasMessageInState(final String name, final String intent) {
     return hasLogContaining(
         String.format(""\""name\"":\""%s\"""", name), String.format(""\""intent\"":\""%s\"""", intent));
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistableSnapshot.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistableSnapshot.java
index f38ab14..71687ff 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistableSnapshot.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistableSnapshot.java
@@ -27,7 +27,9 @@ public interface PersistableSnapshot {
    */
   ActorFuture<PersistedSnapshot> persist();
 
-  /** @return the snapshotId of the snapshot */
+  /**
+   * @return the snapshotId of the snapshot
+   */
   SnapshotId snapshotId();
 
   /**
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshot.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshot.java
index 2236487..0693972 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshot.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshot.java
@@ -51,7 +51,9 @@ public interface PersistedSnapshot extends CloseableSilently {
   /** Deletes the snapshot. */
   void delete();
 
-  /** @return a path to the snapshot location */
+  /**
+   * @return a path to the snapshot location
+   */
   Path getPath();
 
   /**
@@ -62,7 +64,9 @@ public interface PersistedSnapshot extends CloseableSilently {
    */
   long getCompactionBound();
 
-  /** @return the identifier of the snapshot */
+  /**
+   * @return the identifier of the snapshot
+   */
   String getId();
 
   /**
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshotStore.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshotStore.java
index f224382..1025955 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshotStore.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/PersistedSnapshotStore.java
@@ -32,7 +32,9 @@ public interface PersistedSnapshotStore extends CloseableSilently {
    */
   boolean hasSnapshotId(String id);
 
-  /** @return the latest {@link PersistedSnapshot} if exists */
+  /**
+   * @return the latest {@link PersistedSnapshot} if exists
+   */
   Optional<PersistedSnapshot> getLatestSnapshot();
 
   /**
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotChunk.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotChunk.java
index 484ab2a..c2f9b6b 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotChunk.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotChunk.java
@@ -10,21 +10,33 @@ package io.camunda.zeebe.snapshots;
 /** A chunk of an already persisted Snapshot. */
 public interface SnapshotChunk {
 
-  /** @return a unique snapshot identifier * */
+  /**
+   * @return a unique snapshot identifier *
+   */
   String getSnapshotId();
 
-  /** @return the total count of snapshot chunks, which correspond to the same snapshot */
+  /**
+   * @return the total count of snapshot chunks, which correspond to the same snapshot
+   */
   int getTotalCount();
 
-  /** @return the name of the current chunk (e.g. file name) */
+  /**
+   * @return the name of the current chunk (e.g. file name)
+   */
   String getChunkName();
 
-  /** @return the checksum of the content, can be use to verify the integrity of the content */
+  /**
+   * @return the checksum of the content, can be use to verify the integrity of the content
+   */
   long getChecksum();
 
-  /** @return the content of the current chunk */
+  /**
+   * @return the content of the current chunk
+   */
   byte[] getContent();
 
-  /** @return the checksum of the entire snapshot */
+  /**
+   * @return the checksum of the entire snapshot
+   */
   long getSnapshotChecksum();
 }
diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotId.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotId.java
index e053809..c88ddd1 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotId.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/SnapshotId.java
@@ -12,16 +12,24 @@ import java.util.Comparator;
 /** Represents an identifier of an {@link PersistedSnapshot}. */
 public interface SnapshotId extends Comparable<SnapshotId> {
 
-  /** @return the index of the snapshot */
+  /**
+   * @return the index of the snapshot
+   */
   long getIndex();
 
-  /** @return the term when the snapshot was taken */
+  /**
+   * @return the term when the snapshot was taken
+   */
   long getTerm();
 
-  /** @return the processed position when the snapshot was taken */
+  /**
+   * @return the processed position when the snapshot was taken
+   */
   long getProcessedPosition();
 
-  /** @return the exported position when the snapshot was taken */
+  /**
+   * @return the exported position when the snapshot was taken
+   */
   long getExportedPosition();
 
   /**
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/Strings.java b/test-util/src/main/java/io/camunda/zeebe/test/util/Strings.java
index c9d1b5d..a92e173 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/Strings.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/Strings.java
@@ -11,7 +11,9 @@ import java.util.UUID;
 
 public final class Strings {
 
-  /** @return a prefixed random UUID which can be used as a valid ID for a BPMN element */
+  /**
+   * @return a prefixed random UUID which can be used as a valid ID for a BPMN element
+   */
   public static String newRandomValidBpmnId() {
     return ""id-"" + UUID.randomUUID().toString();
   }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/asserts/DirectoryAssert.java b/test-util/src/main/java/io/camunda/zeebe/test/util/asserts/DirectoryAssert.java
index ae0ee35..59a7e35 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/asserts/DirectoryAssert.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/asserts/DirectoryAssert.java
@@ -91,7 +91,9 @@ public final class DirectoryAssert extends AbstractPathAssert<DirectoryAssert> {
     return myself;
   }
 
-  /** @see #isDirectoryContainingExactly(Collection) */
+  /**
+   * @see #isDirectoryContainingExactly(Collection)
+   */
   public DirectoryAssert isDirectoryContainingExactly(final Path... paths) {
     return isDirectoryContainingExactly(Arrays.asList(paths));
   }
@@ -134,7 +136,9 @@ public final class DirectoryAssert extends AbstractPathAssert<DirectoryAssert> {
     return myself;
   }
 
-  /** @see #isDirectoryContainingAllOf(Collection) */
+  /**
+   * @see #isDirectoryContainingAllOf(Collection)
+   */
   public DirectoryAssert isDirectoryContainingAllOf(final Path... paths) {
     return isDirectoryContainingAllOf(Arrays.asList(paths));
   }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/RandomProcessGenerator.java b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/RandomProcessGenerator.java
index c53157f..75515e5 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/RandomProcessGenerator.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/RandomProcessGenerator.java
@@ -61,7 +61,9 @@ public final class RandomProcessGenerator {
     processBuilder = new ProcessBuilder(context);
   }
 
-  /** @return the build process and any potentially called child processes */
+  /**
+   * @return the build process and any potentially called child processes
+   */
   public List<BpmnModelInstance> buildProcesses() {
     return processBuilder.buildProcess();
   }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/blocks/ProcessBuilder.java b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/blocks/ProcessBuilder.java
index 8c94e1e..30bdea5 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/blocks/ProcessBuilder.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/bpmn/random/blocks/ProcessBuilder.java
@@ -76,7 +76,9 @@ public final class ProcessBuilder {
     return hasEventSubProcess;
   }
 
-  /** @return the build process and any potentially called child processes */
+  /**
+   * @return the build process and any potentially called child processes
+   */
   public List<BpmnModelInstance> buildProcess() {
     final var result = new ArrayList<BpmnModelInstance>();
 
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
index a56ae44..a0b126b 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
@@ -78,7 +78,9 @@ public final class ProcessInstanceRecordStream
     return valueFilter(v -> v.getParentElementInstanceKey() == parentElementInstanceKey);
   }
 
-  /** @return stream with only records for the process instance (i.e. root scope of the instance) */
+  /**
+   * @return stream with only records for the process instance (i.e. root scope of the instance)
+   */
   public ProcessInstanceRecordStream filterRootScope() {
     return filter(r -> r.getKey() == r.getValue().getProcessInstanceKey());
   }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/record/VariableRecordStream.java b/test-util/src/main/java/io/camunda/zeebe/test/util/record/VariableRecordStream.java
index df5ced7..1a76ceb 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/record/VariableRecordStream.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/record/VariableRecordStream.java
@@ -39,7 +39,9 @@ public final class VariableRecordStream
     return valueFilter(v -> v.getProcessInstanceKey() == processInstanceKey);
   }
 
-  /** @return only the variables that are created in the process instance scope (i.e. root scope) */
+  /**
+   * @return only the variables that are created in the process instance scope (i.e. root scope)
+   */
   public VariableRecordStream filterProcessInstanceScope() {
     return valueFilter(v -> v.getScopeKey() == v.getProcessInstanceKey());
   }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/ClientRequest.java b/transport/src/main/java/io/camunda/zeebe/transport/ClientRequest.java
index 5462d21..ddd6f42 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/ClientRequest.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/ClientRequest.java
@@ -11,9 +11,13 @@ import io.camunda.zeebe.util.buffer.BufferWriter;
 
 public interface ClientRequest extends BufferWriter {
 
-  /** @return the partition id to which the request should be send to */
+  /**
+   * @return the partition id to which the request should be send to
+   */
   int getPartitionId();
 
-  /** @return the type of this request */
+  /**
+   * @return the type of this request
+   */
   RequestType getRequestType();
 }
diff --git a/transport/src/main/java/io/camunda/zeebe/transport/ServerResponse.java b/transport/src/main/java/io/camunda/zeebe/transport/ServerResponse.java
index e1ecf95..6e0ec00 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/ServerResponse.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/ServerResponse.java
@@ -11,9 +11,13 @@ import io.camunda.zeebe.util.buffer.BufferWriter;
 
 public interface ServerResponse extends BufferWriter {
 
-  /** @return the id of the corresponding request */
+  /**
+   * @return the id of the corresponding request
+   */
   long getRequestId();
 
-  /** @return the partition id on which the requests was received and should be send back */
+  /**
+   * @return the partition id on which the requests was received and should be send back
+   */
   int getPartitionId();
 }
diff --git a/util/src/main/java/io/camunda/zeebe/util/VersionUtil.java b/util/src/main/java/io/camunda/zeebe/util/VersionUtil.java
index 2d312e4..16cbb6c 100644
--- a/util/src/main/java/io/camunda/zeebe/util/VersionUtil.java
+++ b/util/src/main/java/io/camunda/zeebe/util/VersionUtil.java
@@ -27,7 +27,9 @@ public final class VersionUtil {
 
   private VersionUtil() {}
 
-  /** @return the current version or 'development' if none can be determined. */
+  /**
+   * @return the current version or 'development' if none can be determined.
+   */
   public static String getVersion() {
     if (version == null) {
       // read version from file
@@ -52,7 +54,9 @@ public final class VersionUtil {
     return versionLowerCase;
   }
 
-  /** @return the previous stable version or null if none was found. */
+  /**
+   * @return the previous stable version or null if none was found.
+   */
   public static String getPreviousVersion() {
     if (lastVersion == null) {
       lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);
diff --git a/util/src/main/java/io/camunda/zeebe/util/buffer/BufferUtil.java b/util/src/main/java/io/camunda/zeebe/util/buffer/BufferUtil.java
index 3061de9..cf83ece 100644
--- a/util/src/main/java/io/camunda/zeebe/util/buffer/BufferUtil.java
+++ b/util/src/main/java/io/camunda/zeebe/util/buffer/BufferUtil.java
@@ -174,7 +174,9 @@ public final class BufferUtil {
     return builder.toString();
   }
 
-  /** @return a new array that is a copy of the buffer's contents */
+  /**
+   * @return a new array that is a copy of the buffer's contents
+   */
   public static byte[] bufferAsArray(final DirectBuffer buffer) {
     final byte[] array;
 
diff --git a/util/src/main/java/io/camunda/zeebe/util/buffer/BufferWriter.java b/util/src/main/java/io/camunda/zeebe/util/buffer/BufferWriter.java
index a2820d7..0af2ff8 100644
--- a/util/src/main/java/io/camunda/zeebe/util/buffer/BufferWriter.java
+++ b/util/src/main/java/io/camunda/zeebe/util/buffer/BufferWriter.java
@@ -17,7 +17,9 @@ import org.agrona.MutableDirectBuffer;
  * value changes happening between setter and <em>#write</em> invocations affect the writer.
  */
 public interface BufferWriter {
-  /** @return the number of bytes that this writer is going to write */
+  /**
+   * @return the number of bytes that this writer is going to write
+   */
   int getLength();
 
   /**
diff --git a/zb-db/src/main/java/io/camunda/zeebe/db/impl/rocksdb/ZeebeRocksDbFactory.java b/zb-db/src/main/java/io/camunda/zeebe/db/impl/rocksdb/ZeebeRocksDbFactory.java
index 1fbc6ef..4c62b59 100644
--- a/zb-db/src/main/java/io/camunda/zeebe/db/impl/rocksdb/ZeebeRocksDbFactory.java
+++ b/zb-db/src/main/java/io/camunda/zeebe/db/impl/rocksdb/ZeebeRocksDbFactory.java
@@ -126,7 +126,9 @@ public final class ZeebeRocksDbFactory<ColumnFamilyType extends Enum<ColumnFamil
     return dbOptions;
   }
 
-  /** @return Options which are used on all column families */
+  /**
+   * @return Options which are used on all column families
+   */
   ColumnFamilyOptions createColumnFamilyOptions(final List<AutoCloseable> closeables) {
     final var userProvidedColumnFamilyOptions = rocksDbConfiguration.getColumnFamilyOptions();
     final var hasUserOptions = !userProvidedColumnFamilyOptions.isEmpty();

diff --git a/dispatcher/src/test/java/io/camunda/zeebe/dispatcher/integration/ActorFrameworkIntegrationTest.java b/dispatcher/src/test/java/io/camunda/zeebe/dispatcher/integration/ActorFrameworkIntegrationTest.java
index 22efcc0..543c0a5 100644
--- a/dispatcher/src/test/java/io/camunda/zeebe/dispatcher/integration/ActorFrameworkIntegrationTest.java
+++ b/dispatcher/src/test/java/io/camunda/zeebe/dispatcher/integration/ActorFrameworkIntegrationTest.java
@@ -164,7 +164,7 @@ public final class ActorFrameworkIntegrationTest {
     }
   }
 
-  class ClaimingProducer extends Actor {
+  final class ClaimingProducer extends Actor {
     final CountDownLatch latch = new CountDownLatch(1);
 
     final int totalWork = 10_000;
@@ -172,13 +172,14 @@ public final class ActorFrameworkIntegrationTest {
     final Dispatcher dispatcher;
     final ClaimedFragment claim = new ClaimedFragment();
     int counter = 1;
+
     ClaimingProducer(final Dispatcher dispatcher) {
       this.dispatcher = dispatcher;
-    }    final Runnable produce = this::produce;
+    }
 
     @Override
     protected void onActorStarted() {
-      actor.run(produce);
+      actor.run(this::produce);
     }
 
     void produce() {
@@ -189,12 +190,10 @@ public final class ActorFrameworkIntegrationTest {
 
       if (counter < totalWork) {
         actor.yieldThread();
-        actor.run(produce);
+        actor.run(this::produce);
       } else {
         latch.countDown();
       }
     }
-
-
   }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
index 0796332..679da9c 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceRejectionTest.java
@@ -253,8 +253,8 @@ public class ModifyProcessInstanceRejectionTest {
         .hasRejectionReason(
             String.format(
                 """"""
-                Expected to modify instance of process '%s' but it contains one or more variable instructions \
-                with a scope element id that could not be found: 'C', 'D'"""""",
+                Expected to modify instance of process '%s' but it contains one or more variable \
+                instructions with a scope element id that could not be found: 'C', 'D'"""""",
                 PROCESS_ID));
   }
 
@@ -299,9 +299,9 @@ public class ModifyProcessInstanceRejectionTest {
         .hasRejectionReason(
             String.format(
                 """"""
-                Expected to modify instance of process '%s' but it contains one or more variable instructions \
-                with a scope element that doesn't belong to the element's flow scope: 'A', 'B'. \
-                These variables should be set before or after the modification."""""",
+                Expected to modify instance of process '%s' but it contains one or more variable \
+                instructions with a scope element that doesn't belong to the element's flow scope: \
+                'A', 'B'. These variables should be set before or after the modification."""""",
                 PROCESS_ID));
   }
 }

diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
index 0df00df..83b72b7 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/GatewayCfg.java
@@ -106,8 +106,12 @@ public class GatewayCfg {
 
   @Override
   public boolean equals(final Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     final GatewayCfg that = (GatewayCfg) o;
     return Objects.equals(network, that.network)
         && Objects.equals(cluster, that.cluster)
diff --git a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/MultiTenancyCfg.java b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/MultiTenancyCfg.java
index d8e47e0..a061df0 100644
--- a/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/MultiTenancyCfg.java
+++ b/gateway/src/main/java/io/camunda/zeebe/gateway/impl/configuration/MultiTenancyCfg.java
@@ -29,8 +29,12 @@ public class MultiTenancyCfg {
 
   @Override
   public boolean equals(final Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
     final MultiTenancyCfg that = (MultiTenancyCfg) o;
     return enabled == that.enabled;
   }

diff --git a/docs/ci.md b/docs/ci.md
index 73b84db..70dec0b 100644
--- a/docs/ci.md
+++ b/docs/ci.md
@@ -153,18 +153,18 @@ e.g. the command running `mvn verify` or `mvn test` or the likes). There, you ca
 property (`maven.debug.surefire` for `mvn test` or `maven.debug.failsafe` for `mvn verify`). For example:
 
 ```yaml
-      - name: Maven Test Build
-        run: >
-          mvn -B -T2 --no-snapshot-updates
-          -D forkCount=5
-          -D maven.javadoc.skip=true
-          -D skipUTs -D skipChecks
-          -D failsafe.rerunFailingTestsCount=3 -D flaky.test.reportDir=failsafe-reports
-          -D maven.failsafe.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n
-          -P parallel-tests,extract-flaky-tests
-          -pl '!qa/update-tests'
-          verify
-          | tee ""${BUILD_OUTPUT_FILE_PATH}""
+- name: Maven Test Build
+  run: >
+    mvn -B -T2 --no-snapshot-updates
+    -D forkCount=5
+    -D maven.javadoc.skip=true
+    -D skipUTs -D skipChecks
+    -D failsafe.rerunFailingTestsCount=3 -D flaky.test.reportDir=failsafe-reports
+    -D maven.failsafe.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n
+    -P parallel-tests,extract-flaky-tests
+    -pl '!qa/update-tests'
+    verify
+    | tee ""${BUILD_OUTPUT_FILE_PATH}""
 ```
 
 When the forks are started, they will print out the port which they use for the debugger, e.g.
@@ -233,7 +233,6 @@ To cut down on reproduction times, you might sometimes want to run multiple work
 parallel. There I can recommend using [Webhook.site](https://webhook.site/), and having your test
 ping that endpoint with some payload, so you can react to a test failure. For example:
 
-
 ```java
 try {
   SslAssert.assertThat(socketAddress)
@@ -253,3 +252,4 @@ try {
   }
 }
 ```
+

diff --git a/scheduler/src/test/java/io/camunda/zeebe/scheduler/functional/RunnableActionsTest.java b/scheduler/src/test/java/io/camunda/zeebe/scheduler/functional/RunnableActionsTest.java
index 33ebdf2..d7a2b7e 100644
--- a/scheduler/src/test/java/io/camunda/zeebe/scheduler/functional/RunnableActionsTest.java
+++ b/scheduler/src/test/java/io/camunda/zeebe/scheduler/functional/RunnableActionsTest.java
@@ -149,13 +149,13 @@ public final class RunnableActionsTest {
     assertThat(exceptionOnSubmit).isFalse();
   }
 
-  class Submitter extends Actor {
+  private static final class Submitter extends Actor {
     public void submit(final Runnable r) {
       actor.submit(r);
     }
   }
 
-  class Runner extends Actor {
+  private static class Runner extends Actor {
     int runs = 0;
     final Runnable onExecution;
 

diff --git a/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java b/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java
index e7f8ebc..126b097 100644
--- a/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java
+++ b/stream-platform/src/main/java/io/camunda/zeebe/stream/api/scheduling/ScheduledCommandCache.java
@@ -12,7 +12,7 @@ import io.camunda.zeebe.protocol.record.intent.Intent;
 public interface ScheduledCommandCache {
   void add(final Intent intent, final long key);
 
-  boolean isCached(final Intent intent, final long key);
+  boolean contains(final Intent intent, final long key);
 
   void remove(final Intent intent, final long key);
 
@@ -26,7 +26,7 @@ public interface ScheduledCommandCache {
     public void add(final Intent intent, final long key) {}
 
     @Override
-    public boolean isCached(final Intent intent, final long key) {
+    public boolean contains(final Intent intent, final long key) {
       return false;
     }
 
diff --git a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/BufferedTaskResultBuilder.java b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/BufferedTaskResultBuilder.java
index b702b17..d50f287 100644
--- a/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/BufferedTaskResultBuilder.java
+++ b/stream-platform/src/main/java/io/camunda/zeebe/stream/impl/BufferedTaskResultBuilder.java
@@ -45,7 +45,7 @@ public final class BufferedTaskResultBuilder implements TaskResultBuilder {
       throw new IllegalStateException(""Missing value type mapping for record: "" + value.getClass());
     }
 
-    if (cache.isCached(intent, key)) {
+    if (cache.contains(intent, key)) {
       return true;
     }
 
diff --git a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/ProcessingScheduleServiceTest.java b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/ProcessingScheduleServiceTest.java
index 3d2076f..bc9d8ab 100644
--- a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/ProcessingScheduleServiceTest.java
+++ b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/ProcessingScheduleServiceTest.java
@@ -310,9 +310,9 @@ class ProcessingScheduleServiceTest {
 
     // then - it's sufficient to assert it was staged for caching, and then the staged cache was
     // persisted
-    assertThat(commandCache.stagedCache().isCached(ACTIVATE_ELEMENT, 1)).isTrue();
+    assertThat(commandCache.stagedCache().contains(ACTIVATE_ELEMENT, 1)).isTrue();
     assertThat(commandCache.stagedCache().persisted()).isTrue();
-    assertThat(commandCache.isCached(ACTIVATE_ELEMENT, 1)).isTrue();
+    assertThat(commandCache.contains(ACTIVATE_ELEMENT, 1)).isTrue();
     assertThat(writerAsyncSupplier.writer.entries)
         .extracting(LogAppendEntry::key)
         .containsExactly(1L);
@@ -354,9 +354,9 @@ class ProcessingScheduleServiceTest {
     actorScheduler.workUntilDone();
 
     // then - write was staged for caching, but not persisted due to error
-    assertThat(commandCache.stagedCache().isCached(ACTIVATE_ELEMENT, 1)).isTrue();
+    assertThat(commandCache.stagedCache().contains(ACTIVATE_ELEMENT, 1)).isTrue();
     assertThat(commandCache.stagedCache().persisted()).isFalse();
-    assertThat(commandCache.isCached(ACTIVATE_ELEMENT, 1)).isFalse();
+    assertThat(commandCache.contains(ACTIVATE_ELEMENT, 1)).isFalse();
   }
 
   /**
diff --git a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
index a1c60ac..46ddc53 100755
--- a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
+++ b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
@@ -1360,7 +1360,7 @@ public final class StreamProcessorTest {
     // then
     verify(testProcessor, timeout(5000)).process(any(), any());
     Awaitility.await(""until command is removed from cache after processing"")
-        .untilAsserted(() -> assertThat(commandCache.isCached(ACTIVATE_ELEMENT, 1)).isFalse());
+        .untilAsserted(() -> assertThat(commandCache.contains(ACTIVATE_ELEMENT, 1)).isFalse());
   }
 
   private static final class TestProcessor implements RecordProcessor {
diff --git a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/TestScheduledCommandCache.java b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/TestScheduledCommandCache.java
index 4022519..fc96476 100644
--- a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/TestScheduledCommandCache.java
+++ b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/TestScheduledCommandCache.java
@@ -23,7 +23,7 @@ public class TestScheduledCommandCache implements ScheduledCommandCache {
   }
 
   @Override
-  public boolean isCached(final Intent intent, final long key) {
+  public boolean contains(final Intent intent, final long key) {
     return cacheForIntent(intent).contains(key);
   }
 
@@ -56,8 +56,8 @@ public class TestScheduledCommandCache implements ScheduledCommandCache {
       private volatile boolean persisted;
 
       @Override
-      public boolean isCached(final Intent intent, final long key) {
-        return super.isCached(intent, key) || TestCommandCache.this.isCached(intent, key);
+      public boolean contains(final Intent intent, final long key) {
+        return super.contains(intent, key) || TestCommandCache.this.contains(intent, key);
       }
 
       @Override

diff --git a/dist/src/main/java/io/camunda/zeebe/shared/management/ClusterEndpoint.java b/dist/src/main/java/io/camunda/zeebe/shared/management/ClusterEndpoint.java
index 79c5bcf..65feb99 100644
--- a/dist/src/main/java/io/camunda/zeebe/shared/management/ClusterEndpoint.java
+++ b/dist/src/main/java/io/camunda/zeebe/shared/management/ClusterEndpoint.java
@@ -203,8 +203,7 @@ public class ClusterEndpoint {
   private ResponseEntity<?> mapOperationResponse(
       final Either<ErrorResponse, TopologyChangeResponse> response) {
     if (response.isRight()) {
-      return ResponseEntity.status(202)
-          .body(mapResponseType(response.get()));
+      return ResponseEntity.status(202).body(mapResponseType(response.get()));
     } else {
       final var errorCode =
           switch (response.getLeft().code()) {

diff --git a/dist/src/main/java/io/camunda/zeebe/gateway/StandaloneGateway.java b/dist/src/main/java/io/camunda/zeebe/gateway/StandaloneGateway.java
index 94735f5..09e1b45 100644
--- a/dist/src/main/java/io/camunda/zeebe/gateway/StandaloneGateway.java
+++ b/dist/src/main/java/io/camunda/zeebe/gateway/StandaloneGateway.java
@@ -23,7 +23,6 @@ import io.camunda.zeebe.util.VersionUtil;
 import io.camunda.zeebe.util.sched.ActorScheduler;
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Function;
 import org.apache.logging.log4j.LogManager;
 import org.slf4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -41,14 +40,19 @@ public class StandaloneGateway
     implements CommandLineRunner, ApplicationListener<ContextClosedEvent> {
   private static final Logger LOG = Loggers.GATEWAY_LOGGER;
 
-  @Autowired private GatewayCfg configuration;
-  @Autowired private SpringGatewayBridge springGatewayBridge;
+  @SuppressWarnings(""unused"")
+  @Autowired
+  private GatewayCfg configuration;
+
+  @SuppressWarnings(""unused"")
+  @Autowired
+  private SpringGatewayBridge springGatewayBridge;
 
   private AtomixCluster atomixCluster;
   private Gateway gateway;
   private ActorScheduler actorScheduler;
 
-  public static void main(final String[] args) throws Exception {
+  public static void main(final String[] args) {
     System.setProperty(""spring.banner.location"", ""classpath:/assets/zeebe_gateway_banner.txt"");
     SpringApplication.run(StandaloneGateway.class, args);
   }
@@ -64,16 +68,8 @@ public class StandaloneGateway
 
     atomixCluster = createAtomixCluster(configuration.getCluster());
     actorScheduler = createActorScheduler(configuration);
-    final Function<GatewayCfg, BrokerClient> brokerClientFactory =
-        cfg ->
-            new BrokerClientImpl(
-                cfg,
-                atomixCluster.getMessagingService(),
-                atomixCluster.getMembershipService(),
-                atomixCluster.getEventService(),
-                actorScheduler,
-                false);
-    gateway = new Gateway(configuration, brokerClientFactory, actorScheduler);
+    gateway = new Gateway(configuration, this::createBrokerClient, actorScheduler);
+
     springGatewayBridge.registerGatewayStatusSupplier(gateway::getStatus);
     springGatewayBridge.registerClusterStateSupplier(
         () ->
@@ -109,37 +105,49 @@ public class StandaloneGateway
     LogManager.shutdown();
   }
 
-  private AtomixCluster createAtomixCluster(final ClusterCfg clusterCfg) {
-    final MembershipCfg membershipCfg = clusterCfg.getMembership();
-    final GroupMembershipProtocol membershipProtocol =
-        SwimMembershipProtocol.builder()
-            .withFailureTimeout(membershipCfg.getFailureTimeout())
-            .withGossipInterval(membershipCfg.getGossipInterval())
-            .withProbeInterval(membershipCfg.getProbeInterval())
-            .withProbeTimeout(membershipCfg.getProbeTimeout())
-            .withBroadcastDisputes(membershipCfg.isBroadcastDisputes())
-            .withBroadcastUpdates(membershipCfg.isBroadcastUpdates())
-            .withGossipFanout(membershipCfg.getGossipFanout())
-            .withNotifySuspect(membershipCfg.isNotifySuspect())
-            .withSuspectProbes(membershipCfg.getSuspectProbes())
-            .withSyncInterval(membershipCfg.getSyncInterval())
-            .build();
+  private BrokerClient createBrokerClient(final GatewayCfg config) {
+    return new BrokerClientImpl(
+        config,
+        atomixCluster.getMessagingService(),
+        atomixCluster.getMembershipService(),
+        atomixCluster.getEventService(),
+        actorScheduler,
+        false);
+  }
+
+  private AtomixCluster createAtomixCluster(final ClusterCfg config) {
+    final var membershipProtocol = createMembershipProtocol(config.getMembership());
 
     return AtomixCluster.builder()
-        .withMemberId(clusterCfg.getMemberId())
-        .withAddress(Address.from(clusterCfg.getHost(), clusterCfg.getPort()))
-        .withClusterId(clusterCfg.getClusterName())
+        .withMemberId(config.getMemberId())
+        .withAddress(Address.from(config.getHost(), config.getPort()))
+        .withClusterId(config.getClusterName())
         .withMembershipProvider(
             BootstrapDiscoveryProvider.builder()
-                .withNodes(Address.from(clusterCfg.getContactPoint()))
+                .withNodes(Address.from(config.getContactPoint()))
                 .build())
         .withMembershipProtocol(membershipProtocol)
         .build();
   }
 
-  private ActorScheduler createActorScheduler(final GatewayCfg configuration) {
+  private GroupMembershipProtocol createMembershipProtocol(final MembershipCfg config) {
+    return SwimMembershipProtocol.builder()
+        .withFailureTimeout(config.getFailureTimeout())
+        .withGossipInterval(config.getGossipInterval())
+        .withProbeInterval(config.getProbeInterval())
+        .withProbeTimeout(config.getProbeTimeout())
+        .withBroadcastDisputes(config.isBroadcastDisputes())
+        .withBroadcastUpdates(config.isBroadcastUpdates())
+        .withGossipFanout(config.getGossipFanout())
+        .withNotifySuspect(config.isNotifySuspect())
+        .withSuspectProbes(config.getSuspectProbes())
+        .withSyncInterval(config.getSyncInterval())
+        .build();
+  }
+
+  private ActorScheduler createActorScheduler(final GatewayCfg config) {
     return ActorScheduler.newActorScheduler()
-        .setCpuBoundActorThreadCount(configuration.getThreads().getManagementThreads())
+        .setCpuBoundActorThreadCount(config.getThreads().getManagementThreads())
         .setIoBoundActorThreadCount(0)
         .setSchedulerName(""gateway-scheduler"")
         .build();

diff --git a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
index fe17626..8192249 100644
--- a/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
+++ b/snapshot/src/main/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksum.java
@@ -62,7 +62,7 @@ final class SnapshotChecksum {
 
   public static void persist(final Path checksumPath, final ImmutableChecksumsSFV checksum)
       throws IOException {
-    try(final var stream = new FileOutputStream(checksumPath.toFile())) {
+    try (final var stream = new FileOutputStream(checksumPath.toFile())) {
       checksum.write(stream);
     }
   }

diff --git a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
index 1f2d909..0261cd4 100644
--- a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
+++ b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamPlatform.java
@@ -367,7 +367,8 @@ public final class StreamPlatform {
     }
 
     public Long getLastSuccessfulProcessedRecordPosition() {
-      return new DbLastProcessedPositionState(zeebeDb, zeebeDb.createContext()).getLastSuccessfulProcessedRecordPosition();
+      return new DbLastProcessedPositionState(zeebeDb, zeebeDb.createContext())
+          .getLastSuccessfulProcessedRecordPosition();
     }
 
     @Override
diff --git a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorContinouslyReplayModeTest.java b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorContinouslyReplayModeTest.java
index ddafa23..fd243fa 100644
--- a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorContinouslyReplayModeTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorContinouslyReplayModeTest.java
@@ -264,10 +264,7 @@ public final class StreamProcessorContinouslyReplayModeTest {
     // on replay the positions and keys are restored
     streamPlatform.writeBatch(
         command().processInstance(ACTIVATE_ELEMENT, RECORD),
-        event()
-            .processInstance(ELEMENT_ACTIVATING, RECORD)
-            .key(eventKeyBeforeSnapshot)
-            .causedBy(0),
+        event().processInstance(ELEMENT_ACTIVATING, RECORD).key(eventKeyBeforeSnapshot).causedBy(0),
         command().processInstance(ACTIVATE_ELEMENT, RECORD),
         event()
             .processInstance(ELEMENT_ACTIVATING, RECORD)
@@ -301,8 +298,7 @@ public final class StreamProcessorContinouslyReplayModeTest {
                 Assertions.assertThat(streamProcessor.getLastProcessedPositionAsync().join())
                     .isEqualTo(3L));
 
-    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition())
-        .isEqualTo(3);
+    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition()).isEqualTo(3);
     Assertions.assertThat(Protocol.decodeKeyInPartition(streamPlatform.getCurrentKey()))
         .isEqualTo(19L);
   }
diff --git a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorReplayTest.java b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorReplayTest.java
index 29c21a8..1d28f66 100644
--- a/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorReplayTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/streamprocessor/StreamProcessorReplayTest.java
@@ -149,8 +149,7 @@ final class StreamProcessorReplayTest {
                     .isEqualTo(2L));
 
     // state has to be updated
-    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition())
-        .isEqualTo(1);
+    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition()).isEqualTo(1);
     Assertions.assertThat(Protocol.decodeKeyInPartition(streamPlatform.getCurrentKey()))
         .isEqualTo(19L);
   }
@@ -196,8 +195,7 @@ final class StreamProcessorReplayTest {
                     .isEqualTo(2L));
 
     // state has to be updated
-    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition())
-        .isEqualTo(1);
+    Assertions.assertThat(streamPlatform.getLastSuccessfulProcessedRecordPosition()).isEqualTo(1);
     Assertions.assertThat(Protocol.decodeKeyInPartition(streamPlatform.getCurrentKey()))
         .isEqualTo(19L);
   }

diff --git a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/InterPartitionCommandServiceStep.java b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/InterPartitionCommandServiceStep.java
index 3cab87e..311372d 100644
--- a/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/InterPartitionCommandServiceStep.java
+++ b/broker/src/main/java/io/camunda/zeebe/broker/system/partitions/impl/steps/InterPartitionCommandServiceStep.java
@@ -14,7 +14,7 @@ import io.camunda.zeebe.broker.transport.partitionapi.InterPartitionCommandRecei
 import io.camunda.zeebe.broker.transport.partitionapi.InterPartitionCommandSenderService;
 import io.camunda.zeebe.scheduler.future.ActorFuture;
 
-public class InterPartitionCommandServiceStep implements PartitionTransitionStep {
+public final class InterPartitionCommandServiceStep implements PartitionTransitionStep {
 
   @Override
   public ActorFuture<Void> prepareTransition(

diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedGateway.java b/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedGateway.java
index 86d683e..0d46c56 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedGateway.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedGateway.java
@@ -217,7 +217,7 @@ public final class StubbedGateway {
 
   private record StubbedClientStreamId(UUID serverStreamId) implements ClientStreamId {}
 
-  private static class FakeOAuthCallCredentials extends CallCredentials {
+  private static final class FakeOAuthCallCredentials extends CallCredentials {
 
     /** Can be adjusted to test different token values. */
     private String token = ""token"";

diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/api/job/LongPollingActivateJobsTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/api/job/LongPollingActivateJobsTest.java
index 3914511..839803d 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/api/job/LongPollingActivateJobsTest.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/api/job/LongPollingActivateJobsTest.java
@@ -556,7 +556,7 @@ public final class LongPollingActivateJobsTest {
             // ensure that all requests are submitted to
             // the actor jobs queue before executing those
             allRequestsSubmittedLatch.await();
-          } catch (InterruptedException e) {
+          } catch (final InterruptedException e) {
             // ignore
           }
         });
@@ -908,7 +908,7 @@ public final class LongPollingActivateJobsTest {
 
           @Override
           public Either<Exception, Boolean> tryToSendActivatedJobs(
-              ActivateJobsResponse grpcResponse) {
+              final ActivateJobsResponse grpcResponse) {
             activatedJobRef.set(grpcResponse.getJobs(0));
             super.tryToSendActivatedJobs(grpcResponse);
             return Either.right(false);

diff --git a/topology/pom.xml b/topology/pom.xml
index 305c5d0..06f240d 100644
--- a/topology/pom.xml
+++ b/topology/pom.xml
@@ -6,9 +6,7 @@
   ~ Licensed under the Zeebe Community License 1.1. You may not use this file
   ~ except in compliance with the Zeebe Community License 1.1.
   -->
-<project xmlns=""http://maven.apache.org/POM/4.0.0""
-  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
-  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">
   <modelVersion>4.0.0</modelVersion>
   <parent>
     <groupId>io.camunda</groupId>
@@ -145,8 +143,7 @@
         <configuration>
           <ignoredNonTestScopedDependencies>
             <!-- When not set, we get error ""Non-test scoped test only dependencies found"". If we set the scope to test only, the build fails. -->
-            <ignoredNonTestScopedDependency>io.camunda:zeebe-atomix-utils
-            </ignoredNonTestScopedDependency>
+            <ignoredNonTestScopedDependency>io.camunda:zeebe-atomix-utils</ignoredNonTestScopedDependency>
           </ignoredNonTestScopedDependencies>
           <usedDependencies>
             <dependency>net.jqwik:jqwik</dependency>

diff --git a/backup/pom.xml b/backup/pom.xml
index 60e750f..e6a3033 100644
--- a/backup/pom.xml
+++ b/backup/pom.xml
@@ -94,7 +94,6 @@
       <scope>test</scope>
     </dependency>
 
-
   </dependencies>
 
 </project>

diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientBuilderImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientBuilderImpl.java
index 3265bb8..3a39453 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientBuilderImpl.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientBuilderImpl.java
@@ -123,6 +123,7 @@ public final class ZeebeClientBuilderImpl implements ZeebeClientBuilder, ZeebeCl
     return interceptors;
   }
 
+  @Override
   public JsonMapper getJsonMapper() {
     return jsonMapper;
   }
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientCloudBuilderImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientCloudBuilderImpl.java
index 1e2dfe5..552c394 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientCloudBuilderImpl.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientCloudBuilderImpl.java
@@ -75,25 +75,6 @@ public class ZeebeClientCloudBuilderImpl
   }
 
   @Override
-  public ZeebeClientCloudBuilderStep4 gatewayAddress(final String gatewayAddress) {
-    innerBuilder.gatewayAddress(gatewayAddress);
-    return this;
-  }
-
-  @Override
-  public ZeebeClientCloudBuilderStep4 usePlaintext() {
-    innerBuilder.usePlaintext();
-    return this;
-  }
-
-  @Override
-  public ZeebeClientCloudBuilderStep4 credentialsProvider(
-      final CredentialsProvider credentialsProvider) {
-    innerBuilder.credentialsProvider(credentialsProvider);
-    return this;
-  }
-
-  @Override
   public ZeebeClientCloudBuilderStep4 withProperties(final Properties properties) {
     if (properties.containsKey(ClientProperties.CLOUD_CLUSTER_ID)) {
       withClusterId(properties.getProperty(ClientProperties.CLOUD_CLUSTER_ID));
@@ -109,6 +90,12 @@ public class ZeebeClientCloudBuilderImpl
   }
 
   @Override
+  public ZeebeClientCloudBuilderStep4 gatewayAddress(final String gatewayAddress) {
+    innerBuilder.gatewayAddress(gatewayAddress);
+    return this;
+  }
+
+  @Override
   public ZeebeClientCloudBuilderStep4 defaultJobWorkerMaxJobsActive(final int maxJobsActive) {
     innerBuilder.defaultJobWorkerMaxJobsActive(maxJobsActive);
     return this;
@@ -151,12 +138,25 @@ public class ZeebeClientCloudBuilderImpl
   }
 
   @Override
+  public ZeebeClientCloudBuilderStep4 usePlaintext() {
+    innerBuilder.usePlaintext();
+    return this;
+  }
+
+  @Override
   public ZeebeClientCloudBuilderStep4 caCertificatePath(final String certificatePath) {
     innerBuilder.caCertificatePath(certificatePath);
     return this;
   }
 
   @Override
+  public ZeebeClientCloudBuilderStep4 credentialsProvider(
+      final CredentialsProvider credentialsProvider) {
+    innerBuilder.credentialsProvider(credentialsProvider);
+    return this;
+  }
+
+  @Override
   public ZeebeClientCloudBuilderStep4 keepAlive(final Duration keepAlive) {
     innerBuilder.keepAlive(keepAlive);
     return this;
diff --git a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
index f93b97e..26050f0 100644
--- a/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
+++ b/clients/java/src/main/java/io/camunda/zeebe/client/impl/ZeebeClientImpl.java
@@ -99,7 +99,7 @@ public final class ZeebeClientImpl implements ZeebeClient {
       final GatewayStub gatewayStub,
       final ScheduledExecutorService executorService) {
     this.config = config;
-    this.jsonMapper = config.getJsonMapper();
+    jsonMapper = config.getJsonMapper();
     this.channel = channel;
     asyncStub = gatewayStub;
     this.executorService = executorService;
@@ -289,7 +289,7 @@ public final class ZeebeClientImpl implements ZeebeClient {
   }
 
   @Override
-  public UpdateRetriesJobCommandStep1 newUpdateRetriesCommand(ActivatedJob job) {
+  public UpdateRetriesJobCommandStep1 newUpdateRetriesCommand(final ActivatedJob job) {
     return newUpdateRetriesCommand(job.getKey());
   }
 
@@ -322,7 +322,7 @@ public final class ZeebeClientImpl implements ZeebeClient {
   }
 
   @Override
-  public CompleteJobCommandStep1 newCompleteCommand(ActivatedJob job) {
+  public CompleteJobCommandStep1 newCompleteCommand(final ActivatedJob job) {
     return newCompleteCommand(job.getKey());
   }
 
@@ -332,17 +332,17 @@ public final class ZeebeClientImpl implements ZeebeClient {
   }
 
   @Override
-  public FailJobCommandStep1 newFailCommand(ActivatedJob job) {
+  public FailJobCommandStep1 newFailCommand(final ActivatedJob job) {
     return newFailCommand(job.getKey());
   }
 
   @Override
-  public ThrowErrorCommandStep1 newThrowErrorCommand(long jobKey) {
+  public ThrowErrorCommandStep1 newThrowErrorCommand(final long jobKey) {
     return jobClient.newThrowErrorCommand(jobKey);
   }
 
   @Override
-  public ThrowErrorCommandStep1 newThrowErrorCommand(ActivatedJob job) {
+  public ThrowErrorCommandStep1 newThrowErrorCommand(final ActivatedJob job) {
     return newThrowErrorCommand(job.getKey());
   }
 }

diff --git a/qa/util/pom.xml b/qa/util/pom.xml
index 068b144..6fad204 100644
--- a/qa/util/pom.xml
+++ b/qa/util/pom.xml
@@ -126,5 +126,30 @@
       <groupId>io.camunda</groupId>
       <artifactId>zeebe-test-util</artifactId>
     </dependency>
+
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-beans</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-core</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>io.prometheus</groupId>
+      <artifactId>simpleclient</artifactId>
+    </dependency>
   </dependencies>
 </project>

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/DbJobMigrationState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/DbJobMigrationState.java
index 9a29561..37e9c7a 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/DbJobMigrationState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/DbJobMigrationState.java
@@ -28,10 +28,7 @@ public class DbJobMigrationState {
 
   public DbJobMigrationState(
       final ZeebeDb<ZbColumnFamilies> zeebeDb, final TransactionContext transactionContext) {
-    // Hardcoded partition id as this is only relevant for metrics. It doesn't have any impact on
-    // the migration.
-    final int partitionId = -1;
-    from = new LegacyJobState(zeebeDb, transactionContext, partitionId);
+    from = new LegacyJobState(zeebeDb, transactionContext);
     to = new DbJobState(zeebeDb, transactionContext);
   }
 
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyJobState.java b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyJobState.java
index 8394f2f..b365da3 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyJobState.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/state/migration/to_8_3/legacy/LegacyJobState.java
@@ -49,9 +49,7 @@ public class LegacyJobState {
       activatableColumnFamily;
 
   public LegacyJobState(
-      final ZeebeDb<ZbColumnFamilies> zeebeDb,
-      final TransactionContext transactionContext,
-      final int partitionId) {
+      final ZeebeDb<ZbColumnFamilies> zeebeDb, final TransactionContext transactionContext) {
 
     jobKey = new DbLong();
     fkJob = new DbForeignKey<>(jobKey, ZbColumnFamilies.JOBS);
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
index 6d59118..cc67e6f 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/MultiTenancyMigrationTest.java
@@ -27,8 +27,8 @@ import io.camunda.zeebe.engine.state.deployment.PersistedDecision;
 import io.camunda.zeebe.engine.state.deployment.PersistedProcess.PersistedProcessState;
 import io.camunda.zeebe.engine.state.immutable.MigrationState;
 import io.camunda.zeebe.engine.state.immutable.ProcessingState;
-import io.camunda.zeebe.engine.state.message.DbMessageStartEventSubscriptionState;
 import io.camunda.zeebe.engine.state.instance.DbJobState;
+import io.camunda.zeebe.engine.state.message.DbMessageStartEventSubscriptionState;
 import io.camunda.zeebe.engine.state.message.DbMessageState;
 import io.camunda.zeebe.engine.state.message.DbMessageSubscriptionState;
 import io.camunda.zeebe.engine.state.message.DbProcessMessageSubscriptionState;
@@ -36,8 +36,8 @@ import io.camunda.zeebe.engine.state.message.MessageStartEventSubscription;
 import io.camunda.zeebe.engine.state.message.MessageSubscription;
 import io.camunda.zeebe.engine.state.message.StoredMessage;
 import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyDecisionState;
-import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyMessageStartEventSubscriptionState;
 import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyJobState;
+import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyMessageStartEventSubscriptionState;
 import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyMessageState;
 import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyMessageSubscriptionState;
 import io.camunda.zeebe.engine.state.migration.to_8_3.legacy.LegacyProcessMessageSubscriptionState;
@@ -867,7 +867,7 @@ public class MultiTenancyMigrationTest {
 
     @BeforeEach
     void setup() {
-      legacyState = new LegacyJobState(zeebeDb, transactionContext, 1);
+      legacyState = new LegacyJobState(zeebeDb, transactionContext);
       jobState = new DbJobState(zeebeDb, transactionContext);
     }
 
@@ -907,7 +907,7 @@ public class MultiTenancyMigrationTest {
               .setElementId(elementId)
               .setElementInstanceKey(elementInstanceKey)
               .setCustomHeaders(wrapArray(MsgPackConverter.convertToMsgPack(customHeaders)));
-      legacyState.create(1l, jobRecord);
+      legacyState.create(jobKey, jobRecord);
 
       // when
       sut.runMigration(processingState);

diff --git a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
index 14c6f30..ebaef60 100644
--- a/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
+++ b/transport/src/main/java/io/camunda/zeebe/transport/stream/impl/LogicalId.java
@@ -8,7 +8,6 @@
 package io.camunda.zeebe.transport.stream.impl;
 
 import io.camunda.zeebe.util.buffer.BufferUtil;
-import org.agrona.BitUtil;
 import org.agrona.concurrent.UnsafeBuffer;
 
 /**

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/validation/ZeebeRuntimeValidators.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/validation/ZeebeRuntimeValidators.java
index cfcd590..1646e4c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/validation/ZeebeRuntimeValidators.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/validation/ZeebeRuntimeValidators.java
@@ -44,7 +44,7 @@ public final class ZeebeRuntimeValidators {
             .hasValidPath(ZeebeOutput::getTarget)
             .build(expressionLanguage),
         ZeebeExpressionValidator.verifyThat(Message.class)
-            .hasValidExpression(Message::getName, expression -> expression.isOptional())
+            .hasValidExpression(Message::getName, ExpressionVerification::isOptional)
             .build(expressionLanguage),
         // Checks message name expressions of start event messages
         new ProcessMessageStartEventMessageNameValidator(expressionLanguage),
@@ -71,15 +71,14 @@ public final class ZeebeRuntimeValidators {
             .build(expressionLanguage),
         // ----------------------------------------
         ZeebeExpressionValidator.verifyThat(ZeebeTaskDefinition.class)
+            .hasValidExpression(ZeebeTaskDefinition::getType, ExpressionVerification::isMandatory)
             .hasValidExpression(
-                ZeebeTaskDefinition::getType, expression -> expression.isMandatory())
-            .hasValidExpression(
-                ZeebeTaskDefinition::getRetries, expression -> expression.isMandatory())
+                ZeebeTaskDefinition::getRetries, ExpressionVerification::isMandatory)
             .build(expressionLanguage),
         // ----------------------------------------
         ZeebeExpressionValidator.verifyThat(ZeebeCalledElement.class)
             .hasValidExpression(
-                ZeebeCalledElement::getProcessId, expression -> expression.isMandatory())
+                ZeebeCalledElement::getProcessId, ExpressionVerification::isMandatory)
             .build(expressionLanguage),
         // ----------------------------------------
         ZeebeExpressionValidator.verifyThat(TimerEventDefinition.class)

diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/AggregatedClientStreamTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/AggregatedClientStreamTest.java
index cd3fd55..4f6e5ea 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/AggregatedClientStreamTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/AggregatedClientStreamTest.java
@@ -13,7 +13,6 @@ import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
 import io.camunda.zeebe.scheduler.testing.TestActorFuture;
 import io.camunda.zeebe.transport.stream.api.ClientStreamConsumer;
 import io.camunda.zeebe.transport.stream.api.ClientStreamId;
-import io.camunda.zeebe.transport.stream.api.StreamExhaustedException;
 import io.camunda.zeebe.transport.stream.impl.AggregatedClientStream.LogicalId;
 import io.camunda.zeebe.util.buffer.BufferUtil;
 import java.time.Duration;

diff --git a/.github/ISSUE_TEMPLATE/bug_report.md b/.github/ISSUE_TEMPLATE/bug_report.md
index 84ac9eb..33b398a 100644
--- a/.github/ISSUE_TEMPLATE/bug_report.md
+++ b/.github/ISSUE_TEMPLATE/bug_report.md
@@ -1,4 +1,5 @@
 ---
+
 name: Bug report
 about: Create a report to help us improve
 title: ''
@@ -8,21 +9,25 @@ assignees: ''
 ---
 
 **Describe the bug**
+
 <!-- A clear and concise description of what the bug is. -->
 
 **To Reproduce**
+
 <!--
 Steps to reproduce the behavior
 
 If possible add a minimal reproducer code sample
- - when using the Java client: https://github.com/zeebe-io/zeebe-test-template-java
+- when using the Java client: https://github.com/zeebe-io/zeebe-test-template-java
 
 -->
 
 **Expected behavior**
+
 <!-- A clear and concise description of what you expected to happen. -->
 
 **Log/Stacktrace**
+
 <!-- If possible add the full stacktrace or Zeebe log which contains the issue. -->
 
 <details><summary>Full Stacktrace</summary>
@@ -35,8 +40,7 @@ If possible add a minimal reproducer code sample
 </p>
 </details>
 
-
 **Environment:**
- - OS: <!-- [e.g. Linux] -->
- - Zeebe Version: <!-- [e.g. 0.20.0] -->
- - Configuration: <!-- [e.g. exporters etc.] -->
+- OS: <!-- [e.g. Linux] -->
+- Zeebe Version: <!-- [e.g. 0.20.0] -->
+- Configuration: <!-- [e.g. exporters etc.] -->
diff --git a/.github/ISSUE_TEMPLATE/documentation_issue.md b/.github/ISSUE_TEMPLATE/documentation_issue.md
index 80f57e9..c1a55ed 100644
--- a/.github/ISSUE_TEMPLATE/documentation_issue.md
+++ b/.github/ISSUE_TEMPLATE/documentation_issue.md
@@ -1,4 +1,5 @@
 ---
+
 name: Documentation issue
 about: Changes to the documentation
 title: ''
diff --git a/.github/ISSUE_TEMPLATE/feature_request.md b/.github/ISSUE_TEMPLATE/feature_request.md
index a6caefe..00ddf93 100644
--- a/.github/ISSUE_TEMPLATE/feature_request.md
+++ b/.github/ISSUE_TEMPLATE/feature_request.md
@@ -1,4 +1,5 @@
 ---
+
 name: Feature request
 about: Suggest an idea for this project
 title: ''
diff --git a/.github/ISSUE_TEMPLATE/general_issue.md b/.github/ISSUE_TEMPLATE/general_issue.md
index 8e4d408..b1c9f54 100644
--- a/.github/ISSUE_TEMPLATE/general_issue.md
+++ b/.github/ISSUE_TEMPLATE/general_issue.md
@@ -1,4 +1,5 @@
 ---
+
 name: General issue
 about: General changes to the project
 title: ''
diff --git a/.github/ISSUE_TEMPLATE/unstable_test.md b/.github/ISSUE_TEMPLATE/unstable_test.md
index 896e0c6..103aa24 100644
--- a/.github/ISSUE_TEMPLATE/unstable_test.md
+++ b/.github/ISSUE_TEMPLATE/unstable_test.md
@@ -1,4 +1,5 @@
 ---
+
 name: Unstable test
 about: Report tests that are flaky/non-deterministic
 title: ''
@@ -38,3 +39,4 @@ Paste the failure here
 LOGS
 </pre>
 </details>
+
diff --git a/.github/pull_request_template.md b/.github/pull_request_template.md
index 14a4790..d01fd05 100644
--- a/.github/pull_request_template.md
+++ b/.github/pull_request_template.md
@@ -38,8 +38,8 @@ Testing:
 * [ ] New tests are written to ensure backwards compatibility with further versions
 * [ ] The behavior is tested manually
 * [ ] The change has been verified by a QA run
-* [ ] The impact of the changes is verified by a benchmark 
+* [ ] The impact of the changes is verified by a benchmark
 
-Documentation: 
+Documentation:
 * [ ] The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)
 * [ ] New content is added to the [release announcement](https://drive.google.com/drive/u/0/folders/1DTIeswnEEq-NggJ25rm2BsDjcCQpDape)
diff --git a/CODE_OF_CONDUCT.md b/CODE_OF_CONDUCT.md
index 9f7a567..d5fbba4 100644
--- a/CODE_OF_CONDUCT.md
+++ b/CODE_OF_CONDUCT.md
@@ -4,7 +4,6 @@ Our awesome community is what makes us who we are. We’re extremely proud that 
 backgrounds. We want to provide each and every one of you with a consistently great experience, so we created this Community Code of Conduct. We want to
 ensure that mutual support will always be guaranteed and that we create an environment in which we can grow together.
 
-
 ## Scope
 
 We expect all members of the Camunda community, including administrators, users, facilitators, and vendors to abide by this Code of Conduct at all times.
@@ -15,7 +14,6 @@ The Camunda Community Code of Conduct also applies to any Camunda online space. 
 
 We trust all of our community members will help to create a safe and welcoming environment for everyone.
 
-
 ## Our Standards
 
 We are dedicated to providing a harassment-free community space for everyone, regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, ethnicity, age, physical appearance, religion or similar personal characteristics.
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 1665f5f..4f1ab30 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -28,6 +28,7 @@ run the command: `mvn clean install -DskipTests` in the root folder.
 > NOTE: The Java and the Go modules are built and tested with Docker 20.10.5 [with IPv6 support](https://docs.docker.com/config/daemon/ipv6/).
 
 The resulting Zeebe distribution can be found in the folder `dist/target`, i.e.
+
 ```
 dist/target/camunda-cloud-zeebe-X.Y.Z-SNAPSHOT.tar.gz
 dist/target/camunda-cloud-zeebe-X.Y.Z-SNAPSHOT.zip
@@ -71,7 +72,7 @@ If you have a general usage question please ask on the [forum][] or [slack][] ch
 Every issue should have a meaningful name and a description which either
 describes:
 - a new feature with details about the use case the feature would solve or
-  improve
+improve
 - a problem, how we can reproduce it and what would be the expected behavior
 - a change and the intention how this would improve the system
 
@@ -85,26 +86,29 @@ To work on an issue, follow the following steps:
 
 1. Check that a [GitHub issue][issues] exists for the task you want to work on.
    If one does not, create one. Refer to the [issue guidelines](#github-issue-guidelines).
-1. Checkout the `develop` branch and pull the latest changes.
+2. Checkout the `develop` branch and pull the latest changes.
+
    ```
    git checkout develop
    git pull
    ```
-1. Create a new branch with the naming scheme `issueId-description`.
+3. Create a new branch with the naming scheme `issueId-description`.
+
    ```
    git checkout -b 123-adding-bpel-support`
    ```
-1. Follow the [Google Java Format](https://github.com/google/google-java-format#intellij-android-studio-and-other-jetbrains-ides)
+4. Follow the [Google Java Format](https://github.com/google/google-java-format#intellij-android-studio-and-other-jetbrains-ides)
    and [Zeebe Code Style](https://github.com/zeebe-io/zeebe/wiki/Code-Style) while coding.
-1. Implement the required changes on your branch and regularly push your
+5. Implement the required changes on your branch and regularly push your
    changes to the origin so that the CI can run. Code formatting, style and
    license header are fixed automatically by running maven. Checkstyle
    violations have to be fixed manually.
+
    ```
    git commit -am 'feat(broker): bpel support'
    git push -u origin 123-adding-bpel-support
    ```
-1. If you think you finished the issue please prepare the branch for reviewing.
+6. If you think you finished the issue please prepare the branch for reviewing.
    Please consider our [pull requests and code
    reviews](https://github.com/camunda-cloud/zeebe/wiki/Pull-Requests-and-Code-Reviews)
    guide, before requesting a review. In general the commits should be squashed
@@ -113,7 +117,8 @@ To work on an issue, follow the following steps:
    it would be best if they are split up into another commit. Rule of thumb is
    that you should think about how a reviewer can best understand your changes.
    Please follow the [commit message guidelines](#commit-message-guidelines).
-1. After finishing up the squashing force push your changes to your branch.
+7. After finishing up the squashing force push your changes to your branch.
+
    ```
    git push --force-with-lease
    ```
@@ -132,22 +137,22 @@ Before opening your first pull request, please have a look at this [guide](https
 3. The reviewer will look at the pull request in the following days and give
    you either feedback or accept the changes. Your reviewer might use
    [emoji code](#review-emoji-code) during the reviewing process.
-    1. If there are changes requested address them in a new commit. Notify the
-       reviewer in a comment if the pull request is ready for review again. If
-       the changes are accepted squash them again in the related commit and force push.
-       Then initiate a merge by writing a comment with the content `bors merge`.
-    2. If no changes are requested the reviewer will initiate a merge by adding a
-       comment with the content `bors merge`.
-5. When a merge is initiated, a bot will merge your branch with the latest
+   1. If there are changes requested address them in a new commit. Notify the
+      reviewer in a comment if the pull request is ready for review again. If
+      the changes are accepted squash them again in the related commit and force push.
+      Then initiate a merge by writing a comment with the content `bors merge`.
+   2. If no changes are requested the reviewer will initiate a merge by adding a
+      comment with the content `bors merge`.
+4. When a merge is initiated, a bot will merge your branch with the latest
    develop and run the CI on it.
-    1. If everything goes well the branch is merged and deleted and the issue
-       and pull request are closed.
-    2. If there are merge conflicts the author of the pull request has to
-       manually rebase `develop` into the issue branch and retrigger a merge
-       attempt.
-    3. If there are CI errors the author of the pull request has to check if
-       they are caused by its changes and address them. If they are flaky tests
-       a merge can be retried with a comment with the content `bors retry`.
+   1. If everything goes well the branch is merged and deleted and the issue
+      and pull request are closed.
+   2. If there are merge conflicts the author of the pull request has to
+      manually rebase `develop` into the issue branch and retrigger a merge
+      attempt.
+   3. If there are CI errors the author of the pull request has to check if
+      they are caused by its changes and address them. If they are flaky tests
+      a merge can be retried with a comment with the content `bors retry`.
 
 ## Reviewing a pull request
 
@@ -189,20 +194,20 @@ Please follow these steps to backport your changes:
    - When _successful_, a new backport pull request was automatically created. Simply **approve and
      merge it** by adding a review with a `bors merge` comment.
    - If it _failed_, please follow these **manual steps**:
-      1. Locally checkout the target branch (e.g. `stable/1.0`).
-      2. Make sure it's up to date with origin (i.e. `git pull`).
-      3. Checkout a new branch for your backported changes (e.g. `git checkout -b
-         backport-123-to-stable/1.0`).
-      4. Cherry pick your changes `git cherry-pick -x <sha-1>...<sha-n>`. You may need to resolve
-         conflicts.
-      5. Push your cherry-picked changes `git push`.
-      6. Create a pull request for your backport branch:
-         - Make sure it is clear that this backports in the title (e.g. `[Backport stable/1.0] Title
-           of the original PR`).
-         - Make sure to change the target of the pull request to the correct branch (e.g.
-           `stable/1.0`).
-         - Refer to the pull request in the description to link it (e.g. `backports #123`)
-         - Refer to any issues that were referenced in the original pull request (e.g. `relates to #99`).
+     1. Locally checkout the target branch (e.g. `stable/1.0`).
+     2. Make sure it's up to date with origin (i.e. `git pull`).
+     3. Checkout a new branch for your backported changes (e.g. `git checkout -b
+        backport-123-to-stable/1.0`).
+     4. Cherry pick your changes `git cherry-pick -x <sha-1>...<sha-n>`. You may need to resolve
+        conflicts.
+     5. Push your cherry-picked changes `git push`.
+     6. Create a pull request for your backport branch:
+        - Make sure it is clear that this backports in the title (e.g. `[Backport stable/1.0] Title
+          of the original PR`).
+        - Make sure to change the target of the pull request to the correct branch (e.g.
+          `stable/1.0`).
+        - Refer to the pull request in the description to link it (e.g. `backports #123`)
+        - Refer to any issues that were referenced in the original pull request (e.g. `relates to #99`).
 
 ## Commit Message Guidelines
 
@@ -220,6 +225,7 @@ Zeebe uses a bot which will check your commit messages when a pull request is
 submitted. Please make sure to address any hints from the bot.
 
 ### Commit message header
+
 Examples:
 
 * `docs(reference): add start event to bpmn symbol support matrix`
@@ -227,6 +233,7 @@ Examples:
 * `feat(clients/go): allow more than 9000 jobs in a single call`
 
 The commit header should match the following pattern:
+
 ```
 %{type}(%{scope}): %{description}
 ```
@@ -234,16 +241,16 @@ The commit header should match the following pattern:
 The commit header should be kept short, preferably under 72 chars but we allow a max of 120 chars.
 
 - `type` should be one of:
-   - `build`: Changes that affect the build system (e.g. Maven, Docker, etc)
-   - `ci`: Changes to our CI configuration files and scripts (e.g. Jenkins, Bors, etc)
-   - `deps`: A change to the external dependencies (was already used by Dependabot)
-   - `docs`:  A change to the documentation
-   - `feat`: A new feature (both internal or user-facing)
-   - `fix`: A bug fix (both internal or user-facing)
-   - `perf`: A code change that improves performance
-   - `refactor`: A code change that does not change the behavior
-   - `style`: A change to align the code with our style guide
-   - `test`: Adding missing tests or correcting existing tests
+  - `build`: Changes that affect the build system (e.g. Maven, Docker, etc)
+  - `ci`: Changes to our CI configuration files and scripts (e.g. Jenkins, Bors, etc)
+  - `deps`: A change to the external dependencies (was already used by Dependabot)
+  - `docs`:  A change to the documentation
+  - `feat`: A new feature (both internal or user-facing)
+  - `fix`: A bug fix (both internal or user-facing)
+  - `perf`: A code change that improves performance
+  - `refactor`: A code change that does not change the behavior
+  - `style`: A change to align the code with our style guide
+  - `test`: Adding missing tests or correcting existing tests
 - `scope` (optional): name of the changed component (e.g. `engine`, `journal`, `README`)
 - `description`: short description of the change in present tense
 
@@ -287,21 +294,19 @@ unacceptable behavior as soon as possible.
 [forum]: https://forum.zeebe.io/
 [slack]: https://zeebe-slack-invite.herokuapp.com/
 [sample]: https://github.com/zeebe-io/zeebe-test-template-java
-
 [status]: https://github.com/zeebe-io/zeebe/labels?q=Type
 [planned]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Enhancement
 [ready]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Maintenance
 [in progress]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Bug
 [needs review]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Docs
-
 [type]: https://github.com/zeebe-io/zeebe/labels?q=Type
 [enhancement]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Enhancement
 [maintenance]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Maintenance
 [bug]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Bug
 [docs]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Docs
 [question]: https://github.com/zeebe-io/zeebe/labels/Type%3A%20Question
-
 [scope]: https://github.com/zeebe-io/zeebe/labels?q=Scope
 [broker]: https://github.com/zeebe-io/zeebe/labels/Scope%3A%20broker
 [clients/java]: https://github.com/zeebe-io/zeebe/labels/Scope%3A%20clients%2Fjava
 [clients/go]: https://github.com/zeebe-io/zeebe/labels/Scope%3A%20clients%2Fgo
+
diff --git a/README.md b/README.md
index 381baf9..6bade35 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,5 @@
 # Zeebe - Workflow Engine for Microservices Orchestration
 
-
 [![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.camunda.zeebe/camunda-cloud-zeebe/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.camunda.zeebe/camunda-cloud-zeebe)
 
 Zeebe provides visibility into and control over business processes that span multiple microservices. It is the engine that powers [Camunda Cloud](https://camunda.com/products/cloud/workflow-engine/).
@@ -53,7 +52,6 @@ To learn more about what we're currently working on, check the [GitHub issues](h
 * [Java Client](https://docs.camunda.io/docs/product-manuals/clients/java-client/index)
 * [Go Client](https://docs.camunda.io/docs/product-manuals/clients/go-client/index)
 
-
 ## Contributing
 
 Read the [Contributions Guide](/CONTRIBUTING.md).
diff --git a/atomix/README.md b/atomix/README.md
index 5e5e65d..802d73f 100644
--- a/atomix/README.md
+++ b/atomix/README.md
@@ -20,16 +20,16 @@ This was then the point we decided that we can change more and more the code bas
 In order to avoid broken builds (develop etc.) and improve the development cycle we decided to merge the Atomix repo into ours.
 
 **Pros:**
- * we have the benefit of one build (everything is build together) - it doesn't break another branch
- * shorter development cycle, we can easily test changes in Atomix in a Zeebe branch
- * easier to create new benchmarks
- * Atomix tests are run more often - which might lead also to new bugs
- * we can easily use our tools and plugins (LGTM, sonarcloud, licensecheck, checkstyle etc.)
- * make release process easier
+* we have the benefit of one build (everything is build together) - it doesn't break another branch
+* shorter development cycle, we can easily test changes in Atomix in a Zeebe branch
+* easier to create new benchmarks
+* Atomix tests are run more often - which might lead also to new bugs
+* we can easily use our tools and plugins (LGTM, sonarcloud, licensecheck, checkstyle etc.)
+* make release process easier
 
 **Cons:**
- * More flaky tests in the beginning
- * Longer build time
+* More flaky tests in the beginning
+* Longer build time
 
 We removed half of their code base, because we don't need it.
 We changed the code style to our style, which makes it also much easier to develop.
diff --git a/benchmarks/README.md b/benchmarks/README.md
index ff73637..f3c8e98 100644
--- a/benchmarks/README.md
+++ b/benchmarks/README.md
@@ -12,12 +12,12 @@ In order to setup a benchmark you need to have several tools on your machine ins
 
 Follow these guide's to install each of them:
 
- * gcloud https://cloud.google.com/sdk/install
- * Kubectl https://kubernetes.io/de/docs/tasks/tools/install-kubectl/
- * Helm 3.*  https://helm.sh/docs/intro/install/
- * docker https://docs.docker.com/install/
- * kubens/kubectx https://github.com/ahmetb/kubectx
- * OPTIONAL go https://golang.org/doc/install
+* gcloud https://cloud.google.com/sdk/install
+* Kubectl https://kubernetes.io/de/docs/tasks/tools/install-kubectl/
+* Helm 3.*  https://helm.sh/docs/intro/install/
+* docker https://docs.docker.com/install/
+* kubens/kubectx https://github.com/ahmetb/kubectx
+* OPTIONAL go https://golang.org/doc/install
 
 Some of the necessary steps you need to do are:
 
@@ -51,7 +51,7 @@ install kubens /usr/local/bin/
 
 ## Best Practices Windows
 
- Running the benchmarks on Windows is possible with the help of the [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10).
+Running the benchmarks on Windows is possible with the help of the [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10).
 The setup changes slightly compared to the Linux setup.
 
 These are the components to install on Windows:
@@ -65,9 +65,9 @@ These are the components to install within the WSL:
 
 When following the instructions above, execute all commands that deal with Docker in a Windows shell, and exeucte all other commands in the WSL shell.
 
-
 ## What's next?
 
- * [Read the docs](docs/README.md)
- * [Run a Benchmark](setup/README.md)
- * [Change the Project](project/README.md)
+* [Read the docs](docs/README.md)
+* [Run a Benchmark](setup/README.md)
+* [Change the Project](project/README.md)
+
diff --git a/benchmarks/docs/debug/README.md b/benchmarks/docs/debug/README.md
index 233a0fc..26ba0b9 100644
--- a/benchmarks/docs/debug/README.md
+++ b/benchmarks/docs/debug/README.md
@@ -52,14 +52,14 @@ For error and warn level logs, this is even more important, as these are expecte
 
 ### Changing log level dynamically in a running cluster
 
-Zeebe brokers expose a spring endpoint for configuring loggers dynamically. 
+Zeebe brokers expose a spring endpoint for configuring loggers dynamically.
 See [spring docs](https://docs.spring.io/spring-boot/docs/current/actuator-api/html/#loggers).
 
 To change the log level of a broker in our benchmark clusters, first port-forward to the broker.
 
 `kubectl port-forward zeebe-0 9600:9600`
 
-Then execute the following in your local machine. 
+Then execute the following in your local machine.
 Change `io.atomix` to the required logger and set the ""configuredLevel"" to the required level.
 
 ```
@@ -102,6 +102,7 @@ Normally in our benchmarks we use docker images with only the JRE, which means y
 the pod installed. In order to do a heap dump you would need to install the jdk to use jmap for example.
 
 To do that run the following:
+
 ```sh
     # add stretch backports to get java 11
     echo 'deb http://ftp.debian.org/debian stretch-backports main' | tee /etc/apt/sources.list.d/stretch-backports.list
@@ -184,3 +185,4 @@ Metrics provide valuable insights regarding the health of the application for op
 application is behaving. They provide a cheap, cost-effective way of getting a point-in-time snapshot of the application, and how all the moving parts correlate.
 
 > TODO: describe useful metrics/patterns and correlation, specifically related to Zeebe, that we use when debugging
+
diff --git a/benchmarks/docs/failures/README.md b/benchmarks/docs/failures/README.md
index c2cce19..ea866ad 100644
--- a/benchmarks/docs/failures/README.md
+++ b/benchmarks/docs/failures/README.md
@@ -2,11 +2,12 @@
 
 This section should collect several common failures, we have observed on running our benchmarks.
 
-## Problems with Elasticsearch Exporter 
+## Problems with Elasticsearch Exporter
 
 If you observing that the elasticsearch exporter is not able to export data it is very likely that it is due to out of disk space issues.
 
 Check the log if you some logs statements which are similar to the following:
+
 ```
 I 2019-10-17T12:39:27.467341628Z 2019-10-17 12:39:27.467 [exporter] [zeebe-1.zeebe.default.svc.cluster.local:26501-zb-fs-workers-4] WARN  io.camunda.zeebe.broker.exporter.elasticsearch - Failed to flush bulk completely
  
diff --git a/benchmarks/docs/setup/README.md b/benchmarks/docs/setup/README.md
index fd42ba9..1dcf11a 100644
--- a/benchmarks/docs/setup/README.md
+++ b/benchmarks/docs/setup/README.md
@@ -109,7 +109,7 @@ linkerd check
 
 There are a few additional steps that need to be done when setting this up with a cloud provider, such as GCP.
 
-As first you have to [create a new cluster in the Google cloud console](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster?hl=de). 
+As first you have to [create a new cluster in the Google cloud console](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster?hl=de).
 
 > Remember from the top level readme, to switch easily between clusters/namespaces, make sure to install kubectx and kubens.
 
@@ -122,3 +122,4 @@ After the GCP cluster is set up, make sure to create the SSD storage class, whic
 ```
 kubectl apply -f ssd-storageclass.yaml
 ```
+
diff --git a/benchmarks/project/README.md b/benchmarks/project/README.md
index 18ea074..7349270 100644
--- a/benchmarks/project/README.md
+++ b/benchmarks/project/README.md
@@ -16,3 +16,4 @@ mvn versions:set-property -DgenerateBackupPoms=false -Dproperty=version.zeebe -D
 docker-compose build
 docker-compose push
 ```
+
diff --git a/benchmarks/setup/README.md b/benchmarks/setup/README.md
index 737ecba..70a419b 100644
--- a/benchmarks/setup/README.md
+++ b/benchmarks/setup/README.md
@@ -9,11 +9,10 @@ There are two ways to run a benchmark:
 
 All guides are targeted at a Linux systems.
 
-## Requirements 
+## Requirements
 
 Make sure you have the following installed: docker, gcloud, kubectl, kubens and helm
 
-
 ## Benchmarking Self-Managed Zeebe Cluster
 
 ### How to setup a Benchmark namespace
@@ -42,6 +41,7 @@ If there is a property missing which you want to change please open an issue in 
 If you want to use your own or a different Zeebe snapshot then you could do the following.
 
 **Build the docker image:**
+
 ```bash
 # builds the dist with zbctl packed
 clients/go/cmd/zbctl/build.sh && mvn clean install -T1C -DskipTests -pl dist -am
@@ -54,6 +54,7 @@ docker push gcr.io/zeebe-io/zeebe:SNAPSHOT-$(date +%Y-%m-%d)-$(git rev-parse --s
 Change the `zeebe-values.yaml` file in order to use the new created image.
 
 The changes should look similar to this:
+
 ```yaml
 image:
   repository: gcr.io/zeebe-io/zeebe
@@ -80,8 +81,6 @@ In order to do this easily, just run:
 
 This will switch to the default namespace, delete the given namespace and delete the corresponding folder.
 
-
-
 ## Benchmarking Camunda Cloud SaaS
 
 _You need a Kubernetes Cluster at your disposal to run the benchmark itself, which then connects to your Camunda Cloud Cluster._
@@ -90,22 +89,22 @@ Possible future extension point: Use https://docs.camunda.io/docs/apis-clients/c
 
 ### Setup Cloud Cluster
 
- * Go to Camunda Cloud Console and login with your credentials (reach out to #cloud if you haven't one)
- * Create a new cluster
- * Create new API credentials for that cluster
+* Go to Camunda Cloud Console and login with your credentials (reach out to #cloud if you haven't one)
+* Create a new cluster
+* Create new API credentials for that cluster
 
 ### Setup Cloud Benchmark
 
- * Create a new cloud benchmark in our benchmark folder, via `./newCloudBenchmark`. This will create a new namespace in our k8 cluster, such that we can deploy our starters and workers. They will connect to the camunda cloud cluster after we added the correct credentials.
- * Edit the `cloudcredentials.yaml` file, replace the old/default values with your client credentials. **NOTE: Please make sure that you're not pushing your credentials to the repository!** https://github.com/camunda-cloud/zeebe/blob/develop/benchmarks/setup/cloud-default/cloudcredentials.yaml contains an example.
- * Deploy everything you need, e. g. run `make clean all` to deploy the secret, worker and starter. **Alternatively**, you can also manually provision the resources:
-  * `kubectl apply -f cloudcredentials.yaml`
-  * `kubectl apply -f worker.yaml`
-  * `kubectl apply -f starter.yaml`
-
+* Create a new cloud benchmark in our benchmark folder, via `./newCloudBenchmark`. This will create a new namespace in our k8 cluster, such that we can deploy our starters and workers. They will connect to the camunda cloud cluster after we added the correct credentials.
+* Edit the `cloudcredentials.yaml` file, replace the old/default values with your client credentials. **NOTE: Please make sure that you're not pushing your credentials to the repository!** https://github.com/camunda-cloud/zeebe/blob/develop/benchmarks/setup/cloud-default/cloudcredentials.yaml contains an example.
+* Deploy everything you need, e. g. run `make clean all` to deploy the secret, worker and starter. **Alternatively**, you can also manually provision the resources:
+* `kubectl apply -f cloudcredentials.yaml`
+* `kubectl apply -f worker.yaml`
+* `kubectl apply -f starter.yaml`
 
 ### Use Grafana to Inspect Cloud Metrics (Camunda Internals Only)
 
 * If you use the region 'new chaos' when creating a cluster, it will be created in 'ultrachaos' gke cluster
 * This allows to check the metrics for your benchmark via https://grafana-ultrachaos.internal.ultrawombat.com/?orgId=1
 * If you use the region ""integration worker' when creating a cluster, it you can check for metrics via https://grafana-worker-1.internal.ultrawombat.com/
+
diff --git a/bom/README.md b/bom/README.md
index e7a3090..d216cdd 100644
--- a/bom/README.md
+++ b/bom/README.md
@@ -17,3 +17,4 @@ pom.
     </dependencies>
 </dependencyManagement>
 ```
+
diff --git a/clients/go/README.md b/clients/go/README.md
index 48aecdc..a523a45 100644
--- a/clients/go/README.md
+++ b/clients/go/README.md
@@ -1,6 +1,5 @@
 # Zeebe Go Client
 
-
 ## Development
 
 If we had a gateway-protocol change we need to make sure that we regenerate the protobuf file, which is used by the go client.
@@ -57,6 +56,8 @@ go-bindata -pkg embedded -o embedded.go -prefix data data/
 ```
 
 If you don't have `go-bindata` installed, you can install it by running:
+
 ```
 go get -u github.com/go-bindata/go-bindata/...
 ```
+
diff --git a/clients/oauth2/README.md b/clients/oauth2/README.md
index 3803840..e5e702d 100644
--- a/clients/oauth2/README.md
+++ b/clients/oauth2/README.md
@@ -7,8 +7,8 @@ setups with different identity providers, [ory/hydra](https://www.ory.sh/docs/hy
 Each set up consists of a docker-compose file which sets up the following stack:
 
 1. keycloak or hydra
-1. nginx
-1. zeebe broker
+2. nginx
+3. zeebe broker
 
 ## Usage
 
diff --git a/exporters/elasticsearch-exporter/README.md b/exporters/elasticsearch-exporter/README.md
index b5a9f1d..458a700 100644
--- a/exporters/elasticsearch-exporter/README.md
+++ b/exporters/elasticsearch-exporter/README.md
@@ -169,3 +169,4 @@ exporters:
         processInstanceCreation: false
         processMessageSubscription: false
 ```
+
diff --git a/gateway-protocol-impl/README.md b/gateway-protocol-impl/README.md
index ac8bf48..91b4cf5 100644
--- a/gateway-protocol-impl/README.md
+++ b/gateway-protocol-impl/README.md
@@ -2,19 +2,19 @@
 
 Zeebe client grpc protobuf protocol.
 
-
 ## Go Code Generation
 
 ### Prerequisite
+
 To generate the go grpc stubs you need the following tools:
 
 1. Go >= 1.7 (https://golang.org/dl/)
-1. The go protoc generator
-    ```
-    go get -u github.com/golang/protobuf/protoc-gen-go
-    ```
-1. Maven >= 3.3.1 (https://maven.apache.org/download.cgi)
+2. The go protoc generator
 
+   ```
+   go get -u github.com/golang/protobuf/protoc-gen-go
+   ```
+3. Maven >= 3.3.1 (https://maven.apache.org/download.cgi)
 
 ### Generate Stubs
 
diff --git a/monitor/README.md b/monitor/README.md
index 2f3f795..d6f2049 100644
--- a/monitor/README.md
+++ b/monitor/README.md
@@ -3,8 +3,8 @@
 ## Metrics
 
 Zeebe exports several metrics to facilitate monitoring a cluster.
-Currently, metrics are exported using Prometheus. You can find 
-documentation about the different metrics 
+Currently, metrics are exported using Prometheus. You can find
+documentation about the different metrics
 [here](https://docs.camunda.io/docs/product-manuals/zeebe/deployment-guide/operations/metrics).
 
 ### Testing
@@ -21,26 +21,26 @@ port 9090. The Prometheus instance is configured to scrape the brokers every 5 s
 namespace and pod label as `local` and `broker-*`.
 
 > Remember that docker-compose does not remove volumes on the down command, so if you are completely done with it you
-> will need to run either `docker-compose --project-directory ./ -f docker-compose.yml -f ../docker/compose/docker-compose.yaml down -v` 
+> will need to run either `docker-compose --project-directory ./ -f docker-compose.yml -f ../docker/compose/docker-compose.yaml down -v`
 > or `docker volume prune`
 
 ### Grafana
 
 You can find [here](grafana/zeebe.json) a pre-built Grafana dashboard to
-visualize most metrics. This is the dashboard that we use to test and 
+visualize most metrics. This is the dashboard that we use to test and
 monitor our own Zeebe installations.
 
-> NOTE: this dashboard is used for development and can serve as a 
-starting point for your own dashboard, but may not be tailored for your
-particular use case.
+> NOTE: this dashboard is used for development and can serve as a
+> starting point for your own dashboard, but may not be tailored for your
+> particular use case.
 
-See the Grafana documentation on 
+See the Grafana documentation on
 [how to import a dashboard](https://grafana.com/docs/grafana/latest/reference/export_import/#importing-a-dashboard).
 
 #### Variables
 
-The dashboard at the moment has most visualizations scoped to the 
-following variables: `namespace` (the k8s namespace), `pod` (the k8s pod), 
+The dashboard at the moment has most visualizations scoped to the
+following variables: `namespace` (the k8s namespace), `pod` (the k8s pod),
 and [partition](https://docs.camunda.io/docs/product-manuals/zeebe/technical-concepts/partitions).
 
 #### Contributing
diff --git a/transport/README.md b/transport/README.md
index f50b78a..5182308 100644
--- a/transport/README.md
+++ b/transport/README.md
@@ -5,11 +5,10 @@ Simple asynchronous Message Transport over TCP/IP.
 **Features**
 
 * Multi-Protocol:
-    * Single Message
-    * Request-Response
+  * Single Message
+  * Request-Response
 * Asynchronous
 * Pipelining for high throughput (many interactions can share single TCP connection)
-
 * [Web Site](https://zeebe.io)
 * [Documentation](https://docs.camunda.io)
 * [Issue Tracker](https://github.com/zeebe-io/zeebe/issues)
@@ -44,7 +43,6 @@ This way, multiple independent messages can be streamed through a single TCP cha
 
 The pipelining allows using TCP effectively: potentially many messages can be packed into a single TCP segment.
 
-
 ## Single Message Protocol
 
 This protocol allows sending of single, unrelated messages.

diff --git a/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTlsTest.java b/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTlsTest.java
index a4aee6b..bb523fa 100644
--- a/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTlsTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/cluster/messaging/impl/NettyMessagingServiceTlsTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright © 2020 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package io.atomix.cluster.messaging.impl;
 
 import static org.assertj.core.api.Assertions.assertThat;

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/util/ExternalExporter.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/util/ExternalExporter.java
index d1b1821..bd1fb44 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/util/ExternalExporter.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/util/ExternalExporter.java
@@ -1,3 +1,10 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
 package io.camunda.zeebe.broker.exporter.util;
 
 import io.camunda.zeebe.exporter.api.Exporter;

diff --git a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/validation/zeebe/FlowElementValidator.java b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/validation/zeebe/FlowElementValidator.java
index 0cd57ca..db821ea 100644
--- a/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/validation/zeebe/FlowElementValidator.java
+++ b/bpmn-model/src/main/java/io/camunda/zeebe/model/bpmn/validation/zeebe/FlowElementValidator.java
@@ -46,10 +46,10 @@ import org.camunda.bpm.model.xml.validation.ValidationResultCollector;
 
 public class FlowElementValidator implements ModelElementValidator<FlowElement> {
 
-  public static final Set<Class<?>> NON_EXECUTABLE_ELEMENT_TYPES = new HashSet<>();
-
   private static final Set<Class<?>> SUPPORTED_ELEMENT_TYPES = new HashSet<>();
 
+  private static final Set<Class<?>> NON_EXECUTABLE_ELEMENT_TYPES = new HashSet<>();
+
   static {
     SUPPORTED_ELEMENT_TYPES.add(BoundaryEvent.class);
     SUPPORTED_ELEMENT_TYPES.add(BusinessRuleTask.class);
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/FlowElementInstantiationTransformer.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/FlowElementInstantiationTransformer.java
index a0a21be..ca38a3c 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/FlowElementInstantiationTransformer.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/FlowElementInstantiationTransformer.java
@@ -7,8 +7,6 @@
  */
 package io.camunda.zeebe.engine.processing.deployment.model.transformer;
 
-import static io.camunda.zeebe.model.bpmn.validation.zeebe.FlowElementValidator.NON_EXECUTABLE_ELEMENT_TYPES;
-
 import io.camunda.zeebe.engine.processing.deployment.model.element.AbstractFlowElement;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableActivity;
 import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableBoundaryEvent;
@@ -33,6 +31,9 @@ import io.camunda.zeebe.model.bpmn.instance.Activity;
 import io.camunda.zeebe.model.bpmn.instance.BoundaryEvent;
 import io.camunda.zeebe.model.bpmn.instance.BusinessRuleTask;
 import io.camunda.zeebe.model.bpmn.instance.CallActivity;
+import io.camunda.zeebe.model.bpmn.instance.DataObject;
+import io.camunda.zeebe.model.bpmn.instance.DataObjectReference;
+import io.camunda.zeebe.model.bpmn.instance.DataStoreReference;
 import io.camunda.zeebe.model.bpmn.instance.EndEvent;
 import io.camunda.zeebe.model.bpmn.instance.EventBasedGateway;
 import io.camunda.zeebe.model.bpmn.instance.ExclusiveGateway;
@@ -53,13 +54,16 @@ import io.camunda.zeebe.model.bpmn.instance.Task;
 import io.camunda.zeebe.model.bpmn.instance.UserTask;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.function.Function;
 
 public final class FlowElementInstantiationTransformer
     implements ModelElementTransformer<FlowElement> {
 
   private static final Map<Class<?>, Function<String, AbstractFlowElement>> ELEMENT_FACTORIES;
+  private static final Set<Class<?>> NON_EXECUTABLE_ELEMENT_TYPES = new HashSet<>();
 
   static {
     ELEMENT_FACTORIES = new HashMap<>();
@@ -85,6 +89,10 @@ public final class FlowElementInstantiationTransformer
     ELEMENT_FACTORIES.put(StartEvent.class, ExecutableStartEvent::new);
     ELEMENT_FACTORIES.put(SubProcess.class, ExecutableFlowElementContainer::new);
     ELEMENT_FACTORIES.put(UserTask.class, ExecutableJobWorkerTask::new);
+
+    NON_EXECUTABLE_ELEMENT_TYPES.add(DataObject.class);
+    NON_EXECUTABLE_ELEMENT_TYPES.add(DataObjectReference.class);
+    NON_EXECUTABLE_ELEMENT_TYPES.add(DataStoreReference.class);
   }
 
   @Override
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/DataObjectTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/DataObjectTest.java
index 1d48fd7..7640863 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/DataObjectTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/DataObjectTest.java
@@ -24,6 +24,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.function.Function;
+import java.util.stream.Collectors;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -49,9 +50,6 @@ public class DataObjectTest {
   @Parameters(name = ""{0}"")
   public static Collection<Object[]> data() {
     return Arrays.asList(
-        new Object[] {
-          ""data-object-and-data-store"", deploy(""/processes/data-object-and-data-store.bpmn"")
-        },
         new Object[] {""non-executable-elements"", deploy(""/processes/non-executable-elements.bpmn"")},
         new Object[] {
           ""collaboration-with-lanes"", deploy(""/processes/collaboration-with-lanes.bpmn"")
@@ -63,19 +61,18 @@ public class DataObjectTest {
     // given
     final var deployment = performDeployment.apply(engine.deployment());
 
-    // then
-    assertThat(deployment.getIntent()).isEqualTo(DeploymentIntent.CREATED);
-    assertThat(deployment.getValue().getProcessesMetadata()).hasSize(1);
-
     // when
     final long processInstanceKey = engine.processInstance().ofBpmnProcessId(""process"").create();
 
-    // then
     final List<Record<ProcessInstanceRecordValue>> processInstanceEvents =
         RecordingExporter.processInstanceRecords()
             .withProcessInstanceKey(processInstanceKey)
             .limitToProcessInstanceCompleted()
-            .asList();
+            .collect(Collectors.toList());
+
+    // then
+    assertThat(deployment.getIntent()).isEqualTo(DeploymentIntent.CREATED);
+    assertThat(deployment.getValue().getProcessesMetadata()).hasSize(1);
 
     assertThat(processInstanceEvents)
         .extracting(e -> e.getValue().getBpmnElementType(), Record::getIntent)
diff --git a/engine/src/test/resources/processes/data-object-and-data-store.bpmn b/engine/src/test/resources/processes/data-object-and-data-store.bpmn
deleted file mode 100644
index cb8e156..0000000
--- a/engine/src/test/resources/processes/data-object-and-data-store.bpmn
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-<bpmn:definitions xmlns:bpmn=""http://www.omg.org/spec/BPMN/20100524/MODEL"" xmlns:bpmndi=""http://www.omg.org/spec/BPMN/20100524/DI"" xmlns:dc=""http://www.omg.org/spec/DD/20100524/DC"" xmlns:di=""http://www.omg.org/spec/DD/20100524/DI"" xmlns:modeler=""http://camunda.org/schema/modeler/1.0"" id=""Definitions_0r6dn1g"" targetNamespace=""http://bpmn.io/schema/bpmn"" exporter=""Camunda Modeler"" exporterVersion=""5.3.0"" modeler:executionPlatform=""Camunda Cloud"" modeler:executionPlatformVersion=""8.0.0"">
-  <bpmn:process id=""process"" isExecutable=""true"">
-    <bpmn:startEvent id=""StartEvent_1"">
-      <bpmn:outgoing>Flow_0wv76o9</bpmn:outgoing>
-    </bpmn:startEvent>
-    <bpmn:endEvent id=""Event_1gf5p5u"">
-      <bpmn:incoming>Flow_0wv76o9</bpmn:incoming>
-    </bpmn:endEvent>
-    <bpmn:sequenceFlow id=""Flow_0wv76o9"" sourceRef=""StartEvent_1"" targetRef=""Event_1gf5p5u"" />
-    <bpmn:dataStoreReference id=""DataStoreReference_11yc97f"" name=""data store"" />
-    <bpmn:dataObjectReference id=""DataObjectReference_19arsr1"" name=""data object"" dataObjectRef=""DataObject_0651bwq"" />
-    <bpmn:dataObject id=""DataObject_0651bwq"" />
-  </bpmn:process>
-  <bpmndi:BPMNDiagram id=""BPMNDiagram_1"">
-    <bpmndi:BPMNPlane id=""BPMNPlane_1"" bpmnElement=""Process_1qeg4fj"">
-      <bpmndi:BPMNShape id=""_BPMNShape_StartEvent_2"" bpmnElement=""StartEvent_1"">
-        <dc:Bounds x=""179"" y=""79"" width=""36"" height=""36"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Event_1gf5p5u_di"" bpmnElement=""Event_1gf5p5u"">
-        <dc:Bounds x=""352"" y=""79"" width=""36"" height=""36"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""DataStoreReference_11yc97f_di"" bpmnElement=""DataStoreReference_11yc97f"">
-        <dc:Bounds x=""205"" y=""215"" width=""50"" height=""50"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""206"" y=""272"" width=""49"" height=""14"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""DataObjectReference_19arsr1_di"" bpmnElement=""DataObjectReference_19arsr1"">
-        <dc:Bounds x=""332"" y=""215"" width=""36"" height=""50"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""323"" y=""272"" width=""54"" height=""14"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNEdge id=""Flow_0wv76o9_di"" bpmnElement=""Flow_0wv76o9"">
-        <di:waypoint x=""215"" y=""97"" />
-        <di:waypoint x=""352"" y=""97"" />
-      </bpmndi:BPMNEdge>
-    </bpmndi:BPMNPlane>
-  </bpmndi:BPMNDiagram>
-</bpmn:definitions>
diff --git a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/BpmnElementType.java b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/BpmnElementType.java
index f60ba76..832fca6 100644
--- a/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/BpmnElementType.java
+++ b/protocol/src/main/java/io/camunda/zeebe/protocol/record/value/BpmnElementType.java
@@ -55,12 +55,7 @@ public enum BpmnElementType {
 
   BUSINESS_RULE_TASK(""businessRuleTask""),
   SCRIPT_TASK(""scriptTask""),
-  SEND_TASK(""sendTask""),
-
-  // Data
-  DATA_OBJECT(null),
-  DATA_OBJECT_REFERENCE(null),
-  DATA_STORE_REFERENCE(null);
+  SEND_TASK(""sendTask"");
 
   private final String elementTypeName;
 

diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformation/BpmnTransformer.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformation/BpmnTransformer.java
index fa477dd..0af0c09 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformation/BpmnTransformer.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformation/BpmnTransformer.java
@@ -97,6 +97,7 @@ public final class BpmnTransformer {
     step3Visitor.registerHandler(new SubProcessTransformer());
 
     step4Visitor = new TransformationVisitor();
+    step4Visitor.registerHandler(new ContextProcessTransformer());
     step4Visitor.registerHandler(new IntermediateThrowEventTransformer());
     step4Visitor.registerHandler(new MultiInstanceActivityTransformer());
   }
diff --git a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/MultiInstanceActivityTransformer.java b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/MultiInstanceActivityTransformer.java
index f0db828..f038315 100644
--- a/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/MultiInstanceActivityTransformer.java
+++ b/engine/src/main/java/io/camunda/zeebe/engine/processing/deployment/model/transformer/MultiInstanceActivityTransformer.java
@@ -23,7 +23,6 @@ import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeLoopCharacteristics;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
 import io.camunda.zeebe.util.buffer.BufferUtil;
 import java.util.Collections;
-import java.util.List;
 import java.util.Optional;
 import org.agrona.DirectBuffer;
 
@@ -35,23 +34,10 @@ public final class MultiInstanceActivityTransformer implements ModelElementTrans
 
   @Override
   public void transform(final Activity element, final TransformContext context) {
-    final List<ExecutableProcess> processList = context.getProcesses();
-    ExecutableProcess process = processList.get(0);
-    ExecutableActivity innerActivity =
+    final ExecutableProcess process = context.getCurrentProcess();
+    final ExecutableActivity innerActivity =
         process.getElementById(element.getId(), ExecutableActivity.class);
 
-    // when there are more than one process in a collaboration definition the innerActivity could be
-    // null, we need to find the right process for it.
-    if (innerActivity == null && processList.size() > 1) {
-      for (final ExecutableProcess executableProcess : processList.subList(1, processList.size())) {
-        innerActivity = executableProcess.getElementById(element.getId(), ExecutableActivity.class);
-        if (innerActivity != null) {
-          process = executableProcess;
-          break;
-        }
-      }
-    }
-
     final LoopCharacteristics loopCharacteristics = element.getLoopCharacteristics();
     if (loopCharacteristics instanceof MultiInstanceLoopCharacteristics) {
 

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/CollaborationDeploymentTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/CollaborationDeploymentTest.java
index d658f74..621badc 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/CollaborationDeploymentTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/CollaborationDeploymentTest.java
@@ -54,11 +54,7 @@ public final class CollaborationDeploymentTest {
   @Parameters(name = ""{0}"")
   public static Collection<Object[]> data() {
     return Arrays.asList(
-        new Object[] {""collaboration with NPE error one"", deploy(""/processes/issue-9400-NPE.bpmn"")},
-        new Object[] {
-          ""collaboration with NPE error two"",
-          deploy(""/processes/issue-9400-carPolicyRequestProcess.bpmn"")
-        },
+        new Object[] {""collaboration with NPE error"", deploy(""/processes/issue-9400-NPE.bpmn"")},
         new Object[] {""collaboration without NPE error"", deploy(""/processes/issue-9400.bpmn"")});
   }
 
diff --git a/engine/src/test/resources/processes/issue-9400-carPolicyRequestProcess.bpmn b/engine/src/test/resources/processes/issue-9400-carPolicyRequestProcess.bpmn
deleted file mode 100644
index cf83be8..0000000
--- a/engine/src/test/resources/processes/issue-9400-carPolicyRequestProcess.bpmn
+++ /dev/null
@@ -1,193 +0,0 @@
-<?xml version=""1.0"" encoding=""UTF-8""?>
-<bpmn:definitions xmlns:bpmn=""http://www.omg.org/spec/BPMN/20100524/MODEL"" xmlns:bpmndi=""http://www.omg.org/spec/BPMN/20100524/DI"" xmlns:dc=""http://www.omg.org/spec/DD/20100524/DC"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:di=""http://www.omg.org/spec/DD/20100524/DI"" xmlns:zeebe=""http://camunda.org/schema/zeebe/1.0"" xmlns:modeler=""http://camunda.org/schema/modeler/1.0"" id=""Definitions_0zqvwec"" targetNamespace=""http://bpmn.io/schema/bpmn"" exporter=""Camunda Modeler"" exporterVersion=""5.0.0"" modeler:executionPlatform=""Camunda Cloud"" modeler:executionPlatformVersion=""8.0.0"">
-  <bpmn:collaboration id=""Collaboration_0rbcz45"">
-    <bpmn:participant id=""Auto"" name=""Administrator"" processRef=""carPolicyRequest"" />
-    <bpmn:participant id=""Administrator"" name=""Administrator"" processRef=""createMultiplePolicyRequests"" />
-  </bpmn:collaboration>
-  <bpmn:process id=""carPolicyRequest"" name=""Car Policy Request"" isExecutable=""true"">
-    <bpmn:extensionElements />
-    <bpmn:endEvent id=""Event_1k15lrt"" name=""Application rejected"">
-      <bpmn:incoming>Flow_0l6vxvq</bpmn:incoming>
-    </bpmn:endEvent>
-    <bpmn:exclusiveGateway id=""Gateway_1ezd9lm"" name=""Decision?"" default=""rejectFlow"">
-      <bpmn:incoming>Flow_1dzniis</bpmn:incoming>
-      <bpmn:outgoing>rejectFlow</bpmn:outgoing>
-      <bpmn:outgoing>approveFlow</bpmn:outgoing>
-    </bpmn:exclusiveGateway>
-    <bpmn:endEvent id=""Event_0z7nhbs"" name=""Application approved"">
-      <bpmn:incoming>Flow_10haxip</bpmn:incoming>
-    </bpmn:endEvent>
-    <bpmn:manualTask id=""rejectApplication"" name=""Reject Application"">
-      <bpmn:incoming>rejectFlow</bpmn:incoming>
-      <bpmn:outgoing>Flow_0l6vxvq</bpmn:outgoing>
-    </bpmn:manualTask>
-    <bpmn:manualTask id=""Activity_1s2f6dx"" name=""Approve Application"">
-      <bpmn:incoming>approveFlow</bpmn:incoming>
-      <bpmn:outgoing>Flow_10haxip</bpmn:outgoing>
-    </bpmn:manualTask>
-    <bpmn:startEvent id=""StartEvent_1"" name=""Application received"">
-      <bpmn:outgoing>Flow_1mld8y9</bpmn:outgoing>
-    </bpmn:startEvent>
-    <bpmn:userTask id=""DecideOnRisk"" name=""Decide on risk"">
-      <bpmn:incoming>Flow_1mld8y9</bpmn:incoming>
-      <bpmn:outgoing>Flow_1lwoola</bpmn:outgoing>
-    </bpmn:userTask>
-    <bpmn:exclusiveGateway id=""Gateway_128a0pt"">
-      <bpmn:incoming>Flow_1lwoola</bpmn:incoming>
-      <bpmn:incoming>Flow_17ij0k0</bpmn:incoming>
-      <bpmn:outgoing>Flow_1dzniis</bpmn:outgoing>
-    </bpmn:exclusiveGateway>
-    <bpmn:boundaryEvent id=""Event_10utne0"" name=""Simulate human execution"" attachedToRef=""DecideOnRisk"">
-      <bpmn:outgoing>Flow_17ij0k0</bpmn:outgoing>
-      <bpmn:timerEventDefinition id=""TimerEventDefinition_18p0wzz"">
-        <bpmn:timeDuration xsi:type=""bpmn:tFormalExpression"">=""PT""+string(data.duration)+""S""</bpmn:timeDuration>
-      </bpmn:timerEventDefinition>
-    </bpmn:boundaryEvent>
-    <bpmn:sequenceFlow id=""Flow_17ij0k0"" sourceRef=""Event_10utne0"" targetRef=""Gateway_128a0pt"" />
-    <bpmn:sequenceFlow id=""Flow_1dzniis"" sourceRef=""Gateway_128a0pt"" targetRef=""Gateway_1ezd9lm"" />
-    <bpmn:sequenceFlow id=""Flow_1mld8y9"" sourceRef=""StartEvent_1"" targetRef=""DecideOnRisk"" />
-    <bpmn:sequenceFlow id=""Flow_1lwoola"" sourceRef=""DecideOnRisk"" targetRef=""Gateway_128a0pt"" />
-    <bpmn:sequenceFlow id=""Flow_10haxip"" sourceRef=""Activity_1s2f6dx"" targetRef=""Event_0z7nhbs"" />
-    <bpmn:sequenceFlow id=""approveFlow"" name=""approve"" sourceRef=""Gateway_1ezd9lm"" targetRef=""Activity_1s2f6dx"">
-      <bpmn:conditionExpression xsi:type=""bpmn:tFormalExpression"">= modulo(data.duration,2)=0</bpmn:conditionExpression>
-    </bpmn:sequenceFlow>
-    <bpmn:sequenceFlow id=""rejectFlow"" name=""reject"" sourceRef=""Gateway_1ezd9lm"" targetRef=""rejectApplication"" />
-    <bpmn:sequenceFlow id=""Flow_0l6vxvq"" sourceRef=""rejectApplication"" targetRef=""Event_1k15lrt"" />
-  </bpmn:process>
-  <bpmn:process id=""createMultiplePolicyRequests"" name=""Create Multiple policy requests"" isExecutable=""true"">
-    <bpmn:callActivity id=""Activity_1704pel"" name=""Call multiple policy requests"">
-      <bpmn:extensionElements>
-        <zeebe:calledElement processId=""Test"" propagateAllChildVariables=""false"" />
-      </bpmn:extensionElements>
-      <bpmn:incoming>Flow_0qwfup5</bpmn:incoming>
-      <bpmn:outgoing>Flow_1w0vqsu</bpmn:outgoing>
-      <bpmn:multiInstanceLoopCharacteristics>
-        <bpmn:extensionElements>
-          <zeebe:loopCharacteristics inputCollection=""=[{duration:6,experience:2},{duration:3,experience:3},{duration:2,experience:1},{duration:1,experience:3},{duration:4,experience:2},{duration:2,experience:3},{duration:10,experience:4},{duration:11,experience:7},{duration:5,experience:1},{duration:3,experience:3},{duration:8,experience:2},{duration:2,experience:6},{duration:9,experience:2},{duration:2,experience:3},{duration:13,experience:4},{duration:6,experience:7},{duration:8,experience:1},{duration:2,experience:3},{duration:14,experience:2},{duration:11,experience:6}]"" inputElement=""data"" />
-        </bpmn:extensionElements>
-      </bpmn:multiInstanceLoopCharacteristics>
-    </bpmn:callActivity>
-    <bpmn:startEvent id=""Event_0zthl95"">
-      <bpmn:outgoing>Flow_0qwfup5</bpmn:outgoing>
-    </bpmn:startEvent>
-    <bpmn:endEvent id=""Event_0g29yei"">
-      <bpmn:incoming>Flow_1w0vqsu</bpmn:incoming>
-    </bpmn:endEvent>
-    <bpmn:sequenceFlow id=""Flow_0qwfup5"" sourceRef=""Event_0zthl95"" targetRef=""Activity_1704pel"" />
-    <bpmn:sequenceFlow id=""Flow_1w0vqsu"" sourceRef=""Activity_1704pel"" targetRef=""Event_0g29yei"" />
-  </bpmn:process>
-  <bpmndi:BPMNDiagram id=""BPMNDiagram_1"">
-    <bpmndi:BPMNPlane id=""BPMNPlane_1"" bpmnElement=""Collaboration_0rbcz45"">
-      <bpmndi:BPMNShape id=""Participant_1thpbvt_di"" bpmnElement=""Auto"" isHorizontal=""true"">
-        <dc:Bounds x=""160"" y=""360"" width=""1130"" height=""427"" />
-        <bpmndi:BPMNLabel />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNEdge id=""Flow_17ij0k0_di"" bpmnElement=""Flow_17ij0k0"">
-        <di:waypoint x=""640"" y=""651"" />
-        <di:waypoint x=""640"" y=""671"" />
-        <di:waypoint x=""760"" y=""671"" />
-        <di:waypoint x=""760"" y=""618"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_1dzniis_di"" bpmnElement=""Flow_1dzniis"">
-        <di:waypoint x=""785"" y=""593"" />
-        <di:waypoint x=""925"" y=""593"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_1mld8y9_di"" bpmnElement=""Flow_1mld8y9"">
-        <di:waypoint x=""248"" y=""593"" />
-        <di:waypoint x=""600"" y=""593"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_1lwoola_di"" bpmnElement=""Flow_1lwoola"">
-        <di:waypoint x=""700"" y=""593"" />
-        <di:waypoint x=""735"" y=""593"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_10haxip_di"" bpmnElement=""Flow_10haxip"">
-        <di:waypoint x=""1120"" y=""723"" />
-        <di:waypoint x=""1232"" y=""723"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_1gu64rf_di"" bpmnElement=""approveFlow"">
-        <di:waypoint x=""950"" y=""618"" />
-        <di:waypoint x=""950"" y=""723"" />
-        <di:waypoint x=""1020"" y=""723"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""960"" y=""653"" width=""40"" height=""14"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_03yoenm_di"" bpmnElement=""rejectFlow"">
-        <di:waypoint x=""950"" y=""568"" />
-        <di:waypoint x=""950"" y=""473"" />
-        <di:waypoint x=""1030"" y=""473"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""966"" y=""517"" width=""27"" height=""14"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""Flow_0l6vxvq_di"" bpmnElement=""Flow_0l6vxvq"">
-        <di:waypoint x=""1130"" y=""450"" />
-        <di:waypoint x=""1232"" y=""450"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNShape id=""Event_1k15lrt_di"" bpmnElement=""Event_1k15lrt"">
-        <dc:Bounds x=""1232"" y=""432"" width=""36"" height=""36"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""1223"" y=""475"" width=""54"" height=""27"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Gateway_1ezd9lm_di"" bpmnElement=""Gateway_1ezd9lm"" isMarkerVisible=""true"">
-        <dc:Bounds x=""925"" y=""568"" width=""50"" height=""50"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""885"" y=""563"" width=""49"" height=""14"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Event_0z7nhbs_di"" bpmnElement=""Event_0z7nhbs"">
-        <dc:Bounds x=""1232"" y=""705"" width=""36"" height=""36"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""1223"" y=""748"" width=""54"" height=""27"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Activity_07df2mc_di"" bpmnElement=""rejectApplication"">
-        <dc:Bounds x=""1030"" y=""410"" width=""100"" height=""80"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Activity_1pdds20_di"" bpmnElement=""Activity_1s2f6dx"">
-        <dc:Bounds x=""1020"" y=""683"" width=""100"" height=""80"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Event_1oo3uik_di"" bpmnElement=""StartEvent_1"">
-        <dc:Bounds x=""212"" y=""575"" width=""36"" height=""36"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""203"" y=""618"" width=""54"" height=""27"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Activity_1dmw4c4_di"" bpmnElement=""DecideOnRisk"">
-        <dc:Bounds x=""600"" y=""553"" width=""100"" height=""80"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Gateway_128a0pt_di"" bpmnElement=""Gateway_128a0pt"" isMarkerVisible=""true"">
-        <dc:Bounds x=""735"" y=""568"" width=""50"" height=""50"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Event_1jerr03_di"" bpmnElement=""Event_10utne0"">
-        <dc:Bounds x=""622"" y=""615"" width=""36"" height=""36"" />
-        <bpmndi:BPMNLabel>
-          <dc:Bounds x=""550"" y=""657"" width=""80"" height=""27"" />
-        </bpmndi:BPMNLabel>
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""Participant_0p5ys5k_di"" bpmnElement=""Administrator"" isHorizontal=""true"">
-        <dc:Bounds x=""160"" y=""80"" width=""1130"" height=""250"" />
-        <bpmndi:BPMNLabel />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNEdge id=""BPMNEdge_1w187eq"" bpmnElement=""Flow_0qwfup5"">
-        <di:waypoint x=""268"" y=""200"" />
-        <di:waypoint x=""383"" y=""200"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNEdge id=""BPMNEdge_06ve91d"" bpmnElement=""Flow_1w0vqsu"">
-        <di:waypoint x=""483"" y=""200"" />
-        <di:waypoint x=""592"" y=""200"" />
-      </bpmndi:BPMNEdge>
-      <bpmndi:BPMNShape id=""BPMNShape_1kndygo"" bpmnElement=""Activity_1704pel"">
-        <dc:Bounds x=""383"" y=""160"" width=""100"" height=""80"" />
-        <bpmndi:BPMNLabel />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""BPMNShape_1w6heek"" bpmnElement=""Event_0zthl95"">
-        <dc:Bounds x=""232"" y=""182"" width=""36"" height=""36"" />
-      </bpmndi:BPMNShape>
-      <bpmndi:BPMNShape id=""BPMNShape_0jyetlk"" bpmnElement=""Event_0g29yei"">
-        <dc:Bounds x=""592"" y=""182"" width=""36"" height=""36"" />
-      </bpmndi:BPMNShape>
-    </bpmndi:BPMNPlane>
-  </bpmndi:BPMNDiagram>
-</bpmn:definitions>
"
camunda/zeebe,test,"diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
index 8f04f5a..9739d13 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
@@ -244,7 +244,7 @@ public class ModifyProcessInstanceTest {
   }
 
   @Test
-  public void shouldBeAbleToCompleteModfiedProcessInstance() {
+  public void shouldBeAbleToCompleteModifiedProcessInstance() {
     // given
     ENGINE
         .deployment()

diff --git a/topology/src/test/java/io/camunda/zeebe/topology/api/TopologyManagementApiTest.java b/topology/src/test/java/io/camunda/zeebe/topology/api/TopologyManagementApiTest.java
index ad3c26b..a3afc1f 100644
--- a/topology/src/test/java/io/camunda/zeebe/topology/api/TopologyManagementApiTest.java
+++ b/topology/src/test/java/io/camunda/zeebe/topology/api/TopologyManagementApiTest.java
@@ -182,4 +182,29 @@ final class TopologyManagementApiTest {
             new PartitionLeaveOperation(MemberId.from(""1""), 2));
     assertThat(changeStatus.changeId()).isEqualTo(initialTopology.version() + 1);
   }
+
+  @Test
+  void shouldScaleBrokers() {
+    // given
+    final var request =
+        new TopologyManagementRequest.ScaleRequest(Set.of(MemberId.from(""1""), MemberId.from(""2"")));
+    final ClusterTopology currentTopology =
+        ClusterTopology.init()
+            .addMember(
+                MemberId.from(""1""),
+                MemberState.initializeAsActive(
+                    Map.of(1, PartitionState.active(1), 2, PartitionState.active(1))));
+    recordingCoordinator.setCurrentTopology(currentTopology);
+
+    // when
+    final var changeStatus = clientApi.scaleMembers(request).join();
+
+    // then
+    assertThat(recordingCoordinator.getLastAppliedOperation())
+        .containsExactly(
+            new MemberJoinOperation(MemberId.from(""2"")),
+            new PartitionJoinOperation(MemberId.from(""2""), 2, 1),
+            new PartitionLeaveOperation(MemberId.from(""1""), 2));
+    assertThat(changeStatus.changeId()).isEqualTo(initialTopology.version() + 1);
+  }
 }

diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
index eed9424..a1ae702 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/SnapshotChecksumTest.java
@@ -10,6 +10,10 @@ package io.camunda.zeebe.snapshots.impl;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import io.camunda.zeebe.snapshots.ImmutableChecksumsSFV;
+import io.camunda.zeebe.test.util.STracer;
+import io.camunda.zeebe.test.util.STracer.Syscall;
+import io.camunda.zeebe.test.util.asserts.strace.FSyncTraceAssert;
+import io.camunda.zeebe.test.util.asserts.strace.STracerAssert;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
@@ -124,6 +128,28 @@ public class SnapshotChecksumTest {
   }
 
   @Test
+  public void shouldFlushOnPersist() throws Exception {
+    // given
+    final var traceFile = temporaryFolder.newFile().toPath();
+    final var expectedChecksum = SnapshotChecksum.calculate(multipleFileSnapshot);
+    final var checksumPath = multipleFileSnapshot.resolveSibling(""checksum"");
+    final var tracer = STracer.traceFor(Syscall.FSYNC, traceFile);
+
+    // when
+    try (tracer) {
+      SnapshotChecksum.persist(checksumPath, expectedChecksum);
+    }
+
+    // then
+    STracerAssert.assertThat(tracer)
+        .fsyncTraces()
+        .hasSize(1)
+        .first(FSyncTraceAssert.factory())
+        .hasPath(checksumPath)
+        .isSuccessful();
+  }
+
+  @Test
   public void shouldDetectCorruptedSnapshot() throws IOException {
     // given
     final var expectedChecksum = SnapshotChecksum.calculate(corruptedSnapshot);

diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
index db11116..6b27bdf 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/StreamIntegrationTest.java
@@ -25,6 +25,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
+import org.agrona.CloseHelper;
 import org.agrona.DirectBuffer;
 import org.agrona.MutableDirectBuffer;
 import org.awaitility.Awaitility;
@@ -111,14 +112,7 @@ class StreamIntegrationTest {
   @AfterEach
   void tearDown() {
     Collections.reverse(closeables);
-    closeables.forEach(
-        c -> {
-          try {
-            c.close();
-          } catch (final Exception e) {
-            throw new RuntimeException(e);
-          }
-        });
+    CloseHelper.closeAll(closeables);
   }
 
   @Test

diff --git a/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java b/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
index c44f724..8b3ad83 100644
--- a/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
+++ b/backup/src/test/java/io/camunda/zeebe/backup/processing/CheckpointRecordsProcessorTest.java
@@ -27,6 +27,7 @@ import io.camunda.zeebe.protocol.impl.record.value.management.CheckpointRecord;
 import io.camunda.zeebe.protocol.record.RecordType;
 import io.camunda.zeebe.protocol.record.intent.management.CheckpointIntent;
 import java.nio.file.Path;
+import java.util.concurrent.atomic.AtomicLong;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -175,4 +176,69 @@ final class CheckpointRecordsProcessorTest {
     assertThat(state.getCheckpointId()).isEqualTo(checkpointId);
     assertThat(state.getCheckpointPosition()).isEqualTo(checkpointPosition);
   }
+
+  @Test
+  void shouldNotifyListenerWhenNewCheckpointCreated() {
+    // given
+    final AtomicLong checkpoint = new AtomicLong();
+    processor.addCheckpointListener(checkpoint::set);
+
+    final long checkpointId = 2;
+    final long checkpointPosition = 20;
+    final CheckpointRecord value = new CheckpointRecord().setCheckpointId(checkpointId);
+    final MockTypedCheckpointRecord record =
+        new MockTypedCheckpointRecord(
+            checkpointPosition, 0, CheckpointIntent.CREATE, RecordType.COMMAND, value);
+
+    // when
+    processor.process(record, resultBuilder);
+
+    // then
+    assertThat(checkpoint).hasValue(checkpointId);
+  }
+
+  @Test
+  void shouldNotifyListenerWhenReplayed() {
+    // given
+    final AtomicLong checkpoint = new AtomicLong();
+    processor.addCheckpointListener(checkpoint::set);
+
+    final long checkpointId = 3;
+    final long checkpointPosition = 10;
+    final CheckpointRecord value =
+        new CheckpointRecord()
+            .setCheckpointId(checkpointId)
+            .setCheckpointPosition(checkpointPosition);
+    final MockTypedCheckpointRecord record =
+        new MockTypedCheckpointRecord(
+            checkpointPosition + 1,
+            checkpointPosition,
+            CheckpointIntent.CREATED,
+            RecordType.EVENT,
+            value);
+
+    // when
+    processor.replay(record);
+
+    // then
+    assertThat(checkpoint).hasValue(checkpointId);
+  }
+
+  @Test
+  void shouldNotifyListenerOnInit() {
+    // given
+    final var context = new Context(zeebedb, zeebedb.createContext());
+    processor = new CheckpointRecordsProcessor(backupManager);
+    final long checkpointId = 3;
+    final long checkpointPosition = 30;
+    state.setCheckpointInfo(checkpointId, checkpointPosition);
+
+    // when
+    final AtomicLong checkpoint = new AtomicLong();
+    processor.addCheckpointListener(checkpoint::set);
+    processor.init(context);
+
+    // then
+    assertThat(checkpoint).hasValue(checkpointId);
+  }
 }

diff --git a/clients/go/cmd/zbctl/testdata/help.golden b/clients/go/cmd/zbctl/testdata/help.golden
index bded4b2..f0f38d0 100644
--- a/clients/go/cmd/zbctl/testdata/help.golden
+++ b/clients/go/cmd/zbctl/testdata/help.golden
@@ -13,7 +13,7 @@ Available Commands:
   activate    Activate a resource
   cancel      Cancel resource
   complete    Complete a resource
-  completion  generate the autocompletion script for the specified shell
+  completion  Generate the autocompletion script for the specified shell
   create      Create resources
   deploy      Creates a new process for each BPMN or YAML resource provided
   fail        Fail a resource

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/resource/ResourceDeletionTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/resource/ResourceDeletionTest.java
index 92215d3..e92162c 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/resource/ResourceDeletionTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/resource/ResourceDeletionTest.java
@@ -12,10 +12,17 @@ import static org.assertj.core.api.Assertions.fail;
 import static org.assertj.core.api.Assertions.tuple;
 
 import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.model.bpmn.Bpmn;
 import io.camunda.zeebe.protocol.record.Record;
+import io.camunda.zeebe.protocol.record.intent.DecisionEvaluationIntent;
 import io.camunda.zeebe.protocol.record.intent.DecisionIntent;
 import io.camunda.zeebe.protocol.record.intent.DecisionRequirementsIntent;
+import io.camunda.zeebe.protocol.record.intent.IncidentIntent;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.protocol.record.intent.ResourceDeletionIntent;
+import io.camunda.zeebe.protocol.record.value.BpmnElementType;
+import io.camunda.zeebe.protocol.record.value.DecisionEvaluationRecordValue;
+import io.camunda.zeebe.protocol.record.value.ErrorType;
 import io.camunda.zeebe.protocol.record.value.deployment.DecisionRecordValue;
 import io.camunda.zeebe.protocol.record.value.deployment.DecisionRequirementsMetadataValue;
 import io.camunda.zeebe.test.util.BrokerClassRuleHelper;
@@ -27,7 +34,9 @@ import org.junit.Test;
 public class ResourceDeletionTest {
 
   private static final String DRG_SINGLE_DECISION = ""/dmn/decision-table.dmn"";
+  private static final String DRG_SINGLE_DECISION_V2 = ""/dmn/decision-table_v2.dmn"";
   private static final String DRG_MULTIPLE_DECISIONS = ""/dmn/drg-force-user.dmn"";
+  private static final String RESULT_VARIABLE = ""result"";
 
   @Rule public final EngineRule engine = EngineRule.singlePartition();
   @Rule public final BrokerClassRuleHelper helper = new BrokerClassRuleHelper();
@@ -61,6 +70,119 @@ public class ResourceDeletionTest {
     verifyResourceIsDeleted(drgKey);
   }
 
+  @Test
+  public void shouldCreateIncidentIfOnlyDecisionVersionIsDeleted() {
+    // given
+    final long drgKey = deployDrg(DRG_SINGLE_DECISION);
+    final var processId = deployProcessWithBusinessRuleTask(""jedi_or_sith"");
+
+    // when
+    engine.resourceDeletion().withResourceKey(drgKey).delete();
+    final long processInstanceKey = engine.processInstance().ofBpmnProcessId(processId).create();
+
+    // then
+    assertThat(
+            RecordingExporter.incidentRecords(IncidentIntent.CREATED)
+                .withProcessInstanceKey(processInstanceKey)
+                .getFirst())
+        .describedAs(""Should create incident when the only version of a decision is deleted"")
+        .extracting(
+            r -> r.getValue().getBpmnProcessId(),
+            r -> r.getValue().getElementId(),
+            r -> r.getValue().getErrorType(),
+            r -> r.getValue().getErrorMessage())
+        .containsOnly(
+            processId,
+            ""task"",
+            ErrorType.CALLED_DECISION_ERROR,
+            """"""
+            Expected to evaluate decision 'jedi_or_sith', \
+            but no decision found for id 'jedi_or_sith'\
+            """""");
+  }
+
+  @Test
+  public void shouldEvaluatePreviousDecisionVersionIfLatestVersionIsDeleted() {
+    // given
+    final long drgKeyV1 = deployDrg(DRG_SINGLE_DECISION);
+    final long drgKeyV2 = deployDrg(DRG_SINGLE_DECISION_V2);
+    final var processId = deployProcessWithBusinessRuleTask(""jedi_or_sith"");
+
+    // when
+    engine.resourceDeletion().withResourceKey(drgKeyV2).delete();
+    final long processInstanceKey =
+        engine
+            .processInstance()
+            .ofBpmnProcessId(processId)
+            .withVariable(""lightsaberColor"", ""blue"")
+            .create();
+
+    // then
+    assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(processInstanceKey)
+                .limitToProcessInstanceCompleted())
+        .describedAs(""Process Instance should be completed"")
+        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSubsequence(
+            tuple(BpmnElementType.BUSINESS_RULE_TASK, ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.BUSINESS_RULE_TASK, ProcessInstanceIntent.ELEMENT_COMPLETED),
+            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
+
+    assertThat(
+        RecordingExporter.decisionEvaluationRecords(DecisionEvaluationIntent.EVALUATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .withDecisionId(""jedi_or_sith"")
+            .getFirst())
+        .describedAs(""Should evaluate version 1 of the decision"")
+        .extracting(Record::getValue)
+        .extracting(DecisionEvaluationRecordValue::getDecisionId,
+            DecisionEvaluationRecordValue::getDecisionVersion,
+            DecisionEvaluationRecordValue::getDecisionRequirementsKey)
+        .containsOnly(""jedi_or_sith"", 1, drgKeyV1);
+  }
+
+  @Test
+  public void shouldEvaluateLatestVersionIfPreviousVersionIsDeleted() {
+    // given
+    final long drgKeyV1 = deployDrg(DRG_SINGLE_DECISION);
+    final long drgKeyV2 = deployDrg(DRG_SINGLE_DECISION_V2);
+    final var processId = deployProcessWithBusinessRuleTask(""jedi_or_sith"");
+
+    // when
+    engine.resourceDeletion().withResourceKey(drgKeyV1).delete();
+    final long processInstanceKey =
+        engine
+            .processInstance()
+            .ofBpmnProcessId(processId)
+            .withVariable(""lightsaberColor"", ""blue"")
+            .create();
+
+    // then
+    assertThat(
+        RecordingExporter.processInstanceRecords()
+            .withProcessInstanceKey(processInstanceKey)
+            .limitToProcessInstanceCompleted())
+        .describedAs(""Process Instance should be completed"")
+        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSubsequence(
+            tuple(BpmnElementType.BUSINESS_RULE_TASK, ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.BUSINESS_RULE_TASK, ProcessInstanceIntent.ELEMENT_COMPLETED),
+            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
+
+    assertThat(
+        RecordingExporter.decisionEvaluationRecords(DecisionEvaluationIntent.EVALUATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .withDecisionId(""jedi_or_sith"")
+            .getFirst())
+        .describedAs(""Should evaluate version 2 of the decision"")
+        .extracting(Record::getValue)
+        .extracting(DecisionEvaluationRecordValue::getDecisionId,
+            DecisionEvaluationRecordValue::getDecisionVersion,
+            DecisionEvaluationRecordValue::getDecisionRequirementsKey)
+        .containsOnly(""jedi_or_sith"", 2, drgKeyV2);
+  }
+
   private long deployDrg(final String drgResource) {
     return engine
         .deployment()
@@ -166,4 +288,19 @@ public class ResourceDeletionTest {
             decisionCreatedRecord.getDecisionRequirementsKey(),
             decisionCreatedRecord.isDuplicate());
   }
+
+  private String deployProcessWithBusinessRuleTask(final String decisionId) {
+    final String processId = helper.getBpmnProcessId();
+    engine
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(processId)
+                .startEvent()
+                .businessRuleTask(
+                    ""task"",
+                    t -> t.zeebeCalledDecisionId(decisionId).zeebeResultVariable(RESULT_VARIABLE))
+                .done())
+        .deploy();
+    return processId;
+  }
 }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/record/RecordingExporter.java b/test-util/src/main/java/io/camunda/zeebe/test/util/record/RecordingExporter.java
index 3432e0e..f09d633 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/record/RecordingExporter.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/record/RecordingExporter.java
@@ -12,6 +12,7 @@ import io.camunda.zeebe.exporter.api.context.Controller;
 import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.RecordValue;
 import io.camunda.zeebe.protocol.record.ValueType;
+import io.camunda.zeebe.protocol.record.intent.DecisionEvaluationIntent;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
 import io.camunda.zeebe.protocol.record.intent.EscalationIntent;
 import io.camunda.zeebe.protocol.record.intent.IncidentIntent;
@@ -304,6 +305,10 @@ public final class RecordingExporter implements Exporter {
         records(ValueType.DECISION_EVALUATION, DecisionEvaluationRecordValue.class));
   }
 
+  public static DecisionEvaluationRecordStream decisionEvaluationRecords(final DecisionEvaluationIntent intent) {
+    return decisionEvaluationRecords().withIntent(intent);
+  }
+
   public static SignalSubscriptionRecordStream signalSubscriptionRecords() {
     return new SignalSubscriptionRecordStream(
         records(ValueType.SIGNAL_SUBSCRIPTION, SignalSubscriptionRecordValue.class));

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareTimerStartEventTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareTimerStartEventTest.java
index cb67649..280cadc 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareTimerStartEventTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareTimerStartEventTest.java
@@ -24,7 +24,6 @@ import io.camunda.zeebe.test.util.record.RecordingExporter;
 import java.time.Duration;
 import java.util.function.Consumer;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -167,7 +166,6 @@ public class TenantAwareTimerStartEventTest {
   }
 
   @Test
-  @Ignore(""https://github.com/camunda/zeebe/issues/14279"")
   public void shouldCancelTimerWhenDeletingProcessDefinition() {
     // given
     assertThat(
@@ -177,7 +175,11 @@ public class TenantAwareTimerStartEventTest {
         .isTrue();
 
     // when
-    engine.resourceDeletion().withResourceKey(processDefinitionKey).delete();
+    engine
+        .resourceDeletion()
+        .withResourceKey(processDefinitionKey)
+        .withAuthorizedTenantIds(TENANT)
+        .delete();
 
     // then
     final var canceledEvent =
@@ -188,7 +190,6 @@ public class TenantAwareTimerStartEventTest {
   }
 
   @Test
-  @Ignore(""https://github.com/camunda/zeebe/issues/14279"")
   public void shouldRecreateTimerWhenDeletingLatestProcessDefinition() {
     // given
     assertThat(
@@ -204,7 +205,11 @@ public class TenantAwareTimerStartEventTest {
         deployment.getValue().getProcessesMetadata().get(0).getProcessDefinitionKey();
 
     // when
-    engine.resourceDeletion().withResourceKey(latestProcessDefinitionKey).delete();
+    engine
+        .resourceDeletion()
+        .withResourceKey(latestProcessDefinitionKey)
+        .withAuthorizedTenantIds(TENANT)
+        .delete();
 
     // then
     final var canceledEvent =

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
index b2022f5..d8e2fae 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
@@ -17,6 +17,7 @@ import io.camunda.zeebe.client.api.response.DeploymentEvent;
 import io.camunda.zeebe.client.api.response.Process;
 import io.camunda.zeebe.client.api.response.ProcessInstanceEvent;
 import io.camunda.zeebe.client.api.response.PublishMessageResponse;
+import io.camunda.zeebe.client.api.response.ResolveIncidentResponse;
 import io.camunda.zeebe.client.impl.oauth.OAuthCredentialsProviderBuilder;
 import io.camunda.zeebe.gateway.impl.configuration.AuthenticationCfg.AuthMode;
 import io.camunda.zeebe.model.bpmn.Bpmn;
@@ -741,7 +742,7 @@ public class MultiTenancyOverIdentityIT {
   }
 
   @Test
-  void shouldDenyCompleteJobWhenUnauthorized() {
+  void shouldNotFindJobWhenUnauthorized() {
     // given
     final ActivatedJob activatedJob;
     try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_A)) {
@@ -785,6 +786,90 @@ public class MultiTenancyOverIdentityIT {
     }
   }
 
+  @Test
+  void shouldResolveIncidentForTenant() {
+    // given
+    process =
+        Bpmn.createExecutableProcess(processId)
+            .startEvent()
+            .zeebeOutputExpression(""assert(foo, foo != null)"", ""target"")
+            .endEvent()
+            .done();
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_A)) {
+      client
+          .newDeployResourceCommand()
+          .addProcessModel(process, ""process.bpmn"")
+          .tenantId(""tenant-a"")
+          .send()
+          .join();
+      client
+          .newCreateInstanceCommand()
+          .bpmnProcessId(processId)
+          .latestVersion()
+          .tenantId(""tenant-a"")
+          .send()
+          .join();
+
+      final var incidentKey =
+          RecordingExporter.incidentRecords().withBpmnProcessId(processId).getFirst().getKey();
+
+      // when
+      final Future<ResolveIncidentResponse> result =
+          client.newResolveIncidentCommand(incidentKey).send();
+
+      // then
+      assertThat(result)
+          .describedAs(
+              ""Expect that incident can be resolved as the client has access process of tenant-a"")
+          .succeedsWithin(Duration.ofSeconds(10));
+    }
+  }
+
+  @Test
+  void shouldNotFindIncidentForTenantWhenUnauthorized() {
+    // given
+    process =
+        Bpmn.createExecutableProcess(processId)
+            .startEvent()
+            .zeebeOutputExpression(""assert(foo, foo != null)"", ""target"")
+            .endEvent()
+            .done();
+    final long incidentKey;
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_A)) {
+      client
+          .newDeployResourceCommand()
+          .addProcessModel(process, ""process.bpmn"")
+          .tenantId(""tenant-a"")
+          .send()
+          .join();
+      client
+          .newCreateInstanceCommand()
+          .bpmnProcessId(processId)
+          .latestVersion()
+          .tenantId(""tenant-a"")
+          .send()
+          .join();
+
+      incidentKey =
+          RecordingExporter.incidentRecords().withBpmnProcessId(processId).getFirst().getKey();
+    }
+
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_B)) {
+      // when
+      final Future<ResolveIncidentResponse> result =
+          client.newResolveIncidentCommand(incidentKey).send();
+
+      // then
+      assertThat(result)
+          .failsWithin(Duration.ofSeconds(10))
+          .withThrowableThat()
+          .withMessageContaining(""NOT_FOUND"")
+          .withMessageContaining(
+              ""Command 'RESOLVE' rejected with code 'NOT_FOUND': Expected to resolve incident with key '%d', but no such incident was found""
+                  .formatted(incidentKey));
+    }
+  }
+
   /**
    * Awaits the presence of the Camunda realm and openid keys on the keycloak container. Once
    * Keycloak and Identity booted up, Identity will eventually configure the Camunda Realm on

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/ControlledActorClockEndpointIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/ControlledActorClockEndpointIT.java
index 349b6b9..f716799 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/ControlledActorClockEndpointIT.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/ControlledActorClockEndpointIT.java
@@ -180,6 +180,7 @@ final class ControlledActorClockEndpointIT {
     final AtomicInteger previouslySeenRecords = new AtomicInteger(1);
     Awaitility.await(""Waiting for a stable number of exported records"")
         .during(Duration.ofSeconds(5))
+        .timeout(Duration.ofSeconds(30))
         .until(
             this::getExportedRecordsCount,
             (recordCount) -> {

diff --git a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
index 33410da..edd0588 100644
--- a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
+++ b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
@@ -787,7 +787,8 @@ final class JsonSerializableToJsonTest {
               }
             }],
             ""elementId"": ""activity""
-          }]
+          }],
+          ""activatedElementInstanceKeys"": []
         }
         """"""
       },
@@ -803,7 +804,8 @@ final class JsonSerializableToJsonTest {
         {
           ""processInstanceKey"": 1,
           ""terminateInstructions"": [],
-          ""activateInstructions"": []
+          ""activateInstructions"": [],
+          ""activatedElementInstanceKeys"": []
         }
         """"""
       },

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
index 4d3d94f..f202a46 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
@@ -760,6 +760,76 @@ public class ModifyProcessInstanceTerminationTest {
             tuple(BpmnElementType.PROCESS, PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATED));
   }
 
+  @Test
+  public void shouldTerminateCallActivity() {
+    // given
+    final String callActivityProcessId = ""callActivityProcess"";
+    final var callActivityProcess =
+        Bpmn.createExecutableProcess(callActivityProcessId)
+            .startEvent()
+            .userTask(""A"")
+            .endEvent()
+            .done();
+
+    final var process =
+        Bpmn.createExecutableProcess(PROCESS_ID)
+            .startEvent()
+            .callActivity(
+                ""callActivity"", callActivity -> callActivity.zeebeProcessId(callActivityProcessId))
+            .endEvent()
+            .done();
+
+    ENGINE.deployment().withXmlResource(callActivityProcess).withXmlResource(process).deploy();
+
+    final var processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+    final var callActivityKey = getElementInstanceKeyOfElement(processInstanceKey, ""callActivity"");
+
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+        .withParentProcessInstanceKey(processInstanceKey)
+        .withElementId(""A"")
+        .await();
+
+    // when
+    ENGINE
+        .processInstance()
+        .withInstanceKey(processInstanceKey)
+        .modification()
+        .terminateElement(callActivityKey)
+        .modify();
+
+    // then
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKeyOrParentProcessInstanceKey(processInstanceKey)
+                .limit(PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATED))
+        .extracting(
+            r -> r.getValue().getBpmnElementType(),
+            r -> r.getValue().getElementId(),
+            Record::getIntent)
+        .describedAs(""Expect to terminate the callActivity and all containing elements"")
+        .containsSequence(
+            tuple(
+                BpmnElementType.CALL_ACTIVITY,
+                ""callActivity"",
+                ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(
+                BpmnElementType.PROCESS,
+                callActivityProcessId,
+                ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.USER_TASK, ""A"", ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.USER_TASK, ""A"", ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(
+                BpmnElementType.PROCESS,
+                callActivityProcessId,
+                ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(
+                BpmnElementType.CALL_ACTIVITY,
+                ""callActivity"",
+                ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(BpmnElementType.PROCESS, PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.PROCESS, PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATED));
+  }
+
   private static long getElementInstanceKeyOfElement(
       final long processInstanceKey, final String elementId) {
     return RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
index d6fca6c..cf4a2cd 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
@@ -42,6 +42,14 @@ public final class ProcessInstanceRecordStream
     return valueFilter(v -> v.getProcessInstanceKey() == processInstanceKey);
   }
 
+  public ProcessInstanceRecordStream withProcessInstanceKeyOrParentProcessInstanceKey(
+      final long processInstanceKey) {
+    return valueFilter(
+        v ->
+            v.getProcessInstanceKey() == processInstanceKey
+                || v.getParentProcessInstanceKey() == processInstanceKey);
+  }
+
   public ProcessInstanceRecordStream withElementId(final String elementId) {
     return valueFilter(v -> elementId.equals(v.getElementId()));
   }

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/JobStreamEndpointIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/JobStreamEndpointIT.java
new file mode 100644
index 0000000..e3322b4
--- /dev/null
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/management/JobStreamEndpointIT.java
@@ -0,0 +1,216 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.it.management;
+
+import static io.restassured.RestAssured.given;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
+
+import io.camunda.zeebe.broker.StandaloneBroker;
+import io.camunda.zeebe.broker.system.configuration.BrokerCfg;
+import io.camunda.zeebe.client.ZeebeClient;
+import io.camunda.zeebe.it.smoke.CollectorRegistryInitializer;
+import io.camunda.zeebe.it.smoke.RandomPortInitializer;
+import io.camunda.zeebe.qa.util.actuator.JobStreamsActuator;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.JobStreams;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.RemoteJobStream;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.RemoteStreamId;
+import java.time.Duration;
+import org.agrona.CloseHelper;
+import org.assertj.core.api.InstanceOfAssertFactories;
+import org.awaitility.Awaitility;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
+import org.springframework.boot.test.web.server.LocalServerPort;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit.jupiter.SpringExtension;
+
+@ExtendWith(SpringExtension.class)
+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = StandaloneBroker.class)
+@ContextConfiguration(
+    initializers = {RandomPortInitializer.class, CollectorRegistryInitializer.class})
+@ActiveProfiles(""test"")
+public class JobStreamEndpointIT {
+  @Autowired private BrokerCfg config;
+
+  @SuppressWarnings(""unused"")
+  @LocalServerPort
+  private int managementPort;
+
+  private ZeebeClient client;
+  private JobStreamsActuator actuator;
+
+  @BeforeEach
+  void beforeEach() {
+    await(""until broker is ready"").untilAsserted(this::assertBrokerIsReady);
+
+    client =
+        ZeebeClient.newClientBuilder()
+            .usePlaintext()
+            .gatewayAddress(
+                config.getGateway().getNetwork().getHost()
+                    + "":""
+                    + config.getGateway().getNetwork().getPort())
+            .build();
+    actuator =
+        JobStreamsActuator.of(""http://localhost:%d/actuator/jobstreams"".formatted(managementPort));
+  }
+
+  @AfterEach
+  void afterEach() {
+    CloseHelper.quietClose(client);
+
+    // avoid flakiness between tests by waiting until the registries are empty
+    Awaitility.await(""until no streams are registered"")
+        .untilAsserted(
+            () -> {
+              final JobStreams streams = actuator.list();
+              assertThat(streams.getRemote()).isEmpty();
+              assertThat(streams.getClient()).isEmpty();
+            });
+  }
+
+  @Test
+  void shouldListMultipleRemoteStreams() {
+    // given
+    client
+        .newStreamJobsCommand()
+        .jobType(""foo"")
+        .consumer(ignored -> {})
+        .workerName(""foo"")
+        .timeout(Duration.ofMillis(100))
+        .fetchVariables(""foo"", ""fooz"")
+        .send();
+    client
+        .newStreamJobsCommand()
+        .jobType(""bar"")
+        .consumer(ignored -> {})
+        .workerName(""bar"")
+        .timeout(Duration.ofMillis(250))
+        .fetchVariables(""bar"", ""barz"")
+        .send();
+
+    // when
+    final var streams =
+        Awaitility.await(""until all streams are registered"")
+            .until(actuator::listRemote, list -> list.size() == 2);
+
+    // then
+    assertThat(streams)
+        .anySatisfy(
+            stream -> {
+              assertThat(stream.getJobType()).isEqualTo(""foo"");
+              assertThat(stream.getMetadata().getWorker()).isEqualTo(""foo"");
+              assertThat(stream.getMetadata().getTimeout()).isEqualTo(100L);
+              assertThat(stream.getMetadata().getFetchVariables())
+                  .containsExactlyInAnyOrder(""foo"", ""fooz"");
+            })
+        .anySatisfy(
+            stream -> {
+              assertThat(stream.getJobType()).isEqualTo(""bar"");
+              assertThat(stream.getMetadata().getWorker()).isEqualTo(""bar"");
+              assertThat(stream.getMetadata().getTimeout()).isEqualTo(250L);
+              assertThat(stream.getMetadata().getFetchVariables())
+                  .containsExactlyInAnyOrder(""bar"", ""barz"");
+            });
+  }
+
+  @Test
+  void shouldListMultipleRemoteConsumers() {
+    // given
+    client
+        .newStreamJobsCommand()
+        .jobType(""foo"")
+        .consumer(ignored -> {})
+        .workerName(""foo"")
+        .timeout(Duration.ofMillis(100))
+        .fetchVariables(""foo"", ""fooz"")
+        .send();
+    client
+        .newStreamJobsCommand()
+        .jobType(""foo"")
+        .consumer(ignored -> {})
+        .workerName(""foo"")
+        .timeout(Duration.ofMillis(100))
+        .fetchVariables(""foo"", ""fooz"")
+        .send();
+
+    // when
+    final var streams =
+        Awaitility.await(""until all streams are registered"")
+            .atMost(Duration.ofSeconds(60))
+            .until(
+                actuator::listRemote,
+                list -> list.size() == 1 && list.get(0).getConsumers().size() == 2);
+
+    // then
+    assertThat(streams)
+        .first(InstanceOfAssertFactories.type(RemoteJobStream.class))
+        .extracting(RemoteJobStream::getConsumers)
+        .asInstanceOf(InstanceOfAssertFactories.list(RemoteStreamId.class))
+        .extracting(RemoteStreamId::getReceiver)
+        .containsExactly(""0"", ""0"");
+  }
+
+  @Test
+  void shouldListMultipleClientStreams() {
+    // given
+    client
+        .newStreamJobsCommand()
+        .jobType(""foo"")
+        .consumer(ignored -> {})
+        .workerName(""foo"")
+        .timeout(Duration.ofMillis(100))
+        .fetchVariables(""foo"", ""fooz"")
+        .send();
+    client
+        .newStreamJobsCommand()
+        .jobType(""bar"")
+        .consumer(ignored -> {})
+        .workerName(""bar"")
+        .timeout(Duration.ofMillis(250))
+        .fetchVariables(""bar"", ""barz"")
+        .send();
+
+    // when
+    final var streams =
+        Awaitility.await(""until all streams are registered"")
+            .until(actuator::listClient, list -> list.size() == 2);
+
+    // then
+    assertThat(streams)
+        .anySatisfy(
+            stream -> {
+              assertThat(stream.getJobType()).isEqualTo(""foo"");
+              assertThat(stream.getMetadata().getWorker()).isEqualTo(""foo"");
+              assertThat(stream.getMetadata().getTimeout()).isEqualTo(100L);
+              assertThat(stream.getMetadata().getFetchVariables())
+                  .containsExactlyInAnyOrder(""foo"", ""fooz"");
+              assertThat(stream.getId()).isNotNull();
+            })
+        .anySatisfy(
+            stream -> {
+              assertThat(stream.getJobType()).isEqualTo(""bar"");
+              assertThat(stream.getMetadata().getWorker()).isEqualTo(""bar"");
+              assertThat(stream.getMetadata().getTimeout()).isEqualTo(250L);
+              assertThat(stream.getMetadata().getFetchVariables())
+                  .containsExactlyInAnyOrder(""bar"", ""barz"");
+              assertThat(stream.getId()).isNotNull();
+            });
+  }
+
+  private void assertBrokerIsReady() {
+    given().port(managementPort).when().get(""/ready"").then().statusCode(204);
+  }
+}
diff --git a/qa/util/src/main/java/io/camunda/zeebe/qa/util/actuator/JobStreamsActuator.java b/qa/util/src/main/java/io/camunda/zeebe/qa/util/actuator/JobStreamsActuator.java
new file mode 100644
index 0000000..7b01254
--- /dev/null
+++ b/qa/util/src/main/java/io/camunda/zeebe/qa/util/actuator/JobStreamsActuator.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.qa.util.actuator;
+
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
+import feign.Feign;
+import feign.Headers;
+import feign.RequestLine;
+import feign.Retryer;
+import feign.Target.HardCodedTarget;
+import feign.jackson.JacksonDecoder;
+import feign.jackson.JacksonEncoder;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.ClientJobStream;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.JobStreams;
+import io.camunda.zeebe.shared.management.openapi.models.jobstreams.RemoteJobStream;
+import io.zeebe.containers.ZeebeNode;
+import java.util.List;
+
+/**
+ * Java interface for the node's job stream actuator. To instantiate this interface, you can use
+ * {@link Feign}; see {@link #of(String)} as an example.
+ *
+ * <p>You can use one of {@link #of(String)} or {@link #of(ZeebeNode)} to create a new client to use
+ * for yourself.
+ */
+public interface JobStreamsActuator {
+  /**
+   * Returns a {@link JobStreamsActuator} instance using the given node as upstream.
+   *
+   * @param node the node to connect to
+   * @return a new instance of {@link JobStreamsActuator}
+   */
+  static JobStreamsActuator of(final ZeebeNode<?> node) {
+    final var endpoint =
+        String.format(""http://%s/actuator/jobstreams"", node.getExternalMonitoringAddress());
+    return of(endpoint);
+  }
+
+  /**
+   * Returns a {@link JobStreamsActuator} instance using the given endpoint as upstream. The
+   * endpoint is expected to be a complete absolute URL, e.g.
+   * ""http://localhost:9600/actuator/jobstreams"".
+   *
+   * @param endpoint the actuator URL to connect to
+   * @return a new instance of {@link JobStreamsActuator}
+   */
+  @SuppressWarnings(""JavadocLinkAsPlainText"")
+  static JobStreamsActuator of(final String endpoint) {
+    final var target = new HardCodedTarget<>(JobStreamsActuator.class, endpoint);
+    final var decoder = new JacksonDecoder(List.of(new Jdk8Module(), new JavaTimeModule()));
+
+    return Feign.builder()
+        .encoder(new JacksonEncoder())
+        .decoder(decoder)
+        .retryer(Retryer.NEVER_RETRY)
+        .target(target);
+  }
+
+  @RequestLine(""GET "")
+  @Headers({""Content-Type: application/json"", ""Accept: application/json""})
+  JobStreams list();
+
+  @RequestLine(""GET /client"")
+  @Headers({""Content-Type: application/json"", ""Accept: application/json""})
+  List<ClientJobStream> listClient();
+
+  @RequestLine(""GET /remote"")
+  @Headers({""Content-Type: application/json"", ""Accept: application/json""})
+  List<RemoteJobStream> listRemote();
+}

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
index d36b4c9..ca5047f 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
@@ -630,6 +630,40 @@ public final class ProcessExecutionCleanStateTest {
   }
 
   @Test
+  public void testProcessWithTriggerTimerStartEvent() {
+    // given
+    final var deployment =
+        engineRule
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(PROCESS_ID)
+                    .startEvent()
+                    .timerWithDate(""=now() + duration(\""PT15S\"")"")
+                    .endEvent()
+                    .done())
+            .deploy();
+
+    final var processDefinitionKey =
+        deployment.getValue().getProcessesMetadata().get(0).getProcessDefinitionKey();
+
+    // when
+    engineRule.awaitProcessingOf(
+        RecordingExporter.timerRecords(TimerIntent.CREATED)
+            .withProcessDefinitionKey(processDefinitionKey)
+            .getFirst());
+
+    engineRule.increaseTime(Duration.ofSeconds(15));
+
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_COMPLETED)
+        .withProcessDefinitionKey(processDefinitionKey)
+        .withElementType(BpmnElementType.PROCESS)
+        .await();
+
+    // then
+    assertThatStateIsEmpty();
+  }
+
+  @Test
   public void testProcessWithTimerStartEventRedeployment() {
     // given
     final var deployment =

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/ProcessInstanceByProcessDefinitionMigrationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/ProcessInstanceByProcessDefinitionMigrationTest.java
index f2a3d08..3f21c66 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/ProcessInstanceByProcessDefinitionMigrationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_8_3/ProcessInstanceByProcessDefinitionMigrationTest.java
@@ -8,6 +8,7 @@
 package io.camunda.zeebe.engine.state.migration.to_8_3;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -17,6 +18,7 @@ import io.camunda.zeebe.db.ZeebeDb;
 import io.camunda.zeebe.db.impl.DbCompositeKey;
 import io.camunda.zeebe.db.impl.DbLong;
 import io.camunda.zeebe.db.impl.DbNil;
+import io.camunda.zeebe.engine.state.immutable.MigrationState;
 import io.camunda.zeebe.engine.state.immutable.ProcessingState;
 import io.camunda.zeebe.engine.state.instance.ElementInstance;
 import io.camunda.zeebe.engine.state.mutable.MutableProcessingState;
@@ -62,12 +64,12 @@ class ProcessInstanceByProcessDefinitionMigrationTest {
   class MockBasedTests {
 
     @Test
-    void noMigrationNeededWhenElementInstanceColumnFamilyIsEmptyAndPIByDefinitionIsEmpty() {
+    void noMigrationNeededWhenMigrationAlreadyFinished() {
       // given
       final var mockProcessingState = mock(ProcessingState.class);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.ELEMENT_INSTANCE_KEY)).thenReturn(true);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.PROCESS_INSTANCE_KEY_BY_DEFINITION_KEY))
-          .thenReturn(true);
+      final var migrationState = mock(MigrationState.class);
+      when(mockProcessingState.getMigrationState()).thenReturn(migrationState);
+      when(migrationState.isMigrationFinished(anyString())).thenReturn(true);
 
       // when
       final var actual = sut.needsToRun(mockProcessingState);
@@ -77,42 +79,12 @@ class ProcessInstanceByProcessDefinitionMigrationTest {
     }
 
     @Test
-    void noMigrationNeededWhenElementInstanceColumnFamilyIsNotEmptyAndPIByDefinitionIsNotEmpty() {
+    void migrationNeededWhenMigrationNotFinished() {
       // given
       final var mockProcessingState = mock(ProcessingState.class);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.ELEMENT_INSTANCE_KEY)).thenReturn(false);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.PROCESS_INSTANCE_KEY_BY_DEFINITION_KEY))
-          .thenReturn(false);
-
-      // when
-      final var actual = sut.needsToRun(mockProcessingState);
-
-      // then
-      assertThat(actual).isFalse();
-    }
-
-    @Test
-    void noMigrationNeededWhenElementInstanceColumnFamilyIsEmptyAndPIByDefinitionIsNotEmpty() {
-      // given
-      final var mockProcessingState = mock(ProcessingState.class);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.ELEMENT_INSTANCE_KEY)).thenReturn(true);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.PROCESS_INSTANCE_KEY_BY_DEFINITION_KEY))
-          .thenReturn(false);
-
-      // when
-      final var actual = sut.needsToRun(mockProcessingState);
-
-      // then
-      assertThat(actual).isFalse();
-    }
-
-    @Test
-    void migrationNeededWhenElementInstanceColumnFamilyIsNotEmptyAndPIByDefinitionIsEmpty() {
-      // given
-      final var mockProcessingState = mock(ProcessingState.class);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.ELEMENT_INSTANCE_KEY)).thenReturn(false);
-      when(mockProcessingState.isEmpty(ZbColumnFamilies.PROCESS_INSTANCE_KEY_BY_DEFINITION_KEY))
-          .thenReturn(true);
+      final var migrationState = mock(MigrationState.class);
+      when(mockProcessingState.getMigrationState()).thenReturn(migrationState);
+      when(migrationState.isMigrationFinished(anyString())).thenReturn(false);
 
       // when
       final var actual = sut.needsToRun(mockProcessingState);
@@ -162,21 +134,6 @@ class ProcessInstanceByProcessDefinitionMigrationTest {
     }
 
     @Test
-    void afterMigrationNoFurtherMigrationIsNeeded() {
-      // given
-      final long processInstanceKey = 100L;
-      legacyState.insertElementInstance(
-          processInstanceKey, createElementInstance(processInstanceKey, BpmnElementType.PROCESS));
-
-      // when
-      sut.runMigration(processingState);
-      final var shouldRun = sut.needsToRun(processingState);
-
-      // then
-      assertThat(shouldRun).isFalse();
-    }
-
-    @Test
     void shouldInsertIntoProcessInstanceByProcessDefinition() {
       // given
       final long processInstanceKey = 100L;

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java b/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
index 68f19c2..87fe1d2 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/transport/backupapi/BackupApiRequestHandlerTest.java
@@ -11,19 +11,28 @@ import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 import io.camunda.zeebe.backup.api.BackupManager;
+import io.camunda.zeebe.backup.api.BackupStatus;
+import io.camunda.zeebe.backup.common.BackupDescriptorImpl;
+import io.camunda.zeebe.backup.common.BackupIdentifierImpl;
+import io.camunda.zeebe.backup.common.BackupStatusImpl;
 import io.camunda.zeebe.logstreams.log.LogStreamRecordWriter;
-import io.camunda.zeebe.protocol.impl.encoding.AdminResponse;
 import io.camunda.zeebe.protocol.impl.encoding.BackupRequest;
+import io.camunda.zeebe.protocol.impl.encoding.BackupStatusResponse;
 import io.camunda.zeebe.protocol.impl.encoding.ErrorResponse;
 import io.camunda.zeebe.protocol.management.BackupRequestType;
+import io.camunda.zeebe.protocol.management.BackupStatusCode;
+import io.camunda.zeebe.protocol.management.BackupStatusResponseEncoder;
 import io.camunda.zeebe.protocol.record.ErrorCode;
+import io.camunda.zeebe.scheduler.future.CompletableActorFuture;
 import io.camunda.zeebe.scheduler.testing.ControlledActorSchedulerExtension;
 import io.camunda.zeebe.transport.ServerOutput;
 import io.camunda.zeebe.transport.impl.AtomixServerTransport;
 import io.camunda.zeebe.util.Either;
 import java.time.Duration;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import org.agrona.ExpandableArrayBuffer;
 import org.agrona.concurrent.UnsafeBuffer;
@@ -50,7 +59,7 @@ final class BackupApiRequestHandlerTest {
 
   BackupApiRequestHandler handler;
   private ServerOutput serverOutput;
-  private CompletableFuture<Either<ErrorResponse, AdminResponse>> responseFuture;
+  private CompletableFuture<Either<ErrorResponse, BackupStatusResponse>> responseFuture;
 
   @BeforeEach
   void setup() {
@@ -155,7 +164,125 @@ final class BackupApiRequestHandlerTest {
     scheduler.workUntilDone();
 
     // then
-    verify(logStreamRecordWriter, times(1)).tryWrite();
+    assertThat(responseFuture).succeedsWithin(Duration.ofMillis(100));
+  }
+
+  @Test
+  void shouldCompleteResponseWhenStatusIsCompleted() {
+    // given
+    final long checkpointId = 10;
+    final var request =
+        new BackupRequest()
+            .setType(BackupRequestType.QUERY_STATUS)
+            .setPartitionId(1)
+            .setBackupId(checkpointId);
+
+    final BackupStatus status =
+        new BackupStatusImpl(
+            new BackupIdentifierImpl(1, 1, checkpointId),
+            Optional.of(new BackupDescriptorImpl(""s-id"", 100, 3)),
+            io.camunda.zeebe.backup.api.BackupStatusCode.COMPLETED,
+            Optional.empty());
+
+    when(backupManager.getBackupStatus(checkpointId))
+        .thenReturn(CompletableActorFuture.completed(status));
+
+    // when
+    final var requestBuffer = new UnsafeBuffer(new byte[request.getLength()]);
+    request.write(requestBuffer, 0);
+
+    handler.onRequest(serverOutput, 1, 1, requestBuffer, 0, request.getLength());
+    scheduler.workUntilDone();
+
+    // then
+    assertThat(responseFuture)
+        .succeedsWithin(Duration.ofMillis(100))
+        .matches(Either::isRight)
+        .extracting(Either::get)
+        .returns(checkpointId, BackupStatusResponse::getBackupId)
+        .returns(1, BackupStatusResponse::getPartitionId)
+        .returns(1, BackupStatusResponse::getBrokerId)
+        .returns(100L, BackupStatusResponse::getCheckpointPosition)
+        .returns(3, BackupStatusResponse::getNumberOfPartitions)
+        .returns(""s-id"", BackupStatusResponse::getSnapshotId)
+        .returns(BackupStatusCode.COMPLETED, BackupStatusResponse::getStatus)
+        .matches(response -> response.getFailureReason().isEmpty());
+  }
+
+  @Test
+  void shouldCompleteResponseWhenStatusIsFailed() {
+    // given
+    final long checkpointId = 10;
+    final var request =
+        new BackupRequest()
+            .setType(BackupRequestType.QUERY_STATUS)
+            .setPartitionId(1)
+            .setBackupId(checkpointId);
+
+    final BackupStatus status =
+        new BackupStatusImpl(
+            new BackupIdentifierImpl(1, 1, checkpointId),
+            Optional.empty(),
+            io.camunda.zeebe.backup.api.BackupStatusCode.FAILED,
+            Optional.of(""Expected""));
+
+    when(backupManager.getBackupStatus(checkpointId))
+        .thenReturn(CompletableActorFuture.completed(status));
+
+    // when
+    final var requestBuffer = new UnsafeBuffer(new byte[request.getLength()]);
+    request.write(requestBuffer, 0);
+
+    handler.onRequest(serverOutput, 1, 1, requestBuffer, 0, request.getLength());
+    scheduler.workUntilDone();
+
+    // then
+    assertThat(responseFuture)
+        .succeedsWithin(Duration.ofMillis(100))
+        .matches(Either::isRight)
+        .extracting(Either::get)
+        .returns(checkpointId, BackupStatusResponse::getBackupId)
+        .returns(1, BackupStatusResponse::getPartitionId)
+        .returns(1, BackupStatusResponse::getBrokerId)
+        .returns(
+            BackupStatusResponseEncoder.backupIdNullValue(),
+            BackupStatusResponse::getCheckpointPosition)
+        .returns(
+            BackupStatusResponseEncoder.numberOfPartitionsNullValue(),
+            BackupStatusResponse::getNumberOfPartitions)
+        .matches(response -> response.getSnapshotId().isEmpty())
+        .returns(BackupStatusCode.FAILED, BackupStatusResponse::getStatus)
+        .returns(""Expected"", BackupStatusResponse::getFailureReason);
+  }
+
+  @Test
+  void shouldReturnErrorWhenQueryingStatusFailed() {
+    // given
+    final long checkpointId = 10;
+    final var request =
+        new BackupRequest()
+            .setType(BackupRequestType.QUERY_STATUS)
+            .setPartitionId(1)
+            .setBackupId(checkpointId);
+
+    when(backupManager.getBackupStatus(checkpointId))
+        .thenReturn(
+            CompletableActorFuture.completedExceptionally(new RuntimeException(""Expected"")));
+
+    // when
+    final var requestBuffer = new UnsafeBuffer(new byte[request.getLength()]);
+    request.write(requestBuffer, 0);
+
+    handler.onRequest(serverOutput, 1, 1, requestBuffer, 0, request.getLength());
+    scheduler.workUntilDone();
+
+    // then
+    assertThat(responseFuture)
+        .succeedsWithin(Duration.ofMinutes(1))
+        .matches(Either::isLeft)
+        .extracting(Either::getLeft)
+        .extracting(ErrorResponse::getErrorCode)
+        .isEqualTo(ErrorCode.INTERNAL_ERROR);
   }
 
   private ServerOutput createServerOutput() {
@@ -170,7 +297,7 @@ final class BackupApiRequestHandlerTest {
         return;
       }
 
-      final var response = new AdminResponse();
+      final var response = new BackupStatusResponse();
       try {
         response.wrap(buffer, 0, serverResponse.getLength());
         responseFuture.complete(Either.right(response));

diff --git a/dmn/src/test/java/io/camunda/zeebe/dmn/DmnEvaluatedDecisionsTest.java b/dmn/src/test/java/io/camunda/zeebe/dmn/DmnEvaluatedDecisionsTest.java
index 91f1fb0..4184c75 100644
--- a/dmn/src/test/java/io/camunda/zeebe/dmn/DmnEvaluatedDecisionsTest.java
+++ b/dmn/src/test/java/io/camunda/zeebe/dmn/DmnEvaluatedDecisionsTest.java
@@ -16,8 +16,13 @@ import static org.assertj.core.api.Assertions.tuple;
 import io.camunda.zeebe.dmn.impl.ParseFailureMessage;
 import io.camunda.zeebe.dmn.impl.VariablesContext;
 import java.util.Map;
+import java.util.stream.Stream;
 import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.TestInstance;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
 
 class DmnEvaluatedDecisionsTest {
 
@@ -143,4 +148,66 @@ class DmnEvaluatedDecisionsTest {
     assertEquality(evaluatedDecisions.get(0).decisionOutput(), ""'Jedi'"");
     assertEquality(evaluatedDecisions.get(1).decisionOutput(), ""null"");
   }
+
+  @Nested
+  @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+  @DisplayName(""If successfully evaluated, the decision"")
+  class DecisionTypeTests {
+
+    private static final String DECISION_TYPES_DRG = ""/drg-decision-types.dmn"";
+
+    Stream<DecisionTest> decisions() {
+      return Stream.of(
+          new DecisionTest(""decision_table"", DecisionType.DECISION_TABLE, ""'okay'""),
+          new DecisionTest(""literal_expression"", DecisionType.LITERAL_EXPRESSION, ""'okay'""),
+          new DecisionTest(""context"", DecisionType.CONTEXT, ""{'is':'okay'}""),
+          new DecisionTest(""invocation"", DecisionType.INVOCATION, ""'okay'""),
+          new DecisionTest(""list"", DecisionType.LIST, ""['okay']""),
+          new DecisionTest(""relation"", DecisionType.RELATION, ""[{'is':'okay'}]""));
+    }
+
+    private DecisionResult evaluateDecision(final String decisionId) {
+      final var inputStream = getClass().getResourceAsStream(DECISION_TYPES_DRG);
+      final var parsedDrg = decisionEngine.parse(inputStream);
+
+      // when
+      final var result = decisionEngine.evaluateDecisionById(parsedDrg, decisionId, null);
+
+      // then
+      assertThat(result.isFailure())
+          .describedAs(
+              ""Expect that the decision is evaluated successfully"", result.getFailureMessage())
+          .isFalse();
+
+      return result;
+    }
+
+    @ParameterizedTest
+    @MethodSource(""decisions"")
+    @DisplayName(""Should return the type of the decision"")
+    void shouldReturnTheDecisionType(final DecisionTest test) {
+      // when
+      final var result = evaluateDecision(test.decisionId);
+
+      // then
+      assertThat(result.getEvaluatedDecisions())
+          .extracting(EvaluatedDecision::decisionType)
+          .contains(test.expectedType);
+    }
+
+    @ParameterizedTest
+    @MethodSource(""decisions"")
+    @DisplayName(""Should return the output of the decision"")
+    void shouldReturnDecisionResult(final DecisionTest test) {
+      // when
+      final var result = evaluateDecision(test.decisionId);
+
+      // then
+      assertThat(result.getEvaluatedDecisions())
+          .extracting(EvaluatedDecision::decisionOutput)
+          .allSatisfy(decisionResult -> assertEquality(decisionResult, test.expectedResult));
+    }
+
+    record DecisionTest(String decisionId, DecisionType expectedType, String expectedResult) {}
+  }
 }
diff --git a/dmn/src/test/resources/drg-decision-types.dmn b/dmn/src/test/resources/drg-decision-types.dmn
new file mode 100644
index 0000000..490a0f0
--- /dev/null
+++ b/dmn/src/test/resources/drg-decision-types.dmn
@@ -0,0 +1,99 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<definitions xmlns=""https://www.omg.org/spec/DMN/20191111/MODEL/"" xmlns:dmndi=""https://www.omg.org/spec/DMN/20191111/DMNDI/"" xmlns:dc=""http://www.omg.org/spec/DMN/20180521/DC/"" xmlns:biodi=""http://bpmn.io/schema/dmn/biodi/2.0"" id=""force-users"" name=""Force Users"" namespace=""http://camunda.org/schema/1.0/dmn"" exporter=""Camunda Modeler"" exporterVersion=""4.12.0"">
+  <decision id=""decision_table"" name=""Decision Table"">
+    <decisionTable id=""DecisionTable_14n3bxx"">
+      <input id=""Input_1"" label=""Input"" biodi:width=""192"">
+        <inputExpression id=""InputExpression_1"" typeRef=""boolean"">
+          <text>true</text>
+        </inputExpression>
+      </input>
+      <output id=""Output_1"" label=""Output"" name=""decision_table"" typeRef=""string"" biodi:width=""192"">
+        <outputValues id=""UnaryTests_0hj346a"">
+          <text></text>
+        </outputValues>
+      </output>
+      <rule id=""DecisionRule_0zumznl"">
+        <inputEntry id=""UnaryTests_0leuxqi"">
+          <text>-</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0c9vpz8"">
+          <text>""okay""</text>
+        </outputEntry>
+      </rule>
+    </decisionTable>
+  </decision>
+
+  <decision id=""literal_expression"" name=""Literal Expression"">
+    <variable id=""InformationItem_1dezpki"" name=""literal_expression"" typeRef=""string"" />
+    <literalExpression id=""LiteralExpression_07r6jzk"" expressionLanguage=""feel"">
+      <text>""okay""</text>
+    </literalExpression>
+  </decision>
+
+  <decision id=""context"" name=""Context"">
+      <context>
+          <contextEntry>
+              <variable name=""is""/>
+              <literalExpression>
+                  <text>""okay""</text>
+              </literalExpression>
+          </contextEntry>
+      </context>
+  </decision>
+
+  <businessKnowledgeModel id=""bkm"" name=""BKM"">
+    <encapsulatedLogic>
+      <formalParameter name=""output"" typeRef=""feel:string""/>
+      <literalExpression>
+          <text>output</text>
+      </literalExpression>
+    </encapsulatedLogic>
+  </businessKnowledgeModel>
+
+  <decision id=""invocation"" name=""Invocation"">
+    <knowledgeRequirement>
+            <requiredKnowledge href=""#bkm""/>
+        </knowledgeRequirement>
+        <invocation>
+            <literalExpression>
+                <text>BKM</text>
+            </literalExpression>
+            <binding>
+                <parameter name=""output""/>
+                <literalExpression>
+                    <text>""okay""</text>
+                </literalExpression>
+            </binding>
+        </invocation>
+  </decision>
+
+  <decision id=""list"" name=""List"">
+    <list>
+      <literalExpression>
+          <text>""okay""</text>
+      </literalExpression>
+    </list>
+  </decision>
+
+  <decision id=""relation"" name=""Relation"">
+    <relation>
+      <column name=""is"" />
+      <row>
+        <literalExpression>
+            <text>""okay""</text>
+        </literalExpression>
+      </row>
+    </relation>
+  </decision>
+
+  <dmndi:DMNDI>
+    <dmndi:DMNDiagram>
+      <dmndi:DMNShape dmnElementRef=""decision_table"">
+        <dc:Bounds height=""80"" width=""180"" x=""160"" y=""100"" />
+      </dmndi:DMNShape>
+      <dmndi:DMNShape id=""DMNShape_0oy0qd3"" dmnElementRef=""literal_expression"">
+        <dc:Bounds height=""80"" width=""180"" x=""380"" y=""100"" />
+      </dmndi:DMNShape>
+    </dmndi:DMNDiagram>
+  </dmndi:DMNDI>
+</definitions>

diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedBrokerClient.java b/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedBrokerClient.java
index 2d2d084..38261ad 100644
--- a/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedBrokerClient.java
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/api/util/StubbedBrokerClient.java
@@ -25,6 +25,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 
 public final class StubbedBrokerClient implements BrokerClient {
@@ -67,7 +68,15 @@ public final class StubbedBrokerClient implements BrokerClient {
   @Override
   public <T> CompletableFuture<BrokerResponse<T>> sendRequestWithRetry(
       final BrokerRequest<T> request, final Duration requestTimeout) {
-    throw new UnsupportedOperationException(""not implemented"");
+    final CompletableFuture<BrokerResponse<T>> result = new CompletableFuture<>();
+
+    sendRequestWithRetry(
+        request,
+        (key, response) ->
+            result.complete(new BrokerResponse<>(response, Protocol.decodePartitionId(key), key)),
+        result::completeExceptionally);
+
+    return result.orTimeout(requestTimeout.toNanos(), TimeUnit.NANOSECONDS);
   }
 
   @Override
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryApiTest.java b/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryApiTest.java
new file mode 100644
index 0000000..ec9ec80
--- /dev/null
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryApiTest.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.gateway.query;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.camunda.zeebe.gateway.api.util.GatewayTest;
+import io.camunda.zeebe.gateway.cmd.BrokerErrorException;
+import io.camunda.zeebe.gateway.impl.broker.response.BrokerError;
+import io.camunda.zeebe.gateway.impl.broker.response.BrokerErrorResponse;
+import io.camunda.zeebe.gateway.impl.broker.response.BrokerResponse;
+import io.camunda.zeebe.gateway.query.impl.QueryApiImpl;
+import io.camunda.zeebe.protocol.Protocol;
+import io.camunda.zeebe.protocol.record.ErrorCode;
+import java.time.Duration;
+import java.util.concurrent.CompletionStage;
+import java.util.concurrent.ExecutionException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameter;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public final class QueryApiTest extends GatewayTest {
+  @Parameter(0)
+  public String name;
+
+  @Parameter(1)
+  public Querier querier;
+
+  @Parameters(name = ""{index}: {0}"")
+  public static Object[][] queries() {
+    return new Object[][] {
+      new Object[] {""getBpmnProcessIdForProcess"", (Querier) QueryApi::getBpmnProcessIdFromProcess},
+      new Object[] {
+        ""getBpmnProcessIdForProcessInstance"",
+        (Querier) QueryApi::getBpmnProcessIdFromProcessInstance
+      },
+      new Object[] {""getBpmnProcessIdForProcessJob"", (Querier) QueryApi::getBpmnProcessIdFromJob},
+    };
+  }
+
+  @Test
+  public void shouldGetBpmnProcessId() {
+    // given
+    final var key = Protocol.encodePartitionId(1, 1);
+    final var api = new QueryApiImpl(brokerClient);
+    final var timeout = Duration.ofSeconds(5);
+    final var stub = new QueryStub(new BrokerResponse<>(""myProcess"", 1, 1));
+    stub.registerWith(brokerClient);
+
+    // when
+    final var result = querier.query(api, key, timeout);
+
+    // then
+    assertThat(result).succeedsWithin(timeout).isEqualTo(""myProcess"");
+  }
+
+  @Test
+  public void shouldCompleteExceptionallyOnError() {
+    // given
+    final var key = Protocol.encodePartitionId(1, 1);
+    final var api = new QueryApiImpl(brokerClient);
+    final var timeout = Duration.ofSeconds(5);
+    final var stub =
+        new QueryStub(
+            new BrokerErrorResponse<>(
+                new BrokerError(ErrorCode.PARTITION_LEADER_MISMATCH, ""Leader mismatch"")));
+    stub.registerWith(brokerClient);
+
+    // when
+    final var result = querier.query(api, key, timeout);
+
+    // then
+    assertThat(result)
+        .failsWithin(timeout)
+        .withThrowableOfType(ExecutionException.class)
+        .havingRootCause()
+        .isInstanceOf(BrokerErrorException.class);
+  }
+
+  private interface Querier {
+    CompletionStage<String> query(final QueryApi api, final long key, final Duration timeout);
+  }
+}
diff --git a/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryStub.java b/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryStub.java
new file mode 100644
index 0000000..2f8334e
--- /dev/null
+++ b/gateway/src/test/java/io/camunda/zeebe/gateway/query/QueryStub.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.gateway.query;
+
+import io.camunda.zeebe.gateway.api.util.StubbedBrokerClient;
+import io.camunda.zeebe.gateway.api.util.StubbedBrokerClient.RequestStub;
+import io.camunda.zeebe.gateway.impl.broker.response.BrokerResponse;
+import io.camunda.zeebe.gateway.query.impl.BrokerExecuteQuery;
+
+final class QueryStub implements RequestStub<BrokerExecuteQuery, BrokerResponse<String>> {
+  private final BrokerResponse<String> response;
+
+  public QueryStub(final BrokerResponse<String> response) {
+    this.response = response;
+  }
+
+  @Override
+  public void registerWith(final StubbedBrokerClient gateway) {
+    gateway.registerHandler(BrokerExecuteQuery.class, this);
+  }
+
+  @Override
+  public BrokerResponse<String> handle(final BrokerExecuteQuery request) throws Exception {
+    return response;
+  }
+}

diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceCallActivityTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceCallActivityTest.java
new file mode 100644
index 0000000..38ae277
--- /dev/null
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceCallActivityTest.java
@@ -0,0 +1,193 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.0. You may not use this file
+ * except in compliance with the Zeebe Community License 1.0.
+ */
+package io.zeebe.engine.processor.workflow.multiinstance;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.zeebe.engine.util.EngineRule;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.protocol.record.Record;
+import io.zeebe.protocol.record.intent.JobIntent;
+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;
+import io.zeebe.protocol.record.value.BpmnElementType;
+import io.zeebe.test.util.BrokerClassRuleHelper;
+import io.zeebe.test.util.record.RecordingExporter;
+import java.util.List;
+import java.util.stream.Collectors;
+import org.junit.Before;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+
+public class MultiInstanceCallActivityTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  private static final String PROCESS_ID_PARENT = ""wf-parent"";
+  private static final String PROCESS_ID_CHILD = ""wf-child"";
+  private static final String CALL_ACTIVITY_ID = ""call"";
+
+  private static final String INPUT_COLLECTION_VARIABLE = ""items"";
+  private static final List<Integer> INPUT_COLLECTION = List.of(10, 20, 30);
+
+  private static final BpmnModelInstance PARENT_WORKFLOW =
+      Bpmn.createExecutableProcess(PROCESS_ID_PARENT)
+          .startEvent()
+          .callActivity(
+              CALL_ACTIVITY_ID,
+              c ->
+                  c.zeebeProcessId(PROCESS_ID_CHILD)
+                      .multiInstance(b -> b.zeebeInputCollection(INPUT_COLLECTION_VARIABLE)))
+          .endEvent()
+          .done();
+
+  @Rule public final BrokerClassRuleHelper helper = new BrokerClassRuleHelper();
+
+  private String jobType;
+
+  @Before
+  public void init() {
+    jobType = helper.getJobType();
+
+    final var childWorkflow =
+        Bpmn.createExecutableProcess(PROCESS_ID_CHILD)
+            .startEvent()
+            .serviceTask(""task"", t -> t.zeebeTaskType(jobType))
+            .endEvent()
+            .done();
+
+    ENGINE
+        .deployment()
+        .withXmlResource(""wf-parent.bpmn"", PARENT_WORKFLOW)
+        .withXmlResource(""wf-child.bpmn"", childWorkflow)
+        .deploy();
+  }
+
+  @Test
+  public void shouldCreateChildInstanceForEachElement() {
+    // when
+    final long workflowInstanceKey =
+        ENGINE
+            .workflowInstance()
+            .ofBpmnProcessId(PROCESS_ID_PARENT)
+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)
+            .create();
+
+    final List<Long> callActivityInstanceKey =
+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
+            .withWorkflowInstanceKey(workflowInstanceKey)
+            .withElementType(BpmnElementType.CALL_ACTIVITY)
+            .limit(INPUT_COLLECTION.size())
+            .map(Record::getKey)
+            .collect(Collectors.toList());
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)
+                .withParentWorkflowInstanceKey(workflowInstanceKey)
+                .withBpmnProcessId(PROCESS_ID_CHILD)
+                .filterRootScope()
+                .limit(INPUT_COLLECTION.size()))
+        .extracting(r -> r.getValue().getParentElementInstanceKey())
+        .containsExactly(
+            callActivityInstanceKey.get(0),
+            callActivityInstanceKey.get(1),
+            callActivityInstanceKey.get(2));
+  }
+
+  @Test
+  public void shouldCompleteBodyWhenAllChildInstancesAreCompleted() {
+    // given
+    final long workflowInstanceKey =
+        ENGINE
+            .workflowInstance()
+            .ofBpmnProcessId(PROCESS_ID_PARENT)
+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)
+            .create();
+
+    // when
+    awaitJobsCreated(INPUT_COLLECTION.size());
+
+    ENGINE
+        .jobs()
+        .withType(jobType)
+        .activate()
+        .getValue()
+        .getJobKeys()
+        .forEach(jobKey -> ENGINE.job().withKey(jobKey).complete());
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)
+                .withParentWorkflowInstanceKey(workflowInstanceKey)
+                .filterRootScope()
+                .limit(INPUT_COLLECTION.size())
+                .count())
+        .describedAs(""Expected child workflow instances to be completed"")
+        .isEqualTo(INPUT_COLLECTION.size());
+
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)
+                .withWorkflowInstanceKey(workflowInstanceKey)
+                .limitToWorkflowInstanceCompleted())
+        .extracting(r -> r.getValue().getBpmnElementType())
+        .containsSequence(
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.MULTI_INSTANCE_BODY,
+            BpmnElementType.END_EVENT,
+            BpmnElementType.PROCESS);
+  }
+
+  @Test
+  public void shouldCancelChildInstancesOnTermination() {
+    // given
+    final long workflowInstanceKey =
+        ENGINE
+            .workflowInstance()
+            .ofBpmnProcessId(PROCESS_ID_PARENT)
+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)
+            .create();
+
+    awaitJobsCreated(INPUT_COLLECTION.size());
+
+    // when
+    ENGINE.workflowInstance().withInstanceKey(workflowInstanceKey).cancel();
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_TERMINATED)
+                .withParentWorkflowInstanceKey(workflowInstanceKey)
+                .filterRootScope()
+                .limit(INPUT_COLLECTION.size())
+                .count())
+        .describedAs(""Expected child workflow instances to be terminated"")
+        .isEqualTo(INPUT_COLLECTION.size());
+
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_TERMINATED)
+                .withWorkflowInstanceKey(workflowInstanceKey)
+                .limitToWorkflowInstanceTerminated())
+        .extracting(r -> r.getValue().getBpmnElementType())
+        .containsExactly(
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.CALL_ACTIVITY,
+            BpmnElementType.MULTI_INSTANCE_BODY,
+            BpmnElementType.PROCESS);
+  }
+
+  private void awaitJobsCreated(int size) {
+    assertThat(
+            RecordingExporter.jobRecords(JobIntent.CREATED).withType(jobType).limit(size).count())
+        .describedAs(""Expected %d jobs to be created"", size)
+        .isEqualTo(size);
+  }
+}

diff --git a/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/validation/ZeebeSignalValidationTest.java b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/validation/ZeebeSignalValidationTest.java
new file mode 100644
index 0000000..61dbf8f
--- /dev/null
+++ b/bpmn-model/src/test/java/io/camunda/zeebe/model/bpmn/validation/ZeebeSignalValidationTest.java
@@ -0,0 +1,226 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.camunda.zeebe.model.bpmn.validation;
+
+import static io.camunda.zeebe.model.bpmn.validation.ExpectedValidationResult.expect;
+import static java.util.Collections.singletonList;
+
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.model.bpmn.builder.ProcessBuilder;
+import io.camunda.zeebe.model.bpmn.instance.Process;
+import io.camunda.zeebe.model.bpmn.instance.ServiceTask;
+import io.camunda.zeebe.model.bpmn.instance.Signal;
+import io.camunda.zeebe.model.bpmn.instance.zeebe.ZeebeTaskDefinition;
+import java.util.Arrays;
+import org.junit.runners.Parameterized.Parameters;
+
+public class ZeebeSignalValidationTest extends AbstractZeebeValidationTest {
+
+  @Parameters(name = ""{index}: {1}"")
+  public static Object[][] parameters() {
+    return new Object[][] {
+      {
+        Bpmn.createExecutableProcess(""process"").startEvent().signal("""").done(),
+        Arrays.asList(expect(Signal.class, ""Name must be present and not empty""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .signal(s -> s.nameExpression(""signal_val""))
+            .done(),
+        valid()
+      },
+      {Bpmn.createExecutableProcess(""process"").startEvent().signal(""signalName"").done(), valid()},
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .signal(s -> s.id(""signalId"").name(""signalName""))
+            .endEvent()
+            .done(),
+        valid()
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .endEvent()
+            .addExtensionElement(ZeebeTaskDefinition.class, e -> e.setType(""type""))
+            .signalEventDefinition()
+            .done(),
+        valid()
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .intermediateThrowEvent()
+            .addExtensionElement(ZeebeTaskDefinition.class, e -> e.setType(""type""))
+            .signalEventDefinition()
+            .throwEventDefinitionDone()
+            .endEvent()
+            .done(),
+        valid()
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .intermediateCatchEvent(""foo"")
+            .signal("""")
+            .done(),
+        Arrays.asList(expect(Signal.class, ""Name must be present and not empty""))
+      },
+      {
+        getProcessWithMultipleStartEventsWithSameSignal(),
+        singletonList(
+            expect(
+                Process.class,
+                ""Multiple signal event definitions with the same name 'signalName' are not allowed.""))
+      },
+      {getProcessWithMultipleSignalStartEvents(), valid()},
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .intermediateCatchEvent(""foo"")
+            .signalEventDefinition()
+            .id(""signal"")
+            .done(),
+        singletonList(expect(""signal"", ""Must reference a signal""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .subProcess(""subProcess"")
+            .embeddedSubProcess()
+            .startEvent(""subProcessStart"")
+            .signal(s -> s.name(""signal""))
+            .endEvent()
+            .subProcessDone()
+            .endEvent()
+            .done(),
+        singletonList(expect(""subProcess"", ""Start events in subprocesses must be of type none""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+            .boundaryEvent(""boundary-1"", b -> b.signal(s -> s.name(null)))
+            .endEvent()
+            .moveToActivity(""task"")
+            .boundaryEvent(""boundary-2"", b -> b.signal(s -> s.name(null)))
+            .endEvent()
+            .done(),
+        Arrays.asList(
+            expect(Signal.class, ""Name must be present and not empty""),
+            expect(Signal.class, ""Name must be present and not empty""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+            .boundaryEvent(""boundary-1"", b -> b.signal(s -> s.name(""signalName"")))
+            .endEvent()
+            .moveToActivity(""task"")
+            .boundaryEvent(""boundary-2"", b -> b.signal(s -> s.name(null)))
+            .endEvent()
+            .done(),
+        singletonList(expect(Signal.class, ""Name must be present and not empty""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+            .boundaryEvent(""boundary-1"", b -> b.signal(s -> s.name(""signalName"")))
+            .endEvent()
+            .moveToActivity(""task"")
+            .boundaryEvent(""boundary-2"", b -> b.signal(s -> s.name(""signalName"")))
+            .endEvent()
+            .done(),
+        singletonList(
+            expect(
+                ServiceTask.class,
+                ""Multiple signal event definitions with the same name 'signalName' are not allowed.""))
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+            .boundaryEvent(""boundary-1"", b -> b.signal(s -> s.name(""signalName1"")))
+            .endEvent()
+            .moveToActivity(""task"")
+            .boundaryEvent(""boundary-2"", b -> b.signal(s -> s.name(""signalName2"")))
+            .endEvent()
+            .done(),
+        valid()
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .signal(m -> m.id(""start-signal"").name(""signalName""))
+            .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+            .boundaryEvent(
+                ""boundary-1"", b -> b.signal(s -> s.id(""boundary-signal"").name(""signalName"")))
+            .endEvent()
+            .done(),
+        valid()
+      },
+      {
+        Bpmn.createExecutableProcess(""process"")
+            .startEvent()
+            .signal(s -> s.id(""start-signal"").name(""signalName""))
+            .intermediateCatchEvent(""foo"")
+            .signal(s -> s.id(""foo-signal"").name(""signalName""))
+            .done(),
+        valid()
+      },
+      {getEventSubProcessWithEmbeddedSubProcessWithBoundarySignalEvent(), valid()}
+    };
+  }
+
+  private static BpmnModelInstance getProcessWithMultipleStartEventsWithSameSignal() {
+    final ProcessBuilder process = Bpmn.createExecutableProcess();
+    final String signalName = ""signalName"";
+    process.startEvent(""start1"").signal(s -> s.id(""start-signal"").name(signalName)).endEvent();
+    process.startEvent(""start2"").signal(signalName).endEvent();
+    return process.done();
+  }
+
+  private static BpmnModelInstance getProcessWithMultipleSignalStartEvents() {
+    final ProcessBuilder process = Bpmn.createExecutableProcess();
+    process.startEvent().signal(""s1"").endEvent();
+    process.startEvent().signal(""s2"").endEvent();
+    return process.startEvent().signal(""s3"").endEvent().done();
+  }
+
+  private static BpmnModelInstance
+      getEventSubProcessWithEmbeddedSubProcessWithBoundarySignalEvent() {
+    final ProcessBuilder builder = Bpmn.createExecutableProcess(""process"");
+    builder
+        .eventSubProcess(""event_sub_proc"")
+        .startEvent(
+            ""event_sub_start"",
+            a -> a.signal(s -> s.id(""event_sub_start_signal"").name(""signalName"")))
+        .subProcess(
+            ""embedded"",
+            sub ->
+                sub.boundaryEvent(
+                    ""boundary-msg"", s -> s.signal(""signalName"").endEvent(""boundary-end"")))
+        .embeddedSubProcess()
+        .startEvent(""embedded_sub_start"")
+        .endEvent(""embedded_sub_end"")
+        .moveToNode(""embedded"")
+        .endEvent(""event_sub_end"");
+    return builder.startEvent(""start"").endEvent(""end"").done();
+  }
+}

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
index 57b3d1f..a297a3c 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTest.java
@@ -368,4 +368,64 @@ public class ModifyProcessInstanceTest {
                 -1L,
                 -1L));
   }
+
+  @Test
+  public void shouldActivateMultipleElementInsideExistingFlowScope() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .subProcess(
+                    ""subprocess"",
+                    sp ->
+                        sp.embeddedSubProcess()
+                            .startEvent()
+                            .serviceTask(""A"", a -> a.zeebeJobType(""A""))
+                            .parallelGateway()
+                            .serviceTask(""B"", b -> b.zeebeJobType(""B""))
+                            .moveToLastGateway()
+                            .userTask(""C"")
+                            .endEvent())
+                .endEvent()
+                .done())
+        .deploy();
+
+    final var processInstanceKey = ENGINE.processInstance().ofBpmnProcessId(PROCESS_ID).create();
+    final var subprocessScopeKey =
+        RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+            .withProcessInstanceKey(processInstanceKey)
+            .withElementType(BpmnElementType.SUB_PROCESS)
+            .getFirst()
+            .getKey();
+
+    // when
+    ENGINE
+        .processInstance()
+        .withInstanceKey(processInstanceKey)
+        .modification()
+        .activateElement(""B"")
+        .activateElement(""C"")
+        .modify();
+
+    // then
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .onlyEvents()
+                .withElementIdIn(""B"", ""C"")
+                .withProcessInstanceKey(processInstanceKey)
+                .limit(""C"", ProcessInstanceIntent.ELEMENT_ACTIVATED)
+                .toList())
+        .extracting(
+            r -> r.getValue().getElementId(),
+            Record::getIntent,
+            r -> r.getValue().getFlowScopeKey())
+        .describedAs(""Expect the tasks to have been activated in the correct scope"")
+        .containsExactly(
+            Tuple.tuple(""B"", ProcessInstanceIntent.ELEMENT_ACTIVATING, subprocessScopeKey),
+            Tuple.tuple(""B"", ProcessInstanceIntent.ELEMENT_ACTIVATED, subprocessScopeKey),
+            Tuple.tuple(""C"", ProcessInstanceIntent.ELEMENT_ACTIVATING, subprocessScopeKey),
+            Tuple.tuple(""C"", ProcessInstanceIntent.ELEMENT_ACTIVATED, subprocessScopeKey));
+  }
 }
diff --git a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
index d6fca6c..eac5e04 100644
--- a/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
+++ b/test-util/src/main/java/io/camunda/zeebe/test/util/record/ProcessInstanceRecordStream.java
@@ -11,6 +11,7 @@ import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
 import io.camunda.zeebe.protocol.record.value.ProcessInstanceRecordValue;
+import java.util.Arrays;
 import java.util.stream.Stream;
 
 public final class ProcessInstanceRecordStream
@@ -46,6 +47,10 @@ public final class ProcessInstanceRecordStream
     return valueFilter(v -> elementId.equals(v.getElementId()));
   }
 
+  public ProcessInstanceRecordStream withElementIdIn(final String... elementIds) {
+    return valueFilter(v -> Arrays.asList(elementIds).contains(v.getElementId()));
+  }
+
   public ProcessInstanceRecordStream withFlowScopeKey(final long flowScopeKey) {
     return valueFilter(v -> v.getFlowScopeKey() == flowScopeKey);
   }

diff --git a/raft/src/test/java/io/zeebe/raft/util/RaftClusterRule.java b/raft/src/test/java/io/zeebe/raft/util/RaftClusterRule.java
index cbb49d7..9a45fb0 100644
--- a/raft/src/test/java/io/zeebe/raft/util/RaftClusterRule.java
+++ b/raft/src/test/java/io/zeebe/raft/util/RaftClusterRule.java
@@ -38,9 +38,9 @@ import org.slf4j.LoggerFactory;
 public class RaftClusterRule implements TestRule
 {
 
-    public static final int DEFAULT_RETRIES = 30;
-    public static final int COMMITTED_RETRIES = 200;
-    public static final int ALL_COMMITTED_RETRIES = 300;
+    public static final int DEFAULT_RETRIES = 20;
+    public static final int COMMITTED_RETRIES = 40;
+    public static final int ALL_COMMITTED_RETRIES = 60;
 
     public static final Logger LOG = LoggerFactory.getLogger(""io.zeebe.raft.test"");
 

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/shutdown/BrokerShutdownTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/shutdown/BrokerShutdownTest.java
index 584d68b..8492947 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/shutdown/BrokerShutdownTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/shutdown/BrokerShutdownTest.java
@@ -19,10 +19,10 @@ import io.zeebe.broker.Broker;
 import io.zeebe.broker.it.EmbeddedBrokerRule;
 import io.zeebe.broker.system.configuration.NetworkCfg;
 import io.zeebe.broker.transport.TransportServiceNames;
-import io.zeebe.client.api.events.*;
 import io.zeebe.servicecontainer.*;
 import io.zeebe.transport.SocketAddress;
 import io.zeebe.transport.impl.ServerSocketBinding;
+import io.zeebe.util.FileUtil;
 import io.zeebe.util.sched.future.CompletableActorFuture;
 import java.io.File;
 import java.io.IOException;
@@ -32,6 +32,8 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import org.assertj.core.util.Files;
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -42,11 +44,23 @@ public class BrokerShutdownTest {
       ServiceName.newServiceName(""blockService"", Void.class);
 
   @Rule public ExpectedException exception = ExpectedException.none();
+  private File brokerBase;
+  private Broker broker;
+
+  @Before
+  public void setup() {
+    brokerBase = Files.newTemporaryFolder();
+    broker = startBrokerWithBlockingService(brokerBase);
+  }
+
+  @After
+  public void tearDown() throws IOException {
+    FileUtil.deleteFolder(brokerBase.getAbsolutePath());
+  }
 
   @Test
   public void shouldReleaseSockets() {
     // given
-    final Broker broker = startBrokerWithBlockingService();
     broker.getBrokerContext().setCloseTimeout(1);
 
     // when
@@ -61,15 +75,13 @@ public class BrokerShutdownTest {
   }
 
   private void tryToBindSocketAddress(SocketAddress socketAddress) {
-    final InetSocketAddress replicationSocket = socketAddress.toInetSocketAddress();
-    final ServerSocketBinding binding = new ServerSocketBinding(replicationSocket);
+    final InetSocketAddress socket = socketAddress.toInetSocketAddress();
+    final ServerSocketBinding binding = new ServerSocketBinding(socket);
     binding.doBind();
     binding.close();
   }
 
-  private Broker startBrokerWithBlockingService() {
-    final File brokerBase = Files.newTemporaryFolder();
-
+  private Broker startBrokerWithBlockingService(final File brokerBase) {
     final Broker broker;
     try (InputStream configStream =
         EmbeddedBrokerRule.class.getResourceAsStream(""/zeebe.default.cfg.toml"")) {

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/instance/ElementInstanceStateTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/instance/ElementInstanceStateTest.java
index 61017f0..b75299e 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/instance/ElementInstanceStateTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/instance/ElementInstanceStateTest.java
@@ -474,6 +474,25 @@ public final class ElementInstanceStateTest {
   }
 
   @Test
+  public void shouldNotFindRunningInstanceForBannedInstance() {
+    // given
+    final var processInstanceKey = 123L;
+    final var processInstanceRecord =
+        createProcessInstanceRecord()
+            .setBpmnElementType(BpmnElementType.PROCESS)
+            .setProcessInstanceKey(processInstanceKey);
+
+    // when
+    final var hasRunningInstances =
+        elementInstanceState.hasActiveProcessInstances(
+            processInstanceRecord.getProcessDefinitionKey(),
+            Collections.singletonList(processInstanceKey));
+
+    // then
+    Assertions.assertThat(hasRunningInstances).isFalse();
+  }
+
+  @Test
   public void shouldUpdateAwaitResultMetadata() {
     final long key = 10L;
     final int streamId = 2;

diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/ReceivedSnapshotTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/ReceivedSnapshotTest.java
index a02faaa..5c6b4d0 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/ReceivedSnapshotTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/ReceivedSnapshotTest.java
@@ -93,24 +93,6 @@ public class ReceivedSnapshotTest {
   }
 
   @Test
-  public void shouldPurgePendingOnPersist() {
-    // given
-    final var persistedSnapshot = takePersistedSnapshot();
-
-    // when
-    final var receivedSnapshot = receiveSnapshot(persistedSnapshot);
-    final var receivedPersistedSnapshot = receivedSnapshot.persist().join();
-
-    // then
-    assertThat(receivedSnapshot.getPath())
-        .as(""the pending snapshot was removed after persist"")
-        .doesNotExist();
-    assertThat(receivedPersistedSnapshot.getPath())
-        .as(""there exists a persisted received snapshot"")
-        .exists();
-  }
-
-  @Test
   public void shouldReceiveSnapshot() {
     // given
     final var persistedSnapshot = takePersistedSnapshot();
@@ -192,20 +174,17 @@ public class ReceivedSnapshotTest {
   }
 
   @Test
-  public void shouldReturnAlreadyExistingSnapshotOnPersist() {
+  public void shouldThrowWhenAlreadyExistingSnapshotWasReceivedAgain() {
     // given
     final var persistedSnapshot = takePersistedSnapshot();
     final var firstReceivedSnapshot = receiveSnapshot(persistedSnapshot);
     final var firstPersistedSnapshot = firstReceivedSnapshot.persist().join();
 
-    // when - receives same snapshot again
-    final var secondReceivedSnapshot = receiveSnapshot(persistedSnapshot);
-    final var secondPersistedSnapshot = secondReceivedSnapshot.persist().join();
-
-    // then
-    assertThat(secondPersistedSnapshot)
-        .isEqualTo(firstPersistedSnapshot)
-        .isSameAs(firstPersistedSnapshot);
+    // when then throw - receives same snapshot again
+    assertThatThrownBy(() -> receiveSnapshot(persistedSnapshot))
+        .isInstanceOf(IllegalStateException.class)
+        .hasMessageContaining(
+            ""Expected to receive snapshot with id 1-0-1-0, but was already persisted"");
   }
 
   @Test
@@ -254,23 +233,6 @@ public class ReceivedSnapshotTest {
   }
 
   @Test
-  public void shouldReceiveConcurrentlyWithoutOverwritingEachOther() {
-    // given
-    final var persistedSnapshot = takePersistedSnapshot();
-
-    // when
-    final ReceivedSnapshot firstReceivedSnapshot = receiveSnapshot(persistedSnapshot);
-    final ReceivedSnapshot secondReceivedSnapshot = receiveSnapshot(persistedSnapshot);
-
-    // then
-    assertThat(firstReceivedSnapshot.getPath())
-        .as(""the first received snapshot is stored somewhere else than the second"")
-        .exists()
-        .isNotEqualTo(secondReceivedSnapshot.getPath());
-    assertThat(secondReceivedSnapshot.getPath()).as(""the second received snapshot exists"").exists();
-  }
-
-  @Test
   public void shouldReceiveConcurrentlyAndPersist() {
     // given
     final var persistedSnapshot = takePersistedSnapshot();
@@ -281,9 +243,10 @@ public class ReceivedSnapshotTest {
     final PersistedSnapshot receivedPersistedSnapshot = firstReceivedSnapshot.persist().join();
 
     // then
+    // both snapshots will exist since they point to the same directory
     assertThat(firstReceivedSnapshot.getPath())
-        .as(""the first received snapshot was removed on persist of concurrent receive"")
-        .doesNotExist();
+        .as(""the first received snapshot was removed but the new was persist on the same directory"")
+        .exists();
     assertThat(secondReceivedSnapshot.getPath())
         .as(""the second received snapshot was not removed as it's not considered older"")
         .exists();
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/TransientSnapshotTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/TransientSnapshotTest.java
index 8854e25..5c15846 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/TransientSnapshotTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/TransientSnapshotTest.java
@@ -216,21 +216,6 @@ public class TransientSnapshotTest {
   }
 
   @Test
-  public void shouldRemoveTransientSnapshotOnPersist() {
-    // given
-    final var transientSnapshot = snapshotStore.newTransientSnapshot(1L, 0L, 1L, 0L).get();
-    transientSnapshot.take(this::writeSnapshot);
-
-    // when
-    final var newSnapshot = snapshotStore.newTransientSnapshot(2L, 0L, 1L, 0L).get();
-    newSnapshot.take(this::writeSnapshot);
-    newSnapshot.persist().join();
-
-    // then
-    assertThat(newSnapshot.getPath()).as(""the transient snapshot was removed"").doesNotExist();
-  }
-
-  @Test
   public void shouldNotRemoveTransientSnapshotWithGreaterIdOnPersist() {
     final var newerTransientSnapshot = snapshotStore.newTransientSnapshot(2L, 0L, 1L, 0L).get();
     newerTransientSnapshot.take(this::writeSnapshot);
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshotTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshotTest.java
index b73a1db..19ce87e 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshotTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedReceivedSnapshotTest.java
@@ -78,7 +78,7 @@ public class FileBasedReceivedSnapshotTest {
   }
 
   @Test
-  public void shouldStoreReceivedSnapshotInPendingDirectory() {
+  public void shouldStoreReceivedSnapshotInSnapshotDirectory() {
     // given
     final var persistedSnapshot = takePersistedSnapshot(1L);
 
@@ -87,12 +87,9 @@ public class FileBasedReceivedSnapshotTest {
 
     // then
     assertThat(receivedSnapshot.getPath())
-        .as(""there exists a pending snapshot in the pending directory"")
-        .hasParent(receiverPendingDir)
+        .as(""there exists a snapshot in the directory"")
+        .hasParent(receiverSnapshotsDir)
         .isDirectory();
-    assertThat(receiverSnapshotsDir)
-        .as(""the pending snapshot was not committed"")
-        .isEmptyDirectory();
   }
 
   @Test
@@ -151,15 +148,15 @@ public class FileBasedReceivedSnapshotTest {
     olderReceivedSnapshot.persist().join();
 
     // then
-    assertThat(receiverPendingDir)
+    assertThat(receiverSnapshotsDir)
         .asInstanceOf(DirectoryAssert.factory())
         .as(
             ""the latest pending snapshot should not be deleted because it is newer than the persisted one"")
-        .isDirectoryContainingExactly(receivedSnapshot.getPath());
+        .isDirectoryContainingAllOf(olderReceivedSnapshot.getPath(), receivedSnapshot.getPath());
   }
 
   @Test
-  public void shouldDeletePartialSnapshotOnInvalidChecksumPersist() {
+  public void shouldNotPersistOnPartialSnapshotOnInvalidChecksumPersist() {
     // given
     final var persistedSnapshot = (FileBasedSnapshot) takePersistedSnapshot(1L);
     final var corruptedSnapshot =
@@ -180,7 +177,9 @@ public class FileBasedReceivedSnapshotTest {
     assertThat(didPersist)
         .as(""the snapshot was not persisted as it has a checksum mismatch"")
         .failsWithin(Duration.ofSeconds(5));
-    assertThat(receiverSnapshotsDir).as(""the partial snapshot was rolled back"").isEmptyDirectory();
+    assertThat(receiverSnapshotsDir)
+        .as(""the partial snapshot was rolled back"")
+        .isDirectoryNotContaining(name -> name.getFileName().toString().equals(""1-0-1-0.checksum""));
   }
 
   @Test
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshotTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshotTest.java
index 4f12245..c08aac9 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshotTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedTransientSnapshotTest.java
@@ -85,8 +85,8 @@ public class FileBasedTransientSnapshotTest {
 
     // then
     assertThat(snapshotsDir)
-        .as(""the committed snapshots directory should be empty"")
-        .isEmptyDirectory();
+        .isDirectoryNotContaining(
+            p -> p.getFileName().toFile().getName().equals(""1-2-3-4.checksum""));
   }
 
   @Test
@@ -100,7 +100,7 @@ public class FileBasedTransientSnapshotTest {
     // then
     assertThat(transientSnapshot.getPath())
         .as(""the transient snapshot directory was written in the pending directory"")
-        .hasParent(pendingDir)
+        .hasParent(snapshotsDir)
         .isNotEmptyDirectory();
   }
 
@@ -141,21 +141,6 @@ public class FileBasedTransientSnapshotTest {
   }
 
   @Test
-  public void shouldDeleteOlderTransientDirectoryOnPersist() {
-    // given
-    final var transientSnapshot = snapshotStore.newTransientSnapshot(1L, 0L, 1L, 0L).get();
-    transientSnapshot.take(this::writeSnapshot).join();
-
-    // when
-    transientSnapshot.persist().join();
-
-    // then
-    assertThat(transientSnapshot.getPath())
-        .as(""the transient directory is removed after persist"")
-        .doesNotExist();
-  }
-
-  @Test
   public void shouldPersistSnapshot() {
     // given
     final var transientSnapshot = snapshotStore.newTransientSnapshot(1L, 0L, 1L, 0L).get();
@@ -249,7 +234,7 @@ public class FileBasedTransientSnapshotTest {
     assertThat(newerTransientSnapshot.getPath())
         .as(""the newer transient snapshot still exists since it has a greater ID"")
         .isNotEmptyDirectory()
-        .hasParent(pendingDir);
+        .hasParent(snapshotsDir);
   }
 
   @Test

diff --git a/parent/pom.xml b/parent/pom.xml
index 689ab27..5407d7a 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -109,6 +109,7 @@
     <version.archunit>0.23.1</version.archunit>
     <version.easy-random>5.0.0</version.easy-random>
     <version.jcip>1.0</version.jcip>
+    <version.jnr-posix>3.1.15</version.jnr-posix>
 
     <!-- maven plugins -->
     <plugin.version.antrun>3.1.0</plugin.version.antrun>
@@ -873,6 +874,12 @@
         <scope>test</scope>
       </dependency>
 
+      <dependency>
+        <groupId>com.github.jnr</groupId>
+        <artifactId>jnr-posix</artifactId>
+        <version>${version.jnr-posix}</version>
+      </dependency>
+
       <!-- Dependencies present for convergence only -->
       <!-- between log4j2 and commons-compress (from testcontainers) -->
       <dependency>
diff --git a/util/pom.xml b/util/pom.xml
index 7fe72f6..378acdd 100644
--- a/util/pom.xml
+++ b/util/pom.xml
@@ -121,6 +121,12 @@
       <artifactId>byte-buddy</artifactId>
       <scope>test</scope>
     </dependency>
+
+    <dependency>
+      <groupId>com.github.jnr</groupId>
+      <artifactId>jnr-posix</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
   <build>
     <resources>
diff --git a/util/src/test/java/io/camunda/zeebe/util/FileUtilTest.java b/util/src/test/java/io/camunda/zeebe/util/FileUtilTest.java
index ecab769..0e35b0d 100644
--- a/util/src/test/java/io/camunda/zeebe/util/FileUtilTest.java
+++ b/util/src/test/java/io/camunda/zeebe/util/FileUtilTest.java
@@ -13,10 +13,17 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import java.io.File;
 import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.nio.channels.FileChannel;
 import java.nio.file.FileAlreadyExistsException;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
+import jnr.posix.FileStat;
+import jnr.posix.POSIX;
+import jnr.posix.POSIXFactory;
+import jnr.posix.util.Platform;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
@@ -90,4 +97,81 @@ final class FileUtilTest {
     // then
     assertThat(Files.list(target)).contains(target.resolve(snapshotFile));
   }
+
+  @Test
+  void shouldPreallocateFile() throws IOException {
+    // given
+    final var path = tmpDir.resolve(""file"");
+    final var length = 1024 * 1024L;
+
+    // when
+    try (final FileChannel channel =
+        FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {
+      FileUtil.preallocate(channel, length);
+    }
+
+    // then
+    final var realSize = getRealSize(path);
+    final var maxRealSize = length + getBlockSize(path);
+    assertThat(realSize)
+        .as(
+            ""Expected <%s> to have a real size between <%d> and <%d> bytes, but it had <%d>"",
+            path, length, maxRealSize, realSize)
+        .isBetween(length, maxRealSize);
+  }
+
+  /**
+   * Returns the actual size of the file on disk by checking the blocks allocated for this file. On
+   * most modern UNIX systems, doing {@link Files#size(Path)} returns that size as reported by the
+   * file's metadata, which may not be the real size (e.g. compressed file systems, sparse files,
+   * etc.). Using the {@code lstat} function from the C library we can get the actual size on disk
+   * of the file.
+   *
+   * <p>{@code lstat} will return the number of 512-bytes blocks used by a file. To get the real
+   * size, you simply multiply by 512. Note that unless your file size is aligned with the block
+   * size of your device, then the real size may be slightly larger, as more blocks may have been
+   * allocated.
+   *
+   * <p>NOTE: on Windows, sparse files are not the default, so {@link File#length()} is appropriate.
+   * Plus, there is no {@code lstat} function, and the equivalent function {@code wstat} does not
+   * return the number of blocks.
+   *
+   * @param file the file to get the size of
+   * @return the actual size on disk of the file
+   */
+  private long getRealSize(final Path file) {
+    if (Platform.IS_WINDOWS) {
+      try {
+        return Files.size(file);
+      } catch (final IOException e) {
+        throw new UncheckedIOException(e);
+      }
+    }
+
+    final POSIX posixFunctions = POSIXFactory.getNativePOSIX();
+    final var pathString = file.toString();
+    final FileStat stat = posixFunctions.stat(pathString);
+
+    return stat.blocks() * 512;
+  }
+
+  /**
+   * Returns the I/O block size of the device containing the given file. This can be used to compute
+   * an upper bound for the real file size. On Windows, as we use {@link Files#size(Path)} for the
+   * real size, this simply returns 0.
+   *
+   * @param file the file to get the block size of
+   * @return the I/O block size of the device containing the file
+   */
+  private long getBlockSize(final Path file) {
+    if (Platform.IS_WINDOWS) {
+      return 0;
+    }
+
+    final POSIX posixFunctions = POSIXFactory.getNativePOSIX();
+    final var pathString = file.toString();
+    final FileStat stat = posixFunctions.stat(pathString);
+
+    return stat.blockSize();
+  }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/client/PublishMessageClient.java b/engine/src/test/java/io/camunda/zeebe/engine/util/client/PublishMessageClient.java
index 01de2ac..1f3db9e 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/client/PublishMessageClient.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/client/PublishMessageClient.java
@@ -98,6 +98,11 @@ public final class PublishMessageClient {
     return this;
   }
 
+  public PublishMessageClient withTenantId(final String tenantId) {
+    messageRecord.setTenantId(tenantId);
+    return this;
+  }
+
   public PublishMessageClient onPartition(final int partitionId) {
     this.partitionId = partitionId;
     return this;

diff --git a/qa/integration-tests/pom.xml b/qa/integration-tests/pom.xml
index 11c783c..83d55b8 100644
--- a/qa/integration-tests/pom.xml
+++ b/qa/integration-tests/pom.xml
@@ -166,6 +166,12 @@
     </dependency>
 
     <dependency>
+      <groupId>io.grpc</groupId>
+      <artifactId>grpc-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+
+    <dependency>
       <groupId>io.camunda</groupId>
       <artifactId>zeebe-test-util</artifactId>
       <scope>test</scope>
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/StreamJobsTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/StreamJobsTest.java
index 77a50ef..f8d3c51 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/StreamJobsTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/StreamJobsTest.java
@@ -10,10 +10,14 @@ package io.camunda.zeebe.it.client.command;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import io.camunda.zeebe.client.ZeebeClient;
+import io.camunda.zeebe.client.api.ZeebeFuture;
 import io.camunda.zeebe.client.api.response.ActivatedJob;
+import io.camunda.zeebe.client.api.response.StreamJobsResponse;
 import io.camunda.zeebe.model.bpmn.Bpmn;
 import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.intent.JobIntent;
+import io.camunda.zeebe.protocol.record.value.JobRecordValue;
 import io.camunda.zeebe.protocol.record.value.TenantOwned;
 import io.camunda.zeebe.qa.util.actuator.JobStreamActuator;
 import io.camunda.zeebe.qa.util.cluster.TestStandaloneBroker;
@@ -27,14 +31,23 @@ import io.camunda.zeebe.test.util.record.RecordingExporter;
 import io.grpc.Status;
 import io.grpc.Status.Code;
 import io.grpc.StatusRuntimeException;
+import io.grpc.internal.AbstractStream.TransportState;
 import java.time.Duration;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
+import org.agrona.LangUtil;
 import org.assertj.core.api.InstanceOfAssertFactories;
 import org.assertj.core.data.Offset;
 import org.awaitility.Awaitility;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 
 @AutoCloseResources
@@ -233,4 +246,128 @@ final class StreamJobsTest {
         .send()
         .join();
   }
+
+  private void uncheckedLatchAwait(final CountDownLatch latch) {
+    try {
+      //noinspection ResultOfMethodCallIgnored
+      latch.await(5, TimeUnit.MINUTES);
+    } catch (final InterruptedException e) {
+      LangUtil.rethrowUnchecked(e);
+    }
+  }
+
+  @Nested
+  final class SlowClientTest {
+    private final String uniqueId = Strings.newRandomValidBpmnId();
+    private final CountDownLatch latch = new CountDownLatch(1);
+    private final List<ActivatedJob> jobs = new CopyOnWriteArrayList<>();
+    private final BpmnModelInstance process =
+        Bpmn.createExecutableProcess(uniqueId)
+            .startEvent()
+            .serviceTask(""task"", b -> b.zeebeJobType(uniqueId))
+            .endEvent()
+            .done();
+
+    // Use internal gRPC constant to generate enough load to toggle the transport state faster
+    private final Map<String, Object> payload =
+        Map.of(""foo"", ""bar"".repeat(TransportState.DEFAULT_ONREADY_THRESHOLD));
+
+    private ZeebeFuture<StreamJobsResponse> stream;
+
+    @BeforeEach
+    void beforeEach() {
+      stream =
+          client
+              .newStreamJobsCommand()
+              .jobType(uniqueId)
+              .consumer(
+                  job -> {
+                    jobs.add(job);
+                    uncheckedLatchAwait(latch);
+                  })
+              .workerName(""stream"")
+              .send();
+
+      awaitStreamRegistered(uniqueId);
+      deployProcess(process);
+    }
+
+    @AfterEach
+    void afterEach() {
+      if (stream != null) {
+        stream.cancel(true);
+      }
+    }
+
+    @Test
+    void shouldYieldJobIfClientIsBlocked() {
+      // given
+      // disable waiting in the exporter and rely on Awaitility polling
+      RecordingExporter.setMaximumWaitTime(0);
+
+      // when
+      Awaitility.await(""until transport is suspended and jobs are yielded"")
+          .untilAsserted(
+              () -> {
+                createProcessInstance(uniqueId, payload);
+
+                // then
+                assertThat(RecordingExporter.jobRecords(JobIntent.YIELDED).limit(1)).hasSize(1);
+              });
+    }
+
+    @Test
+    void shouldReceiveNewJobsWhenUnblocked() {
+      // given
+      final var startedPiKeys = new CopyOnWriteArrayList<Long>();
+
+      // when
+      RecordingExporter.setMaximumWaitTime(0);
+      Awaitility.await(""until transport is suspended and jobs are yielded"")
+          .untilAsserted(
+              () -> {
+                startedPiKeys.add(createProcessInstance(uniqueId, payload));
+                assertThat(RecordingExporter.jobRecords(JobIntent.YIELDED).limit(1)).hasSize(1);
+              });
+      RecordingExporter.setMaximumWaitTime(5000);
+
+      final var firstYieldedPi =
+          RecordingExporter.jobRecords(JobIntent.YIELDED)
+              .limit(1)
+              .findFirst()
+              .orElseThrow()
+              .getValue()
+              .getProcessInstanceKey();
+      final var firstYieldedPiIndex = startedPiKeys.indexOf(firstYieldedPi);
+      final var expectedJobPis = new ArrayList<>(startedPiKeys.subList(0, firstYieldedPiIndex));
+      final var yieldedPis = startedPiKeys.subList(firstYieldedPiIndex, startedPiKeys.size());
+
+      // unblock the stream consumer, await the extra buffered jobs (to avoid flakiness), and
+      // create a new PI to test that we can receive new jobs
+      latch.countDown();
+      Awaitility.await(""until buffered jobs are received"")
+          .untilAsserted(() -> assertThat(jobs).hasSameSizeAs(expectedJobPis));
+      expectedJobPis.add(createProcessInstance(uniqueId, payload));
+
+      // then - unblock stream consumer and expect jobs for the PIs started before we yielded to
+      // have been received, and jobs for those after to not have been received
+      assertThat(yieldedPis).isNotEmpty();
+      // we expect at least 3 jobs: the first job (which always goes through), the second job which
+      // triggered the change of transport state by filling the buffers, and the last job that was
+      // created after the consumer is unblocked
+      assertThat(expectedJobPis).hasSizeGreaterThanOrEqualTo(3);
+      Awaitility.await(""until last job is received"")
+          .untilAsserted(
+              () ->
+                  assertThat(jobs)
+                      .extracting(ActivatedJob::getProcessInstanceKey)
+                      .hasSameSizeAs(expectedJobPis)
+                      .containsExactlyElementsOf(expectedJobPis));
+      assertThat(RecordingExporter.jobRecords(JobIntent.YIELDED).limit(yieldedPis.size()))
+          .map(Record::getValue)
+          .extracting(JobRecordValue::getProcessInstanceKey)
+          .hasSameSizeAs(yieldedPis)
+          .containsExactlyElementsOf(yieldedPis);
+    }
+  }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java
index 167444c..7494014 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java
@@ -11,6 +11,9 @@ import io.camunda.zeebe.engine.state.ZbColumnFamilies;
 import io.camunda.zeebe.engine.util.EngineRule;
 import io.camunda.zeebe.engine.util.ListLogStorage;
 import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.value.BpmnElementType;
+import io.camunda.zeebe.test.util.record.RecordingExporter;
 import org.assertj.core.api.SoftAssertions;
 import org.awaitility.Awaitility;
 import org.junit.Rule;
@@ -27,16 +30,22 @@ public class ContinuouslyReplayTest {
   @Rule public final EngineRule processing = EngineRule.withSharedStorage(sharedStorage);
 
   @Test
-  public void shouldEndUpWithTheSameState() {
+  public void shouldBuildTheSameStateOnProcessingAndReplay() {
     // given
-
-    // when
     processing
         .deployment()
-        .withXmlResource(Bpmn.createExecutableProcess().startEvent().endEvent().done())
+        .withXmlResource(Bpmn.createExecutableProcess(""process"").startEvent().endEvent().done())
         .deploy();
 
+    // when
+    final var processInstanceKey = processing.processInstance().ofBpmnProcessId(""process"").create();
+
     // then
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_COMPLETED)
+        .withProcessInstanceKey(processInstanceKey)
+        .withElementType(BpmnElementType.PROCESS)
+        .await();
+
     assertStates();
   }
 
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java
new file mode 100644
index 0000000..9dd9f4c
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorReplayModeTest.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.streamprocessor;
+
+import static io.camunda.zeebe.engine.util.RecordToWrite.command;
+import static io.camunda.zeebe.engine.util.RecordToWrite.event;
+import static io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent.ACTIVATE_ELEMENT;
+import static io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent.ELEMENT_ACTIVATING;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.timeout;
+
+import io.camunda.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;
+import io.camunda.zeebe.engine.state.EventApplier;
+import io.camunda.zeebe.engine.util.Records;
+import io.camunda.zeebe.engine.util.StreamProcessorRule;
+import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
+import io.camunda.zeebe.protocol.record.ValueType;
+import org.junit.Rule;
+import org.junit.Test;
+import org.mockito.InOrder;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnit;
+import org.mockito.junit.MockitoRule;
+import org.mockito.verification.VerificationWithTimeout;
+
+public final class StreamProcessorReplayModeTest {
+
+  private static final long TIMEOUT_MILLIS = 2_000L;
+  private static final VerificationWithTimeout TIMEOUT = timeout(TIMEOUT_MILLIS);
+
+  private static final int PARTITION_ID = 1;
+
+  private static final ProcessInstanceRecord RECORD = Records.processInstance(1);
+
+  @Rule
+  public final StreamProcessorRule replayUntilEnd =
+      new StreamProcessorRule(PARTITION_ID).withReplayMode(ReplayMode.UNTIL_END);
+
+  @Rule
+  public final StreamProcessorRule replayContinuously =
+      new StreamProcessorRule(PARTITION_ID).withReplayMode(ReplayMode.CONTINUOUSLY);
+
+  @Rule public MockitoRule mockitoRule = MockitoJUnit.rule();
+
+  @Mock private TypedRecordProcessor<?> typedRecordProcessor;
+  @Mock private EventApplier eventApplier;
+
+  @Test
+  public void shouldReplayUntilEnd() {
+    // given
+    replayUntilEnd.writeBatch(
+        command().processInstance(ACTIVATE_ELEMENT, RECORD),
+        event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
+
+    // when
+    startStreamProcessor(replayUntilEnd);
+
+    replayUntilEnd.writeBatch(
+        command().processInstance(ACTIVATE_ELEMENT, RECORD),
+        event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
+
+    // then
+    final InOrder inOrder = inOrder(typedRecordProcessor, eventApplier);
+    inOrder.verify(eventApplier, TIMEOUT).applyState(anyLong(), eq(ELEMENT_ACTIVATING), any());
+    inOrder.verify(typedRecordProcessor, TIMEOUT.times(1)).onRecovered(any());
+    inOrder
+        .verify(typedRecordProcessor, TIMEOUT)
+        .processRecord(anyLong(), any(), any(), any(), any());
+    inOrder.verifyNoMoreInteractions();
+
+    assertThat(getCurrentPhase(replayUntilEnd)).isEqualTo(Phase.PROCESSING);
+  }
+
+  @Test
+  public void shouldReplayContinuously() {
+    // given
+    replayContinuously.writeBatch(
+        command().processInstance(ACTIVATE_ELEMENT, RECORD),
+        event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
+
+    // when
+    startStreamProcessor(replayContinuously);
+
+    replayContinuously.writeBatch(
+        command().processInstance(ACTIVATE_ELEMENT, RECORD),
+        event().processInstance(ELEMENT_ACTIVATING, RECORD).causedBy(0));
+
+    // then
+    final InOrder inOrder = inOrder(typedRecordProcessor, eventApplier);
+    inOrder
+        .verify(eventApplier, TIMEOUT.times(2))
+        .applyState(anyLong(), eq(ELEMENT_ACTIVATING), any());
+    inOrder.verify(typedRecordProcessor, never()).onRecovered(any());
+    inOrder.verifyNoMoreInteractions();
+
+    assertThat(getCurrentPhase(replayContinuously)).isEqualTo(Phase.REPROCESSING);
+  }
+
+  private void startStreamProcessor(final StreamProcessorRule streamProcessorRule) {
+    streamProcessorRule
+        .withEventApplierFactory(zeebeState -> eventApplier)
+        .startTypedStreamProcessor(
+            (processors, context) ->
+                processors.onCommand(
+                    ValueType.PROCESS_INSTANCE, ACTIVATE_ELEMENT, typedRecordProcessor));
+  }
+
+  private Phase getCurrentPhase(final StreamProcessorRule streamProcessorRule) {
+    return streamProcessorRule.getStreamProcessor(PARTITION_ID).getCurrentPhase().join();
+  }
+}
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java b/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
index f626ed4..cf07b5c 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/EngineRule.java
@@ -101,7 +101,6 @@ public final class EngineRule extends ExternalResource {
       new Int2ObjectHashMap<>();
 
   private long lastProcessedPosition = -1L;
-  private ReplayMode replayMode;
 
   private EngineRule(final int partitionCount) {
     this(partitionCount, null);
@@ -176,7 +175,7 @@ public final class EngineRule extends ExternalResource {
   }
 
   public EngineRule withReplayMode(final ReplayMode replayMode) {
-    this.replayMode = replayMode;
+    environmentRule.withReplayMode(replayMode);
     return this;
   }
 
@@ -194,7 +193,6 @@ public final class EngineRule extends ExternalResource {
               (processingContext) ->
                   EngineProcessors.createEngineProcessors(
                           processingContext
-                              .replayMode(replayMode)
                               .onProcessedListener(
                                   record -> {
                                     lastProcessedPosition = record.getPosition();
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
index ab44773..1f9fe26 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/StreamProcessorRule.java
@@ -10,6 +10,7 @@ package io.camunda.zeebe.engine.util;
 import static io.camunda.zeebe.engine.util.StreamProcessingComposite.getLogName;
 
 import io.camunda.zeebe.db.ZeebeDbFactory;
+import io.camunda.zeebe.engine.processing.streamprocessor.ReplayMode;
 import io.camunda.zeebe.engine.processing.streamprocessor.StreamProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecord;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecordProcessorFactory;
@@ -64,6 +65,7 @@ public final class StreamProcessorRule implements TestRule {
   private TestStreams streams;
   private StreamProcessingComposite streamProcessingComposite;
   private ListLogStorage sharedStorage = null;
+  private ReplayMode replayMode = ReplayMode.UNTIL_END;
 
   public StreamProcessorRule() {
     this(new TemporaryFolder());
@@ -125,6 +127,11 @@ public final class StreamProcessorRule implements TestRule {
     return this;
   }
 
+  public StreamProcessorRule withReplayMode(final ReplayMode replayMode) {
+    this.replayMode = replayMode;
+    return this;
+  }
+
   public LogStreamRecordWriter getLogStreamRecordWriter(final int partitionId) {
     return streamProcessingComposite.getLogStreamRecordWriter(partitionId);
   }
@@ -317,6 +324,7 @@ public final class StreamProcessorRule implements TestRule {
     @Override
     protected void before() {
       streams = new TestStreams(tempFolder, closeables, actorSchedulerRule.get());
+      streams.withReplayMode(replayMode);
 
       int partitionId = startPartitionId;
       for (int i = 0; i < partitionCount; i++) {
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
index 18696b2..176c405 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/util/TestStreams.java
@@ -17,6 +17,7 @@ import static org.mockito.Mockito.when;
 
 import io.camunda.zeebe.db.ZeebeDb;
 import io.camunda.zeebe.db.ZeebeDbFactory;
+import io.camunda.zeebe.engine.processing.streamprocessor.ReplayMode;
 import io.camunda.zeebe.engine.processing.streamprocessor.StreamProcessor;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedEventRegistry;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecord;
@@ -79,6 +80,7 @@ public final class TestStreams {
   private boolean snapshotWasTaken = false;
 
   private Function<MutableZeebeState, EventApplier> eventApplierFactory = EventAppliers::new;
+  private ReplayMode replayMode = ReplayMode.UNTIL_END;
 
   public TestStreams(
       final TemporaryFolder dataDirectory,
@@ -107,6 +109,10 @@ public final class TestStreams {
     this.eventApplierFactory = eventApplierFactory;
   }
 
+  public void withReplayMode(final ReplayMode replayMode) {
+    this.replayMode = replayMode;
+  }
+
   public CommandResponseWriter getMockedResponseWriter() {
     return mockCommandResponseWriter;
   }
@@ -252,6 +258,7 @@ public final class TestStreams {
             .onProcessedListener(mockOnProcessedListener)
             .streamProcessorFactory(factory)
             .eventApplierFactory(eventApplierFactory)
+            .replayMode(replayMode)
             .build();
     final var openFuture = streamProcessor.openAsync(false);
 

diff --git a/clients/go/cmd/zbctl/main_test.go b/clients/go/cmd/zbctl/main_test.go
index b93f07d..02c3172 100644
--- a/clients/go/cmd/zbctl/main_test.go
+++ b/clients/go/cmd/zbctl/main_test.go
@@ -187,9 +187,16 @@ func TestZbctlWithInsecureGateway(t *testing.T) {
 		})
 }
 
+func (s *integrationTestSuite) AfterTest(suiteName, testName string) {
+	// overload to ignore the parent behavior; we instead print the container logs after each failed
+	// test and not at the very end of all test cases, where it's more difficult to know what went
+	// wrong; if you add more top level tests, like TestCommonCommands, make sure to also add a block
+	// of code in case the test fails to print out the container logs using s.PrintFailedContainerLogs()
+}
+
 func (s *integrationTestSuite) TestCommonCommands() {
 	for _, test := range tests {
-		s.T().Run(test.name, func(t *testing.T) {
+		passed := s.T().Run(test.name, func(t *testing.T) {
 			for _, cmd := range test.setupCmds {
 				if _, err := s.runCommand(cmd, false); err != nil {
 					t.Fatalf(""failed while executing set up command '%s': %v"", strings.Join(cmd, "" ""), err)
@@ -227,6 +234,12 @@ func (s *integrationTestSuite) TestCommonCommands() {
 
 			assertEq(t, test, goldenOut, cmdOut)
 		})
+
+		if !passed {
+			_, _ = fmt.Fprintln(os.Stderr, ""====================================="")
+			_, _ = fmt.Fprintf(os.Stderr, ""Test case '%s' failed, printing container logs up until now\n"", test.name)
+			s.PrintFailedContainerLogs()
+		}
 	}
 }
 
diff --git a/clients/go/internal/containersuite/containerSuite.go b/clients/go/internal/containersuite/containerSuite.go
index 5433911..162d776 100644
--- a/clients/go/internal/containersuite/containerSuite.go
+++ b/clients/go/internal/containersuite/containerSuite.go
@@ -164,9 +164,13 @@ type ContainerSuite struct {
 
 func (s *ContainerSuite) AfterTest(suiteName, testName string) {
 	if s.T().Failed() {
-		if err := printFailedContainerLogs(s.container); err != nil {
-			_, _ = fmt.Fprint(os.Stderr, err)
-		}
+		s.PrintFailedContainerLogs()
+	}
+}
+
+func (s *ContainerSuite) PrintFailedContainerLogs() {
+	if err := printFailedContainerLogs(s.container); err != nil {
+		_, _ = fmt.Fprint(os.Stderr, err)
 	}
 }
 

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/message/MessageStreamProcessorTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/message/MessageStreamProcessorTest.java
index 61d9902..fef5fbc 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/message/MessageStreamProcessorTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/message/MessageStreamProcessorTest.java
@@ -23,6 +23,7 @@ import io.camunda.zeebe.engine.EngineConfiguration;
 import io.camunda.zeebe.engine.processing.bpmn.behavior.BpmnBehaviors;
 import io.camunda.zeebe.engine.processing.message.command.SubscriptionCommandSender;
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.appliers.EventAppliers;
 import io.camunda.zeebe.engine.util.StreamProcessorRule;
 import io.camunda.zeebe.protocol.impl.record.value.message.MessageRecord;
 import io.camunda.zeebe.protocol.impl.record.value.message.MessageSubscriptionRecord;
@@ -55,9 +56,8 @@ public final class MessageStreamProcessorTest {
   public void setup() {
     mockInterpartitionCommandSender = mock(InterPartitionCommandSender.class);
     final var mockProcessingResultBuilder = mock(ProcessingResultBuilder.class);
-    final var writers =
-        new Writers(
-            () -> mockProcessingResultBuilder, (key, intent, recordValue, recordVersion) -> {});
+    final var mockEventAppliers = mock(EventAppliers.class);
+    final var writers = new Writers(() -> mockProcessingResultBuilder, mockEventAppliers);
     spySubscriptionCommandSender =
         spy(new SubscriptionCommandSender(1, mockInterpartitionCommandSender));
     spySubscriptionCommandSender.setWriters(writers);
diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/message/command/SubscriptionCommandSenderTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/message/command/SubscriptionCommandSenderTest.java
index c7bb686..8d95019 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/message/command/SubscriptionCommandSenderTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/message/command/SubscriptionCommandSenderTest.java
@@ -15,6 +15,7 @@ import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 import io.camunda.zeebe.engine.processing.streamprocessor.writers.Writers;
+import io.camunda.zeebe.engine.state.appliers.EventAppliers;
 import io.camunda.zeebe.protocol.Protocol;
 import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.MessageSubscriptionIntent;
@@ -52,9 +53,8 @@ public class SubscriptionCommandSenderTest {
     subscriptionCommandSender =
         new SubscriptionCommandSender(SAME_PARTITION, mockInterPartitionCommandSender);
     mockProcessingResultBuilder = mock(ProcessingResultBuilder.class);
-    final var writers =
-        new Writers(
-            () -> mockProcessingResultBuilder, (key, intent, recordValue, recordVersion) -> {});
+    final var mockEventAppliers = mock(EventAppliers.class);
+    final var writers = new Writers(() -> mockProcessingResultBuilder, mockEventAppliers);
     subscriptionCommandSender.setWriters(writers);
   }
 

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryIT.java
index 0854323..bfc7b7e 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryIT.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/health/DiskSpaceRecoveryIT.java
@@ -47,7 +47,8 @@ final class DiskSpaceRecoveryIT {
           .withZeebeData(volume)
           .withEnv(""ZEEBE_BROKER_DATA_LOGSEGMENTSIZE"", ""1MB"")
           .withEnv(""ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE"", ""1MB"")
-          .withEnv(""ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK"", ""0.5"");
+          .withEnv(""ZEEBE_BROKER_DATA_DISK_FREESPACE_PROCESSING"", ""10MB"")
+          .withEnv(""ZEEBE_BROKER_DATA_DISK_FREESPACE_REPLICATION"", ""1MB"");
 
   private ZeebeClient client;
 
@@ -127,7 +128,9 @@ final class DiskSpaceRecoveryIT {
         ContainerEngine.builder()
             .withDebugReceiverPort(SocketUtil.getNextAddress().getPort())
             .withContainer(
-                container.withEnv(""ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK"", ""0.0001""))
+                container
+                    .withEnv(""ZEEBE_BROKER_DATA_DISK_FREESPACE_PROCESSING"", ""16MB"")
+                    .withEnv(""ZEEBE_BROKER_DATA_DISK_FREESPACE_REPLICATION"", ""10MB""))
             .build();
 
     @BeforeEach

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
index c0a3472..6a9389b 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/ProcessExecutionCleanStateTest.java
@@ -759,7 +759,7 @@ public final class ProcessExecutionCleanStateTest {
         .withXmlResource(
             Bpmn.createExecutableProcess(PROCESS_ID)
                 .startEvent()
-                .serviceTask(""task"", t -> t.zeebeJobType(""test"").zeebeOutputExpression(""x"", ""y""))
+                .serviceTask(""task"", t -> t.zeebeJobType(""test""))
                 .endEvent()
                 .done())
         .deploy();
@@ -768,7 +768,7 @@ public final class ProcessExecutionCleanStateTest {
     final var processInstanceKey =
         engineRule.processInstance().ofBpmnProcessId(PROCESS_ID).create();
 
-    engineRule.job().ofInstance(processInstanceKey).withType(""test"").complete();
+    engineRule.job().ofInstance(processInstanceKey).withType(""test"").withRetries(0).fail();
 
     RecordingExporter.incidentRecords(IncidentIntent.CREATED)
         .withProcessInstanceKey(processInstanceKey)

diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/SnapshotChunkReaderTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/SnapshotChunkReaderTest.java
deleted file mode 100644
index 9197224..0000000
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/SnapshotChunkReaderTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
- * one or more contributor license agreements. See the NOTICE file distributed
- * with this work for additional information regarding copyright ownership.
- * Licensed under the Zeebe Community License 1.1. You may not use this file
- * except in compliance with the Zeebe Community License 1.1.
- */
-package io.camunda.zeebe.snapshots;
-
-import static java.nio.file.StandardOpenOption.CREATE_NEW;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-
-import io.camunda.zeebe.protocol.Protocol;
-import io.camunda.zeebe.scheduler.testing.ActorSchedulerRule;
-import io.camunda.zeebe.snapshots.impl.FileBasedSnapshotStoreFactory;
-import io.camunda.zeebe.util.FileUtil;
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.ByteBuffer;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.NoSuchElementException;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
-
-public class SnapshotChunkReaderTest {
-
-  private static final Map<String, String> SNAPSHOT_CHUNK =
-      Map.of(""file3"", ""content"", ""file1"", ""this"", ""file2"", ""is"");
-  private static final int EXPECTED_CHUNK_COUNT = 3;
-  @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
-  @Rule public ActorSchedulerRule scheduler = new ActorSchedulerRule();
-  private PersistedSnapshot persistedSnapshot;
-
-  @Before
-  public void before() {
-    final FileBasedSnapshotStoreFactory factory =
-        new FileBasedSnapshotStoreFactory(scheduler.get(), 1);
-    final int partitionId = 1;
-    final Path snapshotDirectory = temporaryFolder.getRoot().toPath();
-
-    factory.createReceivableSnapshotStore(snapshotDirectory, partitionId);
-    final var persistedSnapshotStore = factory.getConstructableSnapshotStore(partitionId);
-
-    final var transientSnapshot = persistedSnapshotStore.newTransientSnapshot(1, 2, 3, 2).get();
-    transientSnapshot.take(this::takeSnapshot);
-    persistedSnapshot = transientSnapshot.persist().join();
-  }
-
-  @Test
-  public void shouldReadSnapshotChunks() {
-    // given
-    final var expectedSnapshotChecksum = persistedSnapshot.getChecksum();
-
-    try (final var snapshotChunkReader = persistedSnapshot.newChunkReader()) {
-      for (int i = 0; i < EXPECTED_CHUNK_COUNT; i++) {
-        assertThat(snapshotChunkReader.hasNext()).isTrue();
-        // when
-        final var nextId = snapshotChunkReader.nextId();
-        final var chunk = snapshotChunkReader.next();
-
-        // then
-        assertThat(asByteBuffer(chunk.getChunkName())).isNotNull().isEqualTo(nextId);
-        assertThat(chunk.getSnapshotId()).isEqualTo(persistedSnapshot.getId());
-        assertThat(chunk.getTotalCount()).isEqualTo(EXPECTED_CHUNK_COUNT);
-        assertThat(chunk.getSnapshotChecksum()).isEqualTo(expectedSnapshotChecksum);
-        assertThat(chunk.getChecksum()).as(""the chunk has a checksum"").isNotNegative();
-      }
-    }
-  }
-
-  @Test
-  public void shouldReadSnapshotChunksInOrder() {
-    // when
-    final var snapshotChunks = new ArrayList<SnapshotChunk>();
-    final var snapshotChunkIds = new ArrayList<ByteBuffer>();
-    try (final var snapshotChunkReader = persistedSnapshot.newChunkReader()) {
-      while (snapshotChunkReader.hasNext()) {
-        snapshotChunkIds.add(snapshotChunkReader.nextId());
-        snapshotChunks.add(snapshotChunkReader.next());
-      }
-    }
-
-    // then
-    assertThat(snapshotChunkIds)
-        .containsExactly(asByteBuffer(""file1""), asByteBuffer(""file2""), asByteBuffer(""file3""));
-
-    assertThat(snapshotChunks)
-        .extracting(SnapshotChunk::getContent)
-        .extracting(String::new)
-        .containsExactly(""this"", ""is"", ""content"");
-  }
-
-  @Test
-  public void shouldSeekToChunk() {
-    // when
-    final var snapshotChunkIds = new ArrayList<String>();
-    try (final var snapshotChunkReader = persistedSnapshot.newChunkReader()) {
-      snapshotChunkReader.seek(asByteBuffer(""file2""));
-      while (snapshotChunkReader.hasNext()) {
-        snapshotChunkIds.add(snapshotChunkReader.next().getChunkName());
-      }
-    }
-
-    // then
-    assertThat(snapshotChunkIds).containsExactly(""file2"", ""file3"");
-  }
-
-  @Test
-  public void shouldThrowExceptionOnReachingLimit() {
-    // given
-    final var snapshotChunkReader = persistedSnapshot.newChunkReader();
-    while (snapshotChunkReader.hasNext()) {
-      snapshotChunkReader.next();
-    }
-
-    assertThat(snapshotChunkReader.nextId()).isNull();
-
-    // when - then
-    assertThatThrownBy(snapshotChunkReader::next).isInstanceOf(NoSuchElementException.class);
-  }
-
-  private ByteBuffer asByteBuffer(final String string) {
-    return ByteBuffer.wrap(string.getBytes()).order(Protocol.ENDIANNESS);
-  }
-
-  private boolean takeSnapshot(final Path path) {
-    try {
-      FileUtil.ensureDirectoryExists(path);
-      for (final Entry<String, String> entry : SNAPSHOT_CHUNK.entrySet()) {
-        final String id = entry.getKey();
-        final String content = entry.getValue();
-        Files.write(path.resolve(id), content.getBytes(), CREATE_NEW, StandardOpenOption.WRITE);
-      }
-    } catch (final IOException e) {
-      throw new UncheckedIOException(e);
-    }
-    return true;
-  }
-}
diff --git a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotChunkReaderTest.java b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotChunkReaderTest.java
index 8adedd1..5fc6d88 100644
--- a/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotChunkReaderTest.java
+++ b/snapshot/src/test/java/io/camunda/zeebe/snapshots/impl/FileBasedSnapshotChunkReaderTest.java
@@ -10,6 +10,8 @@ package io.camunda.zeebe.snapshots.impl;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import io.camunda.zeebe.protocol.Protocol;
+import io.camunda.zeebe.snapshots.SnapshotChunk;
 import io.camunda.zeebe.util.FileUtil;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -17,7 +19,9 @@ import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.nio.file.Path;
-import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.NoSuchElementException;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -25,6 +29,9 @@ import org.junit.rules.TemporaryFolder;
 public final class FileBasedSnapshotChunkReaderTest {
 
   private static final long SNAPSHOT_CHECKSUM = 1L;
+  private static final Map<String, String> SNAPSHOT_CHUNK =
+      Map.of(""file3"", ""content"", ""file1"", ""this"", ""file2"", ""is"");
+
   @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();
   private Path snapshotDirectory;
 
@@ -34,8 +41,9 @@ public final class FileBasedSnapshotChunkReaderTest {
     final var reader = newReader();
 
     // when - then
-    assertThat(reader.next().getChunkName()).isEqualTo(""bar"");
-    assertThat(reader.next().getChunkName()).isEqualTo(""foo"");
+    assertThat(reader.next().getChunkName()).isEqualTo(""file1"");
+    assertThat(reader.next().getChunkName()).isEqualTo(""file2"");
+    assertThat(reader.next().getChunkName()).isEqualTo(""file3"");
   }
 
   @Test
@@ -44,7 +52,7 @@ public final class FileBasedSnapshotChunkReaderTest {
     final var reader = newReader();
 
     // when
-    Files.delete(snapshotDirectory.resolve(""bar""));
+    Files.delete(snapshotDirectory.resolve(""file1""));
 
     // then
     assertThatThrownBy(reader::next).hasCauseInstanceOf(NoSuchFileException.class);
@@ -66,7 +74,7 @@ public final class FileBasedSnapshotChunkReaderTest {
   public void shouldReadSnapshotChunks() throws IOException {
     // given
     try (final var snapshotChunkReader = newReader()) {
-      for (int i = 0; i < 2; i++) {
+      for (int i = 0; i < SNAPSHOT_CHUNK.size(); i++) {
         assertThat(snapshotChunkReader.hasNext()).isTrue();
         // when
         final var nextId = snapshotChunkReader.nextId();
@@ -78,7 +86,7 @@ public final class FileBasedSnapshotChunkReaderTest {
             .isNotNull()
             .isEqualTo(nextId);
         assertThat(chunk.getSnapshotId()).isEqualTo(snapshotDirectory.getFileName().toString());
-        assertThat(chunk.getTotalCount()).isEqualTo(2);
+        assertThat(chunk.getTotalCount()).isEqualTo(SNAPSHOT_CHUNK.size());
         assertThat(chunk.getSnapshotChecksum()).isEqualTo(SNAPSHOT_CHECKSUM);
         assertThat(chunk.getChecksum())
             .isEqualTo(SnapshotChunkUtil.createChecksum(chunk.getContent()));
@@ -88,12 +96,68 @@ public final class FileBasedSnapshotChunkReaderTest {
     }
   }
 
+  @Test
+  public void shouldReadSnapshotChunksInOrder() throws IOException {
+    // when
+    final var snapshotChunks = new ArrayList<SnapshotChunk>();
+    final var snapshotChunkIds = new ArrayList<ByteBuffer>();
+    try (final var snapshotChunkReader = newReader()) {
+      while (snapshotChunkReader.hasNext()) {
+        snapshotChunkIds.add(snapshotChunkReader.nextId());
+        snapshotChunks.add(snapshotChunkReader.next());
+      }
+    }
+
+    // then
+    assertThat(snapshotChunkIds)
+        .containsExactly(asByteBuffer(""file1""), asByteBuffer(""file2""), asByteBuffer(""file3""));
+
+    assertThat(snapshotChunks)
+        .extracting(SnapshotChunk::getContent)
+        .extracting(String::new)
+        .containsExactly(""this"", ""is"", ""content"");
+  }
+
+  @Test
+  public void shouldSeekToChunk() throws IOException {
+    // when
+    final var snapshotChunkIds = new ArrayList<String>();
+    try (final var snapshotChunkReader = newReader()) {
+      snapshotChunkReader.seek(asByteBuffer(""file2""));
+      while (snapshotChunkReader.hasNext()) {
+        snapshotChunkIds.add(snapshotChunkReader.next().getChunkName());
+      }
+    }
+
+    // then
+    assertThat(snapshotChunkIds).containsExactly(""file2"", ""file3"");
+  }
+
+  @Test
+  public void shouldThrowExceptionOnReachingLimit() throws IOException {
+    // given
+    final var snapshotChunkReader = newReader();
+    while (snapshotChunkReader.hasNext()) {
+      snapshotChunkReader.next();
+    }
+
+    assertThat(snapshotChunkReader.nextId()).isNull();
+
+    // when - then
+    assertThatThrownBy(snapshotChunkReader::next).isInstanceOf(NoSuchElementException.class);
+  }
+
+  private ByteBuffer asByteBuffer(final String string) {
+    return ByteBuffer.wrap(string.getBytes()).order(Protocol.ENDIANNESS);
+  }
+
   private FileBasedSnapshotChunkReader newReader() throws IOException {
     snapshotDirectory = temporaryFolder.getRoot().toPath();
-    for (final var chunk : Arrays.asList(""foo"", ""bar"")) {
+
+    for (final var chunk : SNAPSHOT_CHUNK.keySet()) {
       final var path = snapshotDirectory.resolve(chunk);
       Files.createFile(path);
-      Files.writeString(path, ""content"");
+      Files.writeString(path, SNAPSHOT_CHUNK.get(chunk));
     }
 
     return new FileBasedSnapshotChunkReader(snapshotDirectory, SNAPSHOT_CHECKSUM);

diff --git a/broker-core/src/test/java/io/zeebe/broker/workflow/MessageCorrelationTest.java b/broker-core/src/test/java/io/zeebe/broker/workflow/MessageCorrelationTest.java
index 0f5fed9..796393c 100644
--- a/broker-core/src/test/java/io/zeebe/broker/workflow/MessageCorrelationTest.java
+++ b/broker-core/src/test/java/io/zeebe/broker/workflow/MessageCorrelationTest.java
@@ -27,7 +27,6 @@ import static io.zeebe.test.util.MsgPackUtil.asMsgPack;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.entry;
 
-import io.zeebe.UnstableTest;
 import io.zeebe.broker.test.EmbeddedBrokerRule;
 import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
@@ -50,7 +49,6 @@ import org.agrona.DirectBuffer;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.experimental.categories.Category;
 import org.junit.rules.RuleChain;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -165,7 +163,7 @@ public class MessageCorrelationTest {
             ""receive-message"", WorkflowInstanceIntent.ELEMENT_ACTIVATED);
 
     final SubscribedRecord messageSubscription =
-        findMessageSubscription(testClient, MessageSubscriptionIntent.OPENED);
+        findMessageSubscription(MessageSubscriptionIntent.OPENED);
     assertThat(messageSubscription.valueType()).isEqualTo(ValueType.MESSAGE_SUBSCRIPTION);
     assertThat(messageSubscription.recordType()).isEqualTo(RecordType.EVENT);
     assertThat(messageSubscription.value())
@@ -244,7 +242,7 @@ public class MessageCorrelationTest {
     final long workflowInstanceKey =
         testClient.createWorkflowInstance(""wf"", asMsgPack(""orderId"", ""order-123""));
 
-    testClient.receiveFirstWorkflowInstanceEvent(WorkflowInstanceIntent.ELEMENT_ACTIVATED);
+    findMessageSubscription(MessageSubscriptionIntent.OPENED);
 
     // when
     testClient.publishMessage(""order canceled"", ""order-123"", asMsgPack(""foo"", ""bar""));
@@ -308,13 +306,12 @@ public class MessageCorrelationTest {
   }
 
   @Test
-  @Category(UnstableTest.class) // => https://github.com/zeebe-io/zeebe/issues/1234
   public void shouldCorrelateMessageWithZeroTTL() throws Exception {
     // given
     final long workflowInstanceKey =
         testClient.createWorkflowInstance(""wf"", asMsgPack(""orderId"", ""order-123""));
 
-    testClient.receiveElementInState(""receive-message"", WorkflowInstanceIntent.ELEMENT_ACTIVATED);
+    findMessageSubscription(MessageSubscriptionIntent.OPENED);
 
     // when
     testClient.publishMessage(""order canceled"", ""order-123"", asMsgPack(""foo"", ""bar""), 0);
@@ -499,10 +496,9 @@ public class MessageCorrelationTest {
         .containsEntry(""activityInstanceKey"", catchEventEntered.key());
   }
 
-  private SubscribedRecord findMessageSubscription(
-      final TestPartitionClient client, final MessageSubscriptionIntent intent)
+  private SubscribedRecord findMessageSubscription(final MessageSubscriptionIntent intent)
       throws AssertionError {
-    return client
+    return testClient
         .receiveEvents()
         .filter(intent(intent))
         .findFirst()

diff --git a/backup-stores/s3/pom.xml b/backup-stores/s3/pom.xml
index 282a4dc..1db7a33 100644
--- a/backup-stores/s3/pom.xml
+++ b/backup-stores/s3/pom.xml
@@ -149,6 +149,12 @@
       <artifactId>aws-java-sdk-core</artifactId>
       <scope>test</scope>
     </dependency>
+
+    <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-core</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/backup-stores/s3/src/test/java/io/camunda/zeebe/backup/s3/util/AsyncAggregatingSubscriberTest.java b/backup-stores/s3/src/test/java/io/camunda/zeebe/backup/s3/util/AsyncAggregatingSubscriberTest.java
new file mode 100644
index 0000000..b83ec84
--- /dev/null
+++ b/backup-stores/s3/src/test/java/io/camunda/zeebe/backup/s3/util/AsyncAggregatingSubscriberTest.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.backup.s3.util;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+
+import java.time.Duration;
+import java.util.Collection;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+import org.junit.jupiter.api.Test;
+import org.reactivestreams.Subscription;
+import org.testcontainers.shaded.org.awaitility.Awaitility;
+
+final class AsyncAggregatingSubscriberTest {
+
+  @Test
+  void shouldCompleteOnlyAfterAllFuturesComplete() {
+    // given
+    final var aggregator = new AsyncAggregatingSubscriber<Integer>(16);
+    final var completed = CompletableFuture.completedFuture(1);
+    final var delayed = new CompletableFuture<Integer>();
+
+    aggregator.onSubscribe(mock(Subscription.class));
+    final CompletableFuture<Collection<Integer>> result = aggregator.result();
+
+    // when
+    aggregator.onNext(completed);
+    aggregator.onNext(delayed);
+    aggregator.onComplete();
+
+    // then
+    assertThat(result).isNotDone();
+
+    delayed.complete(2);
+    Awaitility.await().until(result::isDone);
+    assertThat(result.join()).containsExactlyInAnyOrder(1, 2);
+  }
+
+  @Test
+  void shouldFailIfOneFutureFails() {
+    // given
+    final var aggregator = new AsyncAggregatingSubscriber<Integer>(16);
+    final var completed = CompletableFuture.completedFuture(1);
+    final var failed = new CompletableFuture<Integer>();
+
+    aggregator.onSubscribe(mock(Subscription.class));
+    final CompletableFuture<Collection<Integer>> result = aggregator.result();
+
+    // when
+    aggregator.onNext(completed);
+    aggregator.onNext(failed);
+    aggregator.onComplete();
+
+    // then
+    failed.completeExceptionally(new RuntimeException(""Failed""));
+
+    Awaitility.await()
+        .untilAsserted(
+            () ->
+                assertThat(result)
+                    .failsWithin(Duration.ofMillis(100))
+                    .withThrowableOfType(ExecutionException.class)
+                    .withMessageContaining(""Failed""));
+  }
+
+  @Test
+  void shouldFailsIfSubscriptionFails() {
+    // given
+    final var aggregator = new AsyncAggregatingSubscriber<Integer>(16);
+    final var completed = CompletableFuture.completedFuture(1);
+    final var failed = new CompletableFuture<Integer>();
+
+    aggregator.onSubscribe(mock(Subscription.class));
+    final CompletableFuture<Collection<Integer>> result = aggregator.result();
+
+    // when
+    aggregator.onNext(completed);
+    aggregator.onNext(failed);
+    aggregator.onError(new RuntimeException(""Failed""));
+
+    // then
+    Awaitility.await()
+        .untilAsserted(
+            () ->
+                assertThat(result)
+                    .failsWithin(Duration.ofMillis(100))
+                    .withThrowableOfType(ExecutionException.class)
+                    .withMessageContaining(""Failed""));
+  }
+}

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/raft/ZeebeEntryValidatorTest.java b/broker/src/test/java/io/camunda/zeebe/broker/raft/ZeebeEntryValidatorTest.java
new file mode 100644
index 0000000..3cab603
--- /dev/null
+++ b/broker/src/test/java/io/camunda/zeebe/broker/raft/ZeebeEntryValidatorTest.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.raft;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.atomix.raft.storage.log.entry.ApplicationEntry;
+import io.atomix.raft.zeebe.EntryValidator.ValidationResult;
+import org.agrona.concurrent.UnsafeBuffer;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.parallel.Execution;
+import org.junit.jupiter.api.parallel.ExecutionMode;
+
+@Execution(ExecutionMode.CONCURRENT)
+final class ZeebeEntryValidatorTest {
+  private final ZeebeEntryValidator validator = new ZeebeEntryValidator();
+
+  @Test
+  void shouldRejectEntryWithGapInPosition() {
+    // given
+    final var lastEntry = new ApplicationEntry(1, 1, new UnsafeBuffer());
+    final var entry = new ApplicationEntry(3, 3, new UnsafeBuffer());
+
+    // when
+    final ValidationResult result = validator.validateEntry(lastEntry, entry);
+
+    // then
+    assertThat(result.failed()).as(""validation has failed"").isTrue();
+  }
+
+  @Test
+  void shouldAcceptEntryWithoutGapInPosition() {
+    // given
+    final var lastEntry = new ApplicationEntry(1, 2, new UnsafeBuffer());
+    final var entry = new ApplicationEntry(3, 3, new UnsafeBuffer());
+
+    // when
+    final ValidationResult result = validator.validateEntry(lastEntry, entry);
+
+    // then
+    assertThat(result).as(""validation was successful"").isEqualTo(ValidationResult.ok());
+  }
+
+  @Test
+  void shouldAcceptEntryWhenNoLastKnownEntry() {
+    // given
+    final var entry = new ApplicationEntry(3, 3, new UnsafeBuffer());
+
+    // when
+    final ValidationResult result = validator.validateEntry(null, entry);
+
+    // then
+    assertThat(result).as(""validation was successful"").isEqualTo(ValidationResult.ok());
+  }
+}

diff --git a/journal/pom.xml b/journal/pom.xml
index f88e1ed..11dced3 100644
--- a/journal/pom.xml
+++ b/journal/pom.xml
@@ -64,6 +64,12 @@
       <artifactId>assertj-core</artifactId>
       <scope>test</scope>
     </dependency>
+
+    <dependency>
+      <groupId>com.github.jnr</groupId>
+      <artifactId>jnr-posix</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentLoaderTest.java b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentLoaderTest.java
new file mode 100644
index 0000000..b07e1e0
--- /dev/null
+++ b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentLoaderTest.java
@@ -0,0 +1,156 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.journal.file;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import jnr.posix.FileStat;
+import jnr.posix.POSIX;
+import jnr.posix.POSIXFactory;
+import jnr.posix.util.Platform;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
+import org.junit.jupiter.api.parallel.Execution;
+import org.junit.jupiter.api.parallel.ExecutionMode;
+
+@SuppressWarnings(""resource"")
+@Execution(ExecutionMode.CONCURRENT)
+final class SegmentLoaderTest {
+  @Test
+  void shouldPreallocateSegmentFiles(final @TempDir Path tmpDir) {
+    // given
+    final var segmentSize = 4 * 1024 * 1024;
+    final var segmentLoader = new SegmentLoader(0, new SparseJournalIndex(1), true);
+    final var segmentFile = tmpDir.resolve(""segment.log"");
+    final var descriptor =
+        JournalSegmentDescriptor.builder().withId(1).withMaxSegmentSize(segmentSize).build();
+
+    // when
+    final var segment = segmentLoader.createSegment(segmentFile, descriptor);
+
+    // then
+    final var realSize = getRealSize(segmentFile);
+    final var maxRealSize = segmentSize + getBlockSize(segmentFile);
+    assertThat(realSize)
+        .as(
+            ""Expected <%s> to have a real size between <%d> and <%d> bytes, but it had <%d>"",
+            segmentFile, segmentSize, maxRealSize, realSize)
+        .isBetween((long) segmentSize, maxRealSize);
+  }
+
+  @Test
+  void shouldNotPreallocateSegmentFiles(final @TempDir Path tmpDir) {
+    // given
+    final var segmentSize = 4 * 1024 * 1024;
+    final var segmentLoader = new SegmentLoader(0, new SparseJournalIndex(1), false);
+    final var segmentFile = tmpDir.resolve(""segment.log"");
+    final var descriptor =
+        JournalSegmentDescriptor.builder().withId(1).withMaxSegmentSize(segmentSize).build();
+
+    // when
+    final var segment = segmentLoader.createSegment(segmentFile, descriptor);
+
+    // then
+    final var realSize = getRealSize(segmentFile);
+    assertThat(realSize)
+        .as(
+            ""Expected <%s> to have a real size less than <%d> bytes, but it had <%d>"",
+            segmentFile, segmentSize, realSize)
+        .isLessThan(segmentSize);
+  }
+
+  @Test
+  void shouldPreallocateNewFileIfUnusedSegmentAlreadyExists(final @TempDir Path tmpDir)
+      throws IOException {
+    // given
+    final var segmentSize = 4 * 1024 * 1024;
+    final var descriptor =
+        JournalSegmentDescriptor.builder()
+            .withId(1)
+            .withIndex(1)
+            .withMaxSegmentSize(segmentSize)
+            .build();
+    final var lastWrittenIndex = descriptor.index() - 1;
+    final var segmentLoader = new SegmentLoader(lastWrittenIndex, new SparseJournalIndex(1), true);
+    final var segmentFile = tmpDir.resolve(""segment.log"");
+
+    // when - the segment is ""unused"" if the lastWrittenIndex is less than the expected first index
+    // this can happen if we crashed in the middle of creating the new segment
+    Files.writeString(segmentFile, ""foo"");
+    final var segment = segmentLoader.createSegment(segmentFile, descriptor);
+
+    // then
+    final var realSize = getRealSize(segmentFile);
+    final var maxRealSize = segmentSize + getBlockSize(segmentFile);
+    assertThat(realSize)
+        .as(
+            ""Expected <%s> to have a real size between <%d> and <%d> bytes, but it had <%d>"",
+            segmentFile, segmentSize, maxRealSize, realSize)
+        .isBetween((long) segmentSize, maxRealSize);
+  }
+
+  /**
+   * Returns the actual size of the file on disk by checking the blocks allocated for this file. On
+   * most modern UNIX systems, doing {@link Files#size(Path)} returns that size as reported by the
+   * file's metadata, which may not be the real size (e.g. compressed file systems, sparse files,
+   * etc.). Using the {@code lstat} function from the C library we can get the actual size on disk
+   * of the file.
+   *
+   * <p>{@code lstat} will return the number of 512-bytes blocks used by a file. To get the real
+   * size, you simply multiply by 512. Note that unless your file size is aligned with the block
+   * size of your device, then the real size may be slightly larger, as more blocks may have been
+   * allocated.
+   *
+   * <p>NOTE: on Windows, sparse files are not the default, so {@link File#length()} is appropriate.
+   * Plus, there is no {@code lstat} function, and the equivalent function {@code wstat} does not
+   * return the number of blocks.
+   *
+   * @param file the file to get the size of
+   * @return the actual size on disk of the file
+   */
+  private long getRealSize(final Path file) {
+    if (Platform.IS_WINDOWS) {
+      try {
+        return Files.size(file);
+      } catch (final IOException e) {
+        throw new UncheckedIOException(e);
+      }
+    }
+
+    final POSIX posixFunctions = POSIXFactory.getNativePOSIX();
+    final var pathString = file.toString();
+    final FileStat stat = posixFunctions.stat(pathString);
+
+    return stat.blocks() * 512;
+  }
+
+  /**
+   * Returns the I/O block size of the device containing the given file. This can be used to compute
+   * an upper bound for the real file size. On Windows, as we use {@link Files#size(Path)} for the
+   * real size, this simply returns 0.
+   *
+   * @param file the file to get the block size of
+   * @return the I/O block size of the device containing the file
+   */
+  private long getBlockSize(final Path file) {
+    if (Platform.IS_WINDOWS) {
+      return 0;
+    }
+
+    final POSIX posixFunctions = POSIXFactory.getNativePOSIX();
+    final var pathString = file.toString();
+    final FileStat stat = posixFunctions.stat(pathString);
+
+    return stat.blockSize();
+  }
+}
diff --git a/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentsManagerTest.java b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentsManagerTest.java
index e3b40f7..822c539 100644
--- a/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentsManagerTest.java
+++ b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentsManagerTest.java
@@ -132,7 +132,8 @@ class SegmentsManagerTest {
         entrySize + JournalSegmentDescriptor.getEncodingLength(),
         directory.resolve(""data"").toFile(),
         lastWrittenIndex,
-        JOURNAL_NAME);
+        JOURNAL_NAME,
+        true);
   }
 
   private SegmentedJournal openJournal(final float entriesPerSegment) {

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
index f3029c8..1bbfb43 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
@@ -591,7 +591,14 @@ public class ModifyProcessInstanceTerminationTest {
                     eventSubprocess
                         .startEvent()
                         .message(m -> m.name(""start"").zeebeCorrelationKeyExpression(""key""))
-                        .userTask(""B"")
+                        .subProcess(
+                            ""subprocess"",
+                            subprocess ->
+                                subprocess
+                                    .embeddedSubProcess()
+                                    .startEvent()
+                                    .userTask(""B"")
+                                    .endEvent())
                         .endEvent())
             .startEvent()
             .userTask(""A"")
@@ -640,9 +647,17 @@ public class ModifyProcessInstanceTerminationTest {
                 BpmnElementType.EVENT_SUB_PROCESS,
                 ""event-subprocess"",
                 ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(
+                BpmnElementType.SUB_PROCESS,
+                ""subprocess"",
+                ProcessInstanceIntent.ELEMENT_TERMINATING),
             tuple(BpmnElementType.USER_TASK, ""B"", ProcessInstanceIntent.ELEMENT_TERMINATING),
             tuple(BpmnElementType.USER_TASK, ""B"", ProcessInstanceIntent.ELEMENT_TERMINATED),
             tuple(
+                BpmnElementType.SUB_PROCESS,
+                ""subprocess"",
+                ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(
                 BpmnElementType.EVENT_SUB_PROCESS,
                 ""event-subprocess"",
                 ProcessInstanceIntent.ELEMENT_TERMINATED),

diff --git a/qa/integration-tests/src/test/java/org/camunda/bpm/broker/it/process/DeployBpmnResourceTest.java b/qa/integration-tests/src/test/java/org/camunda/bpm/broker/it/process/DeployBpmnResourceTest.java
index 3c68047..4668708 100644
--- a/qa/integration-tests/src/test/java/org/camunda/bpm/broker/it/process/DeployBpmnResourceTest.java
+++ b/qa/integration-tests/src/test/java/org/camunda/bpm/broker/it/process/DeployBpmnResourceTest.java
@@ -80,4 +80,22 @@ public class DeployBpmnResourceTest
             .execute();
     }
 
+    @Test
+    public void shouldNotDeployNonExecutableModel()
+    {
+        // given
+        final TngpClient client = clientRule.getClient();
+        final WorkflowsClient workflowService = client.workflows();
+
+        // then
+        exception.expect(BrokerRequestException.class);
+        exception.expectMessage(containsString(""ERROR 203""));
+        exception.expect(BrokerRequestExceptionMatcher.brokerException(1, 1));
+
+        // when
+        workflowService.deploy()
+            .bpmnModelInstance(Bpmn.createProcess().startEvent().endEvent().done())
+            .execute();
+    }
+
 }

diff --git a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
index 46afedf..76305e2 100755
--- a/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
+++ b/stream-platform/src/test/java/io/camunda/zeebe/stream/impl/StreamProcessorTest.java
@@ -53,7 +53,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
 import org.assertj.core.api.Assertions;
 import org.assertj.core.api.AssertionsForClassTypes;
-import org.junit.Ignore;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.ArgumentCaptor;
@@ -466,8 +466,8 @@ public final class StreamProcessorTest {
     countDownLatch.countDown();
   }
 
+  @Disabled(""Should be enabled when https://github.com/camunda/zeebe/issues/11849 is fixed"")
   @Test
-  @Ignore(""Should be enabled when https://github.com/camunda/zeebe/issues/11849 is fixed"")
   public void shouldRunAsyncSchedulingEvenIfProcessingIsBlocked() throws InterruptedException {
     // given
     final var mockProcessorLifecycleAware = streamPlatform.getMockProcessorLifecycleAware();

diff --git a/broker/pom.xml b/broker/pom.xml
index d237b7c..4c4a5fd 100644
--- a/broker/pom.xml
+++ b/broker/pom.xml
@@ -193,12 +193,6 @@
     </dependency>
 
     <dependency>
-      <groupId>org.apache.logging.log4j</groupId>
-      <artifactId>log4j-api</artifactId>
-      <scope>test</scope>
-    </dependency>
-
-    <dependency>
       <groupId>io.camunda</groupId>
       <artifactId>zeebe-workflow-engine</artifactId>
       <type>test-jar</type>
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerRuntime.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerRuntime.java
new file mode 100644
index 0000000..a93f3d2
--- /dev/null
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerRuntime.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.broker.exporter.stream;
+
+import io.camunda.zeebe.broker.exporter.jar.ExporterJarLoadException;
+import io.camunda.zeebe.broker.exporter.repo.ExporterDescriptor;
+import io.camunda.zeebe.broker.exporter.repo.ExporterLoadException;
+import io.camunda.zeebe.broker.exporter.repo.ExporterRepository;
+import io.camunda.zeebe.broker.system.configuration.ExporterCfg;
+import io.camunda.zeebe.db.ZeebeDb;
+import io.camunda.zeebe.engine.state.DefaultZeebeDbFactory;
+import io.camunda.zeebe.engine.state.ZbColumnFamilies;
+import io.camunda.zeebe.util.CloseableSilently;
+import io.camunda.zeebe.util.sched.Actor;
+import io.camunda.zeebe.util.sched.ActorControl;
+import io.camunda.zeebe.util.sched.ActorScheduler;
+import java.io.File;
+import java.nio.file.Path;
+import org.agrona.CloseHelper;
+
+/**
+ * A small utility class which provides all the required runtime components to unit test exporter
+ * container.
+ */
+public final class ExporterContainerRuntime implements CloseableSilently {
+  private final ActorScheduler scheduler;
+  private final ExporterRepository repository;
+  private final ZeebeDb<ZbColumnFamilies> zeebeDb;
+  private final RuntimeActor actor;
+  private final ExportersState state;
+  private final ExporterMetrics metrics;
+
+  public ExporterContainerRuntime(final Path storagePath) {
+    scheduler = ActorScheduler.newActorScheduler().build();
+    scheduler.start();
+
+    repository = new ExporterRepository();
+    zeebeDb = createZeebeDb(storagePath.resolve(""db""));
+
+    actor = new RuntimeActor();
+    scheduler.submitActor(actor).join();
+
+    state = new ExportersState(zeebeDb, zeebeDb.createContext());
+    metrics = new ExporterMetrics(1);
+  }
+
+  @Override
+  public void close() {
+    CloseHelper.quietCloseAll(actor, scheduler, zeebeDb);
+  }
+
+  public ExporterDescriptor loadExternalExporter(final File jarFile, final String className)
+      throws ExporterLoadException, ExporterJarLoadException {
+    final var exporterCfg = new ExporterCfg();
+    exporterCfg.setJarPath(jarFile.getAbsolutePath());
+    exporterCfg.setClassName(className);
+
+    return repository.load(""external"", exporterCfg);
+  }
+
+  public ExporterContainer newContainer(final ExporterDescriptor descriptor) {
+    final var container = new ExporterContainer(descriptor);
+    container.initContainer(actor.getActorControl(), metrics, state);
+
+    return container;
+  }
+
+  public ExporterRepository getRepository() {
+    return repository;
+  }
+
+  public ExportersState getState() {
+    return state;
+  }
+
+  public RuntimeActor getActor() {
+    return actor;
+  }
+
+  private ZeebeDb<ZbColumnFamilies> createZeebeDb(final Path path) {
+    return DefaultZeebeDbFactory.defaultFactory().createDb(path.toFile());
+  }
+
+  static final class RuntimeActor extends Actor {
+    ActorControl getActorControl() {
+      return actor;
+    }
+  }
+}
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerTest.java
index a188eb0..46a860a 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterContainerTest.java
@@ -11,9 +11,8 @@ import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-import io.camunda.zeebe.broker.exporter.repo.ExporterDescriptor;
+import io.camunda.zeebe.broker.exporter.repo.ExporterLoadException;
 import io.camunda.zeebe.engine.processing.streamprocessor.TypedRecord;
-import io.camunda.zeebe.engine.state.DefaultZeebeDbFactory;
 import io.camunda.zeebe.exporter.api.Exporter;
 import io.camunda.zeebe.exporter.api.context.Context;
 import io.camunda.zeebe.exporter.api.context.Controller;
@@ -21,43 +20,33 @@ import io.camunda.zeebe.protocol.impl.record.RecordMetadata;
 import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.RecordType;
 import io.camunda.zeebe.protocol.record.ValueType;
-import io.camunda.zeebe.util.sched.Actor;
-import io.camunda.zeebe.util.sched.ActorControl;
-import io.camunda.zeebe.util.sched.testing.ActorSchedulerRule;
-import java.io.IOException;
+import java.nio.file.Path;
 import java.util.Map;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
+import org.junit.jupiter.api.parallel.Execution;
+import org.junit.jupiter.api.parallel.ExecutionMode;
 
-public class ExporterContainerTest {
+@Execution(ExecutionMode.CONCURRENT)
+final class ExporterContainerTest {
 
-  @Rule public final ActorSchedulerRule actorSchedulerRule = new ActorSchedulerRule();
-  @Rule public final TemporaryFolder tempFolder = new TemporaryFolder();
-  private TestActor testActor;
-  private ExportersState exportersState;
+  private ExporterContainerRuntime runtime;
   private FakeExporter exporter;
   private ExporterContainer exporterContainer;
 
-  @Before
-  public void setup() throws IOException {
-    testActor = new TestActor();
-    actorSchedulerRule.submitActor(testActor).join();
-    final var dbFactory = DefaultZeebeDbFactory.defaultFactory();
-    final var db = dbFactory.createDb(tempFolder.newFolder());
-    exportersState = new ExportersState(db, db.createContext());
-    final ExporterMetrics exporterMetrics = new ExporterMetrics(1);
-
-    final var exporterDescriptor =
-        new ExporterDescriptor(""fakeExporter"", FakeExporter.class, Map.of(""key"", ""value""));
-    exporterContainer = new ExporterContainer(exporterDescriptor);
+  @BeforeEach
+  void beforeEach(final @TempDir Path storagePath) throws ExporterLoadException {
+    runtime = new ExporterContainerRuntime(storagePath);
+
+    final var descriptor =
+        runtime.getRepository().load(""fakeExporter"", FakeExporter.class, Map.of(""key"", ""value""));
+    exporterContainer = runtime.newContainer(descriptor);
     exporter = (FakeExporter) exporterContainer.getExporter();
-    exporterContainer.initContainer(testActor.getActor(), exporterMetrics, exportersState);
   }
 
   @Test
-  public void shouldConfigureExporter() throws Exception {
+  void shouldConfigureExporter() throws Exception {
     // given
 
     // when
@@ -73,7 +62,7 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldOpenExporter() throws Exception {
+  void shouldOpenExporter() throws Exception {
     // given
     exporterContainer.configureExporter();
 
@@ -86,7 +75,7 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldInitPositionToDefaultIfNotExistInState() throws Exception {
+  void shouldInitPositionToDefaultIfNotExistInState() throws Exception {
     // given
     exporterContainer.configureExporter();
 
@@ -99,10 +88,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldInitPositionWithStateValues() throws Exception {
+  void shouldInitPositionWithStateValues() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0xCAFE);
+    runtime.getState().setPosition(""fakeExporter"", 0xCAFE);
 
     // when
     exporterContainer.initPosition();
@@ -113,10 +102,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldNotExportWhenRecordPositionIsSmaller() throws Exception {
+  void shouldNotExportWhenRecordPositionIsSmaller() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0xCAFE);
+    runtime.getState().setPosition(""fakeExporter"", 0xCAFE);
     exporterContainer.initPosition();
 
     final var mockedRecord = mock(TypedRecord.class);
@@ -131,10 +120,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldUpdateUnacknowledgedPositionOnExport() throws Exception {
+  void shouldUpdateUnacknowledgedPositionOnExport() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     final var mockedRecord = mock(TypedRecord.class);
@@ -152,10 +141,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldUpdateUnacknowledgedPositionMultipleTimes() throws Exception {
+  void shouldUpdateUnacknowledgedPositionMultipleTimes() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     final var mockedRecord = mock(TypedRecord.class);
@@ -176,10 +165,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldUpdateExporterPosition() throws Exception {
+  void shouldUpdateExporterPosition() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
     exporterContainer.openExporter();
 
@@ -190,19 +179,19 @@ public class ExporterContainerTest {
 
     // when
     exporterContainer.updateLastExportedRecordPosition(mockedRecord.getPosition());
-    testActor.awaitPreviousCall();
+    awaitPreviousCall();
 
     // then
     assertThat(exporterContainer.getLastUnacknowledgedPosition()).isEqualTo(1);
     assertThat(exporterContainer.getPosition()).isEqualTo(1);
-    assertThat(exportersState.getPosition(""fakeExporter"")).isEqualTo(1);
+    assertThat(runtime.getState().getPosition(""fakeExporter"")).isEqualTo(1);
   }
 
   @Test
-  public void shouldNotUpdateExporterPositionToSmallerValue() throws Exception {
+  void shouldNotUpdateExporterPositionToSmallerValue() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
     exporterContainer.openExporter();
 
@@ -213,19 +202,19 @@ public class ExporterContainerTest {
 
     // when
     exporterContainer.updateLastExportedRecordPosition(-1);
-    testActor.awaitPreviousCall();
+    awaitPreviousCall();
 
     // then
     assertThat(exporterContainer.getLastUnacknowledgedPosition()).isEqualTo(1);
     assertThat(exporterContainer.getPosition()).isEqualTo(0);
-    assertThat(exportersState.getPosition(""fakeExporter"")).isEqualTo(0);
+    assertThat(runtime.getState().getPosition(""fakeExporter"")).isEqualTo(0);
   }
 
   @Test
-  public void shouldNotUpdateExporterPositionInDifferentOrder() throws Exception {
+  void shouldNotUpdateExporterPositionInDifferentOrder() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
     exporterContainer.openExporter();
 
@@ -239,20 +228,20 @@ public class ExporterContainerTest {
     // when
     exporterContainer.updateLastExportedRecordPosition(2);
     exporterContainer.updateLastExportedRecordPosition(1);
-    testActor.awaitPreviousCall();
+    awaitPreviousCall();
 
     // then
     assertThat(exporterContainer.getLastUnacknowledgedPosition()).isEqualTo(2);
     assertThat(exporterContainer.getPosition()).isEqualTo(2);
-    assertThat(exportersState.getPosition(""fakeExporter"")).isEqualTo(2);
+    assertThat(runtime.getState().getPosition(""fakeExporter"")).isEqualTo(2);
   }
 
   @Test
-  public void shouldUpdatePositionsWhenRecordIsFiltered() throws Exception {
+  void shouldUpdatePositionsWhenRecordIsFiltered() throws Exception {
     // given
     exporterContainer.configureExporter();
     exporter.getContext().setFilter(new AlwaysRejectingFilter());
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     final var mockedRecord = mock(TypedRecord.class);
@@ -269,10 +258,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldUpdatePositionsWhenRecordIsFilteredAndPositionsAreEqual() throws Exception {
+  void shouldUpdatePositionsWhenRecordIsFilteredAndPositionsAreEqual() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     final var mockedRecord = mock(TypedRecord.class);
@@ -280,7 +269,7 @@ public class ExporterContainerTest {
     final var recordMetadata = new RecordMetadata();
     exporterContainer.exportRecord(recordMetadata, mockedRecord);
     exporterContainer.updateLastExportedRecordPosition(mockedRecord.getPosition());
-    testActor.awaitPreviousCall();
+    awaitPreviousCall();
 
     // when
     exporter.getContext().setFilter(new AlwaysRejectingFilter());
@@ -294,11 +283,11 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldNotUpdatePositionsWhenRecordIsFilteredAndLastEventWasUnacknowledged()
+  void shouldNotUpdatePositionsWhenRecordIsFilteredAndLastEventWasUnacknowledged()
       throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     final var firstRecord = mock(TypedRecord.class);
@@ -320,10 +309,10 @@ public class ExporterContainerTest {
   }
 
   @Test
-  public void shouldCloseExporter() throws Exception {
+  void shouldCloseExporter() throws Exception {
     // given
     exporterContainer.configureExporter();
-    exportersState.setPosition(""fakeExporter"", 0);
+    runtime.getState().setPosition(""fakeExporter"", 0);
     exporterContainer.initPosition();
 
     // when
@@ -333,30 +322,10 @@ public class ExporterContainerTest {
     assertThat(exporter.isClosed()).isTrue();
   }
 
-  private static final class AlwaysRejectingFilter implements Context.RecordFilter {
-
-    @Override
-    public boolean acceptType(final RecordType recordType) {
-      return false;
-    }
-
-    @Override
-    public boolean acceptValue(final ValueType valueType) {
-      return false;
-    }
-  }
-
-  private static final class TestActor extends Actor {
-
-    public ActorControl getActor() {
-      return actor;
-    }
-
-    public void awaitPreviousCall() {
-      // call is enqueued in queue and will be run after the previous call
-      // when we await the call we can be sure that the previous call is also done
-      actor.call(() -> null).join();
-    }
+  private void awaitPreviousCall() {
+    // call is enqueued in queue and will be run after the previous call
+    // when we await the call we can be sure that the previous call is also done
+    runtime.getActor().getActorControl().call(() -> null).join();
   }
 
   public static final class FakeExporter implements Exporter {
@@ -402,4 +371,17 @@ public class ExporterContainerTest {
       this.record = record;
     }
   }
+
+  private static final class AlwaysRejectingFilter implements Context.RecordFilter {
+
+    @Override
+    public boolean acceptType(final RecordType recordType) {
+      return false;
+    }
+
+    @Override
+    public boolean acceptValue(final ValueType valueType) {
+      return false;
+    }
+  }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareSignalEventTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareSignalEventTest.java
new file mode 100644
index 0000000..125b292
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareSignalEventTest.java
@@ -0,0 +1,303 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.multitenancy;
+
+import static io.camunda.zeebe.protocol.record.Assertions.assertThat;
+
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.protocol.record.RejectionType;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.intent.SignalIntent;
+import io.camunda.zeebe.protocol.record.value.TenantOwned;
+import io.camunda.zeebe.test.util.Strings;
+import io.camunda.zeebe.test.util.record.RecordingExporter;
+import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
+import java.time.Duration;
+import org.junit.Before;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestWatcher;
+
+public class TenantAwareSignalEventTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  @Rule public final TestWatcher testWatcher = new RecordingExporterTestWatcher();
+  private String processId;
+  private String signalName;
+
+  @Before
+  public void setup() {
+    processId = Strings.newRandomValidBpmnId();
+    signalName = ""signal-%s"".formatted(processId);
+  }
+
+  @Test
+  public void shouldBroadcastSignalForDefaultTenant() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(processId)
+                .startEvent(""signal-start"")
+                .signal(signalName)
+                .endEvent()
+                .done())
+        .withTenantId(TenantOwned.DEFAULT_TENANT_IDENTIFIER)
+        .deploy();
+
+    // when
+    final var broadcasted = ENGINE.signal().withSignalName(signalName).broadcast();
+
+    // then
+    assertThat(broadcasted)
+        .describedAs(""Expect that signal was broadcasted successful"")
+        .hasIntent(SignalIntent.BROADCASTED);
+
+    assertThat(
+            RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+                .withBpmnProcessId(processId)
+                .withElementId(""signal-start"")
+                .getFirst())
+        .describedAs(""Expect that process instance was created"")
+        .isNotNull();
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent(""signal-start"")
+                    .signal(signalName)
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-start' of type 'SIGNAL' 'START_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalCatchEventForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent()
+                    .intermediateCatchEvent(""signal-catch"")
+                    .signal(signalName)
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-catch' of type 'SIGNAL' 'INTERMEDIATE_CATCH_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void
+      shouldRejectDeployProcessWithSignalCatchEventAttachedToEventBasedGatewayForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent()
+                    .eventBasedGateway()
+                    .intermediateCatchEvent(""signal-catch-attached"")
+                    .signal(signalName)
+                    .endEvent()
+                    .moveToLastGateway()
+                    .intermediateCatchEvent()
+                    .timerWithDuration(Duration.ofMinutes(10))
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-catch-attached' of type 'SIGNAL' 'INTERMEDIATE_CATCH_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalEventSubProcessEventForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .eventSubProcess(
+                        ""signal-sub"",
+                        sub ->
+                            sub.startEvent(""signal-start-event-sub"").signal(signalName).endEvent())
+                    .startEvent()
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-start-event-sub' of type 'SIGNAL' 'START_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalBoundaryEventForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent()
+                    .manualTask()
+                    .boundaryEvent(""signal-boundary"")
+                    .signal(signalName)
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-boundary' of type 'SIGNAL' 'BOUNDARY_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalThrowEventForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent()
+                    .intermediateThrowEvent(""signal-throw"")
+                    .signal(signalName)
+                    .endEvent()
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-throw' of type 'SIGNAL' 'INTERMEDIATE_THROW_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+
+  @Test
+  public void shouldRejectDeployProcessWithSignalEndEventForSpecificTenant() {
+    // when
+    final var rejection =
+        ENGINE
+            .deployment()
+            .withXmlResource(
+                Bpmn.createExecutableProcess(processId)
+                    .startEvent()
+                    .endEvent(""signal-end"")
+                    .signal(signalName)
+                    .done())
+            .withTenantId(""custom-tenant"")
+            .expectRejection()
+            .deploy();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to deploy new resources, but encountered the following errors:
+            `process.xml`: - Process: %s
+                - ERROR: Processes belonging to custom tenants are not allowed to contain elements \
+            unsupported with multi-tenancy. Only the default tenant '<default>' supports these \
+            elements currently: ['signal-end' of type 'SIGNAL' 'END_EVENT']. \
+            See https://github.com/camunda/zeebe/issues/12653 for more details.
+            """"""
+                .formatted(processId));
+  }
+}

diff --git a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
index 2d84592..a6c37f6 100644
--- a/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
+++ b/protocol-impl/src/test/java/io/camunda/zeebe/protocol/impl/JsonSerializableToJsonTest.java
@@ -813,7 +813,8 @@ final class JsonSerializableToJsonTest {
                   .setVariables(VARIABLES_MSGPACK)
                   .setTimeToLive(timeToLive)
                   .setDeadline(22L)
-                  .setMessageId(wrapString(messageId));
+                  .setMessageId(wrapString(messageId))
+                  .setTenantId(""foo"");
             },
         """"""
         {
@@ -825,7 +826,7 @@ final class JsonSerializableToJsonTest {
           ""messageId"": ""test-id"",
           ""name"": ""test-message"",
           ""deadline"": 22,
-          ""tenantId"": ""<default>""
+          ""tenantId"": ""foo""
         }
         """"""
       },

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
index b8fec62..fec20f2 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/multitenancy/MultiTenancyOverIdentityIT.java
@@ -178,6 +178,7 @@ public class MultiTenancyOverIdentityIT {
       new ContainerLogsDumper(
           () -> Map.of(""postgres"", POSTGRES, ""keycloak"", KEYCLOAK, ""identity"", IDENTITY));
 
+  private String processId;
   private BpmnModelInstance process;
 
   @BeforeAll
@@ -221,8 +222,9 @@ public class MultiTenancyOverIdentityIT {
 
   @BeforeEach
   void setup() {
+    processId = Strings.newRandomValidBpmnId();
     process =
-        Bpmn.createExecutableProcess(Strings.newRandomValidBpmnId())
+        Bpmn.createExecutableProcess(processId)
             .startEvent()
             .serviceTask(""task"", b -> b.zeebeJobType(""type""))
             .endEvent()
@@ -272,6 +274,46 @@ public class MultiTenancyOverIdentityIT {
   }
 
   @Test
+  void shouldIncrementProcessVersionPerTenant() {
+    // given
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_A)) {
+      client
+          .newDeployResourceCommand()
+          .addProcessModel(process, ""process.bpmn"")
+          .tenantId(""tenant-a"")
+          .send()
+          .join();
+    }
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_B)) {
+      client
+          .newDeployResourceCommand()
+          .addProcessModel(process, ""process.bpmn"")
+          .tenantId(""tenant-b"")
+          .send()
+          .join();
+    }
+
+    try (final var client = createZeebeClient(ZEEBE_CLIENT_ID_TENANT_B)) {
+      // when
+      final var processV2 = Bpmn.createExecutableProcess(processId).startEvent().done();
+      final Future<DeploymentEvent> result =
+          client
+              .newDeployResourceCommand()
+              .addProcessModel(processV2, ""process.bpmn"")
+              .tenantId(""tenant-b"")
+              .send();
+
+      // then
+      assertThat(result)
+          .succeedsWithin(Duration.ofSeconds(10))
+          .describedAs(""Process version is incremented for tenant-b but not for tenant-a"")
+          .extracting(deploymentEvent -> deploymentEvent.getProcesses().get(0))
+          .extracting(Process::getVersion, Process::getTenantId)
+          .containsExactly(2, ""tenant-b"");
+    }
+  }
+
+  @Test
   void shouldAuthorizeCreateProcessInstance() {
     // given
     final long processDefinitionKey;

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/DeploymentRejectionTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/DeploymentRejectionTest.java
index 7af93b3..550a583 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/DeploymentRejectionTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/DeploymentRejectionTest.java
@@ -23,7 +23,6 @@ import io.camunda.zeebe.protocol.record.intent.CommandDistributionIntent;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessIntent;
 import io.camunda.zeebe.protocol.record.value.DeploymentRecordValue;
-import io.camunda.zeebe.test.util.junit.RegressionTest;
 import io.camunda.zeebe.test.util.record.RecordingExporter;
 import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
 import io.camunda.zeebe.util.ByteValue;
@@ -296,7 +295,7 @@ public class DeploymentRejectionTest {
             tuple(CommandDistributionIntent.STARTED, RecordType.EVENT));
   }
 
-  @RegressionTest(""https://github.com/camunda/zeebe/issues/13254"")
+  @Test // Regression of https://github.com/camunda/zeebe/issues/13254
   public void shouldNotBeAbleToCreateInstanceWhenDeploymentIsRejected() {
     // given
     final BpmnModelInstance invalidProcess =

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceSupportedElementTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceSupportedElementTest.java
new file mode 100644
index 0000000..a505307
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceSupportedElementTest.java
@@ -0,0 +1,233 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.processinstance;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.groups.Tuple.tuple;
+
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.protocol.record.Record;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
+import io.camunda.zeebe.protocol.record.value.BpmnElementType;
+import io.camunda.zeebe.test.util.record.RecordingExporter;
+import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+@RunWith(Parameterized.class)
+public class CreateProcessInstanceSupportedElementTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+  private static final String PROCESS_ID = ""processId"";
+  private static final String CHILD_PROCESS_ID = ""childProcessId"";
+  private static final String START_ELEMENT_ID = ""startElement"";
+  private static final String MESSAGE = ""message"";
+  private static final String JOBTYPE = ""jobtype"";
+
+  @Rule
+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =
+      new RecordingExporterTestWatcher();
+
+  private final Scenario scenario;
+
+  public CreateProcessInstanceSupportedElementTest(final Scenario scenario) {
+    this.scenario = scenario;
+  }
+
+  @Parameters(name = ""{0}"")
+  public static Collection<Object> scenarios() {
+    return List.of(
+        new Scenario(
+            BpmnElementType.SUB_PROCESS,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .subProcess(START_ELEMENT_ID)
+                .embeddedSubProcess()
+                .startEvent()
+                .subProcessDone()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.EVENT_SUB_PROCESS,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .eventSubProcess(
+                    START_ELEMENT_ID, e -> e.startEvent().timerWithDuration(""PT1H"").endEvent())
+                .startEvent()
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.INTERMEDIATE_CATCH_EVENT,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .intermediateCatchEvent(START_ELEMENT_ID)
+                .message(b -> b.name(MESSAGE).zeebeCorrelationKeyExpression(""correlationKey""))
+                .done(),
+            Map.of(""correlationKey"", ""value"")),
+        new Scenario(
+            BpmnElementType.INTERMEDIATE_THROW_EVENT,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .intermediateThrowEvent(START_ELEMENT_ID)
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.END_EVENT,
+            Bpmn.createExecutableProcess(PROCESS_ID).startEvent().endEvent(START_ELEMENT_ID).done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.SERVICE_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .serviceTask(START_ELEMENT_ID, b -> b.zeebeJobType(JOBTYPE))
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.RECEIVE_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .receiveTask(START_ELEMENT_ID)
+                .message(b -> b.name(MESSAGE).zeebeCorrelationKeyExpression(""correlationKey""))
+                .done(),
+            Map.of(""correlationKey"", ""value"")),
+        new Scenario(
+            BpmnElementType.USER_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID).startEvent().userTask(START_ELEMENT_ID).done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.MANUAL_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .manualTask(START_ELEMENT_ID)
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.EXCLUSIVE_GATEWAY,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .exclusiveGateway(START_ELEMENT_ID)
+                .defaultFlow()
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.PARALLEL_GATEWAY,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .parallelGateway(START_ELEMENT_ID)
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.EVENT_BASED_GATEWAY,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .eventBasedGateway(START_ELEMENT_ID)
+                .intermediateCatchEvent()
+                .message(b -> b.name(MESSAGE).zeebeCorrelationKeyExpression(""correlationKey""))
+                .moveToLastGateway()
+                .intermediateCatchEvent()
+                .timerWithDuration(""PT1H"")
+                .done(),
+            Map.of(""correlationKey"", ""value"")),
+        new Scenario(
+            BpmnElementType.MULTI_INSTANCE_BODY,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .serviceTask(
+                    START_ELEMENT_ID,
+                    t ->
+                        t.zeebeJobType(JOBTYPE)
+                            .multiInstance(m -> m.parallel().zeebeInputCollectionExpression(""[1]"")))
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.CALL_ACTIVITY,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .callActivity(START_ELEMENT_ID, c -> c.zeebeProcessId(CHILD_PROCESS_ID))
+                .endEvent()
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.BUSINESS_RULE_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .businessRuleTask(START_ELEMENT_ID, b -> b.zeebeJobType(JOBTYPE))
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.SCRIPT_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .scriptTask(START_ELEMENT_ID, b -> b.zeebeJobType(JOBTYPE))
+                .done(),
+            Collections.emptyMap()),
+        new Scenario(
+            BpmnElementType.SEND_TASK,
+            Bpmn.createExecutableProcess(PROCESS_ID)
+                .startEvent()
+                .sendTask(START_ELEMENT_ID, b -> b.zeebeJobType(JOBTYPE))
+                .done(),
+            Collections.emptyMap()));
+  }
+
+  @Test
+  public void testProcessInstanceCanStartAtElementType() {
+    // given
+    ENGINE.deployment().withXmlResource(scenario.modelInstance).deploy();
+    if (scenario.type == BpmnElementType.CALL_ACTIVITY) {
+      ENGINE.deployment().withXmlResource(getChildProcess()).deploy();
+    }
+
+    // when
+    final long instanceKey =
+        ENGINE
+            .processInstance()
+            .ofBpmnProcessId(PROCESS_ID)
+            .withStartInstruction(START_ELEMENT_ID)
+            .withVariables(scenario.variables)
+            .create();
+
+    // then
+    assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(instanceKey)
+                .onlyEvents()
+                .limit(
+                    r ->
+                        r.getValue().getBpmnElementType() == scenario.type
+                            && r.getIntent() == ProcessInstanceIntent.ELEMENT_ACTIVATED))
+        .extracting(record -> record.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSequence(
+            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            tuple(scenario.type, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(scenario.type, ProcessInstanceIntent.ELEMENT_ACTIVATED));
+  }
+
+  private BpmnModelInstance getChildProcess() {
+    return Bpmn.createExecutableProcess(CHILD_PROCESS_ID).startEvent().endEvent().done();
+  }
+
+  record Scenario(
+      BpmnElementType type, BpmnModelInstance modelInstance, Map<String, Object> variables) {}
+}

diff --git a/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java b/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
index 193a176..1dabeb9 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/RaftRule.java
@@ -21,7 +21,6 @@ import static org.mockito.Mockito.mock;
 
 import io.atomix.cluster.ClusterMembershipService;
 import io.atomix.cluster.MemberId;
-import io.atomix.raft.RaftServer.Builder;
 import io.atomix.raft.RaftServer.Role;
 import io.atomix.raft.cluster.RaftMember;
 import io.atomix.raft.impl.RaftContext;
@@ -68,9 +67,7 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.BiFunction;
 import java.util.function.BooleanSupplier;
-import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import org.awaitility.Awaitility;
@@ -98,17 +95,16 @@ public final class RaftRule extends ExternalResource {
   // Keep a reference to the snapshots to ensure they are persisted across the restarts.
   private Map<String, AtomicReference<InMemorySnapshot>> snapshots;
   private Map<String, TestSnapshotStore> snapshotStores;
-  private final BiFunction<MemberId, Builder, Builder> serverConfigurator;
+  private final Configurator configurator;
   private final Random random = new Random();
 
-  private RaftRule(
-      final int nodeCount, final BiFunction<MemberId, Builder, Builder> serverConfigurator) {
+  private RaftRule(final int nodeCount, final Configurator configurator) {
     this.nodeCount = nodeCount;
-    this.serverConfigurator = serverConfigurator;
+    this.configurator = configurator;
   }
 
   public static RaftRule withBootstrappedNodes(
-      final int nodeCount, final BiFunction<MemberId, Builder, Builder> serverConfigurator) {
+      final int nodeCount, final ServerConfigurator serverConfigurator) {
     if (nodeCount < 1) {
       throw new IllegalArgumentException(""Expected to have at least one node to configure."");
     }
@@ -116,11 +112,7 @@ public final class RaftRule extends ExternalResource {
   }
 
   public static RaftRule withBootstrappedNodes(final int nodeCount) {
-    return new RaftRule(nodeCount, (m, b) -> b);
-  }
-
-  public static RaftRule withoutNodes() {
-    return new RaftRule(-1, (m, b) -> b);
+    return new RaftRule(nodeCount, new Configurator() {});
   }
 
   public RaftRule setEntryValidator(final EntryValidator entryValidator) {
@@ -148,7 +140,7 @@ public final class RaftRule extends ExternalResource {
     protocolFactory = new TestRaftProtocolFactory(context);
 
     if (nodeCount > 0) {
-      createServers(nodeCount, serverConfigurator);
+      createServers(nodeCount, configurator);
     }
   }
 
@@ -196,8 +188,7 @@ public final class RaftRule extends ExternalResource {
   }
 
   /** Creates a set of Raft servers. */
-  private List<RaftServer> createServers(
-      final int nodes, final BiFunction<MemberId, Builder, Builder> serverConfigurator)
+  private List<RaftServer> createServers(final int nodes, final Configurator configurator)
       throws Exception {
     final List<RaftServer> servers = new ArrayList<>();
 
@@ -209,7 +200,7 @@ public final class RaftRule extends ExternalResource {
 
     for (int i = 0; i < nodes; i++) {
       final var raftMember = members.get(i);
-      final RaftServer server = createServer(raftMember.memberId(), serverConfigurator);
+      final RaftServer server = createServer(raftMember.memberId(), configurator);
       server
           .bootstrap(members.stream().map(RaftMember::memberId).collect(Collectors.toList()))
           .thenAccept(this::addCommitListener)
@@ -234,15 +225,19 @@ public final class RaftRule extends ExternalResource {
 
   public void joinCluster(final String nodeId) throws Exception {
     final RaftMember member = getRaftMember(nodeId);
-    createServer(member.memberId(), serverConfigurator)
+    createServer(member.memberId(), configurator)
         .bootstrap(getMemberIds())
         .thenAccept(this::addCommitListener)
         .get(30, TimeUnit.SECONDS);
   }
 
   public void bootstrapNode(final String nodeId) throws Exception {
+    bootstrapNode(nodeId, configurator);
+  }
+
+  public void bootstrapNode(final String nodeId, final Configurator configurator) throws Exception {
     final RaftMember member = getRaftMember(nodeId);
-    createServer(member.memberId(), serverConfigurator)
+    createServer(member.memberId(), configurator)
         .bootstrap(getMemberIds())
         .thenAccept(this::addCommitListener)
         .get(30, TimeUnit.SECONDS);
@@ -251,7 +246,7 @@ public final class RaftRule extends ExternalResource {
   public void bootstrapNodeWithMemberIds(final String nodeId, final List<MemberId> memberIds)
       throws Exception {
     final RaftMember member = getRaftMember(nodeId);
-    createServer(member.memberId(), serverConfigurator)
+    createServer(member.memberId(), configurator)
         .bootstrap(memberIds)
         .thenAccept(this::addCommitListener)
         .get(30, TimeUnit.SECONDS);
@@ -501,12 +496,11 @@ public final class RaftRule extends ExternalResource {
     commitAwaiter.awaitCommit();
   }
 
-  private RaftServer createServer(
-      final MemberId memberId, final BiFunction<MemberId, Builder, Builder> configurator) {
+  private RaftServer createServer(final MemberId memberId, final Configurator configurator) {
     final TestRaftServerProtocol protocol = protocolFactory.newServerProtocol(memberId);
-    final var storage = createStorage(memberId);
+    final var storage = createStorage(memberId, configurator);
 
-    final RaftServer.Builder defaults =
+    final RaftServer.Builder builder =
         RaftServer.builder(memberId)
             .withPartitionConfig(
                 new RaftPartitionConfig()
@@ -516,16 +510,16 @@ public final class RaftRule extends ExternalResource {
             .withProtocol(protocol)
             .withEntryValidator(entryValidator)
             .withStorage(storage);
-    final RaftServer server = configurator.apply(memberId, defaults).build();
 
+    if (configurator instanceof final ServerConfigurator s) {
+      s.configureServer(memberId, builder);
+    }
+
+    final var server = builder.build();
     servers.put(memberId.id(), server);
     return server;
   }
 
-  private RaftStorage createStorage(final MemberId memberId) {
-    return createStorage(memberId, Function.identity());
-  }
-
   public void copySnapshotOffline(final String sourceNode, final String targetNode) {
     final var snapshotOnNode = getSnapshotOnNode(sourceNode);
     final var targetSnapshotStore = new TestSnapshotStore(getOrCreatePersistedSnapshot(sourceNode));
@@ -536,21 +530,27 @@ public final class RaftRule extends ExternalResource {
     receivedSnapshot.persist();
   }
 
-  private RaftStorage createStorage(
-      final MemberId memberId,
-      final Function<RaftStorage.Builder, RaftStorage.Builder> configurator) {
-
+  private RaftStorage createStorage(final MemberId memberId, final Configurator configurator) {
     final var memberDirectory = getMemberDirectory(directory, memberId.toString());
-    final RaftStorage.Builder defaults =
+    final var snapshotStore = new TestSnapshotStore(getOrCreatePersistedSnapshot(memberId.id()));
+    snapshotStores.put(memberId.id(), snapshotStore);
+
+    if (configurator instanceof final SnapshotStoreConfigurator s) {
+      s.configureSnapshotStore(memberId, snapshotStore);
+    }
+
+    final var builder =
         RaftStorage.builder()
             .withDirectory(memberDirectory)
             .withMaxSegmentSize(1024 * 10)
             .withFreeDiskSpace(100)
-            .withSnapshotStore(
-                snapshotStores.compute(
-                    memberId.id(),
-                    (k, v) -> new TestSnapshotStore(getOrCreatePersistedSnapshot(memberId.id()))));
-    return configurator.apply(defaults).build();
+            .withSnapshotStore(snapshotStore);
+
+    if (configurator instanceof final StorageConfigurator s) {
+      s.configureStorage(memberId, builder);
+    }
+
+    return builder.build();
   }
 
   private File getMemberDirectory(final Path directory, final String s) {
@@ -737,4 +737,20 @@ public final class RaftRule extends ExternalResource {
       throw new UnsupportedOperationException();
     }
   }
+
+  public interface Configurator {}
+
+  @FunctionalInterface
+  public interface ServerConfigurator extends Configurator {
+    void configureServer(final MemberId id, final RaftServer.Builder builder);
+  }
+
+  public interface StorageConfigurator extends Configurator {
+    void configureStorage(final MemberId id, final RaftStorage.Builder builder);
+  }
+
+  @FunctionalInterface
+  public interface SnapshotStoreConfigurator extends Configurator {
+    void configureSnapshotStore(final MemberId id, final TestSnapshotStore snapshotStore);
+  }
 }
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/RaftStartupConsistencyCheckTest.java b/atomix/cluster/src/test/java/io/atomix/raft/RaftStartupConsistencyCheckTest.java
index b422916..cf51330 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/RaftStartupConsistencyCheckTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/RaftStartupConsistencyCheckTest.java
@@ -10,8 +10,10 @@ package io.atomix.raft;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatNoException;
 
+import io.atomix.raft.RaftRule.SnapshotStoreConfigurator;
 import io.atomix.raft.snapshot.TestSnapshotStore;
 import java.util.concurrent.CompletableFuture;
+import org.agrona.LangUtil;
 import org.awaitility.Awaitility;
 import org.junit.Rule;
 import org.junit.Test;
@@ -73,4 +75,36 @@ public class RaftStartupConsistencyCheckTest {
                 assertThat(raftRule.getPersistedSnapshotStore(followerId).getCurrentSnapshotIndex())
                     .isEqualTo(snapshotIndex));
   }
+
+  @Test // regression test for https://github.com/camunda/zeebe/issues/14367
+  public void shouldHandleRetriedRequestsAfterSnapshotPersist() throws Exception {
+    // given -- force a follower to receive a snapshot on restart
+    final var leader = raftRule.getLeader().orElseThrow();
+    final var follower = raftRule.getFollower().orElseThrow();
+    raftRule.shutdownServer(follower);
+
+    final var snapshotIndex = raftRule.appendEntries(500);
+    raftRule.takeCompactingSnapshot(leader, snapshotIndex - 1, 3);
+    final var lastIndex = raftRule.appendEntries(10);
+    leader.getContext().setPreferSnapshotReplicationThreshold(1);
+
+    // when -- persisting the snapshot on the follower is too slow, the leader will retry the
+    // `install` requests
+    final Runnable interceptor =
+        () -> {
+          try {
+            // TODO: better way to force a timeout?
+            Thread.sleep(2_000);
+          } catch (final InterruptedException e) {
+            LangUtil.rethrowUnchecked(e);
+          }
+        };
+    raftRule.bootstrapNode(
+        follower.name(),
+        (SnapshotStoreConfigurator) (m, b) -> b.interceptOnNewSnapshot(interceptor));
+
+    // then -- rejoined follower should catch up
+    raftRule.allNodesHaveSnapshotWithIndex(snapshotIndex);
+    raftRule.awaitSameLogSizeOnAllNodes(lastIndex);
+  }
 }
diff --git a/atomix/cluster/src/test/java/io/atomix/raft/snapshot/TestSnapshotStore.java b/atomix/cluster/src/test/java/io/atomix/raft/snapshot/TestSnapshotStore.java
index 2502c98..7307ba4 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/snapshot/TestSnapshotStore.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/snapshot/TestSnapshotStore.java
@@ -21,6 +21,7 @@ import io.camunda.zeebe.snapshots.PersistedSnapshot;
 import io.camunda.zeebe.snapshots.PersistedSnapshotListener;
 import io.camunda.zeebe.snapshots.ReceivableSnapshotStore;
 import io.camunda.zeebe.snapshots.ReceivedSnapshot;
+import io.camunda.zeebe.snapshots.SnapshotException.SnapshotAlreadyExistsException;
 import io.camunda.zeebe.snapshots.SnapshotId;
 import java.nio.file.Path;
 import java.util.HashMap;
@@ -114,6 +115,13 @@ public class TestSnapshotStore implements ReceivableSnapshotStore {
 
   @Override
   public ReceivedSnapshot newReceivedSnapshot(final String snapshotId) {
+    if (Optional.ofNullable(currentPersistedSnapshot.get())
+        .map(PersistedSnapshot::getId)
+        .orElse("""")
+        .equals(snapshotId)) {
+      throw new SnapshotAlreadyExistsException(""Snapshot with this ID is already persisted"");
+    }
+
     final var newSnapshot = new InMemorySnapshot(this, snapshotId);
     receivedSnapshots.add(newSnapshot);
     return newSnapshot;

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/system/configuration/BrokerCfgTest.java b/broker/src/test/java/io/camunda/zeebe/broker/system/configuration/BrokerCfgTest.java
index b534349..669887d 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/system/configuration/BrokerCfgTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/system/configuration/BrokerCfgTest.java
@@ -506,6 +506,18 @@ public final class BrokerCfgTest {
   }
 
   @Test
+  public void shouldDisablePriorityElectionByDefault() {
+    // given
+    final BrokerCfg cfg = TestConfigReader.readConfig(""cluster-cfg"", environment);
+
+    // when
+    final ExperimentalCfg experimentalCfg = cfg.getExperimental();
+
+    // then
+    assertThat(experimentalCfg.isEnablePriorityElection()).isFalse();
+  }
+
+  @Test
   public void shouldSetEnablePriorityElectionFromConfig() {
     // given
     final BrokerCfg cfg = TestConfigReader.readConfig(""experimental-cfg"", environment);

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/network/AsymmetricNetworkPartitionIT.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/network/AsymmetricNetworkPartitionIT.java
index 18b5aac..3349977 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/network/AsymmetricNetworkPartitionIT.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/network/AsymmetricNetworkPartitionIT.java
@@ -22,8 +22,17 @@ import io.zeebe.containers.ZeebeBrokerNode;
 import io.zeebe.containers.ZeebeContainer;
 import io.zeebe.containers.cluster.ZeebeCluster;
 import java.io.IOException;
+import java.net.URI;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpRequest.BodyPublishers;
+import java.net.http.HttpResponse;
+import java.net.http.HttpResponse.BodyHandlers;
+import java.time.Duration;
 import java.util.stream.Stream;
 import org.agrona.CloseHelper;
+import org.agrona.LangUtil;
+import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Named;
@@ -49,7 +58,7 @@ final class AsymmetricNetworkPartitionIT {
   private ZeebeClient zeebeClient;
 
   @SuppressWarnings(""unused"")
-  public static Stream<Arguments> provideTestCases() {
+  static Stream<Arguments> provideTestCases() {
     return Stream.of(
         Arguments.arguments(
             Named.named(""Deployment distribution"", new DeploymentDistributionTestCase())),
@@ -64,18 +73,22 @@ final class AsymmetricNetworkPartitionIT {
   @DisplayName(""Withstand Asymmetric Network Partition"")
   @ParameterizedTest(name = ""{index}: {0}"")
   @MethodSource(""provideTestCases"")
-  public void shouldWithstandAsymmetricNetworkPartition(
+  void shouldWithstandAsymmetricNetworkPartition(
       final AsymmetricNetworkPartitionTestCase asymmetricNetworkPartitionTestCase)
       throws IOException, InterruptedException {
     // given
     setupZeebeCluster();
     zeebeClient = cluster.newClientBuilder().build();
 
+    // the test only works if the leaders of partition 1 and 3 are different nodes
+    Awaitility.await(""partition 1 and 3 have a different leader"")
+        .atMost(Duration.ofSeconds(30))
+        .during(Duration.ofSeconds(5))
+        .until(this::hasDifferentLeaderForPartitionsOneAndThree);
+
     final var topology = zeebeClient.newTopologyRequest().send().join();
     final var leaderOfPartitionOne = getPartitionLeader(topology, 1);
     final var leaderOfPartitionThree = getPartitionLeader(topology, 3);
-    assertThat(leaderOfPartitionOne.getNodeId()).isNotEqualTo(leaderOfPartitionThree.getNodeId());
-
     final var ipAddress =
         getContainerIpAddress(getContainerForNodeId(leaderOfPartitionOne.getNodeId()));
     asymmetricNetworkPartitionTestCase.given(zeebeClient);
@@ -102,6 +115,39 @@ final class AsymmetricNetworkPartitionIT {
         .orElseThrow();
   }
 
+  private void triggerRebalancing() {
+    final var gateway = cluster.getGateways().values().stream().findFirst().orElseThrow();
+    final var monitoringAddress = gateway.getExternalMonitoringAddress();
+    final var httpClient = HttpClient.newHttpClient();
+    final var request =
+        HttpRequest.newBuilder()
+            .POST(BodyPublishers.noBody())
+            .uri(URI.create(""http://"" + monitoringAddress + ""/actuator/rebalance""))
+            .build();
+
+    final HttpResponse<Void> response;
+    try {
+      response = httpClient.send(request, BodyHandlers.discarding());
+      assertThat(response.statusCode()).isEqualTo(200);
+    } catch (final Exception e) {
+      LangUtil.rethrowUnchecked(e);
+    }
+  }
+
+  private boolean hasDifferentLeaderForPartitionsOneAndThree() {
+    final var topology = zeebeClient.newTopologyRequest().send().join();
+    final var firstLeader = getPartitionLeader(topology, 1);
+    final var thirdLeader = getPartitionLeader(topology, 3);
+
+    if (firstLeader.getNodeId() == thirdLeader.getNodeId()) {
+      LOGGER.info(""Leader of partition 1 and 3 is {}, re-balancing..."", firstLeader.getNodeId());
+      triggerRebalancing();
+      return false;
+    }
+
+    return true;
+  }
+
   private void removeAsymmetricNetworkPartition(
       final String ipAddress, final ZeebeBrokerNode<? extends GenericContainer<?>> brokerNode)
       throws IOException, InterruptedException {

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
index 607fb78..bbfbd37 100755
--- a/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/exporter/stream/ExporterDirectorDistributionTest.java
@@ -15,12 +15,15 @@ import io.camunda.zeebe.broker.exporter.repo.ExporterDescriptor;
 import io.camunda.zeebe.broker.exporter.util.ControlledTestExporter;
 import io.camunda.zeebe.protocol.impl.record.value.deployment.DeploymentRecord;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
+import io.camunda.zeebe.util.sched.clock.ControlledActorClock;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import org.awaitility.Awaitility;
+import org.awaitility.core.ConditionEvaluationListener;
+import org.awaitility.core.EvaluatedCondition;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
@@ -106,6 +109,7 @@ public final class ExporterDirectorDistributionTest {
 
     // then
     Awaitility.await(""Active Director has distributed positions and passive has received it"")
+        .conditionEvaluationListener(new ClockShifter(activeExporters.getClock()))
         .untilAsserted(
             () -> {
               assertThat(passiveExporterState.getPosition(EXPORTER_ID_1)).isEqualTo(position);
@@ -133,6 +137,7 @@ public final class ExporterDirectorDistributionTest {
 
     final var passiveExporterState = passiveExporters.getExportersState();
     Awaitility.await(""Active Director has distributed positions and passive has received it"")
+        .conditionEvaluationListener(new ClockShifter(activeExporters.getClock()))
         .untilAsserted(
             () -> {
               assertThat(passiveExporterState.getPosition(EXPORTER_ID_1)).isEqualTo(position);
@@ -153,4 +158,25 @@ public final class ExporterDirectorDistributionTest {
     // then - the exported position should not go back
     assertThat(passiveExporterState.getPosition(EXPORTER_ID_1)).isEqualTo(position);
   }
+
+  /**
+   * Shifts the actor clock by the {@link this#DISTRIBUTION_INTERVAL} after an awaitility condition
+   * was evaluated.
+   *
+   * <p>This makes sure that even if we miss one export position event, we distribute the event
+   * later again, which makes tests less flaky.
+   */
+  private static final class ClockShifter implements ConditionEvaluationListener<Void> {
+
+    private final ControlledActorClock clock;
+
+    public ClockShifter(final ControlledActorClock clock) {
+      this.clock = clock;
+    }
+
+    @Override
+    public void conditionEvaluated(final EvaluatedCondition<Void> condition) {
+      clock.addTime(DISTRIBUTION_INTERVAL);
+    }
+  }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ProcessingScheduleServiceTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ProcessingScheduleServiceTest.java
index 2f5a8e9..f9a54c9 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ProcessingScheduleServiceTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ProcessingScheduleServiceTest.java
@@ -147,7 +147,7 @@ public class ProcessingScheduleServiceTest {
   }
 
   @Test
-  public void shouldExecuteScheduledTaskAfterReplay() {
+  public void shouldNotExecuteTaskWhichAreScheduledDuringReplay() {
     // given
     final var processor = spy(dummyProcessor);
     processor.blockReplay();
@@ -165,7 +165,7 @@ public class ProcessingScheduleServiceTest {
     final var inOrder = inOrder(processor, mockedTask);
     inOrder.verify(processor, TIMEOUT).init(any());
     inOrder.verify(processor, TIMEOUT).replay(any());
-    inOrder.verify(mockedTask, TIMEOUT).execute(any());
+    inOrder.verify(mockedTask, never()).execute(any());
     inOrder.verifyNoMoreInteractions();
   }
 

diff --git a/clients/java/src/test/java/io/camunda/zeebe/client/process/DeployResourceTest.java b/clients/java/src/test/java/io/camunda/zeebe/client/process/DeployResourceTest.java
index 1d96c74..b65d9f3 100644
--- a/clients/java/src/test/java/io/camunda/zeebe/client/process/DeployResourceTest.java
+++ b/clients/java/src/test/java/io/camunda/zeebe/client/process/DeployResourceTest.java
@@ -22,7 +22,6 @@ import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import io.camunda.zeebe.client.api.command.ClientException;
 import io.camunda.zeebe.client.api.response.DeploymentEvent;
-import io.camunda.zeebe.client.api.response.Process;
 import io.camunda.zeebe.client.impl.command.StreamUtil;
 import io.camunda.zeebe.client.impl.response.ProcessImpl;
 import io.camunda.zeebe.client.util.ClientTest;
@@ -35,7 +34,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 import java.time.Duration;
-import java.util.List;
 import org.junit.Test;
 
 public final class DeployResourceTest extends ClientTest {
@@ -49,25 +47,15 @@ public final class DeployResourceTest extends ClientTest {
   @Test
   public void shouldDeployResourceFromFile() {
     // given
-    final long key = 123L;
-    final String filename = DeployResourceTest.class.getResource(BPMN_1_FILENAME).getPath();
-    gatewayService.onDeployResourceRequest(
-        key, deployedResource(deployedProcess(BPMN_1_PROCESS_ID, 12, 423, filename)));
-    final Process expected = new ProcessImpl(423, BPMN_1_PROCESS_ID, 12, filename);
+    final String path = DeployResourceTest.class.getResource(BPMN_1_FILENAME).getPath();
 
     // when
-    final DeploymentEvent response =
-        client.newDeployCommand().addResourceFile(filename).send().join();
+    client.newDeployCommand().addResourceFile(path).send().join();
 
     // then
-    assertThat(response.getKey()).isEqualTo(key);
-
-    final List<Process> processes = response.getProcesses();
-    assertThat(processes).containsOnly(expected);
-
     final DeployResourceRequest request = gatewayService.getLastRequest();
     final Resource resource = request.getResources(0);
-    assertThat(resource.getName()).isEqualTo(filename);
+    assertThat(resource.getName()).isEqualTo(path);
     assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
   }
 
@@ -114,7 +102,6 @@ public final class DeployResourceTest extends ClientTest {
     // then
     final DeployResourceRequest request = gatewayService.getLastRequest();
     final Resource resource = request.getResources(0);
-
     assertThat(resource.getName()).isEqualTo(filename);
     assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
   }
@@ -135,7 +122,6 @@ public final class DeployResourceTest extends ClientTest {
     // then
     final DeployResourceRequest request = gatewayService.getLastRequest();
     final Resource resource = request.getResources(0);
-
     assertThat(resource.getName()).isEqualTo(filename);
     assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
   }
@@ -152,7 +138,6 @@ public final class DeployResourceTest extends ClientTest {
     // then
     final DeployResourceRequest request = gatewayService.getLastRequest();
     final Resource resource = request.getResources(0);
-
     assertThat(resource.getName()).isEqualTo(filename);
     assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
   }
@@ -174,7 +159,6 @@ public final class DeployResourceTest extends ClientTest {
     // then
     final DeployResourceRequest request = gatewayService.getLastRequest();
     final Resource resource = request.getResources(0);
-
     assertThat(resource.getName()).isEqualTo(filename);
     assertThat(resource.getContent().toByteArray()).isEqualTo(expectedBytes);
   }
@@ -183,13 +167,58 @@ public final class DeployResourceTest extends ClientTest {
   public void shouldDeployMultipleResources() {
     // given
     final long key = 345L;
-
     final String filename1 = BPMN_1_FILENAME.substring(1);
     final String filename2 = BPMN_2_FILENAME.substring(1);
+    gatewayService.onDeployResourceRequest(
+        key,
+        deployedResource(deployedProcess(BPMN_1_PROCESS_ID, 1, 1, filename1)),
+        deployedResource(deployedProcess(BPMN_2_PROCESS_ID, 1, 2, filename2)));
 
-    final Process expected1 = new ProcessImpl(1, BPMN_1_PROCESS_ID, 1, filename1);
-    final Process expected2 = new ProcessImpl(2, BPMN_2_PROCESS_ID, 1, filename2);
+    // when
+    client
+        .newDeployCommand()
+        .addResourceFromClasspath(filename1)
+        .addResourceFromClasspath(filename2)
+        .send()
+        .join();
 
+    // then
+    final DeployResourceRequest request = gatewayService.getLastRequest();
+    assertThat(request.getResourcesList()).hasSize(2);
+
+    final Resource resource1 = request.getResources(0);
+    assertThat(resource1.getName()).isEqualTo(filename1);
+    assertThat(resource1.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
+
+    final Resource resource2 = request.getResources(1);
+    assertThat(resource2.getName()).isEqualTo(filename2);
+    assertThat(resource2.getContent().toByteArray()).isEqualTo(getBytes(BPMN_2_FILENAME));
+  }
+
+  @Test
+  public void shouldDeployProcessAsResource() {
+    // given
+    final long key = 123L;
+    final String filename = DeployResourceTest.class.getResource(BPMN_1_FILENAME).getPath();
+    gatewayService.onDeployResourceRequest(
+        key, deployedResource(deployedProcess(BPMN_1_PROCESS_ID, 12, 423, filename)));
+
+    // when
+    final DeploymentEvent response =
+        client.newDeployCommand().addResourceFile(filename).send().join();
+
+    // then
+    assertThat(response.getKey()).isEqualTo(key);
+    assertThat(response.getProcesses())
+        .containsExactly(new ProcessImpl(423, BPMN_1_PROCESS_ID, 12, filename));
+  }
+
+  @Test
+  public void shouldDeployMultipleProcessesAsResources() {
+    // given
+    final long key = 345L;
+    final String filename1 = BPMN_1_FILENAME.substring(1);
+    final String filename2 = BPMN_2_FILENAME.substring(1);
     gatewayService.onDeployResourceRequest(
         key,
         deployedResource(deployedProcess(BPMN_1_PROCESS_ID, 1, 1, filename1)),
@@ -206,21 +235,10 @@ public final class DeployResourceTest extends ClientTest {
 
     // then
     assertThat(response.getKey()).isEqualTo(key);
-
-    final List<Process> processes = response.getProcesses();
-    assertThat(processes).containsOnly(expected1, expected2);
-
-    final DeployResourceRequest request = gatewayService.getLastRequest();
-    assertThat(request.getResourcesList()).hasSize(2);
-
-    Resource resource = request.getResources(0);
-
-    assertThat(resource.getName()).isEqualTo(filename1);
-    assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_1_FILENAME));
-
-    resource = request.getResources(1);
-    assertThat(resource.getName()).isEqualTo(filename2);
-    assertThat(resource.getContent().toByteArray()).isEqualTo(getBytes(BPMN_2_FILENAME));
+    assertThat(response.getProcesses())
+        .containsExactly(
+            new ProcessImpl(1, BPMN_1_PROCESS_ID, 1, filename1),
+            new ProcessImpl(2, BPMN_2_PROCESS_ID, 1, filename2));
   }
 
   @Test

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SuccessfulDeploymentTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SuccessfulDeploymentTest.java
index 22b37c8..e0e9768 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SuccessfulDeploymentTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SuccessfulDeploymentTest.java
@@ -39,7 +39,7 @@ import org.mockito.verification.VerificationWithTimeout;
 public final class SuccessfulDeploymentTest {
 
   private static final VerificationWithTimeout VERIFICATION_TIMEOUT =
-      timeout(Duration.ofSeconds(10).toMillis());
+      timeout(Duration.ofSeconds(1).toMillis());
 
   @Rule public final EngineRule engine = EngineRule.singlePartition();
 
@@ -97,10 +97,11 @@ public final class SuccessfulDeploymentTest {
     final var deployment = performDeployment.apply(engine.deployment());
 
     // then
-    verify(engine.getCommandResponseWriter()).recordType(RecordType.EVENT);
-    verify(engine.getCommandResponseWriter()).valueType(ValueType.DEPLOYMENT);
-    verify(engine.getCommandResponseWriter()).intent(DeploymentIntent.CREATED);
-    verify(engine.getCommandResponseWriter()).key(deployment.getKey());
+    verify(engine.getCommandResponseWriter(), VERIFICATION_TIMEOUT).recordType(RecordType.EVENT);
+    verify(engine.getCommandResponseWriter(), VERIFICATION_TIMEOUT).valueType(ValueType.DEPLOYMENT);
+    verify(engine.getCommandResponseWriter(), VERIFICATION_TIMEOUT)
+        .intent(DeploymentIntent.CREATED);
+    verify(engine.getCommandResponseWriter(), VERIFICATION_TIMEOUT).key(deployment.getKey());
     verify(engine.getCommandResponseWriter(), VERIFICATION_TIMEOUT)
         .tryWriteResponse(anyInt(), anyLong());
   }

diff --git a/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java b/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java
index f0d4e44..d56daad 100644
--- a/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java
+++ b/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java
@@ -667,7 +667,7 @@ public class LogStreamTest
         stream.truncate(TRUNCATE_POSITION);
 
         // then
-        verify(storage.getMock()).truncate(EVENT_SIZE * TRUNCATE_POSITION);
+        //verify(storage.getMock()).truncate(EVENT_SIZE * TRUNCATE_POSITION);
         assertThat(stream.getLogBlockIndexController().getNextAddress()).isNotEqualTo(INVALID_ADDRESS);
 
         // when
@@ -703,7 +703,7 @@ public class LogStreamTest
         stream.truncate(TRUNCATE_POSITION);
 
         // then
-        verify(storage.getMock()).truncate(EVENT_SIZE * TRUNCATE_POSITION);
+        //verify(storage.getMock()).truncate(EVENT_SIZE * TRUNCATE_POSITION);
         assertThat(stream.getLogBlockIndexController().getNextAddress()).isNotEqualTo(INVALID_ADDRESS);
 
         // when
@@ -740,7 +740,7 @@ public class LogStreamTest
         stream.truncate(TRUNCATE_POSITION);
 
         // then
-        verify(storage.getMock()).truncate(TRUNCATE_START_ADDRESS + EVENT_SIZE * TRUNCATE_POSITION);
+        //verify(storage.getMock()).truncate(TRUNCATE_START_ADDRESS + EVENT_SIZE * TRUNCATE_POSITION);
         assertThat(stream.getLogBlockIndexController().getNextAddress()).isNotEqualTo(INVALID_ADDRESS);
 
         // when
@@ -779,7 +779,7 @@ public class LogStreamTest
         stream.truncate(TRUNCATE_POSITION);
 
         // then
-        verify(storage.getMock()).truncate(TRUNCATE_START_ADDRESS + EVENT_SIZE * TRUNCATE_POSITION);
+        //verify(storage.getMock()).truncate(TRUNCATE_START_ADDRESS + EVENT_SIZE * TRUNCATE_POSITION);
         assertThat(stream.getLogBlockIndexController().getNextAddress()).isNotEqualTo(INVALID_ADDRESS);
 
         // when

diff --git a/atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java b/atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java
index 26ccef6..27027b2 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java
@@ -254,4 +254,19 @@ public final class InMemorySnapshot implements PersistedSnapshot, ReceivedSnapsh
         && id.equals(that.id)
         && chunks.equals(that.chunks);
   }
+
+  @Override
+  public String toString() {
+    return ""InMemorySnapshot{""
+        + ""index=""
+        + index
+        + "", term=""
+        + term
+        + "", id='""
+        + id
+        + '\''
+        + "", checksum=""
+        + checksum
+        + '}';
+  }
 }

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/DeploymentClusteredTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/DeploymentClusteredTest.java
index 11d5e63..22a3295 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/DeploymentClusteredTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/DeploymentClusteredTest.java
@@ -84,7 +84,6 @@ public class DeploymentClusteredTest
     @Test
     // FIXME: https://github.com/zeebe-io/zeebe/issues/557
     @Category(io.zeebe.UnstableTest.class)
-    @Ignore(""https://github.com/zeebe-io/zeebe/issues/592"")
     public void shouldDeployWorkflowAndCreateInstances()
     {
         // given

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareModifyProcessInstanceTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareModifyProcessInstanceTest.java
new file mode 100644
index 0000000..de34813
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/multitenancy/TenantAwareModifyProcessInstanceTest.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.multitenancy;
+
+import static io.camunda.zeebe.protocol.record.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.protocol.record.RejectionType;
+import io.camunda.zeebe.protocol.record.intent.ProcessInstanceModificationIntent;
+import io.camunda.zeebe.protocol.record.value.TenantOwned;
+import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
+import org.junit.ClassRule;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestWatcher;
+
+public class TenantAwareModifyProcessInstanceTest {
+
+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  @Rule public final TestWatcher watcher = new RecordingExporterTestWatcher();
+
+  @Test
+  public void shouldModifyInstanceForDefaultTenant() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(""process"")
+                .startEvent()
+                .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+                .endEvent()
+                .done())
+        .withTenantId(TenantOwned.DEFAULT_TENANT_IDENTIFIER)
+        .deploy();
+
+    final long processInstanceKey =
+        ENGINE
+            .processInstance()
+            .ofBpmnProcessId(""process"")
+            .withTenantId(TenantOwned.DEFAULT_TENANT_IDENTIFIER)
+            .create();
+
+    // when
+    final var modified =
+        ENGINE.processInstance().withInstanceKey(processInstanceKey).modification().modify();
+
+    // then
+    assertThat(modified)
+        .describedAs(""Expect that modification was successful"")
+        .hasIntent(ProcessInstanceModificationIntent.MODIFIED);
+  }
+
+  @Test
+  public void shouldRejectModifyInstanceForSpecificTenant() {
+    // given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(""process"")
+                .startEvent()
+                .serviceTask(""task"", t -> t.zeebeJobType(""test""))
+                .endEvent()
+                .done())
+        .withTenantId(""custom-tenant"")
+        .deploy();
+
+    final long processInstanceKey =
+        ENGINE.processInstance().ofBpmnProcessId(""process"").withTenantId(""custom-tenant"").create();
+
+    // when
+    final var rejection =
+        ENGINE
+            .processInstance()
+            .withInstanceKey(processInstanceKey)
+            .modification()
+            .expectRejection()
+            .modify();
+
+    // then
+    assertThat(rejection)
+        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
+        .hasRejectionReason(
+            """"""
+            Expected to modify process instance but process instance belongs to tenant \
+            'custom-tenant' while modification is not yet supported with multi-tenancy. \
+            Only process instances belonging to the default tenant '<default>' can be modified. \
+            See https://github.com/camunda/zeebe/issues/13288 for more details."""""");
+  }
+}

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/subprocess/NonInterruptingEventSubprocessTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/subprocess/NonInterruptingEventSubprocessTest.java
index 71625ba..02686e5 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/subprocess/NonInterruptingEventSubprocessTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/subprocess/NonInterruptingEventSubprocessTest.java
@@ -46,6 +46,7 @@ public class NonInterruptingEventSubprocessTest {
 
   @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
   private static final String PROCESS_ID = ""proc"";
+  private static final String CORRELATION_KEY = ""123"";
 
   private static String messageName;
 
@@ -60,6 +61,7 @@ public class NonInterruptingEventSubprocessTest {
   public Consumer<Long> triggerEventSubprocess;
 
   private ProcessMetadataValue currentProcess;
+  private String correlationKey;
 
   @Parameterized.Parameters(name = ""{0} event subprocess"")
   public static Object[][] parameters() {
@@ -88,7 +90,11 @@ public class NonInterruptingEventSubprocessTest {
                   .withProcessInstanceKey(key)
                   .withMessageName(messageName)
                   .await();
-              ENGINE.message().withName(messageName).withCorrelationKey(""123"").publish();
+              ENGINE
+                  .message()
+                  .withName(messageName)
+                  .withCorrelationKey(""message-"" + CORRELATION_KEY)
+                  .publish();
             })
       },
     };
@@ -106,6 +112,7 @@ public class NonInterruptingEventSubprocessTest {
   @Before
   public void init() {
     messageName = helper.getMessageName();
+    correlationKey = String.format(""%s-%s"", testName, CORRELATION_KEY);
   }
 
   @Test
@@ -248,6 +255,50 @@ public class NonInterruptingEventSubprocessTest {
             tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
   }
 
+  /** Specifically reproduces https://github.com/camunda-cloud/zeebe/issues/7097 */
+  @Test
+  public void shouldInterruptEmbeddedSubProcess() {
+    // when
+    final BpmnModelInstance model = eventSubprocModelWithEmbeddedSubWithBoundaryEvent(builder);
+    final long processInstanceKey = createInstanceAndTriggerEvent(model);
+
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+        .withProcessInstanceKey(processInstanceKey)
+        .withElementType(BpmnElementType.SERVICE_TASK)
+        .withElementId(""embedded_sub_task"")
+        .await();
+
+    // when
+    ENGINE.message().withName(""bndr"").withCorrelationKey(correlationKey).publish();
+
+    // then
+    assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(processInstanceKey)
+                .onlyEvents()
+                .limit(
+                    r ->
+                        r.getValue().getBpmnElementType() == BpmnElementType.EVENT_SUB_PROCESS
+                            && r.getIntent() == ProcessInstanceIntent.ELEMENT_COMPLETED))
+        .extracting(r -> r.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSubsequence(
+            tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.SERVICE_TASK, ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.SERVICE_TASK, ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(BpmnElementType.BOUNDARY_EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(BpmnElementType.BOUNDARY_EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            tuple(BpmnElementType.BOUNDARY_EVENT, ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.BOUNDARY_EVENT, ProcessInstanceIntent.ELEMENT_COMPLETED),
+            tuple(BpmnElementType.SEQUENCE_FLOW, ProcessInstanceIntent.SEQUENCE_FLOW_TAKEN),
+            tuple(BpmnElementType.END_EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            tuple(BpmnElementType.END_EVENT, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            tuple(BpmnElementType.END_EVENT, ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.END_EVENT, ProcessInstanceIntent.ELEMENT_COMPLETED),
+            tuple(BpmnElementType.EVENT_SUB_PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETING),
+            tuple(BpmnElementType.EVENT_SUB_PROCESS, ProcessInstanceIntent.ELEMENT_COMPLETED));
+  }
+
   @Test
   public void shouldNotPropagateVariablesToScope() {
     // given
@@ -274,7 +325,7 @@ public class NonInterruptingEventSubprocessTest {
         job.getValue().getJobs().iterator().next().getVariables();
 
     // when
-    assertThat(jobVariables).containsOnly(Map.entry(""key"", 123));
+    assertThat(jobVariables).containsOnly(Map.entry(""key"", correlationKey));
   }
 
   private static void assertEventSubprocessLifecycle(final long processInstanceKey) {
@@ -320,7 +371,7 @@ public class NonInterruptingEventSubprocessTest {
         ENGINE
             .processInstance()
             .ofBpmnProcessId(PROCESS_ID)
-            .withVariables(Map.of(""key"", 123))
+            .withVariables(Map.of(""key"", correlationKey))
             .create();
     assertThat(
             RecordingExporter.jobRecords(JobIntent.CREATED)
@@ -388,4 +439,36 @@ public class NonInterruptingEventSubprocessTest {
         .endEvent(""end_proc"")
         .done();
   }
+
+  private static BpmnModelInstance eventSubprocModelWithEmbeddedSubWithBoundaryEvent(
+      final Function<StartEventBuilder, StartEventBuilder> startBuilder) {
+    final var builder = Bpmn.createExecutableProcess(PROCESS_ID);
+    startBuilder
+        .apply(
+            builder
+                .eventSubProcess(""event_sub_proc"")
+                .startEvent(""event_sub_start"")
+                .interrupting(false))
+        .subProcess(
+            ""embedded"",
+            s ->
+                s.boundaryEvent(
+                    ""boundary-msg"",
+                    msg ->
+                        msg.message(m -> m.name(""bndr"").zeebeCorrelationKeyExpression(""key""))
+                            .cancelActivity(true)
+                            .endEvent(""boundary-end"")))
+        .embeddedSubProcess()
+        .startEvent(""embedded_sub_start"")
+        .serviceTask(""embedded_sub_task"", t -> t.zeebeJobType(""embed""))
+        .endEvent(""embedded_sub_end"")
+        .moveToNode(""embedded"")
+        .endEvent(""event_sub_end"");
+
+    return builder
+        .startEvent(""start_proc"")
+        .serviceTask(""task"", t -> t.zeebeJobType(""type""))
+        .endEvent(""end_proc"")
+        .done();
+  }
 }

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
index d15c127..ca7007b 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteringRule.java
@@ -19,13 +19,10 @@ import static io.zeebe.test.util.TestUtil.doRepeatedly;
 import static org.assertj.core.api.Assertions.assertThat;
 
 import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.stream.Collectors;
 
+import io.zeebe.client.topic.Topics;
 import org.junit.rules.ExternalResource;
 
 import io.zeebe.broker.Broker;
@@ -102,22 +99,23 @@ public class ClusteringRule extends ExternalResource
      */
     public TopologyBroker getLeaderForPartition(int partition)
     {
-        final List<TopologyBroker> topologyBrokerList =
-            doRepeatedly(() -> zeebeClient.requestTopology().execute().getBrokers())
-                .until(topologyBrokers -> extractPartitionLeader(topologyBrokers, partition) != null);
-        return extractPartitionLeader(topologyBrokerList, partition);
+        return
+            doRepeatedly(() -> {
+                final List<TopologyBroker> brokers = zeebeClient.requestTopology().execute().getBrokers();
+                return extractPartitionLeader(brokers, partition);
+            })
+                .until(Optional::isPresent)
+                .get();
     }
 
-    private TopologyBroker extractPartitionLeader(List<TopologyBroker> topologyBrokers, int partition)
+    private Optional<TopologyBroker> extractPartitionLeader(List<TopologyBroker> topologyBrokers, int partition)
     {
         return topologyBrokers.stream()
             .filter(b -> b.getPartitions()
                     .stream()
-                    .anyMatch(p ->
-                        p.getPartitionId() == partition
-                        && ""LEADER"".equals(p.getState())))
-            .findFirst()
-            .orElse(null);
+                    .anyMatch(p -> p.getPartitionId() == partition && p.isLeader())
+            )
+            .findFirst();
     }
 
     /**
@@ -142,8 +140,7 @@ public class ClusteringRule extends ExternalResource
         assertThat(topicEvent.getState()).isEqualTo(""CREATED"");
 
         waitForTopicPartitionReplicationFactor(topicName, partitionCount, replicationFactor);
-        final Topic topic = waitForTopicAvailability(topicName);
-        return topic;
+        return waitForTopicAvailability(topicName);
     }
 
     private boolean hasPartitionsWithReplicationFactor(List<TopologyBroker> brokers, String topicName, int partitionCount, int replicationFactor)
@@ -174,12 +171,11 @@ public class ClusteringRule extends ExternalResource
 
     private Topic waitForTopicAvailability(String topicName)
     {
-        return doRepeatedly(() -> zeebeClient.topics().getTopics().execute())
-            .until((topics -> topics.getTopics().stream().filter(topic -> topic.getName().equals(topicName)).count() == 1))
-            .getTopics()
-            .stream()
-            .filter(topic -> topic.getName().equals(topicName))
-            .findFirst()
+        return doRepeatedly(() -> {
+            final Topics topics = zeebeClient.topics().getTopics().execute();
+            return topics.getTopics().stream().filter(topic -> topicName.equals(topic.getName())).findAny();
+        })
+            .until(Optional::isPresent)
             .get();
     }
 
@@ -227,30 +223,15 @@ public class ClusteringRule extends ExternalResource
      */
     public List<Integer> getBrokersLeadingPartitions(SocketAddress socketAddress)
     {
-        final List<TopologyBroker> topologyBrokers = zeebeClient.requestTopology()
-                                                                .execute()
-                                                                .getBrokers();
-
-        final List<Integer> leadingPartitions = new ArrayList<>();
-
-        for (TopologyBroker topologyBroker : topologyBrokers)
-        {
-            if (topologyBroker.getSocketAddress().equals(socketAddress))
-            {
-                final List<BrokerPartitionState> partitions = topologyBroker.getPartitions();
-                for (BrokerPartitionState brokerPartitionState : partitions)
-                {
-                    final int currentPartitionId = brokerPartitionState.getPartitionId();
-                    if (brokerPartitionState.isLeader())
-                    {
-                        leadingPartitions.add(currentPartitionId);
-                    }
-                }
-                break;
-            }
-        }
-
-        return leadingPartitions;
+        return zeebeClient.requestTopology()
+                          .execute()
+                          .getBrokers()
+                          .stream()
+                          .filter(broker -> broker.getSocketAddress().equals(socketAddress))
+                          .flatMap(broker -> broker.getPartitions().stream())
+                          .filter(BrokerPartitionState::isLeader)
+                          .map(BrokerPartitionState::getPartitionId)
+                          .collect(Collectors.toList());
     }
 
     /**
@@ -263,7 +244,7 @@ public class ClusteringRule extends ExternalResource
                           .execute()
                           .getBrokers()
                           .stream()
-                          .map(topologyBroker -> topologyBroker.getSocketAddress())
+                          .map(TopologyBroker::getSocketAddress)
                           .collect(Collectors.toList());
 
     }
@@ -274,27 +255,16 @@ public class ClusteringRule extends ExternalResource
      * @param topic
      * @return
      */
-    public int getPartitionLeaderCountForTopic(String topic)
+    public long getPartitionLeaderCountForTopic(String topic)
     {
-        int leaderCount = 0;
-
-        final List<TopologyBroker> topologyBrokers = zeebeClient.requestTopology()
-                                                                .execute()
-                                                                .getBrokers();
 
-        for (TopologyBroker topologyBroker : topologyBrokers)
-        {
-            final List<BrokerPartitionState> partitions = topologyBroker.getPartitions();
-            for (BrokerPartitionState brokerPartitionState : partitions)
-            {
-                final String topicName = brokerPartitionState.getTopicName();
-                if (topic.equals(topicName) && brokerPartitionState.getState().equals(""LEADER""))
-                {
-                    leaderCount++;
-                }
-            }
-        }
-        return leaderCount;
+        return zeebeClient.requestTopology()
+                          .execute()
+                          .getBrokers()
+                          .stream()
+                          .flatMap(broker -> broker.getPartitions().stream())
+                          .filter(p -> p.getTopicName().equals(topic) && p.isLeader())
+                          .count();
     }
 
     /**
@@ -318,30 +288,14 @@ public class ClusteringRule extends ExternalResource
     {
         doRepeatedly(() -> zeebeClient.requestTopology().execute().getBrokers())
             .until(topologyBrokers ->
-            {
-                boolean foundNewLeads = false;
-
-                if (topologyBrokers != null)
-                {
-                    final HashSet<Integer> toSearchPartitions = new HashSet<>(partitions);
-                    for (TopologyBroker topologyBroker : topologyBrokers)
-                    {
-                        if (!topologyBroker.getSocketAddress().equals(oldLeader))
-                        {
-                            final List<BrokerPartitionState> partitionStates = topologyBroker.getPartitions();
-                            for (BrokerPartitionState brokerPartitionState : partitionStates)
-                            {
-                                if (brokerPartitionState.isLeader())
-                                {
-                                    toSearchPartitions.remove(brokerPartitionState.getPartitionId());
-                                }
-                            }
-                        }
-                    }
-                    foundNewLeads = toSearchPartitions.isEmpty();
-                }
-                return foundNewLeads;
-            });
+                topologyBrokers != null && topologyBrokers.stream()
+                               .filter(broker -> !broker.getSocketAddress().equals(oldLeader))
+                               .flatMap(broker -> broker.getPartitions().stream())
+                               .filter(BrokerPartitionState::isLeader)
+                               .map(BrokerPartitionState::getPartitionId)
+                               .collect(Collectors.toSet())
+                               .containsAll(partitions)
+            );
     }
 
     public void setReplicationFactor(int replicationFactor)

diff --git a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManagerTest.java b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManagerTest.java
index 27bcbbb..d0e314f 100644
--- a/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManagerTest.java
+++ b/transport/src/test/java/io/camunda/zeebe/transport/stream/impl/ClientStreamRequestManagerTest.java
@@ -9,6 +9,7 @@ package io.camunda.zeebe.transport.stream.impl;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyBoolean;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
@@ -123,6 +124,23 @@ class ClientStreamRequestManagerTest {
     assertThat(clientStream.isConnected(server)).isFalse();
   }
 
+  @Test
+  void shouldSendRemoveAllRequestToAllServers() {
+    // given
+    final MemberId server1 = MemberId.from(""1"");
+    final MemberId server2 = MemberId.from(""2"");
+    final var servers = Set.of(server1, server2);
+
+    // when
+    requestManager.removeAll(servers);
+
+    // then
+    verify(mockTransport)
+        .unicast(eq(StreamTopics.REMOVE_ALL.topic()), any(), any(), eq(server1), anyBoolean());
+    verify(mockTransport)
+        .unicast(eq(StreamTopics.REMOVE_ALL.topic()), any(), any(), eq(server2), anyBoolean());
+  }
+
   private static class TestMetadata implements BufferWriter {
     @Override
     public int getLength() {

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ReaderCloseTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ReaderCloseTest.java
index 24f1316..881c727 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ReaderCloseTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/clustering/ReaderCloseTest.java
@@ -70,6 +70,14 @@ public class ReaderCloseTest {
             .getCluster()
             .getNodeId();
     clusteringRule.forceClusterToHaveNewLeader(followerId);
+    // because of https://github.com/camunda-cloud/zeebe/issues/8329
+    // we need to add another record so we can do a snapshot
+    clientRule
+        .getClient()
+        .newPublishMessageCommand()
+        .messageName(""test"")
+        .correlationKey(""test"")
+        .send();
 
     // when
     clusteringRule.triggerAndWaitForSnapshots();
@@ -78,6 +86,7 @@ public class ReaderCloseTest {
     for (final Broker broker : clusteringRule.getBrokers()) {
       assertThatFilesOfDeletedSegmentsDoesNotExist(broker);
     }
+    assertThat(leaderId).isNotEqualTo(clusteringRule.getLeaderForPartition(1).getNodeId());
   }
 
   private void assertThatFilesOfDeletedSegmentsDoesNotExist(final Broker leader)

diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
index 22b8590..db1b553 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerRecoveryTest.java
@@ -116,7 +116,6 @@ public class BrokerRecoveryTest
         ClockUtil.reset();
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldCreateWorkflowInstanceAfterRestart()
     {
@@ -136,7 +135,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasWorkflowInstanceEvent(wfInstanceEvent(""WORKFLOW_INSTANCE_CREATED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldContinueWorkflowInstanceAtTaskAfterRestart()
     {
@@ -166,7 +164,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasWorkflowInstanceEvent(wfInstanceEvent(""WORKFLOW_INSTANCE_COMPLETED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldContinueWorkflowInstanceWithLockedTaskAfterRestart()
     {
@@ -200,7 +197,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasWorkflowInstanceEvent(wfInstanceEvent(""WORKFLOW_INSTANCE_COMPLETED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldContinueWorkflowInstanceAtSecondTaskAfterRestart()
     {
@@ -237,7 +233,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasWorkflowInstanceEvent(wfInstanceEvent(""WORKFLOW_INSTANCE_COMPLETED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldDeployNewWorkflowVersionAfterRestart()
     {
@@ -412,7 +407,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasTaskEvent(taskEvent(""COMPLETED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldResolveIncidentAfterRestart()
     {
@@ -443,7 +437,6 @@ public class BrokerRecoveryTest
         waitUntil(() -> eventRecorder.hasTaskEvent(taskEvent(""CREATED"")));
     }
 
-    @Ignore(""Recovery of workflow deployment event fails - see https://github.com/camunda-tngp/zeebe/issues/353"")
     @Test
     public void shouldResolveFailedIncidentAfterRestart()
     {

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
index f86fab5..f3029c8 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/ModifyProcessInstanceTerminationTest.java
@@ -23,6 +23,7 @@ import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessMessageSubscriptionIntent;
 import io.camunda.zeebe.protocol.record.intent.TimerIntent;
 import io.camunda.zeebe.protocol.record.value.BpmnElementType;
+import io.camunda.zeebe.test.util.BrokerClassRuleHelper;
 import io.camunda.zeebe.test.util.record.RecordingExporter;
 import io.camunda.zeebe.test.util.record.RecordingExporterTestWatcher;
 import java.util.function.Consumer;
@@ -36,6 +37,10 @@ import org.junit.rules.TestWatcher;
 public class ModifyProcessInstanceTerminationTest {
 
   @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();
+
+  @ClassRule
+  public static final BrokerClassRuleHelper CLASS_RULE_HELPER = new BrokerClassRuleHelper();
+
   private static final String PROCESS_ID = ""process"";
 
   @Rule public final TestWatcher watcher = new RecordingExporterTestWatcher();
@@ -573,6 +578,78 @@ public class ModifyProcessInstanceTerminationTest {
         .contains(tuple(BpmnElementType.USER_TASK, ""C"", ProcessInstanceIntent.ELEMENT_ACTIVATED));
   }
 
+  @Test
+  public void shouldTerminateEventSubprocess() {
+    // given
+    final var correlationKey = CLASS_RULE_HELPER.getCorrelationValue();
+
+    final var process =
+        Bpmn.createExecutableProcess(PROCESS_ID)
+            .eventSubProcess(
+                ""event-subprocess"",
+                eventSubprocess ->
+                    eventSubprocess
+                        .startEvent()
+                        .message(m -> m.name(""start"").zeebeCorrelationKeyExpression(""key""))
+                        .userTask(""B"")
+                        .endEvent())
+            .startEvent()
+            .userTask(""A"")
+            .endEvent()
+            .done();
+
+    ENGINE.deployment().withXmlResource(process).deploy();
+
+    final var processInstanceKey =
+        ENGINE
+            .processInstance()
+            .ofBpmnProcessId(PROCESS_ID)
+            .withVariable(""key"", correlationKey)
+            .create();
+
+    ENGINE.message().withName(""start"").withCorrelationKey(correlationKey).publish();
+
+    final var eventSubprocessKey =
+        getElementInstanceKeyOfElement(processInstanceKey, ""event-subprocess"");
+
+    RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)
+        .withProcessInstanceKey(processInstanceKey)
+        .withElementId(""B"")
+        .await();
+
+    // when
+    ENGINE
+        .processInstance()
+        .withInstanceKey(processInstanceKey)
+        .modification()
+        .terminateElement(eventSubprocessKey)
+        .modify();
+
+    // then
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(processInstanceKey)
+                .limitToProcessInstanceTerminated())
+        .extracting(
+            r -> r.getValue().getBpmnElementType(),
+            r -> r.getValue().getElementId(),
+            Record::getIntent)
+        .describedAs(""Expect to terminate the event subprocess and all containing elements"")
+        .containsSequence(
+            tuple(
+                BpmnElementType.EVENT_SUB_PROCESS,
+                ""event-subprocess"",
+                ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.USER_TASK, ""B"", ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.USER_TASK, ""B"", ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(
+                BpmnElementType.EVENT_SUB_PROCESS,
+                ""event-subprocess"",
+                ProcessInstanceIntent.ELEMENT_TERMINATED),
+            tuple(BpmnElementType.PROCESS, PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATING),
+            tuple(BpmnElementType.PROCESS, PROCESS_ID, ProcessInstanceIntent.ELEMENT_TERMINATED));
+  }
+
   private static long getElementInstanceKeyOfElement(
       final long processInstanceKey, final String elementId) {
     return RecordingExporter.processInstanceRecords(ProcessInstanceIntent.ELEMENT_ACTIVATED)

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/UserTaskTransformerTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/UserTaskTransformerTest.java
new file mode 100644
index 0000000..86ab96b
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/bpmn/activity/UserTaskTransformerTest.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.bpmn.activity;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import io.camunda.zeebe.el.ExpressionLanguage;
+import io.camunda.zeebe.el.ExpressionLanguageFactory;
+import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableJobWorkerTask;
+import io.camunda.zeebe.engine.processing.deployment.model.element.ExecutableProcess;
+import io.camunda.zeebe.engine.processing.deployment.model.transformation.BpmnTransformer;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import io.camunda.zeebe.model.bpmn.BpmnModelInstance;
+import io.camunda.zeebe.model.bpmn.builder.UserTaskBuilder;
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.stream.Stream;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.TestInstance;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+class UserTaskTransformerTest {
+
+  private static final String TASK_ID = ""user-task"";
+
+  private final ExpressionLanguage expressionLanguage =
+      ExpressionLanguageFactory.createExpressionLanguage();
+  private final BpmnTransformer transformer = new BpmnTransformer(expressionLanguage);
+
+  private BpmnModelInstance processWithUserTask(final Consumer<UserTaskBuilder> userTaskModifier) {
+    return Bpmn.createExecutableProcess().startEvent().userTask(TASK_ID, userTaskModifier).done();
+  }
+
+  private ExecutableJobWorkerTask transformUserTask(final BpmnModelInstance userTask) {
+    final List<ExecutableProcess> processes = transformer.transformDefinitions(userTask);
+    return processes.get(0).getElementById(TASK_ID, ExecutableJobWorkerTask.class);
+  }
+
+  @Nested
+  class AssignmentDefinitionTests {
+
+    @Nested
+    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+    class AssigneeTests {
+
+      Stream<Arguments> assignees() {
+        return Stream.of(
+            Arguments.of(null, null),
+            Arguments.of("""", null),
+            Arguments.of("" "", null),
+            Arguments.of(""frodo"", ""frodo""),
+            Arguments.of(""=ring.bearer"", ""ring.bearer""));
+      }
+
+      @DisplayName(""Should transform user task with assignee"")
+      @ParameterizedTest
+      @MethodSource(""assignees"")
+      void shouldTransform(final String assignee, final String parsedExpression) {
+        final var userTask = transformUserTask(processWithUserTask(b -> b.zeebeAssignee(assignee)));
+        if (parsedExpression == null) {
+          assertThat(userTask.getJobWorkerProperties().getAssignee()).isNull();
+        } else {
+          assertThat(userTask.getJobWorkerProperties().getAssignee().getExpression())
+              .isEqualTo(parsedExpression);
+        }
+      }
+    }
+
+    @Nested
+    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+    class CandidateGroupsTests {
+
+      Stream<Arguments> candidateGroups() {
+        return Stream.of(
+            Arguments.of(null, null),
+            Arguments.of("""", null),
+            Arguments.of("" "", null),
+            Arguments.of(""humans"", ""[\""humans\""]""),
+            Arguments.of(""humans,elves"", ""[\""humans\"",\""elves\""]""),
+            Arguments.of("" humans , elves "", ""[\""humans\"",\""elves\""]""),
+            Arguments.of(""=middle_earth.races"", ""middle_earth.races""),
+            Arguments.of(""=[\""elves\"",\""orcs\""]"", ""[\""elves\"",\""orcs\""]""));
+      }
+
+      @DisplayName(""Should transform user task with candidateGroups"")
+      @ParameterizedTest
+      @MethodSource(""candidateGroups"")
+      void shouldTransform(final String candidateGroups, final String parsedExpression) {
+        final var userTask =
+            transformUserTask(processWithUserTask(b -> b.zeebeCandidateGroups(candidateGroups)));
+        if (parsedExpression == null) {
+          assertThat(userTask.getJobWorkerProperties().getCandidateGroups()).isNull();
+        } else {
+          assertThat(userTask.getJobWorkerProperties().getCandidateGroups().getExpression())
+              .isEqualTo(parsedExpression);
+        }
+      }
+    }
+  }
+}

diff --git a/broker-core/src/main/java/io/zeebe/broker/subscription/command/SubscriptionCommandSender.java b/broker-core/src/main/java/io/zeebe/broker/subscription/command/SubscriptionCommandSender.java
index 693d1da..e3552d4 100644
--- a/broker-core/src/main/java/io/zeebe/broker/subscription/command/SubscriptionCommandSender.java
+++ b/broker-core/src/main/java/io/zeebe/broker/subscription/command/SubscriptionCommandSender.java
@@ -74,7 +74,7 @@ public class SubscriptionCommandSender {
       new CloseWorkflowInstanceSubscriptionCommand();
 
   private final ClientTransport subscriptionClient;
-  private final IntArrayList partitionIds;
+  private final IntArrayList partitionIds = new IntArrayList();
 
   private int partitionId;
   private TopologyPartitionListenerImpl partitionListener;
@@ -82,7 +82,6 @@ public class SubscriptionCommandSender {
   public SubscriptionCommandSender(
       final ClusterCfg clusterCfg, final ClientTransport subscriptionClient) {
     this.subscriptionClient = subscriptionClient;
-    partitionIds = new IntArrayList();
     partitionIds.addAll(clusterCfg.getPartitionIds());
   }
 
@@ -100,7 +99,8 @@ public class SubscriptionCommandSender {
       final DirectBuffer messageName,
       final DirectBuffer correlationKey) {
 
-    final int subscriptionPartitionId = getSubscriptionPartitionId(correlationKey);
+    final int subscriptionPartitionId =
+        SubscriptionUtil.getSubscriptionPartitionId(correlationKey, partitionIds.size());
 
     openMessageSubscriptionCommand.setSubscriptionPartitionId(subscriptionPartitionId);
     openMessageSubscriptionCommand.setWorkflowInstanceKey(workflowInstanceKey);
@@ -111,14 +111,6 @@ public class SubscriptionCommandSender {
     return sendSubscriptionCommand(subscriptionPartitionId, openMessageSubscriptionCommand);
   }
 
-  private int getSubscriptionPartitionId(final DirectBuffer correlationKey) {
-    if (partitionIds == null) {
-      throw new IllegalStateException(""no partition ids available"");
-    }
-
-    return SubscriptionUtil.getSubscriptionPartitionId(correlationKey, partitionIds.size());
-  }
-
   public boolean openWorkflowInstanceSubscription(
       final long workflowInstanceKey,
       final long elementInstanceKey,
diff --git a/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCatchElementTest.java b/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCatchElementTest.java
index 4baed4f..838c9ca 100644
--- a/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCatchElementTest.java
+++ b/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCatchElementTest.java
@@ -36,7 +36,6 @@ import io.zeebe.model.bpmn.Bpmn;
 import io.zeebe.model.bpmn.BpmnModelInstance;
 import io.zeebe.protocol.clientapi.RecordType;
 import io.zeebe.protocol.clientapi.ValueType;
-import io.zeebe.protocol.impl.SubscriptionUtil;
 import io.zeebe.protocol.intent.DeploymentIntent;
 import io.zeebe.protocol.intent.MessageSubscriptionIntent;
 import io.zeebe.protocol.intent.WorkflowInstanceIntent;
@@ -44,7 +43,6 @@ import io.zeebe.protocol.intent.WorkflowInstanceSubscriptionIntent;
 import io.zeebe.test.broker.protocol.clientapi.ClientApiRule;
 import io.zeebe.test.broker.protocol.clientapi.PartitionTestClient;
 import io.zeebe.test.util.record.RecordingExporter;
-import io.zeebe.util.buffer.BufferUtil;
 import java.util.List;
 import java.util.stream.Collectors;
 import org.agrona.DirectBuffer;
@@ -171,39 +169,6 @@ public class MessageCatchElementTest {
   }
 
   @Test
-  public void shouldOpenMessageSubscriptionsOnSamePartition() {
-    // given
-    final List<Integer> partitionIds = apiRule.getPartitionIds();
-
-    final String correlationKey = ""order-123"";
-
-    final PartitionTestClient workflowPartition = apiRule.partitionClient(partitionIds.get(0));
-    final PartitionTestClient subscriptionPartition =
-        apiRule.partitionClient(getPartitionId(correlationKey));
-
-    testClient.deploy(CATCH_EVENT_WORKFLOW);
-
-    // when
-    final long workflowInstanceKey1 =
-        workflowPartition.createWorkflowInstance(PROCESS_ID, asMsgPack(""orderId"", correlationKey));
-
-    final long workflowInstanceKey2 =
-        workflowPartition.createWorkflowInstance(PROCESS_ID, asMsgPack(""orderId"", correlationKey));
-
-    // then
-    final List<Record<MessageSubscriptionRecordValue>> subscriptions =
-        subscriptionPartition
-            .receiveMessageSubscriptions()
-            .withIntent(MessageSubscriptionIntent.OPENED)
-            .limit(2)
-            .collect(Collectors.toList());
-
-    assertThat(subscriptions)
-        .extracting(s -> s.getValue().getWorkflowInstanceKey())
-        .contains(workflowInstanceKey1, workflowInstanceKey2);
-  }
-
-  @Test
   public void shouldOpenWorkflowInstanceSubscription() {
     final long workflowInstanceKey =
         testClient.createWorkflowInstance(PROCESS_ID, asMsgPack(""orderId"", ""order-123""));
@@ -352,10 +317,4 @@ public class MessageCatchElementTest {
                 .exists())
         .isTrue();
   }
-
-  private int getPartitionId(final String correlationKey) {
-    final List<Integer> partitionIds = apiRule.getPartitionIds();
-    return SubscriptionUtil.getSubscriptionPartitionId(
-        BufferUtil.wrapString(correlationKey), partitionIds.size());
-  }
 }
diff --git a/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCorrelationMultiplePartitionsTest.java b/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCorrelationMultiplePartitionsTest.java
new file mode 100644
index 0000000..cf8261a
--- /dev/null
+++ b/broker-core/src/test/java/io/zeebe/broker/workflow/message/MessageCorrelationMultiplePartitionsTest.java
@@ -0,0 +1,134 @@
+/*
+ * Zeebe Broker Core
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package io.zeebe.broker.workflow.message;
+
+import static io.zeebe.broker.test.EmbeddedBrokerConfigurator.setPartitionCount;
+import static io.zeebe.test.util.MsgPackUtil.asMsgPack;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
+
+import io.zeebe.broker.test.EmbeddedBrokerRule;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.protocol.impl.SubscriptionUtil;
+import io.zeebe.protocol.intent.MessageSubscriptionIntent;
+import io.zeebe.protocol.intent.WorkflowInstanceIntent;
+import io.zeebe.test.broker.protocol.clientapi.ClientApiRule;
+import io.zeebe.test.broker.protocol.clientapi.PartitionTestClient;
+import io.zeebe.test.util.record.RecordingExporter;
+import io.zeebe.util.buffer.BufferUtil;
+import java.util.List;
+import java.util.stream.IntStream;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+
+public class MessageCorrelationMultiplePartitionsTest {
+
+  private static final String CORRELATION_KEY_PARTITION_0 = ""item-2"";
+  private static final String CORRELATION_KEY_PARTITION_1 = ""item-1"";
+  private static final String CORRELATION_KEY_PARTITION_2 = ""item-0"";
+
+  private static final String PROCESS_ID = ""process"";
+
+  private static final BpmnModelInstance WORKFLOW =
+      Bpmn.createExecutableProcess(PROCESS_ID)
+          .startEvent()
+          .intermediateCatchEvent(""receive-message"")
+          .message(m -> m.name(""message"").zeebeCorrelationKey(""$.key""))
+          .endEvent(""end"")
+          .done();
+
+  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule(setPartitionCount(3));
+
+  public ClientApiRule apiRule = new ClientApiRule(brokerRule::getClientAddress);
+
+  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(apiRule);
+
+  private PartitionTestClient testClient;
+
+  @Before
+  public void init() {
+    assertThat(getPartitionId(CORRELATION_KEY_PARTITION_0)).isEqualTo(0);
+    assertThat(getPartitionId(CORRELATION_KEY_PARTITION_1)).isEqualTo(1);
+    assertThat(getPartitionId(CORRELATION_KEY_PARTITION_2)).isEqualTo(2);
+
+    testClient = apiRule.partitionClient();
+
+    testClient.deploy(WORKFLOW);
+  }
+
+  @Test
+  public void shouldOpenMessageSubscriptionsOnDifferentPartitions() {
+    // when
+    IntStream.range(0, 10)
+        .forEach(
+            i -> {
+              testClient.createWorkflowInstance(
+                  PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_0));
+              testClient.createWorkflowInstance(
+                  PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_1));
+              testClient.createWorkflowInstance(
+                  PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_2));
+            });
+
+    // then
+    assertThat(
+            RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED)
+                .limit(30))
+        .extracting(r -> tuple(r.getMetadata().getPartitionId(), r.getValue().getCorrelationKey()))
+        .containsOnly(
+            tuple(0, CORRELATION_KEY_PARTITION_0),
+            tuple(1, CORRELATION_KEY_PARTITION_1),
+            tuple(2, CORRELATION_KEY_PARTITION_2));
+  }
+
+  @Test
+  public void shouldCorrelateMessageOnDifferentPartitions() {
+    // given
+    apiRule
+        .partitionClient(0)
+        .publishMessage(""message"", CORRELATION_KEY_PARTITION_0, asMsgPack(""p"", ""p0""));
+    apiRule
+        .partitionClient(1)
+        .publishMessage(""message"", CORRELATION_KEY_PARTITION_1, asMsgPack(""p"", ""p1""));
+    apiRule
+        .partitionClient(2)
+        .publishMessage(""message"", CORRELATION_KEY_PARTITION_2, asMsgPack(""p"", ""p2""));
+
+    // when
+    testClient.createWorkflowInstance(PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_0));
+    testClient.createWorkflowInstance(PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_1));
+    testClient.createWorkflowInstance(PROCESS_ID, asMsgPack(""key"", CORRELATION_KEY_PARTITION_2));
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.END_EVENT_OCCURRED)
+                .withElementId(""end"")
+                .limit(3))
+        .extracting(r -> r.getValue().getPayloadAsMap().get(""p""))
+        .contains(""p0"", ""p1"", ""p2"");
+  }
+
+  private int getPartitionId(final String correlationKey) {
+    final List<Integer> partitionIds = apiRule.getPartitionIds();
+    return SubscriptionUtil.getSubscriptionPartitionId(
+        BufferUtil.wrapString(correlationKey), partitionIds.size());
+  }
+}
diff --git a/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/PartitionTestClient.java b/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/PartitionTestClient.java
index dac11a2..e2b8397 100644
--- a/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/PartitionTestClient.java
+++ b/protocol-test-util/src/main/java/io/zeebe/test/broker/protocol/clientapi/PartitionTestClient.java
@@ -329,6 +329,7 @@ public class PartitionTestClient {
       final String messageName, final String correlationKey, final byte[] payload, final long ttl) {
     return apiRule
         .createCmdRequest()
+        .partitionId(partitionId)
         .type(ValueType.MESSAGE, MessageIntent.PUBLISH)
         .command()
         .put(""name"", messageName)
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
index 9a122d9..b7db67e 100644
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/startup/BrokerReprocessingTest.java
@@ -619,14 +619,9 @@ public class BrokerReprocessingTest {
   }
 
   @Test
-  public void shouldCorrelateMessageAfterRestartIfEnteredBeforeA() throws Exception {
+  public void shouldCorrelateMessageAfterRestartIfEnteredBefore() throws Exception {
     // given
-    clientRule
-        .getWorkflowClient()
-        .newDeployCommand()
-        .addWorkflowModel(WORKFLOW_MESSAGE, ""message.bpmn"")
-        .send()
-        .join();
+    deploy(WORKFLOW_MESSAGE, ""message.bpmn"");
 
     final long workflowInstanceKey =
         startWorkflowInstance(PROCESS_ID, singletonMap(""orderId"", ""order-123""))
@@ -658,12 +653,7 @@ public class BrokerReprocessingTest {
   @Test
   public void shouldCorrelateMessageAfterRestartIfPublishedBefore() throws Exception {
     // given
-    clientRule
-        .getWorkflowClient()
-        .newDeployCommand()
-        .addWorkflowModel(WORKFLOW_MESSAGE, ""message.bpmn"")
-        .send()
-        .join();
+    deploy(WORKFLOW_MESSAGE, ""message.bpmn"");
 
     publishMessage(""order canceled"", ""order-123"", singletonMap(""foo"", ""bar""));
     reprocessingTrigger.accept(this);
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/MessageCorrelationTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/MessageCorrelationTest.java
deleted file mode 100644
index c6a05fb..0000000
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/MessageCorrelationTest.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/*
- * Copyright © 2017 camunda services GmbH (info@camunda.com)
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.zeebe.broker.it.workflow;
-
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementActivated;
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementCompleted;
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertWorkflowInstanceCompleted;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.entry;
-
-import io.zeebe.broker.it.GrpcClientRule;
-import io.zeebe.broker.test.EmbeddedBrokerRule;
-import io.zeebe.client.api.events.DeploymentEvent;
-import io.zeebe.model.bpmn.Bpmn;
-import io.zeebe.model.bpmn.BpmnModelInstance;
-import java.util.Collections;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.RuleChain;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class MessageCorrelationTest {
-
-  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule();
-  public GrpcClientRule clientRule = new GrpcClientRule(brokerRule);
-
-  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(clientRule);
-
-  private static final BpmnModelInstance CATCH_EVENT_WORKFLOW =
-      Bpmn.createExecutableProcess(""wf"")
-          .startEvent()
-          .intermediateCatchEvent(""receive-message"")
-          .message(m -> m.name(""order canceled"").zeebeCorrelationKey(""$.orderId""))
-          .sequenceFlowId(""to-end"")
-          .endEvent()
-          .done();
-
-  private static final BpmnModelInstance RECEIVE_TASK_WORKFLOW =
-      Bpmn.createExecutableProcess(""wf"")
-          .startEvent()
-          .receiveTask(""receive-message"")
-          .message(m -> m.name(""order canceled"").zeebeCorrelationKey(""$.orderId""))
-          .sequenceFlowId(""to-end"")
-          .endEvent()
-          .done();
-
-  @Parameter(0)
-  public String elementType;
-
-  @Parameter(1)
-  public BpmnModelInstance workflow;
-
-  @Parameters(name = ""{0}"")
-  public static final Object[][] parameters() {
-    return new Object[][] {
-      {""intermediate message catch event"", CATCH_EVENT_WORKFLOW},
-      {""receive task"", RECEIVE_TASK_WORKFLOW}
-    };
-  }
-
-  @Before
-  public void init() {
-    final DeploymentEvent deploymentEvent =
-        clientRule
-            .getWorkflowClient()
-            .newDeployCommand()
-            .addWorkflowModel(workflow, ""wf.bpmn"")
-            .send()
-            .join();
-
-    clientRule.waitUntilDeploymentIsDone(deploymentEvent.getKey());
-  }
-
-  @Test
-  public void shouldCorrelateMessageIfEnteredBefore() {
-    // given
-    clientRule
-        .getWorkflowClient()
-        .newCreateInstanceCommand()
-        .bpmnProcessId(""wf"")
-        .latestVersion()
-        .payload(""{\""orderId\"":\""order-123\""}"")
-        .send()
-        .join();
-
-    assertElementActivated(""receive-message"");
-
-    // when
-    clientRule
-        .getWorkflowClient()
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .send()
-        .join();
-
-    // then
-    assertWorkflowInstanceCompleted(""wf"");
-  }
-
-  @Test
-  public void shouldCorrelateMessageIfPublishedBefore() {
-    // given
-    clientRule
-        .getWorkflowClient()
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .send()
-        .join();
-
-    // when
-    clientRule
-        .getWorkflowClient()
-        .newCreateInstanceCommand()
-        .bpmnProcessId(""wf"")
-        .latestVersion()
-        .payload(""{\""orderId\"":\""order-123\""}"")
-        .send()
-        .join();
-
-    // then
-    assertWorkflowInstanceCompleted(""wf"");
-  }
-
-  @Test
-  public void shouldCorrelateMessageAndMergePayload() {
-    // given
-    clientRule
-        .getWorkflowClient()
-        .newCreateInstanceCommand()
-        .bpmnProcessId(""wf"")
-        .latestVersion()
-        .payload(""{\""orderId\"":\""order-123\""}"")
-        .send()
-        .join();
-
-    // when
-    clientRule
-        .getWorkflowClient()
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .payload(Collections.singletonMap(""foo"", ""bar""))
-        .send()
-        .join();
-
-    // then
-    assertWorkflowInstanceCompleted(""wf"");
-
-    assertElementCompleted(
-        ""wf"",
-        ""receive-message"",
-        (catchEventOccurredEvent) ->
-            assertThat(catchEventOccurredEvent.getPayloadAsMap())
-                .containsExactly(entry(""orderId"", ""order-123""), entry(""foo"", ""bar"")));
-  }
-}
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/PublishMessageTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/PublishMessageTest.java
deleted file mode 100644
index 7845eec..0000000
--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/PublishMessageTest.java
+++ /dev/null
@@ -1,234 +0,0 @@
-/*
- * Copyright © 2017 camunda services GmbH (info@camunda.com)
- *
- * Licensed under the Apache License, Version 2.0 (the ""License"");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an ""AS IS"" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package io.zeebe.broker.it.workflow;
-
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementActivated;
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementCompleted;
-import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertWorkflowInstanceCompleted;
-import static io.zeebe.broker.test.EmbeddedBrokerConfigurator.setPartitionCount;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.assertj.core.api.Assertions.entry;
-
-import io.zeebe.broker.it.GrpcClientRule;
-import io.zeebe.broker.test.EmbeddedBrokerRule;
-import io.zeebe.client.api.ZeebeFuture;
-import io.zeebe.client.api.clients.WorkflowClient;
-import io.zeebe.client.api.events.DeploymentEvent;
-import io.zeebe.client.api.events.WorkflowInstanceEvent;
-import io.zeebe.client.cmd.ClientException;
-import io.zeebe.model.bpmn.Bpmn;
-import io.zeebe.model.bpmn.BpmnModelInstance;
-import java.time.Duration;
-import java.util.Collections;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.RuleChain;
-
-public class PublishMessageTest {
-
-  private static final BpmnModelInstance WORKFLOW =
-      Bpmn.createExecutableProcess(""wf"")
-          .startEvent()
-          .intermediateCatchEvent(""catch-event"")
-          .message(c -> c.name(""order canceled"").zeebeCorrelationKey(""$.orderId""))
-          .endEvent()
-          .done();
-  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule(setPartitionCount(3));
-  public GrpcClientRule clientRule = new GrpcClientRule(brokerRule);
-
-  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(clientRule);
-
-  private WorkflowClient workflowClient;
-
-  @Before
-  public void init() {
-
-    workflowClient = clientRule.getClient().workflowClient();
-
-    final DeploymentEvent deploymentEvent =
-        workflowClient.newDeployCommand().addWorkflowModel(WORKFLOW, ""wf.bpmn"").send().join();
-
-    clientRule.waitUntilDeploymentIsDone(deploymentEvent.getKey());
-  }
-
-  @Test
-  public void shouldCorrelateMessageToAllSubscriptions() {
-    // given
-    final WorkflowInstanceEvent wf =
-        workflowClient
-            .newCreateInstanceCommand()
-            .bpmnProcessId(""wf"")
-            .latestVersion()
-            .payload(""{\""orderId\"":\""order-123\""}"")
-            .send()
-            .join();
-
-    final WorkflowInstanceEvent wf2 =
-        workflowClient
-            .newCreateInstanceCommand()
-            .bpmnProcessId(""wf"")
-            .latestVersion()
-            .payload(""{\""orderId\"":\""order-123\""}"")
-            .send()
-            .join();
-
-    // when
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .send()
-        .join();
-
-    // then
-    assertWorkflowInstanceCompleted(""wf"", wf.getWorkflowInstanceKey());
-    assertWorkflowInstanceCompleted(""wf"", wf2.getWorkflowInstanceKey());
-  }
-
-  @Test
-  public void shouldCorrelateMessageWithZeroTTL() {
-    // given
-    workflowClient
-        .newCreateInstanceCommand()
-        .bpmnProcessId(""wf"")
-        .latestVersion()
-        .payload(""{\""orderId\"":\""order-123\""}"")
-        .send()
-        .join();
-
-    assertElementActivated(""catch-event"");
-
-    // when
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .timeToLive(Duration.ZERO)
-        .send()
-        .join();
-
-    // then
-    assertElementCompleted(""wf"", ""catch-event"");
-  }
-
-  @Test
-  public void shouldNotCorrelateMessageAfterTTL() {
-    // given
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .timeToLive(Duration.ZERO)
-        .payload(Collections.singletonMap(""msg"", ""failure""))
-        .send()
-        .join();
-
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .timeToLive(Duration.ofMinutes(1))
-        .payload(Collections.singletonMap(""msg"", ""expected""))
-        .send()
-        .join();
-
-    // when
-    workflowClient
-        .newCreateInstanceCommand()
-        .bpmnProcessId(""wf"")
-        .latestVersion()
-        .payload(""{\""orderId\"":\""order-123\""}"")
-        .send()
-        .join();
-
-    // then
-
-    assertElementCompleted(
-        ""wf"",
-        ""catch-event"",
-        (catchEventOccurred) ->
-            assertThat(catchEventOccurred.getPayloadAsMap()).contains(entry(""msg"", ""expected"")));
-  }
-
-  @Test
-  public void shouldCorrelateMessageOnDifferentPartitions() {
-    // given
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .send()
-        .join();
-
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-124"")
-        .send()
-        .join();
-
-    // when
-    final WorkflowInstanceEvent wf =
-        workflowClient
-            .newCreateInstanceCommand()
-            .bpmnProcessId(""wf"")
-            .latestVersion()
-            .payload(""{\""orderId\"":\""order-123\""}"")
-            .send()
-            .join();
-
-    final WorkflowInstanceEvent wf2 =
-        workflowClient
-            .newCreateInstanceCommand()
-            .bpmnProcessId(""wf"")
-            .latestVersion()
-            .payload(""{\""orderId\"":\""order-124\""}"")
-            .send()
-            .join();
-
-    // then
-    assertWorkflowInstanceCompleted(""wf"", wf.getWorkflowInstanceKey());
-    assertWorkflowInstanceCompleted(""wf"", wf2.getWorkflowInstanceKey());
-  }
-
-  @Test
-  public void shouldRejectMessageWithSameId() {
-    // given
-    workflowClient
-        .newPublishMessageCommand()
-        .messageName(""order canceled"")
-        .correlationKey(""order-123"")
-        .messageId(""foo"")
-        .send()
-        .join();
-
-    // when
-    final ZeebeFuture<Void> future =
-        workflowClient
-            .newPublishMessageCommand()
-            .messageName(""order canceled"")
-            .correlationKey(""order-123"")
-            .messageId(""foo"")
-            .send();
-
-    // then
-    assertThatThrownBy(future::join)
-        .isInstanceOf(ClientException.class)
-        .hasMessageContaining(""message with id 'foo' is already published"");
-  }
-}
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationMultiplePartitionsTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationMultiplePartitionsTest.java
new file mode 100644
index 0000000..0e37c95
--- /dev/null
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationMultiplePartitionsTest.java
@@ -0,0 +1,196 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.broker.it.workflow.message;
+
+import static io.zeebe.broker.test.EmbeddedBrokerConfigurator.setPartitionCount;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.tuple;
+
+import io.zeebe.broker.it.GrpcClientRule;
+import io.zeebe.broker.test.EmbeddedBrokerRule;
+import io.zeebe.client.api.events.DeploymentEvent;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import io.zeebe.protocol.intent.MessageIntent;
+import io.zeebe.protocol.intent.MessageSubscriptionIntent;
+import io.zeebe.protocol.intent.WorkflowInstanceIntent;
+import io.zeebe.test.util.record.RecordingExporter;
+import java.util.Collections;
+import java.util.stream.IntStream;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+
+public class MessageCorrelationMultiplePartitionsTest {
+
+  private static final String CORRELATION_KEY_PARTITION_0 = ""item-2"";
+  private static final String CORRELATION_KEY_PARTITION_1 = ""item-1"";
+  private static final String CORRELATION_KEY_PARTITION_2 = ""item-0"";
+
+  private static final String PROCESS_ID = ""process"";
+
+  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule(setPartitionCount(3));
+  public GrpcClientRule clientRule = new GrpcClientRule(brokerRule);
+
+  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(clientRule);
+
+  private static final BpmnModelInstance WORKFLOW =
+      Bpmn.createExecutableProcess(PROCESS_ID)
+          .startEvent()
+          .intermediateCatchEvent()
+          .message(m -> m.name(""message"").zeebeCorrelationKey(""$.key""))
+          .endEvent(""end"")
+          .done();
+
+  @Before
+  public void init() {
+    final DeploymentEvent deploymentEvent =
+        clientRule
+            .getWorkflowClient()
+            .newDeployCommand()
+            .addWorkflowModel(WORKFLOW, ""wf.bpmn"")
+            .send()
+            .join();
+
+    clientRule.waitUntilDeploymentIsDone(deploymentEvent.getKey());
+  }
+
+  @Test
+  public void shouldOpenMessageSubscriptionsOnDifferentPartitions() {
+    // when
+    IntStream.range(0, 10)
+        .forEach(
+            i -> {
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_0));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_1));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_2));
+            });
+
+    // then
+    assertThat(
+            RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED)
+                .limit(30))
+        .extracting(r -> tuple(r.getMetadata().getPartitionId(), r.getValue().getCorrelationKey()))
+        .containsOnly(
+            tuple(0, CORRELATION_KEY_PARTITION_0),
+            tuple(1, CORRELATION_KEY_PARTITION_1),
+            tuple(2, CORRELATION_KEY_PARTITION_2));
+  }
+
+  @Test
+  public void shouldPublishMessageOnDifferentPartitions() {
+    // when
+    IntStream.range(0, 10)
+        .forEach(
+            i -> {
+              publishMessage(CORRELATION_KEY_PARTITION_0, Collections.singletonMap(""p"", ""p0""));
+              publishMessage(CORRELATION_KEY_PARTITION_1, Collections.singletonMap(""p"", ""p1""));
+              publishMessage(CORRELATION_KEY_PARTITION_2, Collections.singletonMap(""p"", ""p2""));
+            });
+
+    // then
+    assertThat(RecordingExporter.messageRecords(MessageIntent.PUBLISHED).limit(30))
+        .extracting(r -> tuple(r.getMetadata().getPartitionId(), r.getValue().getCorrelationKey()))
+        .containsOnly(
+            tuple(0, CORRELATION_KEY_PARTITION_0),
+            tuple(1, CORRELATION_KEY_PARTITION_1),
+            tuple(2, CORRELATION_KEY_PARTITION_2));
+  }
+
+  @Test
+  public void shouldCorrelateMessageOnDifferentPartitions() {
+    // given
+    publishMessage(CORRELATION_KEY_PARTITION_0, Collections.singletonMap(""p"", ""p0""));
+    publishMessage(CORRELATION_KEY_PARTITION_1, Collections.singletonMap(""p"", ""p1""));
+    publishMessage(CORRELATION_KEY_PARTITION_2, Collections.singletonMap(""p"", ""p2""));
+
+    // when
+    createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_0));
+    createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_1));
+    createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_2));
+
+    // then
+    assertThat(
+            RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.END_EVENT_OCCURRED)
+                .withElementId(""end"")
+                .limit(3))
+        .extracting(r -> r.getValue().getPayloadAsMap().get(""p""))
+        .contains(""p0"", ""p1"", ""p2"");
+  }
+
+  @Test
+  public void shouldOpenMessageSubscriptionsOnSamePartitionsAfterRestart() {
+    // given
+    IntStream.range(0, 5)
+        .forEach(
+            i -> {
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_0));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_1));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_2));
+            });
+
+    assertThat(
+            RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED)
+                .limit(15)
+                .exists())
+        .isTrue();
+
+    // when
+    brokerRule.stopBroker();
+    brokerRule.startBroker();
+
+    IntStream.range(0, 5)
+        .forEach(
+            i -> {
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_0));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_1));
+              createWorkflowInstance(Collections.singletonMap(""key"", CORRELATION_KEY_PARTITION_2));
+            });
+
+    // then
+    assertThat(
+            RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED)
+                .limit(30))
+        .extracting(r -> tuple(r.getMetadata().getPartitionId(), r.getValue().getCorrelationKey()))
+        .containsOnly(
+            tuple(0, CORRELATION_KEY_PARTITION_0),
+            tuple(1, CORRELATION_KEY_PARTITION_1),
+            tuple(2, CORRELATION_KEY_PARTITION_2));
+  }
+
+  private void createWorkflowInstance(Object payload) {
+    clientRule
+        .getWorkflowClient()
+        .newCreateInstanceCommand()
+        .bpmnProcessId(PROCESS_ID)
+        .latestVersion()
+        .payload(payload)
+        .send()
+        .join();
+  }
+
+  private void publishMessage(String correlationKey, Object payload) {
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""message"")
+        .correlationKey(correlationKey)
+        .payload(payload)
+        .send()
+        .join();
+  }
+}
diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationTest.java
new file mode 100644
index 0000000..3b08572
--- /dev/null
+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/workflow/message/MessageCorrelationTest.java
@@ -0,0 +1,198 @@
+/*
+ * Copyright © 2017 camunda services GmbH (info@camunda.com)
+ *
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.zeebe.broker.it.workflow.message;
+
+import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementActivated;
+import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertElementCompleted;
+import static io.zeebe.broker.it.util.ZeebeAssertHelper.assertWorkflowInstanceCompleted;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Assertions.entry;
+
+import io.zeebe.broker.it.GrpcClientRule;
+import io.zeebe.broker.test.EmbeddedBrokerRule;
+import io.zeebe.client.api.ZeebeFuture;
+import io.zeebe.client.api.events.DeploymentEvent;
+import io.zeebe.client.cmd.ClientException;
+import io.zeebe.model.bpmn.Bpmn;
+import io.zeebe.model.bpmn.BpmnModelInstance;
+import java.time.Duration;
+import java.util.Collections;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.RuleChain;
+
+public class MessageCorrelationTest {
+
+  private static final String PROCESS_ID = ""process"";
+
+  public EmbeddedBrokerRule brokerRule = new EmbeddedBrokerRule();
+  public GrpcClientRule clientRule = new GrpcClientRule(brokerRule);
+
+  @Rule public RuleChain ruleChain = RuleChain.outerRule(brokerRule).around(clientRule);
+
+  private static final BpmnModelInstance WORKFLOW =
+      Bpmn.createExecutableProcess(PROCESS_ID)
+          .startEvent()
+          .intermediateCatchEvent(""catch-event"")
+          .message(c -> c.name(""order canceled"").zeebeCorrelationKey(""$.orderId""))
+          .endEvent()
+          .done();
+
+  @Before
+  public void init() {
+    final DeploymentEvent deploymentEvent =
+        clientRule
+            .getWorkflowClient()
+            .newDeployCommand()
+            .addWorkflowModel(WORKFLOW, ""wf.bpmn"")
+            .send()
+            .join();
+
+    clientRule.waitUntilDeploymentIsDone(deploymentEvent.getKey());
+  }
+
+  @Test
+  public void shouldCorrelateMessage() {
+    // given
+    clientRule
+        .getWorkflowClient()
+        .newCreateInstanceCommand()
+        .bpmnProcessId(PROCESS_ID)
+        .latestVersion()
+        .payload(Collections.singletonMap(""orderId"", ""order-123""))
+        .send()
+        .join();
+
+    // when
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""order canceled"")
+        .correlationKey(""order-123"")
+        .payload(Collections.singletonMap(""foo"", ""bar""))
+        .send()
+        .join();
+
+    // then
+    assertWorkflowInstanceCompleted(PROCESS_ID);
+
+    assertElementCompleted(
+        PROCESS_ID,
+        ""catch-event"",
+        (catchEventOccurredEvent) ->
+            assertThat(catchEventOccurredEvent.getPayloadAsMap())
+                .containsExactly(entry(""orderId"", ""order-123""), entry(""foo"", ""bar"")));
+  }
+
+  @Test
+  public void shouldCorrelateMessageWithZeroTTL() {
+    // given
+    clientRule
+        .getWorkflowClient()
+        .newCreateInstanceCommand()
+        .bpmnProcessId(PROCESS_ID)
+        .latestVersion()
+        .payload(Collections.singletonMap(""orderId"", ""order-123""))
+        .send()
+        .join();
+
+    assertElementActivated(""catch-event"");
+
+    // when
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""order canceled"")
+        .correlationKey(""order-123"")
+        .timeToLive(Duration.ZERO)
+        .send()
+        .join();
+
+    // then
+    assertElementCompleted(PROCESS_ID, ""catch-event"");
+  }
+
+  @Test
+  public void shouldNotCorrelateMessageAfterTTL() {
+    // given
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""order canceled"")
+        .correlationKey(""order-123"")
+        .timeToLive(Duration.ZERO)
+        .payload(Collections.singletonMap(""msg"", ""failure""))
+        .send()
+        .join();
+
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""order canceled"")
+        .correlationKey(""order-123"")
+        .timeToLive(Duration.ofMinutes(1))
+        .payload(Collections.singletonMap(""msg"", ""expected""))
+        .send()
+        .join();
+
+    // when
+    clientRule
+        .getWorkflowClient()
+        .newCreateInstanceCommand()
+        .bpmnProcessId(PROCESS_ID)
+        .latestVersion()
+        .payload(Collections.singletonMap(""orderId"", ""order-123""))
+        .send()
+        .join();
+
+    // then
+    assertElementCompleted(
+        PROCESS_ID,
+        ""catch-event"",
+        (catchEventOccurred) ->
+            assertThat(catchEventOccurred.getPayloadAsMap()).contains(entry(""msg"", ""expected"")));
+  }
+
+  @Test
+  public void shouldRejectMessageWithSameId() {
+    // given
+    clientRule
+        .getWorkflowClient()
+        .newPublishMessageCommand()
+        .messageName(""order canceled"")
+        .correlationKey(""order-123"")
+        .messageId(""foo"")
+        .send()
+        .join();
+
+    // when
+    final ZeebeFuture<Void> future =
+        clientRule
+            .getWorkflowClient()
+            .newPublishMessageCommand()
+            .messageName(""order canceled"")
+            .correlationKey(""order-123"")
+            .messageId(""foo"")
+            .send();
+
+    // then
+    assertThatThrownBy(future::join)
+        .isInstanceOf(ClientException.class)
+        .hasMessageContaining(""message with id 'foo' is already published"");
+  }
+}

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
index f4a9569..97d81ed 100755
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/StreamProcessorTest.java
@@ -30,6 +30,7 @@ import io.camunda.zeebe.protocol.impl.record.UnifiedRecordValue;
 import io.camunda.zeebe.protocol.impl.record.value.processinstance.ProcessInstanceRecord;
 import io.camunda.zeebe.protocol.record.Record;
 import io.camunda.zeebe.protocol.record.RecordType;
+import io.camunda.zeebe.protocol.record.RejectionType;
 import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
 import io.camunda.zeebe.protocol.record.intent.ProcessInstanceIntent;
@@ -578,7 +579,7 @@ public final class StreamProcessorTest {
   }
 
   @Test
-  public void shouldNotWriteResponseOnFailedEventProcessing() {
+  public void shouldWriteResponseOnFailedEventProcessing() {
     // given
     streamProcessorRule.startTypedStreamProcessor(
         (processors, context) ->
@@ -607,14 +608,21 @@ public final class StreamProcessorTest {
         streamProcessorRule.getCommandResponseWriter();
 
     final InOrder inOrder = inOrder(commandResponseWriter);
-
+    // it doesn't send the staged command response
     inOrder.verify(commandResponseWriter, TIMEOUT.times(1)).key(3);
     inOrder
         .verify(commandResponseWriter, TIMEOUT.times(1))
         .intent(ProcessInstanceIntent.ELEMENT_COMPLETING);
     inOrder.verify(commandResponseWriter, TIMEOUT.times(1)).recordType(RecordType.EVENT);
     inOrder.verify(commandResponseWriter, TIMEOUT.times(1)).valueType(ValueType.PROCESS_INSTANCE);
-    inOrder.verify(commandResponseWriter, never()).tryWriteResponse(anyInt(), anyLong());
+    // instead, it sends a rejection response because of the failure
+    inOrder
+        .verify(commandResponseWriter, TIMEOUT.times(1))
+        .recordType(RecordType.COMMAND_REJECTION);
+    inOrder
+        .verify(commandResponseWriter, TIMEOUT.times(1))
+        .rejectionType(RejectionType.PROCESSING_ERROR);
+    inOrder.verify(commandResponseWriter, TIMEOUT.times(1)).tryWriteResponse(anyInt(), anyLong());
   }
 
   @Test

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java
new file mode 100644
index 0000000..ff6adaf
--- /dev/null
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/streamprocessor/ContinuouslyReplayTest.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
+ * one or more contributor license agreements. See the NOTICE file distributed
+ * with this work for additional information regarding copyright ownership.
+ * Licensed under the Zeebe Community License 1.1. You may not use this file
+ * except in compliance with the Zeebe Community License 1.1.
+ */
+package io.camunda.zeebe.engine.processing.streamprocessor;
+
+import io.camunda.zeebe.engine.state.ZbColumnFamilies;
+import io.camunda.zeebe.engine.util.EngineRule;
+import io.camunda.zeebe.engine.util.ListLogStorage;
+import io.camunda.zeebe.model.bpmn.Bpmn;
+import org.assertj.core.api.SoftAssertions;
+import org.awaitility.Awaitility;
+import org.junit.Rule;
+import org.junit.Test;
+
+public class ContinuouslyReplayTest {
+
+  private final ListLogStorage listLogStorage = new ListLogStorage();
+
+  @Rule
+  public final EngineRule replay =
+      EngineRule.withSharedStorage(listLogStorage).withContinuouslyReplay();
+
+  @Rule public final EngineRule processing = EngineRule.withSharedStorage(listLogStorage);
+
+  @Test
+  public void shouldEndUpWithTheSameState() {
+    // given
+
+    // when
+    processing
+        .deployment()
+        .withXmlResource(Bpmn.createExecutableProcess().startEvent().endEvent().done())
+        .deploy();
+
+    // then
+    assertStates();
+  }
+
+  private void assertStates() {
+    Awaitility.await(""await that the replay state is equal to the processing state"")
+        .untilAsserted(
+            () -> {
+              final var replayState = replay.collectState();
+              final var processingState = processing.collectState();
+
+              final var softly = new SoftAssertions();
+
+              processingState.entrySet().stream()
+                  .filter(entry -> entry.getKey() != ZbColumnFamilies.DEFAULT)
+                  // ignores transient states
+                  .filter(entry -> entry.getKey() != ZbColumnFamilies.KEY)
+                  // on followers we don't need to reset the key
+                  // this will happen anyway then on leader replay
+                  .forEach(
+                      entry -> {
+                        final var column = entry.getKey();
+                        final var processingEntries = entry.getValue();
+                        final var replayEntries = replayState.get(column);
+
+                        if (processingEntries.isEmpty()) {
+                          softly
+                              .assertThat(replayEntries)
+                              .describedAs(
+                                  ""The state column '%s' should be empty after replay"", column)
+                              .isEmpty();
+                        } else {
+                          softly
+                              .assertThat(replayEntries)
+                              .describedAs(
+                                  ""The state column '%s' has different entries after replay"",
+                                  column)
+                              .containsExactlyInAnyOrderEntriesOf(processingEntries);
+                        }
+                      });
+
+              softly.assertAll();
+            });
+  }
+}

diff --git a/journal/src/test/java/io/camunda/zeebe/journal/JournalTest.java b/journal/src/test/java/io/camunda/zeebe/journal/JournalTest.java
index 4b1bfe8..419561d 100644
--- a/journal/src/test/java/io/camunda/zeebe/journal/JournalTest.java
+++ b/journal/src/test/java/io/camunda/zeebe/journal/JournalTest.java
@@ -558,11 +558,14 @@ final class JournalTest {
         new RecordData(record.index(), record.asqn(), BufferUtil.cloneBuffer(record.data()));
 
     if (record instanceof PersistedJournalRecord p) {
-      return new PersistedJournalRecord(p.metadata(), data, p.serializedRecord());
+      return new PersistedJournalRecord(
+          p.metadata(), data, BufferUtil.cloneBuffer(p.serializedRecord()));
     }
 
     return new PersistedJournalRecord(
-        new RecordMetadata(record.checksum(), data.data().capacity()), data, null);
+        new RecordMetadata(record.checksum(), data.data().capacity()),
+        data,
+        BufferUtil.cloneBuffer(record.serializedRecord()));
   }
 
   private SegmentedJournal openJournal() {
diff --git a/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentedJournalTest.java b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentedJournalTest.java
index dc7a809..8e08ee8 100644
--- a/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentedJournalTest.java
+++ b/journal/src/test/java/io/camunda/zeebe/journal/file/SegmentedJournalTest.java
@@ -434,7 +434,7 @@ class SegmentedJournalTest {
                 firstRecord.index(),
                 firstRecord.asqn(),
                 BufferUtil.cloneBuffer(firstRecord.data())),
-            firstRecord.serializedRecord());
+            BufferUtil.cloneBuffer(firstRecord.serializedRecord()));
     journal.append(journalFactory.entry());
 
     // close the journal before corrupting the segment; since we ""flush"" when closing, we need to

diff --git a/engine/src/test/java/io/zeebe/engine/processing/bpmn/subprocess/InterruptingEventSubprocessTest.java b/engine/src/test/java/io/zeebe/engine/processing/bpmn/subprocess/InterruptingEventSubprocessTest.java
index 0c539b9..ffaead1 100644
--- a/engine/src/test/java/io/zeebe/engine/processing/bpmn/subprocess/InterruptingEventSubprocessTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processing/bpmn/subprocess/InterruptingEventSubprocessTest.java
@@ -334,22 +334,31 @@ public class InterruptingEventSubprocessTest {
             ""timer-event-subprocess"",
             s -> s.startEvent(""other-timer"").timerWithDuration(""P1D"").endEvent());
 
-    final long wfInstanceKey = createInstanceAndTriggerEvent(workflow(eventSubprocess));
+    final long wfInstanceKey = createInstanceAndWaitForTask(workflow(eventSubprocess));
+
+    RecordingExporter.messageSubscriptionRecords(MessageSubscriptionIntent.OPENED)
+        .withWorkflowInstanceKey(wfInstanceKey)
+        .withMessageName(""other-message"")
+        .await();
+
+    triggerEventSubprocess.accept(wfInstanceKey);
 
     // then
     assertThat(
-            RecordingExporter.messageSubscriptionRecords()
+            RecordingExporter.records()
+                .limitToWorkflowInstance(wfInstanceKey)
+                .messageSubscriptionRecords()
                 .withWorkflowInstanceKey(wfInstanceKey)
-                .withMessageName(""other-message"")
-                .limit(4))
+                .withMessageName(""other-message""))
         .extracting(Record::getIntent)
         .contains(MessageSubscriptionIntent.CLOSED);
 
     assertThat(
-            RecordingExporter.timerRecords()
+            RecordingExporter.records()
+                .limitToWorkflowInstance(wfInstanceKey)
+                .timerRecords()
                 .withWorkflowInstanceKey(wfInstanceKey)
-                .withHandlerNodeId(""other-timer"")
-                .limit(4))
+                .withHandlerNodeId(""other-timer""))
         .extracting(Record::getIntent)
         .contains(TimerIntent.CANCELED);
   }
diff --git a/engine/src/test/java/io/zeebe/engine/util/EngineRule.java b/engine/src/test/java/io/zeebe/engine/util/EngineRule.java
index 8576be5..50040f4 100644
--- a/engine/src/test/java/io/zeebe/engine/util/EngineRule.java
+++ b/engine/src/test/java/io/zeebe/engine/util/EngineRule.java
@@ -71,7 +71,7 @@ public final class EngineRule extends ExternalResource {
 
   private static final int PARTITION_ID = Protocol.DEPLOYMENT_PARTITION;
   private static final RecordingExporter RECORDING_EXPORTER = new RecordingExporter();
-  private StreamProcessorRule environmentRule;
+  private final StreamProcessorRule environmentRule;
   private final RecordingExporterTestWatcher recordingExporterTestWatcher =
       new RecordingExporterTestWatcher();
   private final int partitionCount;
@@ -80,7 +80,7 @@ public final class EngineRule extends ExternalResource {
 
   private final Int2ObjectHashMap<SubscriptionCommandMessageHandler> subscriptionHandlers =
       new Int2ObjectHashMap<>();
-  private final ExecutorService subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();
+  private ExecutorService subscriptionHandlerExecutor;
 
   private EngineRule(final int partitionCount) {
     this(partitionCount, false);
@@ -115,6 +115,8 @@ public final class EngineRule extends ExternalResource {
 
   @Override
   protected void before() {
+    subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();
+
     if (!explicitStart) {
       startProcessors();
     }
@@ -123,7 +125,6 @@ public final class EngineRule extends ExternalResource {
   @Override
   protected void after() {
     subscriptionHandlerExecutor.shutdown();
-    environmentRule = null;
     subscriptionHandlers.clear();
   }
 
diff --git a/engine/src/test/java/io/zeebe/engine/util/StreamProcessorRule.java b/engine/src/test/java/io/zeebe/engine/util/StreamProcessorRule.java
index 0f3da21..af6c50e 100755
--- a/engine/src/test/java/io/zeebe/engine/util/StreamProcessorRule.java
+++ b/engine/src/test/java/io/zeebe/engine/util/StreamProcessorRule.java
@@ -248,6 +248,7 @@ public final class StreamProcessorRule implements TestRule {
     @Override
     protected void after() {
       streams = null;
+      streamProcessingComposite = null;
     }
   }
 
diff --git a/test-util/src/main/java/io/zeebe/test/util/record/RecordStream.java b/test-util/src/main/java/io/zeebe/test/util/record/RecordStream.java
index 293df93..a3ede18 100644
--- a/test-util/src/main/java/io/zeebe/test/util/record/RecordStream.java
+++ b/test-util/src/main/java/io/zeebe/test/util/record/RecordStream.java
@@ -81,4 +81,9 @@ public final class RecordStream extends ExporterRecordStream<RecordValue, Record
     return new IncidentRecordStream(
         filter(r -> r.getValueType() == ValueType.INCIDENT).map(Record.class::cast));
   }
+
+  public MessageSubscriptionRecordStream messageSubscriptionRecords() {
+    return new MessageSubscriptionRecordStream(
+        filter(r -> r.getValueType() == ValueType.MESSAGE_SUBSCRIPTION).map(Record.class::cast));
+  }
 }

diff --git a/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java b/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
index c737105..2a3ec98 100644
--- a/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
+++ b/atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java
@@ -26,6 +26,7 @@ import static org.mockito.Mockito.when;
 import io.atomix.cluster.MemberId;
 import io.atomix.raft.impl.RaftContext;
 import io.atomix.raft.metrics.RaftReplicationMetrics;
+import io.atomix.raft.protocol.AppendRequest;
 import io.atomix.raft.protocol.AppendResponse;
 import io.atomix.raft.protocol.PersistedRaftRecord;
 import io.atomix.raft.protocol.ProtocolVersionHandler;
@@ -93,7 +94,7 @@ public class PassiveRoleTest {
             .withCommitIndex(1)
             .build();
 
-    when(log.append(any(PersistedRaftRecord.class)))
+    when(log.append(any(ReplicatableJournalRecord.class)))
         .thenThrow(new JournalException.InvalidChecksum(""expected""));
 
     // when
@@ -121,7 +122,7 @@ public class PassiveRoleTest {
             .withCommitIndex(2)
             .build();
 
-    when(log.append(any(PersistedRaftRecord.class)))
+    when(log.append(any(ReplicatableJournalRecord.class)))
         .thenReturn(mock(IndexedRaftLogEntry.class))
         .thenReturn(mock(IndexedRaftLogEntry.class));
 
@@ -151,7 +152,7 @@ public class PassiveRoleTest {
             .withCommitIndex(2)
             .build();
 
-    when(log.append(any(PersistedRaftRecord.class)))
+    when(log.append(any(ReplicatableJournalRecord.class)))
         .thenReturn(mock(IndexedRaftLogEntry.class))
         .thenThrow(new InvalidChecksum.InvalidChecksum(""expected""));
 
@@ -178,7 +179,7 @@ public class PassiveRoleTest {
             .withCommitIndex(2)
             .build();
 
-    when(log.append(any(PersistedRaftRecord.class)))
+    when(log.append(any(ReplicatableJournalRecord.class)))
         .thenThrow(new InvalidChecksum.InvalidChecksum(""expected""));
 
     // when
@@ -208,7 +209,7 @@ public class PassiveRoleTest {
             .withCommitIndex(3)
             .build();
 
-    when(log.append(any(PersistedRaftRecord.class)))
+    when(log.append(any(ReplicatableJournalRecord.class)))
         .thenReturn(mock(IndexedRaftLogEntry.class))
         .thenReturn(mock(IndexedRaftLogEntry.class))
         .thenThrow(new InvalidChecksum(""expected""));
@@ -220,4 +221,20 @@ public class PassiveRoleTest {
     // then
     verify(log, times(1)).flush();
   }
+
+  @Test
+  public void shouldAppendOldVersion() {
+    // given
+    final var entries = List.of(new PersistedRaftRecord(1, 1, 1, 1, new byte[1]));
+    final var request = new AppendRequest(2, ""a"", 0, 0, entries, 1);
+
+    when(log.append(any(PersistedRaftRecord.class))).thenReturn(mock(IndexedRaftLogEntry.class));
+
+    // when
+    final AppendResponse response =
+        role.handleAppend(ProtocolVersionHandler.transform(request)).join();
+
+    // then
+    assertThat(response.succeeded()).isTrue();
+  }
 }

diff --git a/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandCheckpointTest.java b/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandCheckpointTest.java
index 027a6b2..eee3781 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandCheckpointTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandCheckpointTest.java
@@ -28,7 +28,6 @@ import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.DeploymentIntent;
 import io.camunda.zeebe.protocol.record.intent.Intent;
 import io.camunda.zeebe.protocol.record.intent.management.CheckpointIntent;
-import java.util.function.Function;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Answers;
@@ -189,12 +188,7 @@ final class InterPartitionCommandCheckpointTest {
 
     final var messageCaptor = ArgumentCaptor.forClass(byte[].class);
     verify(communicationService)
-        .unicast(
-            eq(TOPIC_PREFIX + 1),
-            messageCaptor.capture(),
-            eq(Function.identity()),
-            any(),
-            eq(true));
+        .unicast(eq(TOPIC_PREFIX + 1), messageCaptor.capture(), any(), any(), eq(true));
     receiver.handleMessage(new MemberId(""0""), messageCaptor.getValue());
   }
 }
diff --git a/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverTest.java b/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverTest.java
index 312428b..cdc5e23 100644
--- a/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverTest.java
+++ b/broker/src/test/java/io/camunda/zeebe/broker/transport/partitionapi/InterPartitionCommandReceiverTest.java
@@ -28,7 +28,6 @@ import io.camunda.zeebe.protocol.record.RecordType;
 import io.camunda.zeebe.protocol.record.ValueType;
 import io.camunda.zeebe.protocol.record.intent.Intent;
 import io.camunda.zeebe.protocol.record.intent.MessageSubscriptionIntent;
-import java.util.function.Function;
 import org.agrona.ExpandableArrayBuffer;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.parallel.Execution;
@@ -246,7 +245,7 @@ final class InterPartitionCommandReceiverTest {
         .unicast(
             eq(TOPIC_PREFIX + receiverPartitionId),
             messageCaptor.capture(),
-            eq(Function.identity()),
+            any(),
             any(),
             eq(true));
 

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_1_1/DbMigrationStateTest.java b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_1_1/DbMigrationStateTest.java
index 76edfc5..7396018 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_1_1/DbMigrationStateTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/state/migration/to_1_1/DbMigrationStateTest.java
@@ -24,6 +24,7 @@ import io.camunda.zeebe.protocol.impl.record.value.message.ProcessMessageSubscri
 import io.camunda.zeebe.protocol.record.value.TenantOwned;
 import java.util.ArrayList;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 
@@ -117,6 +118,8 @@ public class DbMigrationStateTest {
   }
 
   @Test
+  @Disabled(
+      ""Broken because of Multi-Tenancy. Needs the data migration part of https://github.com/camunda/zeebe/issues/13289"")
   public void testMigrateProcessMessageSubscriptionSentTime() {
     // given database with legacy records
     final var legacySubscriptionState =

diff --git a/dist/src/main/java/io/camunda/zeebe/shared/management/BackupEndpoint.java b/dist/src/main/java/io/camunda/zeebe/shared/management/BackupEndpoint.java
index 829df96..a675472 100644
--- a/dist/src/main/java/io/camunda/zeebe/shared/management/BackupEndpoint.java
+++ b/dist/src/main/java/io/camunda/zeebe/shared/management/BackupEndpoint.java
@@ -41,7 +41,7 @@ import org.springframework.stereotype.Component;
 
 @Component
 @WebEndpoint(id = ""backups"", enableByDefault = false)
-final class BackupEndpoint {
+public final class BackupEndpoint {
   private final BackupApi api;
 
   @SuppressWarnings(""unused"") // used by Spring
diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/backup/BackupErrorResponseTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/backup/BackupErrorResponseTest.java
index 360b1c7..7fbef01 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/backup/BackupErrorResponseTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/backup/BackupErrorResponseTest.java
@@ -13,12 +13,10 @@ import io.camunda.zeebe.backup.s3.S3BackupConfig.Builder;
 import io.camunda.zeebe.backup.s3.S3BackupStore;
 import io.camunda.zeebe.broker.system.configuration.BrokerCfg;
 import io.camunda.zeebe.broker.system.configuration.backup.BackupStoreCfg.BackupStoreType;
-import io.camunda.zeebe.gateway.admin.backup.BackupAlreadyExistException;
-import io.camunda.zeebe.gateway.admin.backup.BackupRequestHandler;
 import io.camunda.zeebe.it.clustering.ClusteringRuleExtension;
 import io.camunda.zeebe.qa.util.testcontainers.MinioContainer;
+import io.camunda.zeebe.shared.management.BackupEndpoint;
 import java.time.Duration;
-import java.util.concurrent.ExecutionException;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -33,7 +31,8 @@ import org.testcontainers.junit.jupiter.Testcontainers;
 class BackupErrorResponseTest {
 
   @Container private static final MinioContainer S3 = new MinioContainer();
-  private BackupRequestHandler backupRequestHandler;
+  private BackupEndpoint backupEndpoint;
+
   private String bucketName;
 
   @RegisterExtension
@@ -83,7 +82,7 @@ class BackupErrorResponseTest {
 
   @BeforeEach
   void setup() {
-    backupRequestHandler = new BackupRequestHandler(clusteringRule.getGateway().getBrokerClient());
+    backupEndpoint = new BackupEndpoint(clusteringRule.getGateway().getBrokerClient());
     createBucket();
   }
 
@@ -99,12 +98,9 @@ class BackupErrorResponseTest {
   void shouldFailTakeBackupIfCheckpointAlreadyExists(
       final long existingCheckpoint, final long backupIdToTake) {
     // given
-    backupRequestHandler.takeBackup(existingCheckpoint).toCompletableFuture().join();
+    backupEndpoint.take(existingCheckpoint);
 
     // when - then
-    assertThat(backupRequestHandler.takeBackup(backupIdToTake))
-        .failsWithin(Duration.ofSeconds(30))
-        .withThrowableOfType(ExecutionException.class)
-        .withCauseInstanceOf(BackupAlreadyExistException.class);
+    assertThat(backupEndpoint.take(backupIdToTake).getStatus()).isEqualTo(409);
   }
 }

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SignalEventValidationTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SignalEventValidationTest.java
index 88aad9f..6656ced 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SignalEventValidationTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/deployment/model/validation/SignalEventValidationTest.java
@@ -106,7 +106,7 @@ public final class SignalEventValidationTest {
   }
 
   @Test
-  public void shouldRejectSignalEndEvent() {
+  public void shouldDeploySignalEndEvent() {
     // given
     final String processId = Strings.newRandomValidBpmnId();
 
@@ -119,17 +119,12 @@ public final class SignalEventValidationTest {
             .done();
 
     final Record<DeploymentRecordValue> deployment =
-        ENGINE.deployment().withXmlResource(processDefinition).expectRejection().deploy();
+        ENGINE.deployment().withXmlResource(processDefinition).deploy();
 
     // then
-    Assertions.assertThat(deployment)
-        .hasRejectionType(RejectionType.INVALID_ARGUMENT)
-        .hasRejectionReason(
-            """"""
-            Expected to deploy new resources, but encountered the following errors:
-            'process.xml': - Element: signal_end_event
-                - ERROR: Elements of type signal end event are currently not supported
-            """""");
+    assertThat(deployment.getKey())
+        .describedAs(""Support signal end event process deployment"")
+        .isNotNegative();
   }
 
   @Test

diff --git a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/CreateDeploymentTest.java b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/CreateDeploymentTest.java
index f36465b..6b6ab48 100644
--- a/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/CreateDeploymentTest.java
+++ b/qa/integration-tests/src/test/java/io/camunda/zeebe/it/client/command/CreateDeploymentTest.java
@@ -67,6 +67,49 @@ public final class CreateDeploymentTest {
   }
 
   @Test
+  public void shouldDeployDecisionModel() {
+    // given
+    final String resourceName = ""dmn/drg-force-user.dmn"";
+
+    // when
+    final DeploymentEvent result =
+        CLIENT_RULE
+            .getClient()
+            .newDeployCommand()
+            .addResourceFromClasspath(resourceName)
+            .send()
+            .join();
+
+    // then
+    assertThat(result.getKey()).isPositive();
+    assertThat(result.getDecisionRequirements()).hasSize(1);
+    assertThat(result.getDecisions()).hasSize(2);
+
+    final var decisionRequirements = result.getDecisionRequirements().get(0);
+    assertThat(decisionRequirements.getDmnDecisionRequirementsId()).isEqualTo(""force_users"");
+    assertThat(decisionRequirements.getDmnDecisionRequirementsName()).isEqualTo(""Force Users"");
+    assertThat(decisionRequirements.getVersion()).isEqualTo(1);
+    assertThat(decisionRequirements.getDecisionRequirementsKey()).isPositive();
+    assertThat(decisionRequirements.getResourceName()).isEqualTo(resourceName);
+
+    final var decision1 = result.getDecisions().get(0);
+    assertThat(decision1.getDmnDecisionId()).isEqualTo(""jedi_or_sith"");
+    assertThat(decision1.getDmnDecisionName()).isEqualTo(""Jedi or Sith"");
+    assertThat(decision1.getVersion()).isEqualTo(1);
+    assertThat(decision1.getDecisionKey()).isPositive();
+    assertThat(decision1.getDmnDecisionRequirementsId()).isEqualTo(""force_users"");
+    assertThat(decision1.getDecisionRequirementsKey()).isPositive();
+
+    final var decision2 = result.getDecisions().get(1);
+    assertThat(decision2.getDmnDecisionId()).isEqualTo(""force_user"");
+    assertThat(decision2.getDmnDecisionName()).isEqualTo(""Which force user?"");
+    assertThat(decision2.getVersion()).isEqualTo(1);
+    assertThat(decision2.getDecisionKey()).isPositive();
+    assertThat(decision2.getDmnDecisionRequirementsId()).isEqualTo(""force_users"");
+    assertThat(decision2.getDecisionRequirementsKey()).isPositive();
+  }
+
+  @Test
   public void shouldRejectDeployIfProcessIsInvalid() {
     // given
     final BpmnModelInstance process =
diff --git a/qa/integration-tests/src/test/resources/dmn/drg-force-user.dmn b/qa/integration-tests/src/test/resources/dmn/drg-force-user.dmn
new file mode 100644
index 0000000..8d55c55
--- /dev/null
+++ b/qa/integration-tests/src/test/resources/dmn/drg-force-user.dmn
@@ -0,0 +1,144 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<definitions xmlns=""https://www.omg.org/spec/DMN/20191111/MODEL/"" xmlns:dmndi=""https://www.omg.org/spec/DMN/20191111/DMNDI/"" xmlns:dc=""http://www.omg.org/spec/DMN/20180521/DC/"" xmlns:biodi=""http://bpmn.io/schema/dmn/biodi/2.0"" xmlns:di=""http://www.omg.org/spec/DMN/20180521/DI/"" id=""force_users"" name=""Force Users""  namespace=""http://camunda.org/schema/1.0/dmn"" exporter=""Camunda Modeler"" exporterVersion=""4.12.0"">
+  <decision id=""jedi_or_sith"" name=""Jedi or Sith"">
+    <decisionTable id=""DecisionTable_14n3bxx"">
+      <input id=""Input_1"" label=""Lightsaber color"" biodi:width=""192"">
+        <inputExpression id=""InputExpression_1"" typeRef=""string"">
+          <text>lightsaberColor</text>
+        </inputExpression>
+      </input>
+      <output id=""Output_1"" label=""Jedi or Sith"" name=""jedi_or_sith"" typeRef=""string"" biodi:width=""192"">
+        <outputValues id=""UnaryTests_0hj346a"">
+          <text>""Jedi"",""Sith""</text>
+        </outputValues>
+      </output>
+      <rule id=""DecisionRule_0zumznl"">
+        <inputEntry id=""UnaryTests_0leuxqi"">
+          <text>""blue""</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0c9vpz8"">
+          <text>""Jedi""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_1utwb1e"">
+        <inputEntry id=""UnaryTests_1v3sd4m"">
+          <text>""green""</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0tgh8k1"">
+          <text>""Jedi""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_1bwgcym"">
+        <inputEntry id=""UnaryTests_0n1ewm3"">
+          <text>""red""</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_19xnlkw"">
+          <text>""Sith""</text>
+        </outputEntry>
+      </rule>
+    </decisionTable>
+  </decision>
+  <decision id=""force_user"" name=""Which force user?"">
+    <informationRequirement id=""InformationRequirement_1o8esai"">
+      <requiredDecision href=""#jedi_or_sith"" />
+    </informationRequirement>
+    <decisionTable id=""DecisionTable_07g94t1"" hitPolicy=""FIRST"">
+      <input id=""InputClause_0qnqj25"" label=""Jedi or Sith"">
+        <inputExpression id=""LiteralExpression_00lcyt5"" typeRef=""string"">
+          <text>jedi_or_sith</text>
+        </inputExpression>
+        <inputValues id=""UnaryTests_1xjidd8"">
+          <text>""Jedi"",""Sith""</text>
+        </inputValues>
+      </input>
+      <input id=""InputClause_0k64hys"" label=""Body height"">
+        <inputExpression id=""LiteralExpression_0ib6fnk"" typeRef=""number"">
+          <text>height</text>
+        </inputExpression>
+      </input>
+      <output id=""OutputClause_0hhe1yo"" label=""Force user"" name=""force_user"" typeRef=""string"" />
+      <rule id=""DecisionRule_13zidc5"">
+        <inputEntry id=""UnaryTests_056skcq"">
+          <text>""Jedi""</text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_0l4xksq"">
+          <text>&gt; 190</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0hclhw3"">
+          <text>""Mace Windu""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_0uin2hk"">
+        <description></description>
+        <inputEntry id=""UnaryTests_16maepk"">
+          <text>""Jedi""</text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_0rv0nwf"">
+          <text>&gt; 180</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0t82c11"">
+          <text>""Obi-Wan Kenobi""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_0mpio0p"">
+        <inputEntry id=""UnaryTests_09eicyc"">
+          <text>""Jedi""</text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_1bekl8k"">
+          <text>&lt; 70</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_0brx3vt"">
+          <text>""Yoda""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_06paffx"">
+        <inputEntry id=""UnaryTests_1baiid4"">
+          <text>""Sith""</text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_0fcdq0i"">
+          <text>&gt; 200</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_02oibi4"">
+          <text>""Darth Vader""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_1ua4pcl"">
+        <inputEntry id=""UnaryTests_1s1h3nm"">
+          <text>""Sith""</text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_1pnvw8p"">
+          <text>&gt; 170</text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_1w1n2rc"">
+          <text>""Darth Sidius""</text>
+        </outputEntry>
+      </rule>
+      <rule id=""DecisionRule_00ew25e"">
+        <inputEntry id=""UnaryTests_07uxyug"">
+          <text></text>
+        </inputEntry>
+        <inputEntry id=""UnaryTests_1he6fym"">
+          <text></text>
+        </inputEntry>
+        <outputEntry id=""LiteralExpression_07i3sc8"">
+          <text>""unknown""</text>
+        </outputEntry>
+      </rule>
+    </decisionTable>
+  </decision>
+  <dmndi:DMNDI>
+    <dmndi:DMNDiagram>
+      <dmndi:DMNShape dmnElementRef=""jedi_or_sith"">
+        <dc:Bounds height=""80"" width=""180"" x=""160"" y=""280"" />
+      </dmndi:DMNShape>
+      <dmndi:DMNShape id=""DMNShape_1sb3tre"" dmnElementRef=""force_user"">
+        <dc:Bounds height=""80"" width=""180"" x=""280"" y=""80"" />
+      </dmndi:DMNShape>
+      <dmndi:DMNEdge id=""DMNEdge_0gt1p1u"" dmnElementRef=""InformationRequirement_1o8esai"">
+        <di:waypoint x=""250"" y=""280"" />
+        <di:waypoint x=""370"" y=""180"" />
+        <di:waypoint x=""370"" y=""160"" />
+      </dmndi:DMNEdge>
+    </dmndi:DMNDiagram>
+  </dmndi:DMNDI>
+</definitions>

diff --git a/zb-db/src/test/java/io/camunda/zeebe/db/impl/DbTenantAwareKeyColumnFamilyTest.java b/zb-db/src/test/java/io/camunda/zeebe/db/impl/DbTenantAwareKeyColumnFamilyTest.java
index bb39783..73f72c2 100644
--- a/zb-db/src/test/java/io/camunda/zeebe/db/impl/DbTenantAwareKeyColumnFamilyTest.java
+++ b/zb-db/src/test/java/io/camunda/zeebe/db/impl/DbTenantAwareKeyColumnFamilyTest.java
@@ -136,4 +136,157 @@ public final class DbTenantAwareKeyColumnFamilyTest {
 
     assertThat(zbString).isNull();
   }
+
+  @Test
+  void shouldUseForeachValue() {
+    // given
+    upsertKeyValuePair(123L, ""foo"", ""tenantId"");
+    upsertKeyValuePair(124L, ""bar"", ""tenantId"");
+    upsertKeyValuePair(125L, ""baz"", ""otherTenantId"");
+    upsertKeyValuePair(777L, ""jackpot"", ""tenantId"");
+    upsertKeyValuePair(888L, ""lastOne"", ""otherTenantId"");
+
+    // when
+    final var values = new ArrayList<>();
+    columnFamily.forEach((value) -> values.add(value.toString()));
+
+    // then
+    assertThat(values).containsExactly(""foo"", ""bar"", ""baz"", ""jackpot"", ""lastOne"");
+  }
+
+  @Test
+  void shouldUseForeachPair() {
+    // given
+    upsertKeyValuePair(123L, ""foo"", ""tenantId"");
+    upsertKeyValuePair(124L, ""bar"", ""tenantId"");
+    upsertKeyValuePair(125L, ""baz"", ""otherTenantId"");
+    upsertKeyValuePair(777L, ""jackpot"", ""tenantId"");
+    upsertKeyValuePair(888L, ""lastOne"", ""otherTenantId"");
+
+    // when
+    final var keys = new ArrayList<>();
+    final var values = new ArrayList<>();
+    final var tenants = new ArrayList<>();
+    columnFamily.forEach(
+        (key, value) -> {
+          keys.add(key.wrappedKey().getValue());
+          values.add(value.toString());
+          tenants.add(key.tenantKey().toString());
+        });
+
+    // then
+    assertThat(keys).containsExactly(123L, 124L, 125L, 777L, 888L);
+    assertThat(values).containsExactly(""foo"", ""bar"", ""baz"", ""jackpot"", ""lastOne"");
+    assertThat(tenants)
+        .containsExactly(""tenantId"", ""tenantId"", ""otherTenantId"", ""tenantId"", ""otherTenantId"");
+  }
+
+  @Test
+  void shouldUseWhileTrue() {
+    // given
+    upsertKeyValuePair(123L, ""foo"", ""tenantId"");
+    upsertKeyValuePair(777L, ""jackpot"", ""tenantId"");
+    upsertKeyValuePair(124L, ""bar"", ""tenantId"");
+    upsertKeyValuePair(888L, ""lastOne"", ""otherTenantId"");
+    upsertKeyValuePair(125L, ""baz"", ""otherTenantId"");
+
+    // when
+    final var keys = new ArrayList<>();
+    final var values = new ArrayList<>();
+    final var tenants = new ArrayList<>();
+    columnFamily.whileTrue(
+        (key, value) -> {
+          keys.add(key.wrappedKey().getValue());
+          values.add(value.toString());
+          tenants.add(key.tenantKey().toString());
+
+          return key.wrappedKey().getValue() != 125L;
+        });
+
+    // then
+    assertThat(keys).containsExactly(123L, 124L, 125L);
+    assertThat(values).containsExactly(""foo"", ""bar"", ""baz"");
+    assertThat(tenants).containsExactly(""tenantId"", ""tenantId"", ""otherTenantId"");
+  }
+
+  @Test
+  void shouldUseWhileTrueWithStartAt() {
+    // given
+    upsertKeyValuePair(123L, ""foo"", ""tenantId"");
+    upsertKeyValuePair(777L, ""jackpot"", ""tenantId"");
+    upsertKeyValuePair(124L, ""bar"", ""tenantId"");
+    upsertKeyValuePair(888L, ""lastOne"", ""otherTenantId"");
+    upsertKeyValuePair(125L, ""baz"", ""otherTenantId"");
+    final var startAtWrappedKey = new DbLong();
+    startAtWrappedKey.wrapLong(124L);
+    tenantKey.wrapString(""tenantId"");
+    final var startAt = new DbTenantAwareKey<>(tenantKey, startAtWrappedKey);
+
+    // when
+    final var keys = new ArrayList<>();
+    final var values = new ArrayList<>();
+    final var tenants = new ArrayList<>();
+    columnFamily.whileTrue(
+        startAt,
+        (key, value) -> {
+          keys.add(key.wrappedKey().getValue());
+          values.add(value.toString());
+          tenants.add(key.tenantKey().toString());
+
+          return key.wrappedKey().getValue() != 125L;
+        });
+
+    // then
+    assertThat(keys).containsExactly(124L, 125L);
+    assertThat(values).containsExactly(""bar"", ""baz"");
+    assertThat(tenants).containsExactly(""tenantId"", ""otherTenantId"");
+  }
+
+  @Test
+  void shouldUseWhileEqualPrefix() {
+    // given
+    upsertCompositeKeyValuePair(123L, 111L, ""foo"", ""tenantId"");
+    upsertCompositeKeyValuePair(321L, 333L, ""jackpot"", ""tenantId"");
+    upsertCompositeKeyValuePair(123L, 333L, ""bar"", ""tenantId"");
+    upsertCompositeKeyValuePair(321L, 222L, ""lastOne"", ""otherTenantId"");
+    upsertCompositeKeyValuePair(123L, 222L, ""baz"", ""otherTenantId"");
+    final var prefix = new DbLong();
+    prefix.wrapLong(123L);
+
+    // when
+    final var firstKeys = new ArrayList<>();
+    final var secondKeys = new ArrayList<>();
+    final var values = new ArrayList<>();
+    final var tenants = new ArrayList<>();
+    compositeColumnFamily.whileEqualPrefix(
+        prefix,
+        (key, value) -> {
+          firstKeys.add(key.wrappedKey().first().getValue());
+          secondKeys.add(key.wrappedKey().second().getValue());
+          values.add(value.toString());
+          tenants.add(key.tenantKey().toString());
+        });
+
+    // then
+    assertThat(firstKeys).containsExactly(123L, 123L, 123L);
+    assertThat(secondKeys).containsExactly(111L, 222L, 333L);
+    assertThat(values).containsExactly(""foo"", ""baz"", ""bar"");
+    assertThat(tenants).containsExactly(""tenantId"", ""otherTenantId"", ""tenantId"");
+  }
+
+  private void upsertKeyValuePair(final long key, final String value, final String tenantId) {
+    firstKey.wrapLong(key);
+    this.value.wrapString(value);
+    tenantKey.wrapString(tenantId);
+    columnFamily.upsert(tenantAwareKey, this.value);
+  }
+
+  private void upsertCompositeKeyValuePair(
+      final long firstKey, final long secondKey, final String value, final String tenantId) {
+    this.firstKey.wrapLong(firstKey);
+    this.secondKey.wrapLong(secondKey);
+    this.value.wrapString(value);
+    tenantKey.wrapString(tenantId);
+    compositeColumnFamily.upsert(compositeTenantAwareKey, this.value);
+  }
 }

diff --git a/util/src/test/java/io/zeebe/util/logging/StackdriverLayoutTest.java b/util/src/test/java/io/zeebe/util/logging/StackdriverLayoutTest.java
index cb8ada7..86f9f49 100644
--- a/util/src/test/java/io/zeebe/util/logging/StackdriverLayoutTest.java
+++ b/util/src/test/java/io/zeebe/util/logging/StackdriverLayoutTest.java
@@ -311,7 +311,6 @@ public final class StackdriverLayoutTest {
     final var jsonMap = readLoggedEvent();
     softly
         .assertThat(jsonMap)
-        .containsEntry(""thread"", currentThread.getName())
         .hasEntrySatisfying(
             ""context"",
             context ->
@@ -337,7 +336,6 @@ public final class StackdriverLayoutTest {
     final var jsonMap = readLoggedEvent();
     softly
         .assertThat(jsonMap)
-        .containsEntry(""logger"", logger.getName())
         .hasEntrySatisfying(
             ""context"",
             context ->
@@ -347,23 +345,6 @@ public final class StackdriverLayoutTest {
                     .containsEntry(""loggerName"", logger.getName()));
   }
 
-  @Deprecated(since = ""0.24.0"", forRemoval = true)
-  @Test
-  public void shouldBeBackwardsCompatibleWithStackdriverJSONLayout() throws IOException {
-    // when
-    logger.error(""Should appear as JSON formatted output"");
-
-    // then
-    final var jsonMap = readLoggedEvent();
-    softly
-        .assertThat(jsonMap)
-        .containsKeys(
-            ""logger"", ""message"", ""severity"", ""thread"", ""timestampNanos"", ""timestampSeconds"")
-        .containsEntry(""message"", ""Should appear as JSON formatted output"")
-        .containsEntry(""severity"", Severity.ERROR.name())
-        .containsEntry(""logger"", logger.getName());
-  }
-
   @Test
   public void shouldWriteLargeMessageWithoutOverflow() throws IOException {
     // given

diff --git a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceAnywhereTest.java b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceAnywhereTest.java
index ca4e34b..f1b9e52 100644
--- a/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceAnywhereTest.java
+++ b/engine/src/test/java/io/camunda/zeebe/engine/processing/processinstance/CreateProcessInstanceAnywhereTest.java
@@ -164,8 +164,8 @@ public class CreateProcessInstanceAnywhereTest {
                         s.embeddedSubProcess()
                             .startEvent()
                             .serviceTask(""task"", t -> t.zeebeJobType(""type""))
-                            .endEvent(""spend""))
-                .endEvent(""end"")
+                            .endEvent())
+                .endEvent()
                 .done())
         .deploy();
 
@@ -303,6 +303,79 @@ public class CreateProcessInstanceAnywhereTest {
                 ""task2"", BpmnElementType.SERVICE_TASK, ProcessInstanceIntent.ELEMENT_ACTIVATED));
   }
 
+  @Test
+  public void shouldActivateElementWithinNestedSubprocess() {
+    // Given
+    ENGINE
+        .deployment()
+        .withXmlResource(
+            Bpmn.createExecutableProcess(""process"")
+                .startEvent()
+                .subProcess(
+                    ""subprocess"",
+                    s ->
+                        s.embeddedSubProcess()
+                            .startEvent()
+                            .subProcess(
+                                ""nestedSubprocess"",
+                                ns ->
+                                    ns.embeddedSubProcess()
+                                        .startEvent()
+                                        .serviceTask(""task"", t -> t.zeebeJobType(""type""))
+                                        .endEvent())
+                            .endEvent())
+                .endEvent()
+                .done())
+        .deploy();
+
+    // When
+    final long key =
+        ENGINE
+            .processInstance()
+            .ofBpmnProcessId(""process"")
+            .withStartInstruction(newStartInstruction(""task""))
+            .create();
+
+    Assertions.assertThat(
+            RecordingExporter.jobRecords(JobIntent.CREATED)
+                .withProcessInstanceKey(key)
+                .limit(1)
+                .count())
+        .isEqualTo(1);
+    ENGINE.job().ofInstance(key).withType(""type"").complete();
+
+    // Then
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(key)
+                .withElementType(BpmnElementType.PROCESS)
+                .withIntent(ProcessInstanceIntent.ELEMENT_COMPLETED)
+                .limit(1))
+        .hasSize(1);
+
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(key)
+                .limitToProcessInstanceCompleted())
+        .extracting(record -> record.getValue().getBpmnElementType())
+        .doesNotContain(BpmnElementType.START_EVENT);
+
+    Assertions.assertThat(
+            RecordingExporter.processInstanceRecords()
+                .withProcessInstanceKey(key)
+                .limitToProcessInstanceCompleted())
+        .extracting(record -> record.getValue().getBpmnElementType(), Record::getIntent)
+        .containsSubsequence(
+            Tuple.tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            Tuple.tuple(BpmnElementType.PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            Tuple.tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            Tuple.tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            Tuple.tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            Tuple.tuple(BpmnElementType.SUB_PROCESS, ProcessInstanceIntent.ELEMENT_ACTIVATED),
+            Tuple.tuple(BpmnElementType.SERVICE_TASK, ProcessInstanceIntent.ELEMENT_ACTIVATING),
+            Tuple.tuple(BpmnElementType.SERVICE_TASK, ProcessInstanceIntent.ELEMENT_ACTIVATED));
+  }
+
   private ProcessInstanceCreationStartInstruction newStartInstruction(final String elementId) {
     return new ProcessInstanceCreationStartInstruction().setElementId(elementId);
   }

diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/boundary/BoundaryEventTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/boundary/BoundaryEventTest.java
index 9ffa1fa..4333db0 100644
--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/boundary/BoundaryEventTest.java
+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/boundary/BoundaryEventTest.java
@@ -114,12 +114,18 @@ public class BoundaryEventTest {
     ENGINE.deployment().withXmlResource(MULTIPLE_SEQUENCE_FLOWS).deploy();
     final long workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();
 
-    // when
     RecordingExporter.timerRecords()
         .withHandlerNodeId(""timer"")
         .withIntent(TimerIntent.CREATED)
         .withWorkflowInstanceKey(workflowInstanceKey)
         .getFirst();
+
+    RecordingExporter.jobRecords(JobIntent.CREATED)
+        .withType(""type"")
+        .withWorkflowInstanceKey(workflowInstanceKey)
+        .getFirst();
+
+    // when
     ENGINE.increaseTime(Duration.ofMinutes(1));
 
     // then
"
