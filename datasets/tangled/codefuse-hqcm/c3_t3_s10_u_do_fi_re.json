{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "fix",
      "refactor",
      "docs"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n\ndiff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\nindex 8329372811..f3427b3d1a 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n@@ -382,7 +382,7 @@ public class JmsProducer extends DefaultProducer {\n         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n-                if (out != null) {\n+                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {\n\ndiff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n\ndiff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\nindex 8329372811..f3427b3d1a 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n@@ -382,7 +382,7 @@ public class JmsProducer extends DefaultProducer {\n         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n-                if (out != null) {\n+                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        },
        {
          "change": "diff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java\nindex 79cb60e..a435de7 100755\n--- a/services/core/java/com/android/server/am/ActivityManagerService.java\n+++ b/services/core/java/com/android/server/am/ActivityManagerService.java\n@@ -8054,7 +8054,7 @@ public final class ActivityManagerService extends ActivityManagerNative\n                 checkedGrants = true;\n             }\n             userId = handleIncomingUser(callingPid, callingUid, userId,\n-                    false, ALLOW_NON_FULL_IN_PROFILE,\n+                    false, ALLOW_NON_FULL,\n                     \"checkContentProviderPermissionLocked \" + cpi.authority, null);\n             if (userId != tmpTargetUserId) {\n                 // When we actually went to determine the final targer user ID, this ended\n\ndiff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n\ndiff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java\nindex 79cb60e..a435de7 100755\n--- a/services/core/java/com/android/server/am/ActivityManagerService.java\n+++ b/services/core/java/com/android/server/am/ActivityManagerService.java\n@@ -8054,7 +8054,7 @@ public final class ActivityManagerService extends ActivityManagerNative\n                 checkedGrants = true;\n             }\n             userId = handleIncomingUser(callingPid, callingUid, userId,\n-                    false, ALLOW_NON_FULL_IN_PROFILE,\n+                    false, ALLOW_NON_FULL,\n                     \"checkContentProviderPermissionLocked \" + cpi.authority, null);\n             if (userId != tmpTargetUserId) {\n                 // When we actually went to determine the final targer user ID, this ended\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java\nindex 27ca62af..a7bd4ab 100644\n--- a/services/core/java/com/android/server/pm/PackageManagerService.java\n+++ b/services/core/java/com/android/server/pm/PackageManagerService.java\n@@ -16341,8 +16341,9 @@ public class PackageManagerService extends IPackageManager.Stub {\n                 for (int curUser : users) {\n                     long timeout = SystemClock.uptimeMillis() + 5000;\n                     synchronized (conn) {\n-                        long now = SystemClock.uptimeMillis();\n-                        while (conn.mContainerService == null && now < timeout) {\n+                        long now;\n+                        while (conn.mContainerService == null &&\n+                                (now = SystemClock.uptimeMillis()) < timeout) {\n                             try {\n                                 conn.wait(timeout - now);\n                             } catch (InterruptedException e) {\n\ndiff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java\nindex 27ca62af..a7bd4ab 100644\n--- a/services/core/java/com/android/server/pm/PackageManagerService.java\n+++ b/services/core/java/com/android/server/pm/PackageManagerService.java\n@@ -16341,8 +16341,9 @@ public class PackageManagerService extends IPackageManager.Stub {\n                 for (int curUser : users) {\n                     long timeout = SystemClock.uptimeMillis() + 5000;\n                     synchronized (conn) {\n-                        long now = SystemClock.uptimeMillis();\n-                        while (conn.mContainerService == null && now < timeout) {\n+                        long now;\n+                        while (conn.mContainerService == null &&\n+                                (now = SystemClock.uptimeMillis()) < timeout) {\n                             try {\n                                 conn.wait(timeout - now);\n                             } catch (InterruptedException e) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\nindex 2cac9aafa..3fa7798ed 100644\n--- a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n+++ b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n@@ -88,9 +88,8 @@ public class RosterItemProvider {\n         Connection con = null;\r\n         PreparedStatement pstmt = null;\r\n         try {\r\n-            con = DbConnectionManager.getConnection();\r\n-\r\n             long rosterID = SequenceManager.nextID(JiveConstants.ROSTER);\r\n+            con = DbConnectionManager.getConnection();\r\n             pstmt = con.prepareStatement(CREATE_ROSTER_ITEM);\r\n             pstmt.setString(1, username);\r\n             pstmt.setLong(2, rosterID);\r\n\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\nindex 2cac9aafa..3fa7798ed 100644\n--- a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n+++ b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n@@ -88,9 +88,8 @@ public class RosterItemProvider {\n         Connection con = null;\r\n         PreparedStatement pstmt = null;\r\n         try {\r\n-            con = DbConnectionManager.getConnection();\r\n-\r\n             long rosterID = SequenceManager.nextID(JiveConstants.ROSTER);\r\n+            con = DbConnectionManager.getConnection();\r\n             pstmt = con.prepareStatement(CREATE_ROSTER_ITEM);\r\n             pstmt.setString(1, username);\r\n             pstmt.setLong(2, rosterID);\r\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\nindex 1030114..ecccdc5 100644\n--- a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n+++ b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n@@ -503,9 +503,7 @@ public class StickyListHeadersListView extends FrameLayout {\n \tprivate int getHeaderOverlap(int position) {\n \t\tboolean isStartOfSection = isStartOfSection(position);\n \t\tif (!isStartOfSection) {\n-\t\t\tView header = mAdapter.getHeaderView(position, null, mList);\n-\t\t\theader.setLayoutParams(new ViewGroup.LayoutParams(\n-\t\t\t\t\tLayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n+\t\t\tView header = mAdapter.getView(position, null, mList);\n \n \t\t\tfinal int width = getWidth();\n \t\t\tfinal int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(\n\ndiff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n\ndiff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\nindex 1030114..ecccdc5 100644\n--- a/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n+++ b/library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java\n@@ -503,9 +503,7 @@ public class StickyListHeadersListView extends FrameLayout {\n \tprivate int getHeaderOverlap(int position) {\n \t\tboolean isStartOfSection = isStartOfSection(position);\n \t\tif (!isStartOfSection) {\n-\t\t\tView header = mAdapter.getHeaderView(position, null, mList);\n-\t\t\theader.setLayoutParams(new ViewGroup.LayoutParams(\n-\t\t\t\t\tLayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n+\t\t\tView header = mAdapter.getView(position, null, mList);\n \n \t\t\tfinal int width = getWidth();\n \t\t\tfinal int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n\ndiff --git a/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java b/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\nindex 806d2b0..b4871c6 100644\n--- a/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\n+++ b/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\n@@ -1065,7 +1065,7 @@ public class ObjectiveCImplementationGenerator extends ObjectiveCSourceFileGener\n     } else if (value instanceof String) {\n       StringLiteral node = ast.newStringLiteral();\n       node.setLiteralValue((String) value);\n-      printf(StatementGenerator.generateStringLiteral(node));\n+      print(StatementGenerator.generateStringLiteral(node));\n     } else if (value instanceof Number || value instanceof Character || value instanceof Boolean) {\n       print(value.toString());\n     } else if (value.getClass().isArray()) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java b/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\nindex 806d2b0..b4871c6 100644\n--- a/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\n+++ b/translator/src/main/java/com/google/devtools/j2objc/gen/ObjectiveCImplementationGenerator.java\n@@ -1065,7 +1065,7 @@ public class ObjectiveCImplementationGenerator extends ObjectiveCSourceFileGener\n     } else if (value instanceof String) {\n       StringLiteral node = ast.newStringLiteral();\n       node.setLiteralValue((String) value);\n-      printf(StatementGenerator.generateStringLiteral(node));\n+      print(StatementGenerator.generateStringLiteral(node));\n     } else if (value instanceof Number || value instanceof Character || value instanceof Boolean) {\n       print(value.toString());\n     } else if (value.getClass().isArray()) {\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/tomcat/util/file/ConfigFileLoader.java b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\nindex 1f1f4039d..1b0b63da0 100644\n--- a/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n+++ b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n@@ -33,7 +33,7 @@ public class ConfigFileLoader {\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        File catalinaBase = new File(\"\");\n+        File catalinaBase = new File(System.getProperty(\"catalina.base\"));\n         CATALINA_BASE_URI = catalinaBase.toURI();\n     }\n \n\ndiff --git a/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java b/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\nindex 4c89b33..d82921a 100644\n--- a/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\n+++ b/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\n@@ -51,7 +51,8 @@ public class BuildOutputConsumerImpl implements BuildOutputConsumer {\n     for (File outputRoot : myOutputs) {\n       String outputRootPath = FileUtil.toSystemIndependentName(outputRoot.getPath());\n       final String relativePath = FileUtil.getRelativePath(outputRootPath, outputFilePath, '/');\n-      if (relativePath != null) {\n+      if (relativePath != null && !relativePath.startsWith(\"..\")) {\n+        // the relative path must be under the root or equal to it\n         myFileGeneratedEvent.add(outputRootPath, relativePath);\n       }\n     }\n\ndiff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/ConfigFileLoader.java b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\nindex 1f1f4039d..1b0b63da0 100644\n--- a/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n+++ b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n@@ -33,7 +33,7 @@ public class ConfigFileLoader {\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        File catalinaBase = new File(\"\");\n+        File catalinaBase = new File(System.getProperty(\"catalina.base\"));\n         CATALINA_BASE_URI = catalinaBase.toURI();\n     }\n \n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java b/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\nindex 4c89b33..d82921a 100644\n--- a/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\n+++ b/jps/jps-builders/src/org/jetbrains/jps/builders/impl/BuildOutputConsumerImpl.java\n@@ -51,7 +51,8 @@ public class BuildOutputConsumerImpl implements BuildOutputConsumer {\n     for (File outputRoot : myOutputs) {\n       String outputRootPath = FileUtil.toSystemIndependentName(outputRoot.getPath());\n       final String relativePath = FileUtil.getRelativePath(outputRootPath, outputFilePath, '/');\n-      if (relativePath != null) {\n+      if (relativePath != null && !relativePath.startsWith(\"..\")) {\n+        // the relative path must be under the root or equal to it\n         myFileGeneratedEvent.add(outputRootPath, relativePath);\n       }\n     }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\nindex 463d3f5c..14cd327e 100644\n--- a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n+++ b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n@@ -63,7 +63,7 @@ public class HeliosSoloDeployment implements HeliosDeployment {\n \n   public static final String BOOT2DOCKER_SIGNATURE = \"Boot2Docker\";\n   public static final String PROBE_IMAGE = \"onescience/alpine:latest\";\n-  public static final String HELIOS_NAME_PREFIX = \"solo.local.\";\n+  public static final String HELIOS_NAME_SUFFIX = \".solo.local\"; //  Required for SkyDNS discovery.\n   public static final String HELIOS_CONTAINER_PREFIX = \"helios-solo-container-\";\n   public static final int HELIOS_MASTER_PORT = 5801;\n \n@@ -270,7 +270,7 @@ public class HeliosSoloDeployment implements HeliosDeployment {\n     //TODO(negz): Don't make this.env immutable so early?\n     final List<String> env = new ArrayList<>();\n     env.addAll(this.env);\n-    env.add(\"HELIOS_NAME=\" + HELIOS_NAME_PREFIX + this.namespace);\n+    env.add(\"HELIOS_NAME=\" + this.namespace + HELIOS_NAME_SUFFIX);\n     env.add(\"HOST_ADDRESS=\" + heliosHost);\n \n     final String heliosPort = String.format(\"%d/tcp\", HELIOS_MASTER_PORT);\n\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\nindex 3f32b0b757..6171c03cda 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n@@ -98,14 +98,9 @@ public class ApiComponentGeneratorMojo extends AbstractApiMethodBaseMojo {\n                     }\n                 }\n \n-                // if set, merge common aliases with proxy's aliases\n-                if (!aliases.isEmpty()) {\n-                    final List<ApiMethodAlias> apiAliases = api.getAliases();\n-                    if (apiAliases.isEmpty()) {\n-                        api.setAliases(aliases);\n-                    } else {\n-                        apiAliases.addAll(aliases);\n-                    }\n+                // set common aliases if needed\n+                if (!aliases.isEmpty() && api.getAliases().isEmpty()) {\n+                    api.setAliases(aliases);\n                 }\n             }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\nindex 463d3f5c..14cd327e 100644\n--- a/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n+++ b/helios-testing/src/main/java/com/spotify/helios/testing/HeliosSoloDeployment.java\n@@ -63,7 +63,7 @@ public class HeliosSoloDeployment implements HeliosDeployment {\n \n   public static final String BOOT2DOCKER_SIGNATURE = \"Boot2Docker\";\n   public static final String PROBE_IMAGE = \"onescience/alpine:latest\";\n-  public static final String HELIOS_NAME_PREFIX = \"solo.local.\";\n+  public static final String HELIOS_NAME_SUFFIX = \".solo.local\"; //  Required for SkyDNS discovery.\n   public static final String HELIOS_CONTAINER_PREFIX = \"helios-solo-container-\";\n   public static final int HELIOS_MASTER_PORT = 5801;\n \n@@ -270,7 +270,7 @@ public class HeliosSoloDeployment implements HeliosDeployment {\n     //TODO(negz): Don't make this.env immutable so early?\n     final List<String> env = new ArrayList<>();\n     env.addAll(this.env);\n-    env.add(\"HELIOS_NAME=\" + HELIOS_NAME_PREFIX + this.namespace);\n+    env.add(\"HELIOS_NAME=\" + this.namespace + HELIOS_NAME_SUFFIX);\n     env.add(\"HOST_ADDRESS=\" + heliosHost);\n \n     final String heliosPort = String.format(\"%d/tcp\", HELIOS_MASTER_PORT);\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\nindex 3f32b0b757..6171c03cda 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n@@ -98,14 +98,9 @@ public class ApiComponentGeneratorMojo extends AbstractApiMethodBaseMojo {\n                     }\n                 }\n \n-                // if set, merge common aliases with proxy's aliases\n-                if (!aliases.isEmpty()) {\n-                    final List<ApiMethodAlias> apiAliases = api.getAliases();\n-                    if (apiAliases.isEmpty()) {\n-                        api.setAliases(aliases);\n-                    } else {\n-                        apiAliases.addAll(aliases);\n-                    }\n+                // set common aliases if needed\n+                if (!aliases.isEmpty() && api.getAliases().isEmpty()) {\n+                    api.setAliases(aliases);\n                 }\n             }\n \n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java b/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\nindex 4fc0f9328..f6b936d73 100644\n--- a/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\n+++ b/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\n@@ -105,10 +105,8 @@ class DisplayBookPopupAction extends FBAndroidAction {\n \t\t\t}\n \t\t});\n \n-\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n-\t\t\tdownloadButton.setTextColor(0xFF777777);\n-\t\t\tcancelButton.setTextColor(0xFF777777);\n-\t\t}\n+\t\tdownloadButton.setTextColor(0xFF777777);\n+\t\tcancelButton.setTextColor(0xFF777777);\n \n \t\tpopup.setOnDismissListener(new PopupWindow.OnDismissListener() {\n \t\t\tpublic void onDismiss() {\n\ndiff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\nindex 2ce37ae..399aa1b 100644\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,6 @@ package org.springframework.web.servlet.view.document;\n import java.io.OutputStream;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -34,9 +33,9 @@ import org.springframework.web.servlet.view.AbstractView;\n /**\n  * Convenient superclass for Excel document views.\n  *\n- * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>. More\n- * information on <i>JExcelAPI</i> can be found on their <a\n- * href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n+ * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>.\n+ * More information on <i>JExcelAPI</i> can be found on their\n+ * <a href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n  *\n  * <p>Properties:\n  * <ul>\n@@ -58,11 +57,11 @@ import org.springframework.web.servlet.view.AbstractView;\n  *\n  * <pre class=\"code\">\n  * protected void buildExcelDocument(\n- *      Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n- * \t\tHttpServletRequest request, HttpServletResponse response) {\n+ *     Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n+ *     HttpServletRequest request, HttpServletResponse response) {\n  *\n  * \t if (workbook.getNumberOfSheets() == 0) {\n- * \t     workbook.createSheet(&quot;Spring&quot;, 0);\n+ * \t   workbook.createSheet(&quot;Spring&quot;, 0);\n  *   }\n  *\n  * \t WritableSheet sheet = workbook.getSheet(&quot;Spring&quot;);\n@@ -70,7 +69,7 @@ import org.springframework.web.servlet.view.AbstractView;\n  * \t sheet.addCell(label);\n  * }</pre>\n  *\n- * The use of this view is close to the AbstractExcelView class,\n+ * The use of this view is close to the {@link AbstractExcelView} class,\n  * just using the JExcel API instead of the Apache POI API.\n  *\n  * @author Bram Smeets\n@@ -79,7 +78,10 @@ import org.springframework.web.servlet.view.AbstractView;\n  * @since 1.2.5\n  * @see AbstractExcelView\n  * @see AbstractPdfView\n+ * @deprecated as of Spring 4.0, since JExcelAPI is an abandoned project\n+ * (no release since 2009, with serious bugs remaining)\n  */\n+@Deprecated\n public abstract class AbstractJExcelView extends AbstractView {\n \n \t/** The content type for an Excel response */\n\ndiff --git a/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java b/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\nindex edf829d..253a4af 100644\n--- a/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\n+++ b/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\n@@ -1824,7 +1824,7 @@ public class DirectoryFragment extends Fragment {\n             // position by 1.\n             final int originalPos = position;\n             final int size = mMarkedForDeletion.size();\n-            for (int i = 0; i <= size; ++i) {\n+            for (int i = 0; i < size; ++i) {\n                 // It'd be more concise, but less efficient, to iterate over positions while calling\n                 // mMarkedForDeletion.get.  Instead, iterate over deleted entries.\n                 if (mMarkedForDeletion.keyAt(i) <= position && mMarkedForDeletion.valueAt(i)) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java b/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\nindex 4fc0f9328..f6b936d73 100644\n--- a/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\n+++ b/src/org/geometerplus/android/fbreader/DisplayBookPopupAction.java\n@@ -105,10 +105,8 @@ class DisplayBookPopupAction extends FBAndroidAction {\n \t\t\t}\n \t\t});\n \n-\t\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n-\t\t\tdownloadButton.setTextColor(0xFF777777);\n-\t\t\tcancelButton.setTextColor(0xFF777777);\n-\t\t}\n+\t\tdownloadButton.setTextColor(0xFF777777);\n+\t\tcancelButton.setTextColor(0xFF777777);\n \n \t\tpopup.setOnDismissListener(new PopupWindow.OnDismissListener() {\n \t\t\tpublic void onDismiss() {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\nindex 2ce37ae..399aa1b 100644\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,6 @@ package org.springframework.web.servlet.view.document;\n import java.io.OutputStream;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -34,9 +33,9 @@ import org.springframework.web.servlet.view.AbstractView;\n /**\n  * Convenient superclass for Excel document views.\n  *\n- * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>. More\n- * information on <i>JExcelAPI</i> can be found on their <a\n- * href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n+ * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>.\n+ * More information on <i>JExcelAPI</i> can be found on their\n+ * <a href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n  *\n  * <p>Properties:\n  * <ul>\n@@ -58,11 +57,11 @@ import org.springframework.web.servlet.view.AbstractView;\n  *\n  * <pre class=\"code\">\n  * protected void buildExcelDocument(\n- *      Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n- * \t\tHttpServletRequest request, HttpServletResponse response) {\n+ *     Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n+ *     HttpServletRequest request, HttpServletResponse response) {\n  *\n  * \t if (workbook.getNumberOfSheets() == 0) {\n- * \t     workbook.createSheet(&quot;Spring&quot;, 0);\n+ * \t   workbook.createSheet(&quot;Spring&quot;, 0);\n  *   }\n  *\n  * \t WritableSheet sheet = workbook.getSheet(&quot;Spring&quot;);\n@@ -70,7 +69,7 @@ import org.springframework.web.servlet.view.AbstractView;\n  * \t sheet.addCell(label);\n  * }</pre>\n  *\n- * The use of this view is close to the AbstractExcelView class,\n+ * The use of this view is close to the {@link AbstractExcelView} class,\n  * just using the JExcel API instead of the Apache POI API.\n  *\n  * @author Bram Smeets\n@@ -79,7 +78,10 @@ import org.springframework.web.servlet.view.AbstractView;\n  * @since 1.2.5\n  * @see AbstractExcelView\n  * @see AbstractPdfView\n+ * @deprecated as of Spring 4.0, since JExcelAPI is an abandoned project\n+ * (no release since 2009, with serious bugs remaining)\n  */\n+@Deprecated\n public abstract class AbstractJExcelView extends AbstractView {\n \n \t/** The content type for an Excel response */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java b/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\nindex edf829d..253a4af 100644\n--- a/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\n+++ b/packages/DocumentsUI/src/com/android/documentsui/DirectoryFragment.java\n@@ -1824,7 +1824,7 @@ public class DirectoryFragment extends Fragment {\n             // position by 1.\n             final int originalPos = position;\n             final int size = mMarkedForDeletion.size();\n-            for (int i = 0; i <= size; ++i) {\n+            for (int i = 0; i < size; ++i) {\n                 // It'd be more concise, but less efficient, to iterate over positions while calling\n                 // mMarkedForDeletion.get.  Instead, iterate over deleted entries.\n                 if (mMarkedForDeletion.keyAt(i) <= position && mMarkedForDeletion.valueAt(i)) {\n",
          "label": "fix"
        }
      ]
    }
  ]
}