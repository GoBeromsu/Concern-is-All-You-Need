{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "cicd",
      "build",
      "docs",
      "test",
      "feat"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/main/java/zmq/Poller.java b/src/main/java/zmq/Poller.java\nindex f7575ae..8f20548 100644\n--- a/src/main/java/zmq/Poller.java\n+++ b/src/main/java/zmq/Poller.java\n@@ -167,6 +167,7 @@ public class Poller extends PollerBase implements Runnable\n     public void start()\n     {\n         worker = new Thread(this, name);\n+        worker.setDaemon(true);\n         worker.start();\n     }\n \n\ndiff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/zmq/Poller.java b/src/main/java/zmq/Poller.java\nindex f7575ae..8f20548 100644\n--- a/src/main/java/zmq/Poller.java\n+++ b/src/main/java/zmq/Poller.java\n@@ -167,6 +167,7 @@ public class Poller extends PollerBase implements Runnable\n     public void start()\n     {\n         worker = new Thread(this, name);\n+        worker.setDaemon(true);\n         worker.start();\n     }\n \n",
          "label": "feat"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n\ndiff --git a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\nindex 76b2e1a..8170383 100644\n--- a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\n+++ b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\n@@ -25,6 +25,7 @@ import org.elasticsearch.action.bulk.BulkItemResponse;\n import org.elasticsearch.action.bulk.BulkRequest;\n import org.elasticsearch.action.bulk.BulkResponse;\n import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.delete.DeleteResponse;\n import org.elasticsearch.action.support.replication.ReplicationType;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.client.Requests;\n@@ -125,6 +126,9 @@ public class RestBulkAction extends BaseRestHandler {\n                                 }\n                                 builder.endArray();\n                             }\n+                        } else if (itemResponse.getResponse() instanceof DeleteResponse) {\n+                            DeleteResponse deleteResponse = itemResponse.getResponse();\n+                            builder.field(Fields.FOUND, !deleteResponse.isNotFound());\n                         }\n                         builder.endObject();\n                         builder.endObject();\n@@ -159,6 +163,7 @@ public class RestBulkAction extends BaseRestHandler {\n         static final XContentBuilderString TOOK = new XContentBuilderString(\"took\");\n         static final XContentBuilderString _VERSION = new XContentBuilderString(\"_version\");\n         static final XContentBuilderString MATCHES = new XContentBuilderString(\"matches\");\n+        static final XContentBuilderString FOUND = new XContentBuilderString(\"found\");\n     }\n \n }\n\ndiff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\nindex 76b2e1a..8170383 100644\n--- a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\n+++ b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java\n@@ -25,6 +25,7 @@ import org.elasticsearch.action.bulk.BulkItemResponse;\n import org.elasticsearch.action.bulk.BulkRequest;\n import org.elasticsearch.action.bulk.BulkResponse;\n import org.elasticsearch.action.index.IndexResponse;\n+import org.elasticsearch.action.delete.DeleteResponse;\n import org.elasticsearch.action.support.replication.ReplicationType;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.client.Requests;\n@@ -125,6 +126,9 @@ public class RestBulkAction extends BaseRestHandler {\n                                 }\n                                 builder.endArray();\n                             }\n+                        } else if (itemResponse.getResponse() instanceof DeleteResponse) {\n+                            DeleteResponse deleteResponse = itemResponse.getResponse();\n+                            builder.field(Fields.FOUND, !deleteResponse.isNotFound());\n                         }\n                         builder.endObject();\n                         builder.endObject();\n@@ -159,6 +163,7 @@ public class RestBulkAction extends BaseRestHandler {\n         static final XContentBuilderString TOOK = new XContentBuilderString(\"took\");\n         static final XContentBuilderString _VERSION = new XContentBuilderString(\"_version\");\n         static final XContentBuilderString MATCHES = new XContentBuilderString(\"matches\");\n+        static final XContentBuilderString FOUND = new XContentBuilderString(\"found\");\n     }\n \n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective\ndiff --git a/src/main/java/org/jboss/netty/example/http/HttpClient.java b/src/main/java/org/jboss/netty/example/http/HttpClient.java\nindex 1e91769..b551e53 100644\n--- a/src/main/java/org/jboss/netty/example/http/HttpClient.java\n+++ b/src/main/java/org/jboss/netty/example/http/HttpClient.java\n@@ -87,7 +87,12 @@ public class HttpClient {\n         // Send the HTTP request.\n         HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_0, HttpMethod.GET, uri);\n         request.addHeader(HttpHeaders.HOST, host);\n-        ChannelFuture lastWriteFuture = channel.write(request);\n-        lastWriteFuture.awaitUninterruptibly();\n+        channel.write(request);\n+\n+        // Wait for the server to close the connection.\n+        channel.getCloseFuture().awaitUninterruptibly();\n+\n+        // Shut down executor threads to exit.\n+        factory.getExternalResource().release();\n     }\n }\n\\ No newline at end of file\n",
      "atomicChanges": [
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/main/java/org/jboss/netty/example/http/HttpClient.java b/src/main/java/org/jboss/netty/example/http/HttpClient.java\nindex 1e91769..b551e53 100644\n--- a/src/main/java/org/jboss/netty/example/http/HttpClient.java\n+++ b/src/main/java/org/jboss/netty/example/http/HttpClient.java\n@@ -87,7 +87,12 @@ public class HttpClient {\n         // Send the HTTP request.\n         HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_0, HttpMethod.GET, uri);\n         request.addHeader(HttpHeaders.HOST, host);\n-        ChannelFuture lastWriteFuture = channel.write(request);\n-        lastWriteFuture.awaitUninterruptibly();\n+        channel.write(request);\n+\n+        // Wait for the server to close the connection.\n+        channel.getCloseFuture().awaitUninterruptibly();\n+\n+        // Shut down executor threads to exit.\n+        factory.getExternalResource().release();\n     }\n }\n\\ No newline at end of file\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n\ndiff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n\ndiff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'\ndiff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
          "label": "cicd"
        },
        {
          "change": "diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n\ndiff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }\ndiff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n\ndiff --git a/src/main/java/com/commafeed/frontend/pages/HomePage.java b/src/main/java/com/commafeed/frontend/pages/HomePage.java\nindex 17c801ac..165cc612 100644\n--- a/src/main/java/com/commafeed/frontend/pages/HomePage.java\n+++ b/src/main/java/com/commafeed/frontend/pages/HomePage.java\n@@ -4,6 +4,7 @@ import org.apache.wicket.markup.head.CssHeaderItem;\n import org.apache.wicket.markup.head.IHeaderResponse;\r\n import org.apache.wicket.request.mapper.parameter.PageParameters;\r\n \r\n+import com.commafeed.backend.model.User;\r\n import com.commafeed.backend.model.UserRole.Role;\r\n import com.commafeed.backend.model.UserSettings;\r\n import com.commafeed.frontend.CommaFeedSession;\r\n@@ -21,7 +22,11 @@ public class HomePage extends BasePage {\n \t\tresponse.render(CssHeaderItem.forReference(new UserCustomCssReference() {\r\n \t\t\t@Override\r\n \t\t\tprotected String getCss() {\r\n-\t\t\t\tUserSettings settings = userSettingsDAO.findByUser(CommaFeedSession.get().getUser());\r\n+\t\t\t\tUser user = CommaFeedSession.get().getUser();\r\n+\t\t\t\tif (user == null) {\r\n+\t\t\t\t\treturn null;\r\n+\t\t\t\t}\r\n+\t\t\t\tUserSettings settings = userSettingsDAO.findByUser(user);\r\n \t\t\t\treturn settings == null ? null : settings.getCustomCss();\r\n \t\t\t}\r\n \t\t}, new PageParameters().add(\"_t\", System.currentTimeMillis()), null));\r\n\ndiff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
      "atomicChanges": [
        {
          "change": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/main/java/com/commafeed/frontend/pages/HomePage.java b/src/main/java/com/commafeed/frontend/pages/HomePage.java\nindex 17c801ac..165cc612 100644\n--- a/src/main/java/com/commafeed/frontend/pages/HomePage.java\n+++ b/src/main/java/com/commafeed/frontend/pages/HomePage.java\n@@ -4,6 +4,7 @@ import org.apache.wicket.markup.head.CssHeaderItem;\n import org.apache.wicket.markup.head.IHeaderResponse;\r\n import org.apache.wicket.request.mapper.parameter.PageParameters;\r\n \r\n+import com.commafeed.backend.model.User;\r\n import com.commafeed.backend.model.UserRole.Role;\r\n import com.commafeed.backend.model.UserSettings;\r\n import com.commafeed.frontend.CommaFeedSession;\r\n@@ -21,7 +22,11 @@ public class HomePage extends BasePage {\n \t\tresponse.render(CssHeaderItem.forReference(new UserCustomCssReference() {\r\n \t\t\t@Override\r\n \t\t\tprotected String getCss() {\r\n-\t\t\t\tUserSettings settings = userSettingsDAO.findByUser(CommaFeedSession.get().getUser());\r\n+\t\t\t\tUser user = CommaFeedSession.get().getUser();\r\n+\t\t\t\tif (user == null) {\r\n+\t\t\t\t\treturn null;\r\n+\t\t\t\t}\r\n+\t\t\t\tUserSettings settings = userSettingsDAO.findByUser(user);\r\n \t\t\t\treturn settings == null ? null : settings.getCustomCss();\r\n \t\t\t}\r\n \t\t}, new PageParameters().add(\"_t\", System.currentTimeMillis()), null));\r\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n\ndiff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }\ndiff --git a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\nindex 4405aa8..e9976cf 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n@@ -504,6 +504,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     private VertexListInternal retrieveFromMemory(VertexListInternal vertices) {\n+        edgesOnly();\n         if (node==null) node = tx.getExistingVertex(nodeid);\n         AtomicTitanQuery q = new AtomicTitanQuery(node,this);\n         Iterator<TitanEdge> iter = q.edgeIterator();\n@@ -515,6 +516,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     public VertexListInternal getVertexIDs() {\n+        edgesOnly();\n         Preconditions.checkNotNull(tx);\n         Preconditions.checkArgument(node==null || (!node.isNew() && !node.isModified()),\n                 \"Cannot query for raw neighborhood on new or modified node.\");\n",
      "atomicChanges": [
        {
          "change": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\nindex 4405aa8..e9976cf 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n@@ -504,6 +504,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     private VertexListInternal retrieveFromMemory(VertexListInternal vertices) {\n+        edgesOnly();\n         if (node==null) node = tx.getExistingVertex(nodeid);\n         AtomicTitanQuery q = new AtomicTitanQuery(node,this);\n         Iterator<TitanEdge> iter = q.edgeIterator();\n@@ -515,6 +516,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     public VertexListInternal getVertexIDs() {\n+        edgesOnly();\n         Preconditions.checkNotNull(tx);\n         Preconditions.checkArgument(node==null || (!node.isNew() && !node.isModified()),\n                 \"Cannot query for raw neighborhood on new or modified node.\");\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\nindex 9b181f98e..7445c0bc2 100644\n--- a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\n+++ b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\n@@ -352,10 +352,9 @@ public class MovieTools {\n \n         @Override\n         protected void onPostExecute(Integer movieTmdbId) {\n-            // Guarding against odd NPE, https://github.com/UweTrottmann/SeriesGuide/issues/371\n-            EventBus bus = EventBus.getDefault();\n-            if (bus != null) {\n-                bus.post(new MovieChangedEvent(movieTmdbId));\n+            // guard against NPE https://github.com/UweTrottmann/SeriesGuide/issues/371\n+            if (movieTmdbId != null) {\n+                EventBus.getDefault().post(new MovieChangedEvent(movieTmdbId));\n             }\n         }\n     }\n\ndiff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\nindex 9b181f98e..7445c0bc2 100644\n--- a/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\n+++ b/SeriesGuide/src/main/java/com/battlelancer/seriesguide/util/MovieTools.java\n@@ -352,10 +352,9 @@ public class MovieTools {\n \n         @Override\n         protected void onPostExecute(Integer movieTmdbId) {\n-            // Guarding against odd NPE, https://github.com/UweTrottmann/SeriesGuide/issues/371\n-            EventBus bus = EventBus.getDefault();\n-            if (bus != null) {\n-                bus.post(new MovieChangedEvent(movieTmdbId));\n+            // guard against NPE https://github.com/UweTrottmann/SeriesGuide/issues/371\n+            if (movieTmdbId != null) {\n+                EventBus.getDefault().post(new MovieChangedEvent(movieTmdbId));\n             }\n         }\n     }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n\ndiff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n\ndiff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
          "label": "test"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }",
          "label": "build"
        }
      ]
    }
  ]
}