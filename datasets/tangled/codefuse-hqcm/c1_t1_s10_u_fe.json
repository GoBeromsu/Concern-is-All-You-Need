{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 1,
    "types": [
      "feat"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java b/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\nindex 9ea4399..1d4f100 100644\n--- a/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\n+++ b/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\n@@ -44,8 +44,18 @@ import java.util.List;\n \n     // int,int long\n     public void visit(String name, Object value) {\n-        AnnotationElement ae = newAnnotationElement(name);\n-        ae.value = EncodedValue.wrap(cp.wrapEncodedItem(value));\n+        if (value instanceof Object[]) {\n+            DexAnnotationVisitor s = visitArray(name);\n+            if (s != null) {\n+                for (Object v : (Object[]) value) {\n+                    s.visit(null, v);\n+                }\n+                s.visitEnd();\n+            }\n+        } else {\n+            AnnotationElement ae = newAnnotationElement(name);\n+            ae.value = EncodedValue.wrap(cp.wrapEncodedItem(value));\n+        }\n     }\n \n     @Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java b/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\nindex 9ea4399..1d4f100 100644\n--- a/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\n+++ b/dex-writer/src/main/java/com/googlecode/d2j/dex/writer/AnnotationWriter.java\n@@ -44,8 +44,18 @@ import java.util.List;\n \n     // int,int long\n     public void visit(String name, Object value) {\n-        AnnotationElement ae = newAnnotationElement(name);\n-        ae.value = EncodedValue.wrap(cp.wrapEncodedItem(value));\n+        if (value instanceof Object[]) {\n+            DexAnnotationVisitor s = visitArray(name);\n+            if (s != null) {\n+                for (Object v : (Object[]) value) {\n+                    s.visit(null, v);\n+                }\n+                s.visitEnd();\n+            }\n+        } else {\n+            AnnotationElement ae = newAnnotationElement(name);\n+            ae.value = EncodedValue.wrap(cp.wrapEncodedItem(value));\n+        }\n     }\n \n     @Override\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java b/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\nindex 04b30a9..c1d6d4f 100644\n--- a/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\n+++ b/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\n@@ -20,6 +20,7 @@ import com.intellij.core.JavaCoreProjectEnvironment;\n import com.intellij.lang.java.JavaLanguage;\n import com.intellij.openapi.Disposable;\n import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.roots.ProjectRootModificationTracker;\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFile;\n import com.intellij.psi.PsiFileFactory;\n@@ -43,6 +44,13 @@ public class JavaToKotlinTranslator {\n         }\n     };\n \n+    private static final ProjectRootModificationTracker NEVER_CHANGED = new ProjectRootModificationTracker() {\n+        @Override\n+        public long getModificationCount() {\n+            return 0;\n+        }\n+    };\n+\n     private JavaToKotlinTranslator() {\n     }\n \n@@ -66,6 +74,8 @@ public class JavaToKotlinTranslator {\n         JavaCoreApplicationEnvironment applicationEnvironment = new JavaCoreApplicationEnvironment(DISPOSABLE);\n         JavaCoreProjectEnvironment javaCoreEnvironment = new JavaCoreProjectEnvironment(DISPOSABLE, applicationEnvironment);\n \n+        javaCoreEnvironment.getProject().registerService(ProjectRootModificationTracker.class, NEVER_CHANGED);\n+\n         javaCoreEnvironment.addJarToClassPath(PathUtil.findRtJar());\n         File annotations = findAnnotations();\n         if (annotations != null && annotations.exists()) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java b/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\nindex 04b30a9..c1d6d4f 100644\n--- a/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\n+++ b/j2k/src/org/jetbrains/jet/j2k/JavaToKotlinTranslator.java\n@@ -20,6 +20,7 @@ import com.intellij.core.JavaCoreProjectEnvironment;\n import com.intellij.lang.java.JavaLanguage;\n import com.intellij.openapi.Disposable;\n import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.roots.ProjectRootModificationTracker;\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiFile;\n import com.intellij.psi.PsiFileFactory;\n@@ -43,6 +44,13 @@ public class JavaToKotlinTranslator {\n         }\n     };\n \n+    private static final ProjectRootModificationTracker NEVER_CHANGED = new ProjectRootModificationTracker() {\n+        @Override\n+        public long getModificationCount() {\n+            return 0;\n+        }\n+    };\n+\n     private JavaToKotlinTranslator() {\n     }\n \n@@ -66,6 +74,8 @@ public class JavaToKotlinTranslator {\n         JavaCoreApplicationEnvironment applicationEnvironment = new JavaCoreApplicationEnvironment(DISPOSABLE);\n         JavaCoreProjectEnvironment javaCoreEnvironment = new JavaCoreProjectEnvironment(DISPOSABLE, applicationEnvironment);\n \n+        javaCoreEnvironment.getProject().registerService(ProjectRootModificationTracker.class, NEVER_CHANGED);\n+\n         javaCoreEnvironment.addJarToClassPath(PathUtil.findRtJar());\n         File annotations = findAnnotations();\n         if (annotations != null && annotations.exists()) {\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/ext/java/nokogiri/XmlSaxPushParser.java b/ext/java/nokogiri/XmlSaxPushParser.java\nindex 91fb156..83cdf4b 100644\n--- a/ext/java/nokogiri/XmlSaxPushParser.java\n+++ b/ext/java/nokogiri/XmlSaxPushParser.java\n@@ -10,8 +10,10 @@ import nokogiri.internals.PushInputStream;\n import org.jruby.Ruby;\n import org.jruby.RubyClass;\n import org.jruby.RubyIO;\n+import org.jruby.RubyKernel;\n import org.jruby.RubyModule;\n import org.jruby.RubyObject;\n+import org.jruby.RubyString;\n import org.jruby.anno.JRubyMethod;\n import org.jruby.exceptions.RaiseException;\n import org.jruby.javasupport.util.RuntimeHelpers;\n@@ -61,7 +63,12 @@ public class XmlSaxPushParser extends RubyObject {\n     @JRubyMethod\n     public IRubyObject native_write(ThreadContext context, IRubyObject chunk,\n                                     IRubyObject isLast) {\n-        byte[] data = chunk.toString().getBytes();\n+        byte[] data = null;\n+        if (chunk instanceof RubyString || chunk.respondsTo(\"to_str\")) {\n+            data = chunk.convertToString().getBytes();\n+        } else {\n+            throw new RaiseException(new XmlSyntaxError(context.getRuntime()));\n+        }\n \n         try {\n             stream.writeAndWaitForRead(data);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/ext/java/nokogiri/XmlSaxPushParser.java b/ext/java/nokogiri/XmlSaxPushParser.java\nindex 91fb156..83cdf4b 100644\n--- a/ext/java/nokogiri/XmlSaxPushParser.java\n+++ b/ext/java/nokogiri/XmlSaxPushParser.java\n@@ -10,8 +10,10 @@ import nokogiri.internals.PushInputStream;\n import org.jruby.Ruby;\n import org.jruby.RubyClass;\n import org.jruby.RubyIO;\n+import org.jruby.RubyKernel;\n import org.jruby.RubyModule;\n import org.jruby.RubyObject;\n+import org.jruby.RubyString;\n import org.jruby.anno.JRubyMethod;\n import org.jruby.exceptions.RaiseException;\n import org.jruby.javasupport.util.RuntimeHelpers;\n@@ -61,7 +63,12 @@ public class XmlSaxPushParser extends RubyObject {\n     @JRubyMethod\n     public IRubyObject native_write(ThreadContext context, IRubyObject chunk,\n                                     IRubyObject isLast) {\n-        byte[] data = chunk.toString().getBytes();\n+        byte[] data = null;\n+        if (chunk instanceof RubyString || chunk.respondsTo(\"to_str\")) {\n+            data = chunk.convertToString().getBytes();\n+        } else {\n+            throw new RaiseException(new XmlSyntaxError(context.getRuntime()));\n+        }\n \n         try {\n             stream.writeAndWaitForRead(data);\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n",
          "label": "feat"
        }
      ]
    }
  ]
}