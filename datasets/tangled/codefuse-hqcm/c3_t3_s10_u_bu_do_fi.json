{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "fix",
      "docs",
      "build"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>\ndiff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        },
        {
          "change": "diff --git a/common/src/main/java/io/netty/util/internal/StringUtil.java b/common/src/main/java/io/netty/util/internal/StringUtil.java\nindex 4ede108..adbfeca 100644\n--- a/common/src/main/java/io/netty/util/internal/StringUtil.java\n+++ b/common/src/main/java/io/netty/util/internal/StringUtil.java\n@@ -329,7 +329,7 @@ public final class StringUtil {\n      *\n      * @param value The value which will be escaped according to\n      *              <a href=\"https://tools.ietf.org/html/rfc4180#section-2\">RFC-4180</a>\n-     * @return {@link CharSequence} the escaped value if nesessary, or the value unchanged\n+     * @return {@link CharSequence} the escaped value if necessary, or the value unchanged\n      */\n     public static CharSequence escapeCsv(CharSequence value) {\n         int length = checkNotNull(value, \"value\").length();\n@@ -354,7 +354,7 @@ public final class StringUtil {\n                     } else {\n                         boolean isNextCharDoubleQuote = isDoubleQuote(value.charAt(i + 1));\n                         if (!isDoubleQuote(value.charAt(i - 1)) &&\n-                                (!isNextCharDoubleQuote || isNextCharDoubleQuote && i + 1 == last)) {\n+                                (!isNextCharDoubleQuote || i + 1 == last)) {\n                             escaped.append(DOUBLE_QUOTE);\n                             escapedDoubleQuote = true;\n                         }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\nindex 8329372811..f3427b3d1a 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n@@ -382,7 +382,7 @@ public class JmsProducer extends DefaultProducer {\n         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n-                if (out != null) {\n+                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {\n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }\ndiff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\nindex 8329372811..f3427b3d1a 100644\n--- a/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n+++ b/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java\n@@ -382,7 +382,7 @@ public class JmsProducer extends DefaultProducer {\n         if (exchange.hasOut()) {\n             JmsMessage out = (JmsMessage) exchange.getOut();\n             try {\n-                if (out != null) {\n+                if (out != null && out.getJmsMessage() != null) {\n                     out.setMessageId(out.getJmsMessage().getJMSMessageID());\n                 }\n             } catch (JMSException e) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java\nindex 79cb60e..a435de7 100755\n--- a/services/core/java/com/android/server/am/ActivityManagerService.java\n+++ b/services/core/java/com/android/server/am/ActivityManagerService.java\n@@ -8054,7 +8054,7 @@ public final class ActivityManagerService extends ActivityManagerNative\n                 checkedGrants = true;\n             }\n             userId = handleIncomingUser(callingPid, callingUid, userId,\n-                    false, ALLOW_NON_FULL_IN_PROFILE,\n+                    false, ALLOW_NON_FULL,\n                     \"checkContentProviderPermissionLocked \" + cpi.authority, null);\n             if (userId != tmpTargetUserId) {\n                 // When we actually went to determine the final targer user ID, this ended\n\ndiff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>\ndiff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/core/java/com/android/server/am/ActivityManagerService.java b/services/core/java/com/android/server/am/ActivityManagerService.java\nindex 79cb60e..a435de7 100755\n--- a/services/core/java/com/android/server/am/ActivityManagerService.java\n+++ b/services/core/java/com/android/server/am/ActivityManagerService.java\n@@ -8054,7 +8054,7 @@ public final class ActivityManagerService extends ActivityManagerNative\n                 checkedGrants = true;\n             }\n             userId = handleIncomingUser(callingPid, callingUid, userId,\n-                    false, ALLOW_NON_FULL_IN_PROFILE,\n+                    false, ALLOW_NON_FULL,\n                     \"checkContentProviderPermissionLocked \" + cpi.authority, null);\n             if (userId != tmpTargetUserId) {\n                 // When we actually went to determine the final targer user ID, this ended\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }\ndiff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java\nindex 27ca62af..a7bd4ab 100644\n--- a/services/core/java/com/android/server/pm/PackageManagerService.java\n+++ b/services/core/java/com/android/server/pm/PackageManagerService.java\n@@ -16341,8 +16341,9 @@ public class PackageManagerService extends IPackageManager.Stub {\n                 for (int curUser : users) {\n                     long timeout = SystemClock.uptimeMillis() + 5000;\n                     synchronized (conn) {\n-                        long now = SystemClock.uptimeMillis();\n-                        while (conn.mContainerService == null && now < timeout) {\n+                        long now;\n+                        while (conn.mContainerService == null &&\n+                                (now = SystemClock.uptimeMillis()) < timeout) {\n                             try {\n                                 conn.wait(timeout - now);\n                             } catch (InterruptedException e) {\n\ndiff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 6g74558..897aebc 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,13 +1,13 @@\n apply plugin: 'java'\n apply plugin: 'eclipse'\n \n-group = 'com.example'\n-version = '1.0.0-SNAPSHOT'\n+group = 'com.mycompany'\n+version = '1.0.1'\n \n sourceCompatibility = 1.8\n \n repositories {\n-    mavenCentral()\n+    maven { url \"https://maven.springframework.org/release\" }\n }\n \n dependencies {\n-    testCompile group: 'junit', name: 'junit', version: '4.13.1'\n+    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.5'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java\nindex 27ca62af..a7bd4ab 100644\n--- a/services/core/java/com/android/server/pm/PackageManagerService.java\n+++ b/services/core/java/com/android/server/pm/PackageManagerService.java\n@@ -16341,8 +16341,9 @@ public class PackageManagerService extends IPackageManager.Stub {\n                 for (int curUser : users) {\n                     long timeout = SystemClock.uptimeMillis() + 5000;\n                     synchronized (conn) {\n-                        long now = SystemClock.uptimeMillis();\n-                        while (conn.mContainerService == null && now < timeout) {\n+                        long now;\n+                        while (conn.mContainerService == null &&\n+                                (now = SystemClock.uptimeMillis()) < timeout) {\n                             try {\n                                 conn.wait(timeout - now);\n                             } catch (InterruptedException e) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n\ndiff --git a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\nindex 2cac9aafa..3fa7798ed 100644\n--- a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n+++ b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n@@ -88,9 +88,8 @@ public class RosterItemProvider {\n         Connection con = null;\r\n         PreparedStatement pstmt = null;\r\n         try {\r\n-            con = DbConnectionManager.getConnection();\r\n-\r\n             long rosterID = SequenceManager.nextID(JiveConstants.ROSTER);\r\n+            con = DbConnectionManager.getConnection();\r\n             pstmt = con.prepareStatement(CREATE_ROSTER_ITEM);\r\n             pstmt.setString(1, username);\r\n             pstmt.setLong(2, rosterID);\r\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\nindex 2cac9aafa..3fa7798ed 100644\n--- a/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n+++ b/src/java/org/jivesoftware/openfire/roster/RosterItemProvider.java\n@@ -88,9 +88,8 @@ public class RosterItemProvider {\n         Connection con = null;\r\n         PreparedStatement pstmt = null;\r\n         try {\r\n-            con = DbConnectionManager.getConnection();\r\n-\r\n             long rosterID = SequenceManager.nextID(JiveConstants.ROSTER);\r\n+            con = DbConnectionManager.getConnection();\r\n             pstmt = con.prepareStatement(CREATE_ROSTER_ITEM);\r\n             pstmt.setString(1, username);\r\n             pstmt.setLong(2, rosterID);\r\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java b/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\nindex 402d63fff..a05c4a877 100644\n--- a/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\n+++ b/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\n@@ -37,7 +37,7 @@ public class AppCompatTextView extends TextView {\n     }\n \n     public AppCompatTextView(Context context, AttributeSet attrs) {\n-        this(context, attrs, 0);\n+        this(context, attrs, android.R.attr.textViewStyle);\n     }\n \n     public AppCompatTextView(Context context, AttributeSet attrs, int defStyle) {\n\ndiff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
      "atomicChanges": [
        {
          "change": "diff --git a/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java b/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\nindex 402d63fff..a05c4a877 100644\n--- a/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\n+++ b/v7/appcompat/src/android/support/v7/widget/AppCompatTextView.java\n@@ -37,7 +37,7 @@ public class AppCompatTextView extends TextView {\n     }\n \n     public AppCompatTextView(Context context, AttributeSet attrs) {\n-        this(context, attrs, 0);\n+        this(context, attrs, android.R.attr.textViewStyle);\n     }\n \n     public AppCompatTextView(Context context, AttributeSet attrs, int defStyle) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/processing/opengl/PSurfaceJOGL.java b/core/src/processing/opengl/PSurfaceJOGL.java\nindex 1d99f2f..7cc239c 100644\n--- a/core/src/processing/opengl/PSurfaceJOGL.java\n+++ b/core/src/processing/opengl/PSurfaceJOGL.java\n@@ -250,7 +250,7 @@ public class PSurfaceJOGL implements PSurface {\n     if (screenRect.width == sketchWidth &&\n         screenRect.height == sketchHeight) {\n       fullScreen = true;\n-//        sketch.fullScreen = true;  // hmm\n+      sketch.fullScreen();\n     }\n \n     if (fullScreen || spanDisplays) {\n\ndiff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n\ndiff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/processing/opengl/PSurfaceJOGL.java b/core/src/processing/opengl/PSurfaceJOGL.java\nindex 1d99f2f..7cc239c 100644\n--- a/core/src/processing/opengl/PSurfaceJOGL.java\n+++ b/core/src/processing/opengl/PSurfaceJOGL.java\n@@ -250,7 +250,7 @@ public class PSurfaceJOGL implements PSurface {\n     if (screenRect.width == sketchWidth &&\n         screenRect.height == sketchHeight) {\n       fullScreen = true;\n-//        sketch.fullScreen = true;  // hmm\n+      sketch.fullScreen();\n     }\n \n     if (fullScreen || spanDisplays) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        },
        {
          "change": "diff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n\ndiff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
      "atomicChanges": [
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n\ndiff --git a/src/biz/bokhorst/xprivacy/XWebView.java b/src/biz/bokhorst/xprivacy/XWebView.java\nindex 94edfbb7..f1a94807 100644\n--- a/src/biz/bokhorst/xprivacy/XWebView.java\n+++ b/src/biz/bokhorst/xprivacy/XWebView.java\n@@ -30,7 +30,7 @@ public class XWebView extends XHook {\n \t// frameworks/base/core/java/android/webkit/WebView.java\n \t// http://developer.android.com/reference/android/webkit/WebView.html\n \n-\t// public synchronize String getUserAgentString()\n+\t// public synchronized void setUserAgent(int ua)\n \t// public synchronized void setUserAgentString (String ua)\n \t// frameworks/base/core/java/android/webkit/WebSettings.java\n \t// http://developer.android.com/reference/android/webkit/WebSettings.html\n@@ -69,7 +69,7 @@ public class XWebView extends XHook {\n \n \t\t\t\t\t// setUserAgent\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", String.class);\n+\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", Integer.class);\n \t\t\t\t\t\tUtil.log(this, Log.INFO, \"Hooking \" + setUserAgent.getName());\n \t\t\t\t\t\tXposedBridge.hookMethod(setUserAgent, new XC_MethodHook() {\n \t\t\t\t\t\t\t@Override\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/biz/bokhorst/xprivacy/XWebView.java b/src/biz/bokhorst/xprivacy/XWebView.java\nindex 94edfbb7..f1a94807 100644\n--- a/src/biz/bokhorst/xprivacy/XWebView.java\n+++ b/src/biz/bokhorst/xprivacy/XWebView.java\n@@ -30,7 +30,7 @@ public class XWebView extends XHook {\n \t// frameworks/base/core/java/android/webkit/WebView.java\n \t// http://developer.android.com/reference/android/webkit/WebView.html\n \n-\t// public synchronize String getUserAgentString()\n+\t// public synchronized void setUserAgent(int ua)\n \t// public synchronized void setUserAgentString (String ua)\n \t// frameworks/base/core/java/android/webkit/WebSettings.java\n \t// http://developer.android.com/reference/android/webkit/WebSettings.html\n@@ -69,7 +69,7 @@ public class XWebView extends XHook {\n \n \t\t\t\t\t// setUserAgent\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", String.class);\n+\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", Integer.class);\n \t\t\t\t\t\tUtil.log(this, Log.INFO, \"Hooking \" + setUserAgent.getName());\n \t\t\t\t\t\tXposedBridge.hookMethod(setUserAgent, new XC_MethodHook() {\n \t\t\t\t\t\t\t@Override\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>\ndiff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        },
        {
          "change": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n",
          "label": "docs"
        }
      ]
    }
  ]
}