{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "style",
      "refactor",
      "test"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n\ndiff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n\ndiff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
          "label": "style"
        },
        {
          "change": "diff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\nindex a1910b8..45a0a0c 100644\n--- a/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n+++ b/src/main/java/org/elasticsearch/action/index/TransportIndexAction.java\n@@ -268,7 +268,7 @@ public class TransportIndexAction extends TransportShardReplicationOperationActi\n                 return;\n             }\n             documentMapper.refreshSource();\n-\n+            logger.debug(\"Sending mapping updated to master: index [{}] type [{}]\", request.index(), request.type());\n             mappingUpdatedAction.execute(new MappingUpdatedAction.MappingUpdatedRequest(request.index(), request.type(), documentMapper.mappingSource()), new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>() {\n                 @Override\n                 public void onResponse(MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse) {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n\ndiff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } \ndiff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } ",
          "label": "style"
        },
        {
          "change": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n\ndiff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\nindex 223a9a7..0db25d2 100644\n--- a/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n+++ b/src/main/java/com/github/pedrovgs/binarytree/BinaryNode.java\n@@ -83,8 +83,6 @@ public class BinaryNode<T> {\n   }\n \n   @Override public String toString() {\n-    return \"BinaryNode{\" +\n-        \"data=\" + data +\n-        '}';\n+    return \"BinaryNode{\" + \"data=\" + data + '}';\n   }\n }\n",
          "label": "style"
        },
        {
          "change": "diff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\nindex a4a4ef68..11fc8c3c 100644\n--- a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n+++ b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n@@ -70,7 +70,7 @@ final public class InvokeHelper {\n     public static Memory[] makeArguments(Environment env, Memory[] args,\n                                        ParameterEntity[] parameters,\n                                        String originClassName, String originMethodName,\n-                                       TraceInfo trace){\n+                                       TraceInfo trace) {\n         return InvokeArgumentHelper.makeArguments(env, args, parameters, originClassName, originMethodName, trace);\n     }\n \n\ndiff --git a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\nindex 21d835e..9d34695 100644\n--- a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n@@ -30,6 +30,7 @@ import io.netty.util.ResourceLeakDetector;\n import io.netty.util.internal.StringUtil;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -116,6 +117,7 @@ public class EpollReuseAddrTest {\n     }\n \n     @Test(timeout = 10000)\n+    @Ignore // TODO: Unignore after making it pass on centos6-1 and debian7-1\n     public void testMultipleBindDatagramChannel() throws Exception {\n         ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);\n         Assume.assumeTrue(versionEqOrGt(3, 9, 0));\n\ndiff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
      "atomicChanges": [
        {
          "change": "diff --git a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\nindex a4a4ef68..11fc8c3c 100644\n--- a/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n+++ b/jphp-runtime/src/php/runtime/invoke/InvokeHelper.java\n@@ -70,7 +70,7 @@ final public class InvokeHelper {\n     public static Memory[] makeArguments(Environment env, Memory[] args,\n                                        ParameterEntity[] parameters,\n                                        String originClassName, String originMethodName,\n-                                       TraceInfo trace){\n+                                       TraceInfo trace) {\n         return InvokeArgumentHelper.makeArguments(env, args, parameters, originClassName, originMethodName, trace);\n     }\n \n",
          "label": "style"
        },
        {
          "change": "diff --git a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\nindex 21d835e..9d34695 100644\n--- a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n@@ -30,6 +30,7 @@ import io.netty.util.ResourceLeakDetector;\n import io.netty.util.internal.StringUtil;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -116,6 +117,7 @@ public class EpollReuseAddrTest {\n     }\n \n     @Test(timeout = 10000)\n+    @Ignore // TODO: Unignore after making it pass on centos6-1 and debian7-1\n     public void testMultipleBindDatagramChannel() throws Exception {\n         ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);\n         Assume.assumeTrue(versionEqOrGt(3, 9, 0));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n\ndiff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n\ndiff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\nindex f87b9731d..d44934cbc 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java\n@@ -18,7 +18,6 @@\n ////////////////////////////////////////////////////////////////////////////////\n package com.puppycrawl.tools.checkstyle;\n \n-\n import antlr.RecognitionException;\n import antlr.TokenStreamException;\n import java.io.File;\n",
          "label": "style"
        },
        {
          "change": "diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\nindex 40161a7be6..2ef10b9081 100644\n--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java\n@@ -318,10 +318,15 @@ public interface ClassFileLocator extends Closeable {\n          */\n         public static Resolution read(Class<?> type) {\n             try {\n-                ClassLoader classLoader = type.getClassLoader();\n-                return locate(classLoader == null\n-                        ? ClassLoader.getSystemClassLoader()\n-                        : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                JavaModule module = JavaModule.ofType(type);\n+                if (module == null || !module.isNamed()) {\n+                    return ForModule.locate(module, TypeDescription.ForLoadedType.getName(type));\n+                } else {\n+                    ClassLoader classLoader = type.getClassLoader();\n+                    return locate(classLoader == null\n+                            ? ClassLoader.getSystemClassLoader()\n+                            : classLoader, TypeDescription.ForLoadedType.getName(type));\n+                }\n             } catch (IOException exception) {\n                 throw new IllegalStateException(\"Cannot read class file for \" + type, exception);\n             }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\nindex e4fbc9e50..9d9afc00e 100644\n--- a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n+++ b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n@@ -6947,6 +6947,7 @@ public abstract class jOOQAbstractTest<\n \r\n     @Test\r\n     public void testLoader() throws Exception {\r\n+        reset = false;\r\n         connection.setAutoCommit(false);\r\n \r\n         Field<Integer> count = create().count();\r\n\ndiff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n\ndiff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\nindex e4fbc9e50..9d9afc00e 100644\n--- a/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n+++ b/jOOQ-test/src/org/jooq/test/jOOQAbstractTest.java\n@@ -6947,6 +6947,7 @@ public abstract class jOOQAbstractTest<\n \r\n     @Test\r\n     public void testLoader() throws Exception {\r\n+        reset = false;\r\n         connection.setAutoCommit(false);\r\n \r\n         Field<Integer> count = create().count();\r\n",
          "label": "test"
        },
        {
          "change": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\nindex 6e104d6e79..2dd93a97b3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashFavoritesFragment.java\n@@ -87,7 +87,7 @@ public class DashFavoritesFragment extends DashBaseFragment {\n \n \n \n-\tprivate void setupFavorites(){\n+\tpublic void setupFavorites(){\n \t\tView mainView = getView();\n \t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n \t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\nindex 6d491ae..2073210 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n@@ -35,7 +35,9 @@ public class FileWatchInputs {\n         return directories;\n     }\n \n-    public List<File> getFiles() { return files; }\n+    public List<File> getFiles() {\n+        return files;\n+    }\n \n     public static Builder newBuilder() {\n         return new Builder();\n\ndiff --git a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\nindex 9152c82d56..1e58458bc4 100644\n--- a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n+++ b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n@@ -150,7 +150,7 @@ public class ExtendsTest extends UnitTestCase {\n \t\t}\n \t}\n \n-\tpublic void testEntityNamesWithPackageFailureExpected() {\n+\tpublic void testEntityNamesWithPackage() {\n \t\tConfiguration cfg = new Configuration();\n \t\ttry {\n \t\t\tcfg.addResource( getBaseForMappings() + \"extendshbm/packageentitynames.hbm.xml\" );\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\nindex 6d491ae..2073210 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/internal/filewatch/FileWatchInputs.java\n@@ -35,7 +35,9 @@ public class FileWatchInputs {\n         return directories;\n     }\n \n-    public List<File> getFiles() { return files; }\n+    public List<File> getFiles() {\n+        return files;\n+    }\n \n     public static Builder newBuilder() {\n         return new Builder();\n",
          "label": "style"
        },
        {
          "change": "diff --git a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\nindex 9152c82d56..1e58458bc4 100644\n--- a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n+++ b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n@@ -150,7 +150,7 @@ public class ExtendsTest extends UnitTestCase {\n \t\t}\n \t}\n \n-\tpublic void testEntityNamesWithPackageFailureExpected() {\n+\tpublic void testEntityNamesWithPackage() {\n \t\tConfiguration cfg = new Configuration();\n \t\ttry {\n \t\t\tcfg.addResource( getBaseForMappings() + \"extendshbm/packageentitynames.hbm.xml\" );\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\nindex 89a93d0..13ccd9f 100644\n--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n@@ -72,7 +72,7 @@ public class BaseBulletTest extends BulletTest {\n \tpublic ModelBuilder modelBuilder = new ModelBuilder();\n \tpublic ModelBatch modelBatch;\n \tpublic Array<Disposable> disposables = new Array<Disposable>();\n-\tprivate int debugMode = DebugDrawModes.DBG_DrawFeaturesText;\n+\tprivate int debugMode = DebugDrawModes.DBG_NoDebug;\n \t\n \tprotected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();\n \n\ndiff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 195d357..eff2b39 100644\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -416,6 +416,8 @@ public class ParserConfig {\n \r\n         try {\r\n             return ASMDeserializerFactory.getInstance().createJavaBeanDeserializer(this, clazz, type);\r\n+        } catch (NoSuchMethodException error) {\r\n+            return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (ASMException asmError) {\r\n             return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (Exception e) {\r\n@@ -445,8 +447,7 @@ public class ParserConfig {\n         try {\r\n             return ASMDeserializerFactory.getInstance().createFieldDeserializer(mapping, clazz, fieldInfo);\r\n         } catch (Throwable e) {\r\n-            // TODO Auto-generated catch block\r\n-            e.printStackTrace();\r\n+            // skip\r\n         }\r\n \r\n         return createFieldDeserializerWithoutASM(mapping, clazz, fieldInfo);\r\n\ndiff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
      "atomicChanges": [
        {
          "change": "diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\nindex 89a93d0..13ccd9f 100644\n--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n@@ -72,7 +72,7 @@ public class BaseBulletTest extends BulletTest {\n \tpublic ModelBuilder modelBuilder = new ModelBuilder();\n \tpublic ModelBatch modelBatch;\n \tpublic Array<Disposable> disposables = new Array<Disposable>();\n-\tprivate int debugMode = DebugDrawModes.DBG_DrawFeaturesText;\n+\tprivate int debugMode = DebugDrawModes.DBG_NoDebug;\n \t\n \tprotected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();\n \n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\nindex 195d357..eff2b39 100644\n--- a/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n+++ b/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java\n@@ -416,6 +416,8 @@ public class ParserConfig {\n \r\n         try {\r\n             return ASMDeserializerFactory.getInstance().createJavaBeanDeserializer(this, clazz, type);\r\n+        } catch (NoSuchMethodException error) {\r\n+            return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (ASMException asmError) {\r\n             return new JavaBeanDeserializer(this, clazz, type);\r\n         } catch (Exception e) {\r\n@@ -445,8 +447,7 @@ public class ParserConfig {\n         try {\r\n             return ASMDeserializerFactory.getInstance().createFieldDeserializer(mapping, clazz, fieldInfo);\r\n         } catch (Throwable e) {\r\n-            // TODO Auto-generated catch block\r\n-            e.printStackTrace();\r\n+            // skip\r\n         }\r\n \r\n         return createFieldDeserializerWithoutASM(mapping, clazz, fieldInfo);\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/previous.rb b/current.rb\nindex e69de29bb2d1d6434..a5b5c5bc6ab8e716a 100644\n--- a/previous.rb\n+++ b/current.rb\n@@ -1,16 +1,16 @@\n-def foo_bar(a, b, c)\n+def foo_bar(a,\n+            b,\n+            c)\n   if a > 5\n-    puts \"a is bigger than 5\"\n-  else\n-    puts \"a is not bigger than 5\"\n+    puts 'a is bigger than 5'\n   else\n+    puts 'a is not bigger than 5'\n   end\n\n-  if b > 10\n-    puts \"b is bigger than 10\"\n-  else\n-    puts \"b is not bigger than 10\"\n+  if b > 10 \n+    puts 'b is bigger than 10'\n   else\n+    puts 'b is not bigger than 10'\n   end\n\n   if c > 15\n@@ -20,4 +16,4 @@\n   else\n     puts \"c is not bigger than 15\"\n   end\n-end\n+end",
          "label": "style"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n\ndiff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\nindex 626bc0c..2ee1c4a 100644\n--- a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n+++ b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n@@ -450,9 +450,7 @@ public class SearchingForTestsTask extends Task.Backgroundable {\n \n       if (methods == null) {\n         for (PsiClass c : classes) {\n-          if (!results.containsKey(c)) {\n-            results.put(c, new LinkedHashSet<PsiMethod>());\n-          }\n+          results.put(c, new LinkedHashSet<PsiMethod>());\n         }\n       }\n       for (PsiMember psiMember : membersToCheckNow) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\nindex 08e5a90a..ad445160 100644\n--- a/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n+++ b/src/main/java/org/bukkit/command/defaults/GameModeCommand.java\n@@ -58,9 +58,9 @@ public class GameModeCommand extends VanillaCommand {\n                     sender.sendMessage(\"Game mode change for \" + player.getName() + \" failed!\");\n                 } else {\n                     if (player == sender) {\n-                        Command.broadcastCommandMessage(sender, \"Set own game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set own game mode to \" + mode.toString() + \" mode\", false);\n                     } else {\n-                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to\" + mode.toString() + \" mode\", false);\n+                        Command.broadcastCommandMessage(sender, \"Set \" + player.getName() + \"'s game mode to \" + mode.toString() + \" mode\", false);\n                     }\n                 }\n             } else {\n",
          "label": "style"
        },
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\nindex 626bc0c..2ee1c4a 100644\n--- a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n+++ b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n@@ -450,9 +450,7 @@ public class SearchingForTestsTask extends Task.Backgroundable {\n \n       if (methods == null) {\n         for (PsiClass c : classes) {\n-          if (!results.containsKey(c)) {\n-            results.put(c, new LinkedHashSet<PsiMethod>());\n-          }\n+          results.put(c, new LinkedHashSet<PsiMethod>());\n         }\n       }\n       for (PsiMember psiMember : membersToCheckNow) {\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\nindex 3f32b0b757..6171c03cda 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n@@ -98,14 +98,9 @@ public class ApiComponentGeneratorMojo extends AbstractApiMethodBaseMojo {\n                     }\n                 }\n \n-                // if set, merge common aliases with proxy's aliases\n-                if (!aliases.isEmpty()) {\n-                    final List<ApiMethodAlias> apiAliases = api.getAliases();\n-                    if (apiAliases.isEmpty()) {\n-                        api.setAliases(aliases);\n-                    } else {\n-                        apiAliases.addAll(aliases);\n-                    }\n+                // set common aliases if needed\n+                if (!aliases.isEmpty() && api.getAliases().isEmpty()) {\n+                    api.setAliases(aliases);\n                 }\n             }\n \n\ndiff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } ",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\nindex 3f32b0b757..6171c03cda 100644\n--- a/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n+++ b/tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/ApiComponentGeneratorMojo.java\n@@ -98,14 +98,9 @@ public class ApiComponentGeneratorMojo extends AbstractApiMethodBaseMojo {\n                     }\n                 }\n \n-                // if set, merge common aliases with proxy's aliases\n-                if (!aliases.isEmpty()) {\n-                    final List<ApiMethodAlias> apiAliases = api.getAliases();\n-                    if (apiAliases.isEmpty()) {\n-                        api.setAliases(aliases);\n-                    } else {\n-                        apiAliases.addAll(aliases);\n-                    }\n+                // set common aliases if needed\n+                if (!aliases.isEmpty() && api.getAliases().isEmpty()) {\n+                    api.setAliases(aliases);\n                 }\n             }\n \n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/style/code.py b/style/code.py\nindex 7bbc3a3..7a81265 100644\n--- a/style/code.py\n+++ b/style/code.py\n@@ -1,9 +1,13 @@\n-public class HelloWorld {\n-    public static void main(String[] args) { // Prints Hello, World! to the terminal window.\n-        System.out.println(\"Hello, World!\");\n+public class HelloWorld\n+{    \n+    public static void main(String[] args)     // Prints Hello, World! to the terminal window.\n+    {           \n+        System.out.println(\"Hello, World!\");\n     }\n-}\n \n-public class GoodBye {\n-    public static void sayGoodBye() {\n-        System.out.println(\"Goodbye, World!\");\n+    \n+public class GoodBye\n+{    \n+    public static void sayGoodBye()\n+    {         \n+        System.out.println(\"Goodbye, World!\");\n     }\n } ",
          "label": "style"
        }
      ]
    }
  ]
}