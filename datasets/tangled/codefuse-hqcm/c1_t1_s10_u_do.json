{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 1,
    "types": [
      "docs"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\nindex 9942510..23dd5d4 100644\n--- a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n+++ b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n@@ -506,11 +506,19 @@ public class ShowcaseView extends RelativeLayout\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentText(CharSequence)}\n+         * or {@link #setContentText(int)}\n+         */\n         public Builder setContentTextPaint(TextPaint textPaint) {\n             showcaseView.setContentTextPaint(textPaint);\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentTitle(CharSequence)}\n+         * or {@link #setContentTitle(int)}\n+         */\n         public Builder setContentTitlePaint(TextPaint textPaint) {\n             showcaseView.setContentTitlePaint(textPaint);\n             return this;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\nindex 9942510..23dd5d4 100644\n--- a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n+++ b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n@@ -506,11 +506,19 @@ public class ShowcaseView extends RelativeLayout\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentText(CharSequence)}\n+         * or {@link #setContentText(int)}\n+         */\n         public Builder setContentTextPaint(TextPaint textPaint) {\n             showcaseView.setContentTextPaint(textPaint);\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentTitle(CharSequence)}\n+         * or {@link #setContentTitle(int)}\n+         */\n         public Builder setContentTitlePaint(TextPaint textPaint) {\n             showcaseView.setContentTitlePaint(textPaint);\n             return this;\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java b/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\nindex 1b42943..b53d378 100644\n--- a/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\n+++ b/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\n@@ -314,27 +314,27 @@ public final class OSSUnderFileSystem extends UnderFileSystem {\n   public void setConf(Object conf) {\n   }\n \n-  // Not supported\n+  // No ACL integration currently, no-op\n   @Override\n   public void setOwner(String path, String user, String group) {}\n \n-  // Not supported\n+  // No ACL integration currently, no-op\n   @Override\n   public void setMode(String path, short mode) throws IOException {}\n \n-  // Not supported\n+  // No ACL integration currently, returns default empty value\n   @Override\n   public String getOwner(String path) throws IOException {\n     return \"\";\n   }\n \n-  // Not supported\n+  // No ACL integration currently, returns default empty value\n   @Override\n   public String getGroup(String path) throws IOException {\n     return \"\";\n   }\n \n-  // Not supported\n+  // No ACL integration currently, returns default value\n   @Override\n   public short getMode(String path) throws IOException {\n     return Constants.DEFAULT_FILE_SYSTEM_MODE;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java b/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\nindex 1b42943..b53d378 100644\n--- a/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\n+++ b/underfs/oss/src/main/java/alluxio/underfs/oss/OSSUnderFileSystem.java\n@@ -314,27 +314,27 @@ public final class OSSUnderFileSystem extends UnderFileSystem {\n   public void setConf(Object conf) {\n   }\n \n-  // Not supported\n+  // No ACL integration currently, no-op\n   @Override\n   public void setOwner(String path, String user, String group) {}\n \n-  // Not supported\n+  // No ACL integration currently, no-op\n   @Override\n   public void setMode(String path, short mode) throws IOException {}\n \n-  // Not supported\n+  // No ACL integration currently, returns default empty value\n   @Override\n   public String getOwner(String path) throws IOException {\n     return \"\";\n   }\n \n-  // Not supported\n+  // No ACL integration currently, returns default empty value\n   @Override\n   public String getGroup(String path) throws IOException {\n     return \"\";\n   }\n \n-  // Not supported\n+  // No ACL integration currently, returns default value\n   @Override\n   public short getMode(String path) throws IOException {\n     return Constants.DEFAULT_FILE_SYSTEM_MODE;\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
      "atomicChanges": [
        {
          "change": "diff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java b/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\nindex 4bf35938f6..16a7a27445 100644\n--- a/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\n+++ b/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\n@@ -25,9 +25,11 @@ import java.net.URL;\n import java.net.URLConnection;\n \n /**\n- * RemoteFileHelper class used by {@link GrailsWrapper} for wrapper\n+ * RemoteFileHelper class used by {@link GrailsWrapper} for wrapper.  This source code borrows\n+ * signicantly from Gradle's org.gradlew.rapper.Download.java.\n  *\n- * @author Jeff Brown\n+ * @author Hans Dockter\n+ * \n  * @since 2.1\n  */\n public class RemoteFileHelper {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java b/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\nindex 4bf35938f6..16a7a27445 100644\n--- a/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\n+++ b/grails-wrapper/src/main/java/org/grails/wrapper/RemoteFileHelper.java\n@@ -25,9 +25,11 @@ import java.net.URL;\n import java.net.URLConnection;\n \n /**\n- * RemoteFileHelper class used by {@link GrailsWrapper} for wrapper\n+ * RemoteFileHelper class used by {@link GrailsWrapper} for wrapper.  This source code borrows\n+ * signicantly from Gradle's org.gradlew.rapper.Download.java.\n  *\n- * @author Jeff Brown\n+ * @author Hans Dockter\n+ * \n  * @since 2.1\n  */\n public class RemoteFileHelper {\n",
          "label": "docs"
        }
      ]
    }
  ]
}