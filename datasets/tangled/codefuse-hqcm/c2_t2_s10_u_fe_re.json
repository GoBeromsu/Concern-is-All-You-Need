{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "feat",
      "refactor"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n\ndiff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n\ndiff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n\ndiff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n",
          "label": "feat"
        },
        {
          "change": "diff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n\ndiff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\nindex bf18a3c..287b2fa 100644\n--- a/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n+++ b/src/com/facebook/buck/rules/KnownBuildRuleTypes.java\n@@ -606,7 +606,8 @@ public class KnownBuildRuleTypes {\n                     cxxLibraryDescription,\n                     /* cpp2 */ true),\n                 new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.NORMAL),\n-                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED))));\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.TWISTED),\n+                new ThriftPythonEnhancer(thriftBuckConfig, ThriftPythonEnhancer.Type.ASYNCIO))));\n     builder.register(new XcodePostbuildScriptDescription());\n     builder.register(new XcodePrebuildScriptDescription());\n     builder.register(new XcodeWorkspaceConfigDescription());\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java b/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\nindex 79f9650..8d949a5 100644\n--- a/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\n+++ b/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\n@@ -485,14 +485,12 @@ public class ImageWallpaper extends WallpaperService {\n \n             glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n \n-            if (!mEgl.eglSwapBuffers(mEglDisplay, mEglSurface)) {\n-                throw new RuntimeException(\"Cannot swap buffers\");\n-            }\n+            boolean status = mEgl.eglSwapBuffers(mEglDisplay, mEglSurface);\n             checkEglError();\n \n             finishGL();\n \n-            return true;\n+            return status;\n         }\n \n         private FloatBuffer createMesh(int left, int top, float right, float bottom) {\n\ndiff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java b/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\nindex 79f9650..8d949a5 100644\n--- a/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\n+++ b/packages/SystemUI/src/com/android/systemui/ImageWallpaper.java\n@@ -485,14 +485,12 @@ public class ImageWallpaper extends WallpaperService {\n \n             glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);\n \n-            if (!mEgl.eglSwapBuffers(mEglDisplay, mEglSurface)) {\n-                throw new RuntimeException(\"Cannot swap buffers\");\n-            }\n+            boolean status = mEgl.eglSwapBuffers(mEglDisplay, mEglSurface);\n             checkEglError();\n \n             finishGL();\n \n-            return true;\n+            return status;\n         }\n \n         private FloatBuffer createMesh(int left, int top, float right, float bottom) {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java b/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\nindex 4bba2e8020..4db6f58918 100644\n--- a/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\n+++ b/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\n@@ -61,7 +61,6 @@ public class ValidatePersistentMethod extends AbstractDynamicPersistentMethod {\n \t\t\tif(errors.hasErrors()) {\n \t\t\t\tvalid = new Boolean(!errors.hasErrors());\t\n \t\t\t\tDelegatingMetaClass metaClass = (DelegatingMetaClass)InvokerHelper.getInstance().getMetaRegistry().getMetaClass(target.getClass());\n-\t\t\t\tmetaClass.setProperty(target,DomainClassMethods.HAS_ERRORS_PROPERTY,valid);\n \t\t\t\tmetaClass.setProperty(target,DomainClassMethods.ERRORS_PROPERTY,errors);\n \t\t\t}\n \t\t}\n\ndiff --git a/jodd-http/src/main/java/jodd/http/HttpBrowser.java b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\nindex 7625e5db..ca05d2ff 100644\n--- a/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n+++ b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n@@ -176,7 +176,6 @@ public class HttpBrowser {\n \t\tif (newCookies != null) {\n \t\t\tfor (String cookieValue : newCookies) {\n \t\t\t\tCookie cookie = new Cookie(cookieValue);\n-\n \t\t\t\tcookies.put(cookie.getName(), cookie);\n \t\t\t}\n \t\t}\n@@ -193,6 +192,12 @@ public class HttpBrowser {\n \n \t\tif (!cookies.isEmpty()) {\n \t\t\tfor (Cookie cookie: cookies.values()) {\n+                \n+\t\t\t    Integer maxAge = cookie.getMaxAge();\n+\t\t\t\tif (maxAge != null && maxAge.intValue() == 0) {\n+\t\t\t\t    continue;\n+\t\t\t\t}\n+\n \t\t\t\tif (!first) {\n \t\t\t\t\tcookieString.append(\"; \");\n \t\t\t\t}\n@@ -205,4 +210,4 @@ public class HttpBrowser {\n \t\t\thttpRequest.header(\"cookie\", cookieString.toString(), true);\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java b/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\nindex 4bba2e8020..4db6f58918 100644\n--- a/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\n+++ b/src/persistence/org/codehaus/groovy/grails/orm/hibernate/metaclass/ValidatePersistentMethod.java\n@@ -61,7 +61,6 @@ public class ValidatePersistentMethod extends AbstractDynamicPersistentMethod {\n \t\t\tif(errors.hasErrors()) {\n \t\t\t\tvalid = new Boolean(!errors.hasErrors());\t\n \t\t\t\tDelegatingMetaClass metaClass = (DelegatingMetaClass)InvokerHelper.getInstance().getMetaRegistry().getMetaClass(target.getClass());\n-\t\t\t\tmetaClass.setProperty(target,DomainClassMethods.HAS_ERRORS_PROPERTY,valid);\n \t\t\t\tmetaClass.setProperty(target,DomainClassMethods.ERRORS_PROPERTY,errors);\n \t\t\t}\n \t\t}\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/jodd-http/src/main/java/jodd/http/HttpBrowser.java b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\nindex 7625e5db..ca05d2ff 100644\n--- a/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n+++ b/jodd-http/src/main/java/jodd/http/HttpBrowser.java\n@@ -176,7 +176,6 @@ public class HttpBrowser {\n \t\tif (newCookies != null) {\n \t\t\tfor (String cookieValue : newCookies) {\n \t\t\t\tCookie cookie = new Cookie(cookieValue);\n-\n \t\t\t\tcookies.put(cookie.getName(), cookie);\n \t\t\t}\n \t\t}\n@@ -193,6 +192,12 @@ public class HttpBrowser {\n \n \t\tif (!cookies.isEmpty()) {\n \t\t\tfor (Cookie cookie: cookies.values()) {\n+                \n+\t\t\t    Integer maxAge = cookie.getMaxAge();\n+\t\t\t\tif (maxAge != null && maxAge.intValue() == 0) {\n+\t\t\t\t    continue;\n+\t\t\t\t}\n+\n \t\t\t\tif (!first) {\n \t\t\t\t\tcookieString.append(\"; \");\n \t\t\t\t}\n@@ -205,4 +210,4 @@ public class HttpBrowser {\n \t\t\thttpRequest.header(\"cookie\", cookieString.toString(), true);\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n\ndiff --git a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\nindex cc4c99f86c..4fd55218ac 100644\n--- a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n+++ b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n@@ -108,6 +108,10 @@ public class JLanguageTool {\n   private static String getBuildDate() {\n     try {\n       final URL res = JLanguageTool.class.getResource(JLanguageTool.class.getSimpleName() + \".class\");\n+      if (res == null) {\n+        // this will happen on Android, see http://stackoverflow.com/questions/15371274/\n+        return null;\n+      }\n       final Object connObj = res.openConnection();\n       if (connObj instanceof JarURLConnection) {\n         final JarURLConnection conn = (JarURLConnection) connObj;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\nindex cc4c99f86c..4fd55218ac 100644\n--- a/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n+++ b/languagetool-core/src/main/java/org/languagetool/JLanguageTool.java\n@@ -108,6 +108,10 @@ public class JLanguageTool {\n   private static String getBuildDate() {\n     try {\n       final URL res = JLanguageTool.class.getResource(JLanguageTool.class.getSimpleName() + \".class\");\n+      if (res == null) {\n+        // this will happen on Android, see http://stackoverflow.com/questions/15371274/\n+        return null;\n+      }\n       final Object connObj = res.openConnection();\n       if (connObj instanceof JarURLConnection) {\n         final JarURLConnection conn = (JarURLConnection) connObj;\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\nindex cbc835175..bd74cc0cb 100644\n--- a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n+++ b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n@@ -95,6 +95,8 @@ public class ConfigurationProperty {\n                 return Integer.valueOf((String) value);\n             } else if (type.equals(BigDecimal.class)) {\n                 return new BigDecimal((String) value);\n+            } else if (type.equals(Long.class)) {\n+            \treturn new Long((String) value);\n             } else {\n                 throw new UnexpectedLiquibaseException(\"Cannot parse property \"+type.getSimpleName()+\" to a \"+type.getSimpleName());\n             }\n\ndiff --git a/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java b/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\nindex f1f06f3c56..9504984483 100644\n--- a/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\n+++ b/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\n@@ -457,7 +457,7 @@ public class RouteResultPreparation {\n \t\tif (current <= 0) {\n \t\t\tcurrent = 1;\n \t\t}\n-\t\tif(ls >= 0 /*&& current + left + right >= ls*/){\n+//\t\tif(ls >= 0 /*&& current + left + right >= ls*/){\n \t\t\tlanes = new int[current + left + right];\n \t\t\tls = current + left + right;\n \t\t\tfor(int it=0; it< ls; it++) {\n@@ -471,12 +471,13 @@ public class RouteResultPreparation {\n \t\t\tif ((current <= left + right) && (left > 1 || right > 1)) {\n \t\t\t\tspeak = true;\n \t\t\t}\n-\t\t}\n+//\t\t}\n \t\t\n \t\tif (kl) {\n \t\t\tt = TurnType.valueOf(TurnType.KL, leftSide);\n \t\t\tt.setSkipToSpeak(!speak);\n-\t\t} else if(kr){\n+\t\t} \n+\t\tif(kr){\n \t\t\tt = TurnType.valueOf(TurnType.KR, leftSide);\n \t\t\tt.setSkipToSpeak(!speak);\n \t\t}\n",
      "atomicChanges": [
        {
          "change": "diff --git a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\nindex cbc835175..bd74cc0cb 100644\n--- a/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n+++ b/liquibase-core/src/main/java/liquibase/configuration/ConfigurationProperty.java\n@@ -95,6 +95,8 @@ public class ConfigurationProperty {\n                 return Integer.valueOf((String) value);\n             } else if (type.equals(BigDecimal.class)) {\n                 return new BigDecimal((String) value);\n+            } else if (type.equals(Long.class)) {\n+            \treturn new Long((String) value);\n             } else {\n                 throw new UnexpectedLiquibaseException(\"Cannot parse property \"+type.getSimpleName()+\" to a \"+type.getSimpleName());\n             }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java b/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\nindex f1f06f3c56..9504984483 100644\n--- a/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\n+++ b/DataExtractionOSM/src/net/osmand/router/RouteResultPreparation.java\n@@ -457,7 +457,7 @@ public class RouteResultPreparation {\n \t\tif (current <= 0) {\n \t\t\tcurrent = 1;\n \t\t}\n-\t\tif(ls >= 0 /*&& current + left + right >= ls*/){\n+//\t\tif(ls >= 0 /*&& current + left + right >= ls*/){\n \t\t\tlanes = new int[current + left + right];\n \t\t\tls = current + left + right;\n \t\t\tfor(int it=0; it< ls; it++) {\n@@ -471,12 +471,13 @@ public class RouteResultPreparation {\n \t\t\tif ((current <= left + right) && (left > 1 || right > 1)) {\n \t\t\t\tspeak = true;\n \t\t\t}\n-\t\t}\n+//\t\t}\n \t\t\n \t\tif (kl) {\n \t\t\tt = TurnType.valueOf(TurnType.KL, leftSide);\n \t\t\tt.setSkipToSpeak(!speak);\n-\t\t} else if(kr){\n+\t\t} \n+\t\tif(kr){\n \t\t\tt = TurnType.valueOf(TurnType.KR, leftSide);\n \t\t\tt.setSkipToSpeak(!speak);\n \t\t}\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java b/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\nindex 09d0ff0..09d2690 100644\n--- a/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\n+++ b/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\n@@ -105,12 +105,12 @@ public class ShiftReduceParserQuery implements ParserQuery {\n \n   @Override\n   public Tree getBestDependencyParse(boolean debinarize) {\n-    throw new UnsupportedOperationException();\n+    return null;\n   }\n \n   @Override\n   public Tree getBestFactoredParse() {\n-    throw new UnsupportedOperationException();\n+    return null;\n   }\n \n   /** TODO: if this is a beam, return all equal parses */\n\ndiff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\nindex ab142a0..04dba3f 100644\n--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n@@ -80,4 +80,12 @@ public class Join<SRC, DST> {\n         return whereCollector.combineWhereConditions(\" AND \", cond1, cond2, condMore);\n     }\n \n+    /**\n+     * Usually you don't need this value; just in case you are mixing custom\n+     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference\n+     * the joined (target) table.\n+     */\n+    public String getTablePrefix() {\n+        return tablePrefix;\n+    }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java b/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\nindex 09d0ff0..09d2690 100644\n--- a/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\n+++ b/src/edu/stanford/nlp/parser/shiftreduce/ShiftReduceParserQuery.java\n@@ -105,12 +105,12 @@ public class ShiftReduceParserQuery implements ParserQuery {\n \n   @Override\n   public Tree getBestDependencyParse(boolean debinarize) {\n-    throw new UnsupportedOperationException();\n+    return null;\n   }\n \n   @Override\n   public Tree getBestFactoredParse() {\n-    throw new UnsupportedOperationException();\n+    return null;\n   }\n \n   /** TODO: if this is a beam, return all equal parses */\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\nindex ab142a0..04dba3f 100644\n--- a/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n+++ b/DaoCore/src/main/java/de/greenrobot/dao/query/Join.java\n@@ -80,4 +80,12 @@ public class Join<SRC, DST> {\n         return whereCollector.combineWhereConditions(\" AND \", cond1, cond2, condMore);\n     }\n \n+    /**\n+     * Usually you don't need this value; just in case you are mixing custom\n+     * {@link de.greenrobot.dao.query.WhereCondition.StringCondition} into the query, this value allows to reference\n+     * the joined (target) table.\n+     */\n+    public String getTablePrefix() {\n+        return tablePrefix;\n+    }\n }\n",
          "label": "feat"
        }
      ]
    }
  ]
}