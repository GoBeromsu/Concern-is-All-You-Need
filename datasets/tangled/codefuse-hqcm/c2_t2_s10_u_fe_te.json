{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "test",
      "feat"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n\ndiff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\nindex e8337f6..0ab86e4 100644\n--- a/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n+++ b/services/java/com/android/server/updates/SELinuxPolicyInstallReceiver.java\n@@ -122,9 +122,16 @@ public class SELinuxPolicyInstallReceiver extends ConfigUpdateInstallReceiver {\n     }\n \n     private void setEnforcingMode(Context context) {\n-        boolean mode = Settings.Global.getInt(context.getContentResolver(),\n-            Settings.Global.SELINUX_STATUS, 0) == 1;\n-        SELinux.setSELinuxEnforce(mode);\n+        String mode = Settings.Global.getString(context.getContentResolver(),\n+            Settings.Global.SELINUX_STATUS);\n+        if (mode.equals(\"1\")) {\n+            Slog.i(TAG, \"Setting enforcing mode\");\n+            SystemProperties.set(\"persist.selinux.enforcing\", mode);\n+        } else if (mode.equals(\"0\")) {\n+            Slog.i(TAG, \"Tried to set permissive mode, ignoring\");\n+        } else {\n+            Slog.e(TAG, \"Got invalid enforcing mode: \" + mode);\n+        }\n     }\n \n     @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n\ndiff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\nindex 6704791..35ed2c3 100644\n--- a/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n+++ b/deeplearning4j-core/src/main/java/org/deeplearning4j/clustering/cluster/Point.java\n@@ -93,6 +93,16 @@ public class Point implements INDArray {\n \t\tthis.array = array;\n \t}\n \n+\t/**\n+\t * The rank of the ndarray (the number of dimensions\n+\t *\n+\t * @return the rank for the ndarray\n+\t */\n+\t@Override\n+\tpublic int rank() {\n+\t\treturn array.rank();\n+\t}\n+\n \t@Override\n \tpublic int stride(int dimension) {\n \t\treturn array.stride(dimension);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n\ndiff --git a/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java b/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\nindex e1b4d52..c08e1c0 100644\n--- a/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\n+++ b/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\n@@ -16,9 +16,11 @@\n package com.intellij.xdebugger;\n \n import com.intellij.mock.MockProject;\n-import com.intellij.xdebugger.impl.breakpoints.XBreakpointManagerImpl;\n-import com.intellij.util.xmlb.XmlSerializer;\n+import com.intellij.openapi.vfs.impl.http.RemoteFileManager;\n+import com.intellij.openapi.vfs.impl.http.RemoteFileManagerImpl;\n import com.intellij.util.xmlb.SkipDefaultValuesSerializationFilters;\n+import com.intellij.util.xmlb.XmlSerializer;\n+import com.intellij.xdebugger.impl.breakpoints.XBreakpointManagerImpl;\n import org.jdom.Element;\n \n /**\n@@ -30,6 +32,7 @@ public abstract class XBreakpointsTestCase extends XDebuggerTestCase {\n   protected void setUp() throws Exception {\n     super.setUp();\n     MockProject project = disposeOnTearDown(new MockProject());\n+    getApplication().registerService(RemoteFileManager.class, RemoteFileManagerImpl.class);\n     myBreakpointManager = new XBreakpointManagerImpl(project, null, null);\n   }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java b/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\nindex e1b4d52..c08e1c0 100644\n--- a/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\n+++ b/platform/xdebugger-impl/testSrc/com/intellij/xdebugger/XBreakpointsTestCase.java\n@@ -16,9 +16,11 @@\n package com.intellij.xdebugger;\n \n import com.intellij.mock.MockProject;\n-import com.intellij.xdebugger.impl.breakpoints.XBreakpointManagerImpl;\n-import com.intellij.util.xmlb.XmlSerializer;\n+import com.intellij.openapi.vfs.impl.http.RemoteFileManager;\n+import com.intellij.openapi.vfs.impl.http.RemoteFileManagerImpl;\n import com.intellij.util.xmlb.SkipDefaultValuesSerializationFilters;\n+import com.intellij.util.xmlb.XmlSerializer;\n+import com.intellij.xdebugger.impl.breakpoints.XBreakpointManagerImpl;\n import org.jdom.Element;\n \n /**\n@@ -30,6 +32,7 @@ public abstract class XBreakpointsTestCase extends XDebuggerTestCase {\n   protected void setUp() throws Exception {\n     super.setUp();\n     MockProject project = disposeOnTearDown(new MockProject());\n+    getApplication().registerService(RemoteFileManager.class, RemoteFileManagerImpl.class);\n     myBreakpointManager = new XBreakpointManagerImpl(project, null, null);\n   }\n \n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n\ndiff --git a/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java b/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\nindex 48da78a96..1989f9ced 100644\n--- a/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\n+++ b/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\n@@ -102,7 +102,7 @@ public class TestOperationSetPresence\n \n         // execute this test after postTestSubscribe\n         // to be sure that AuthorizationHandler is installed\n-        suite.addTest(new TestOperationSetPresence(\"postTestReceiveAuthorizatinonRequest\"));\n+//        suite.addTest(new TestOperationSetPresence(\"postTestReceiveAuthorizatinonRequest\"));\n \n         return suite;\n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java b/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\nindex 48da78a96..1989f9ced 100644\n--- a/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\n+++ b/test/net/java/sip/communicator/slick/protocol/icq/TestOperationSetPresence.java\n@@ -102,7 +102,7 @@ public class TestOperationSetPresence\n \n         // execute this test after postTestSubscribe\n         // to be sure that AuthorizationHandler is installed\n-        suite.addTest(new TestOperationSetPresence(\"postTestReceiveAuthorizatinonRequest\"));\n+//        suite.addTest(new TestOperationSetPresence(\"postTestReceiveAuthorizatinonRequest\"));\n \n         return suite;\n     }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/ext/java/nokogiri/XmlSaxPushParser.java b/ext/java/nokogiri/XmlSaxPushParser.java\nindex 91fb156..83cdf4b 100644\n--- a/ext/java/nokogiri/XmlSaxPushParser.java\n+++ b/ext/java/nokogiri/XmlSaxPushParser.java\n@@ -10,8 +10,10 @@ import nokogiri.internals.PushInputStream;\n import org.jruby.Ruby;\n import org.jruby.RubyClass;\n import org.jruby.RubyIO;\n+import org.jruby.RubyKernel;\n import org.jruby.RubyModule;\n import org.jruby.RubyObject;\n+import org.jruby.RubyString;\n import org.jruby.anno.JRubyMethod;\n import org.jruby.exceptions.RaiseException;\n import org.jruby.javasupport.util.RuntimeHelpers;\n@@ -61,7 +63,12 @@ public class XmlSaxPushParser extends RubyObject {\n     @JRubyMethod\n     public IRubyObject native_write(ThreadContext context, IRubyObject chunk,\n                                     IRubyObject isLast) {\n-        byte[] data = chunk.toString().getBytes();\n+        byte[] data = null;\n+        if (chunk instanceof RubyString || chunk.respondsTo(\"to_str\")) {\n+            data = chunk.convertToString().getBytes();\n+        } else {\n+            throw new RaiseException(new XmlSyntaxError(context.getRuntime()));\n+        }\n \n         try {\n             stream.writeAndWaitForRead(data);\n\ndiff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n",
      "atomicChanges": [
        {
          "change": "diff --git a/ext/java/nokogiri/XmlSaxPushParser.java b/ext/java/nokogiri/XmlSaxPushParser.java\nindex 91fb156..83cdf4b 100644\n--- a/ext/java/nokogiri/XmlSaxPushParser.java\n+++ b/ext/java/nokogiri/XmlSaxPushParser.java\n@@ -10,8 +10,10 @@ import nokogiri.internals.PushInputStream;\n import org.jruby.Ruby;\n import org.jruby.RubyClass;\n import org.jruby.RubyIO;\n+import org.jruby.RubyKernel;\n import org.jruby.RubyModule;\n import org.jruby.RubyObject;\n+import org.jruby.RubyString;\n import org.jruby.anno.JRubyMethod;\n import org.jruby.exceptions.RaiseException;\n import org.jruby.javasupport.util.RuntimeHelpers;\n@@ -61,7 +63,12 @@ public class XmlSaxPushParser extends RubyObject {\n     @JRubyMethod\n     public IRubyObject native_write(ThreadContext context, IRubyObject chunk,\n                                     IRubyObject isLast) {\n-        byte[] data = chunk.toString().getBytes();\n+        byte[] data = null;\n+        if (chunk instanceof RubyString || chunk.respondsTo(\"to_str\")) {\n+            data = chunk.convertToString().getBytes();\n+        } else {\n+            throw new RaiseException(new XmlSyntaxError(context.getRuntime()));\n+        }\n \n         try {\n             stream.writeAndWaitForRead(data);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\nindex 21d835e..9d34695 100644\n--- a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n@@ -30,6 +30,7 @@ import io.netty.util.ResourceLeakDetector;\n import io.netty.util.internal.StringUtil;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -116,6 +117,7 @@ public class EpollReuseAddrTest {\n     }\n \n     @Test(timeout = 10000)\n+    @Ignore // TODO: Unignore after making it pass on centos6-1 and debian7-1\n     public void testMultipleBindDatagramChannel() throws Exception {\n         ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);\n         Assume.assumeTrue(versionEqOrGt(3, 9, 0));\n\ndiff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\nindex 21d835e..9d34695 100644\n--- a/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n+++ b/transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollReuseAddrTest.java\n@@ -30,6 +30,7 @@ import io.netty.util.ResourceLeakDetector;\n import io.netty.util.internal.StringUtil;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -116,6 +117,7 @@ public class EpollReuseAddrTest {\n     }\n \n     @Test(timeout = 10000)\n+    @Ignore // TODO: Unignore after making it pass on centos6-1 and debian7-1\n     public void testMultipleBindDatagramChannel() throws Exception {\n         ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);\n         Assume.assumeTrue(versionEqOrGt(3, 9, 0));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\nindex 9696f2d6a..c2d298022 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n@@ -74,8 +74,15 @@ public class TablePageQueryTest extends PluggableActivitiTestCase {\n   \n   private void verifyTaskNames(String[] expectedTaskNames, List<Map<String, Object>> rowData) {\n     assertEquals(expectedTaskNames.length, rowData.size());\n+    String columnKey = \"NAME_\";\n+\n+    // mybatis will return the correct case for postgres table columns from version 3.0.6 on\n+    if (processEngineConfiguration.getDatabaseType().equals(\"postgres\")) {\n+      columnKey = \"name_\";\n+    }\n+    \n     for (int i=0; i < expectedTaskNames.length; i++) {\n-      assertEquals(expectedTaskNames[i], rowData.get(i).get(\"NAME_\"));\n+      assertEquals(expectedTaskNames[i], rowData.get(i).get(columnKey));\n     }\n   }\n   \n\ndiff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\nindex 5b3cd5c4bd..ae1ab13126 100644\n--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n@@ -863,7 +863,7 @@ public class PrepareCatalogMojo extends AbstractMojo {\n                 component = \"ftp\";\n             } \n             String name = component + \"-component\";\n-            if (!docs.contains(name)) {\n+            if (!docs.contains(name) && (!component.equalsIgnoreCase(\"linkedin\") && !component.equalsIgnoreCase(\"salesforce\"))) {\n                 missing.add(name);\n             }\n         }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\nindex 9696f2d6a..c2d298022 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n@@ -74,8 +74,15 @@ public class TablePageQueryTest extends PluggableActivitiTestCase {\n   \n   private void verifyTaskNames(String[] expectedTaskNames, List<Map<String, Object>> rowData) {\n     assertEquals(expectedTaskNames.length, rowData.size());\n+    String columnKey = \"NAME_\";\n+\n+    // mybatis will return the correct case for postgres table columns from version 3.0.6 on\n+    if (processEngineConfiguration.getDatabaseType().equals(\"postgres\")) {\n+      columnKey = \"name_\";\n+    }\n+    \n     for (int i=0; i < expectedTaskNames.length; i++) {\n-      assertEquals(expectedTaskNames[i], rowData.get(i).get(\"NAME_\"));\n+      assertEquals(expectedTaskNames[i], rowData.get(i).get(columnKey));\n     }\n   }\n   \n",
          "label": "test"
        },
        {
          "change": "diff --git a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\nindex 5b3cd5c4bd..ae1ab13126 100644\n--- a/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n+++ b/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareCatalogMojo.java\n@@ -863,7 +863,7 @@ public class PrepareCatalogMojo extends AbstractMojo {\n                 component = \"ftp\";\n             } \n             String name = component + \"-component\";\n-            if (!docs.contains(name)) {\n+            if (!docs.contains(name) && (!component.equalsIgnoreCase(\"linkedin\") && !component.equalsIgnoreCase(\"salesforce\"))) {\n                 missing.add(name);\n             }\n         }\n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n\ndiff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/graphics/java/android/graphics/drawable/Drawable.java b/graphics/java/android/graphics/drawable/Drawable.java\nindex cfb1983..2ec4284 100644\n--- a/graphics/java/android/graphics/drawable/Drawable.java\n+++ b/graphics/java/android/graphics/drawable/Drawable.java\n@@ -156,7 +156,7 @@ public abstract class Drawable {\n      * @param canvas The canvas to draw into\n      */\n     public void draw(Canvas canvas) {\n-        if (canvas != null && canvas.isHardwareAccelerated()) {\n+        if (canvas != null && canvas.isHardwareAccelerated() && false) { // temporarily disabled\n             final HardwareCanvas hardwareCanvas = (HardwareCanvas) canvas;\n             final DisplayList displayList = getDisplayList(hardwareCanvas);\n             if (displayList != null) {\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java\nindex 3c3a5cf54..483eac66b 100644\n--- a/java/org/apache/catalina/security/SecurityClassLoad.java\n+++ b/java/org/apache/catalina/security/SecurityClassLoad.java\n@@ -44,6 +44,7 @@ public final class SecurityClassLoad {\n         loadJavaxPackage(loader);\n         loadCoyotePackage(loader);        \n         loadHttp11Package(loader);        \n+        loadTomcatPackage(loader);\n     }\n     \n     \n@@ -209,5 +210,10 @@ public final class SecurityClassLoad {\n              \"Response$3\");\n     }\n \n+    private final static void loadTomcatPackage(ClassLoader loader)\n+        throws Exception {\n+        String basePackage = \"org.apache.tomcat.\";\n+        loader.loadClass(basePackage + \"util.net.SSLSupport$CipherData\");\n+    }\n }\n \n\ndiff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java\nindex 3c3a5cf54..483eac66b 100644\n--- a/java/org/apache/catalina/security/SecurityClassLoad.java\n+++ b/java/org/apache/catalina/security/SecurityClassLoad.java\n@@ -44,6 +44,7 @@ public final class SecurityClassLoad {\n         loadJavaxPackage(loader);\n         loadCoyotePackage(loader);        \n         loadHttp11Package(loader);        \n+        loadTomcatPackage(loader);\n     }\n     \n     \n@@ -209,5 +210,10 @@ public final class SecurityClassLoad {\n              \"Response$3\");\n     }\n \n+    private final static void loadTomcatPackage(ClassLoader loader)\n+        throws Exception {\n+        String basePackage = \"org.apache.tomcat.\";\n+        loader.loadClass(basePackage + \"util.net.SSLSupport$CipherData\");\n+    }\n }\n \n",
          "label": "feat"
        },
        {
          "change": "diff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n\ndiff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        }
      ]
    }
  ]
}