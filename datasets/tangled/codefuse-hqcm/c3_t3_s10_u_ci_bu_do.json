{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "docs",
      "cicd",
      "build"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>\ndiff --git a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\nindex 9942510..23dd5d4 100644\n--- a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n+++ b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n@@ -506,11 +506,19 @@ public class ShowcaseView extends RelativeLayout\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentText(CharSequence)}\n+         * or {@link #setContentText(int)}\n+         */\n         public Builder setContentTextPaint(TextPaint textPaint) {\n             showcaseView.setContentTextPaint(textPaint);\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentTitle(CharSequence)}\n+         * or {@link #setContentTitle(int)}\n+         */\n         public Builder setContentTitlePaint(TextPaint textPaint) {\n             showcaseView.setContentTitlePaint(textPaint);\n             return this;\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
      "atomicChanges": [
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        },
        {
          "change": "diff --git a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\nindex 9942510..23dd5d4 100644\n--- a/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n+++ b/library/src/main/java/com/github/amlcurran/showcaseview/ShowcaseView.java\n@@ -506,11 +506,19 @@ public class ShowcaseView extends RelativeLayout\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentText(CharSequence)}\n+         * or {@link #setContentText(int)}\n+         */\n         public Builder setContentTextPaint(TextPaint textPaint) {\n             showcaseView.setContentTextPaint(textPaint);\n             return this;\n         }\n \n+        /**\n+         * Sets the paint that will draw the text as specified by {@link #setContentTitle(CharSequence)}\n+         * or {@link #setContentTitle(int)}\n+         */\n         public Builder setContentTitlePaint(TextPaint textPaint) {\n             showcaseView.setContentTitlePaint(textPaint);\n             return this;\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n\ndiff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
      "atomicChanges": [
        {
          "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }\ndiff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:\ndiff --git a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\nindex 9b52d39f4..9c08454de 100644\n--- a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n+++ b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n@@ -73,9 +73,9 @@ import org.slf4j.LoggerFactory;\n  * situations where legacy (ex/md5) password hashes were stored and then \"upgraded\" to a stronger hash algorithm.\r\n  * Hashes are executed left to right.</p>\r\n  * <p>Example Setting: \"md5,sha1\"<br>  \r\n- * Usage: password -><br>\r\n- * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-><br>\r\n- * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-></p>\r\n+ * Usage: password -&gt;<br>\r\n+ * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-&gt;<br>\r\n+ * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-&gt;</p>\r\n  * \r\n  * <p>Bcrypt is supported as a passwordType; however, when chaining password types it MUST be the last type given. (bcrypt hashes are different \r\n  * every time they are generated)</p>\r\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\nindex 9b52d39f4..9c08454de 100644\n--- a/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n+++ b/src/java/org/jivesoftware/openfire/auth/JDBCAuthProvider.java\n@@ -73,9 +73,9 @@ import org.slf4j.LoggerFactory;\n  * situations where legacy (ex/md5) password hashes were stored and then \"upgraded\" to a stronger hash algorithm.\r\n  * Hashes are executed left to right.</p>\r\n  * <p>Example Setting: \"md5,sha1\"<br>  \r\n- * Usage: password -><br>\r\n- * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-><br>\r\n- * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-></p>\r\n+ * Usage: password -&gt;<br>\r\n+ * (md5)&nbsp;286755fad04869ca523320acce0dc6a4&nbsp;-&gt;<br>\r\n+ * (sha1)&nbsp;0524b1fc84d315b08db890413e65260040b08caa&nbsp;-&gt;</p>\r\n  * \r\n  * <p>Bcrypt is supported as a passwordType; however, when chaining password types it MUST be the last type given. (bcrypt hashes are different \r\n  * every time they are generated)</p>\r\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n\ndiff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
      "atomicChanges": [
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective\ndiff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        },
        {
          "change": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective\ndiff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        },
        {
          "change": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    }
  ]
}