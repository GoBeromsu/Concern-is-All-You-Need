{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "feat",
      "test",
      "cicd"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true\ndiff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n\ndiff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        },
        {
          "change": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:\ndiff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }\ndiff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 88971fa..3cc1ec2 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 88971fa..3cc1ec2 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java\nindex 4d1276c..2694aa2 100644\n--- a/core/java/com/android/internal/widget/LockPatternUtils.java\n+++ b/core/java/com/android/internal/widget/LockPatternUtils.java\n@@ -346,12 +346,21 @@ public class LockPatternUtils {\n      */\n     public int getActivePasswordQuality() {\n         int activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;\n-        switch (getKeyguardStoredPasswordQuality()) {\n+        // Note we don't want to use getKeyguardStoredPasswordQuality() because we want this to\n+        // return biometric_weak if that is being used instead of the backup\n+        int quality =\n+                (int) getLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);\n+        switch (quality) {\n             case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:\n                 if (isLockPatternEnabled()) {\n                     activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;\n                 }\n                 break;\n+            case DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK:\n+                if (isBiometricWeakInstalled()) {\n+                    activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK;\n+                }\n+                break;\n             case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:\n                 if (isLockPasswordEnabled()) {\n                     activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;\n@@ -373,6 +382,7 @@ public class LockPatternUtils {\n                 }\n                 break;\n         }\n+\n         return activePasswordQuality;\n     }\n \n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests\ndiff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java\nindex 4d1276c..2694aa2 100644\n--- a/core/java/com/android/internal/widget/LockPatternUtils.java\n+++ b/core/java/com/android/internal/widget/LockPatternUtils.java\n@@ -346,12 +346,21 @@ public class LockPatternUtils {\n      */\n     public int getActivePasswordQuality() {\n         int activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;\n-        switch (getKeyguardStoredPasswordQuality()) {\n+        // Note we don't want to use getKeyguardStoredPasswordQuality() because we want this to\n+        // return biometric_weak if that is being used instead of the backup\n+        int quality =\n+                (int) getLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);\n+        switch (quality) {\n             case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:\n                 if (isLockPatternEnabled()) {\n                     activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;\n                 }\n                 break;\n+            case DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK:\n+                if (isBiometricWeakInstalled()) {\n+                    activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK;\n+                }\n+                break;\n             case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:\n                 if (isLockPasswordEnabled()) {\n                     activePasswordQuality = DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;\n@@ -373,6 +382,7 @@ public class LockPatternUtils {\n                 }\n                 break;\n         }\n+\n         return activePasswordQuality;\n     }\n \n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests",
          "label": "cicd"
        },
        {
          "change": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n\ndiff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\nindex e7269a1..5c0e539 100644\n--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\n+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\n@@ -25,4 +25,11 @@ public abstract class DefaultExpressionTraversalVisitor<R, C>\n         // Don't traverse into Subqueries within an Expression\n         return null;\n     }\n+\n+    @Override\n+    protected R visitExists(ExistsPredicate node, C context)\n+    {\n+        // Don't traverse into Subqueries within an Expression\n+        return null;\n+    }\n }\n\ndiff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
      "atomicChanges": [
        {
          "change": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n",
          "label": "test"
        },
        {
          "change": "diff --git a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\nindex e7269a1..5c0e539 100644\n--- a/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\n+++ b/presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultExpressionTraversalVisitor.java\n@@ -25,4 +25,11 @@ public abstract class DefaultExpressionTraversalVisitor<R, C>\n         // Don't traverse into Subqueries within an Expression\n         return null;\n     }\n+\n+    @Override\n+    protected R visitExists(ExistsPredicate node, C context)\n+    {\n+        // Don't traverse into Subqueries within an Expression\n+        return null;\n+    }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\nindex 9696f2d6a..c2d298022 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n@@ -74,8 +74,15 @@ public class TablePageQueryTest extends PluggableActivitiTestCase {\n   \n   private void verifyTaskNames(String[] expectedTaskNames, List<Map<String, Object>> rowData) {\n     assertEquals(expectedTaskNames.length, rowData.size());\n+    String columnKey = \"NAME_\";\n+\n+    // mybatis will return the correct case for postgres table columns from version 3.0.6 on\n+    if (processEngineConfiguration.getDatabaseType().equals(\"postgres\")) {\n+      columnKey = \"name_\";\n+    }\n+    \n     for (int i=0; i < expectedTaskNames.length; i++) {\n-      assertEquals(expectedTaskNames[i], rowData.get(i).get(\"NAME_\"));\n+      assertEquals(expectedTaskNames[i], rowData.get(i).get(columnKey));\n     }\n   }\n   \n\ndiff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\nindex 9696f2d6a..c2d298022 100644\n--- a/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n+++ b/modules/activiti-engine/src/test/java/org/activiti/examples/mgmt/TablePageQueryTest.java\n@@ -74,8 +74,15 @@ public class TablePageQueryTest extends PluggableActivitiTestCase {\n   \n   private void verifyTaskNames(String[] expectedTaskNames, List<Map<String, Object>> rowData) {\n     assertEquals(expectedTaskNames.length, rowData.size());\n+    String columnKey = \"NAME_\";\n+\n+    // mybatis will return the correct case for postgres table columns from version 3.0.6 on\n+    if (processEngineConfiguration.getDatabaseType().equals(\"postgres\")) {\n+      columnKey = \"name_\";\n+    }\n+    \n     for (int i=0; i < expectedTaskNames.length; i++) {\n-      assertEquals(expectedTaskNames[i], rowData.get(i).get(\"NAME_\"));\n+      assertEquals(expectedTaskNames[i], rowData.get(i).get(columnKey));\n     }\n   }\n   \n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java b/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\nindex fb351280..3ddf026f 100644\n--- a/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\n+++ b/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\n@@ -105,6 +105,15 @@ public class ApkMojo extends AbstractAndroidMojo {\n      * @parameter expression=\"${android.renameManifestPackage}\"\n      */\n     private String renameManifestPackage;\n+    \n+    /**\n+     * <p>Rewrite the manifest so that all of its instrumentation components target the given package.\n+     * This value will be passed on to the aapt parameter --rename-instrumentation-target-package. \n+     * Look to aapt for more help on this. </p>\n+     *\n+     * @parameter expression=\"${android.renameInstrumentationTargetPackage}\"\n+     */\n+    private String renameInstrumentationTargetPackage;\n \n     /**\n      * <p>Root folder containing native libraries to include in the application package.</p>\n@@ -766,8 +775,13 @@ public class ApkMojo extends AbstractAndroidMojo {\n         }\n         \n         if (StringUtils.isNotBlank(renameManifestPackage)) {\n-        \tcommands.add(\"--rename-manifest-package\");\n-        \tcommands.add(renameManifestPackage);\n+          commands.add(\"--rename-manifest-package\");\n+          commands.add(renameManifestPackage);\n+        }\n+        \n+        if (StringUtils.isNotBlank(renameInstrumentationTargetPackage)) {\n+          commands.add(\"--rename-instrumentation-target-package\");\n+          commands.add(renameInstrumentationTargetPackage);\n         }\n \n         commands.add(\"-I\");\n\ndiff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n\ndiff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java b/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\nindex fb351280..3ddf026f 100644\n--- a/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\n+++ b/src/main/java/com/jayway/maven/plugins/android/phase09package/ApkMojo.java\n@@ -105,6 +105,15 @@ public class ApkMojo extends AbstractAndroidMojo {\n      * @parameter expression=\"${android.renameManifestPackage}\"\n      */\n     private String renameManifestPackage;\n+    \n+    /**\n+     * <p>Rewrite the manifest so that all of its instrumentation components target the given package.\n+     * This value will be passed on to the aapt parameter --rename-instrumentation-target-package. \n+     * Look to aapt for more help on this. </p>\n+     *\n+     * @parameter expression=\"${android.renameInstrumentationTargetPackage}\"\n+     */\n+    private String renameInstrumentationTargetPackage;\n \n     /**\n      * <p>Root folder containing native libraries to include in the application package.</p>\n@@ -766,8 +775,13 @@ public class ApkMojo extends AbstractAndroidMojo {\n         }\n         \n         if (StringUtils.isNotBlank(renameManifestPackage)) {\n-        \tcommands.add(\"--rename-manifest-package\");\n-        \tcommands.add(renameManifestPackage);\n+          commands.add(\"--rename-manifest-package\");\n+          commands.add(renameManifestPackage);\n+        }\n+        \n+        if (StringUtils.isNotBlank(renameInstrumentationTargetPackage)) {\n+          commands.add(\"--rename-instrumentation-target-package\");\n+          commands.add(renameInstrumentationTargetPackage);\n         }\n \n         commands.add(\"-I\");\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
          "label": "test"
        },
        {
          "change": "diff --git a/CICD/pipeline.yml b/CICD/pipeline.yml\nindex 678f637..892a597 100644\n--- a/CICD/pipeline.yml\n+++ b/CICD/pipeline.yml\n@@ -1,13 +1,22 @@\n stages:\n   - build\n   - test\n-  - deploy\n+  - staging\n+  - production\n \n jobs:\n   build:\n     stage: build\n     script: 'make build'\n \n   test:\n     stage: test\n     script: 'make test'\n+    \n+  staging:\n+    stage: staging\n+    script: 'make deploy-staging'\n+  \n+  production:\n+    stage: production\n+    script: 'make deploy-production'",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\nindex 9152c82d56..1e58458bc4 100644\n--- a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n+++ b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n@@ -150,7 +150,7 @@ public class ExtendsTest extends UnitTestCase {\n \t\t}\n \t}\n \n-\tpublic void testEntityNamesWithPackageFailureExpected() {\n+\tpublic void testEntityNamesWithPackage() {\n \t\tConfiguration cfg = new Configuration();\n \t\ttry {\n \t\t\tcfg.addResource( getBaseForMappings() + \"extendshbm/packageentitynames.hbm.xml\" );\n\ndiff --git a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\nindex 4405aa8..e9976cf 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n@@ -504,6 +504,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     private VertexListInternal retrieveFromMemory(VertexListInternal vertices) {\n+        edgesOnly();\n         if (node==null) node = tx.getExistingVertex(nodeid);\n         AtomicTitanQuery q = new AtomicTitanQuery(node,this);\n         Iterator<TitanEdge> iter = q.edgeIterator();\n@@ -515,6 +516,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     public VertexListInternal getVertexIDs() {\n+        edgesOnly();\n         Preconditions.checkNotNull(tx);\n         Preconditions.checkArgument(node==null || (!node.isNew() && !node.isModified()),\n                 \"Cannot query for raw neighborhood on new or modified node.\");\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
      "atomicChanges": [
        {
          "change": "diff --git a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\nindex 9152c82d56..1e58458bc4 100644\n--- a/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n+++ b/testsuite/src/test/java/org/hibernate/test/extendshbm/ExtendsTest.java\n@@ -150,7 +150,7 @@ public class ExtendsTest extends UnitTestCase {\n \t\t}\n \t}\n \n-\tpublic void testEntityNamesWithPackageFailureExpected() {\n+\tpublic void testEntityNamesWithPackage() {\n \t\tConfiguration cfg = new Configuration();\n \t\ttry {\n \t\t\tcfg.addResource( getBaseForMappings() + \"extendshbm/packageentitynames.hbm.xml\" );\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\nindex 4405aa8..e9976cf 100644\n--- a/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n+++ b/src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicTitanQuery.java\n@@ -504,6 +504,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     private VertexListInternal retrieveFromMemory(VertexListInternal vertices) {\n+        edgesOnly();\n         if (node==null) node = tx.getExistingVertex(nodeid);\n         AtomicTitanQuery q = new AtomicTitanQuery(node,this);\n         Iterator<TitanEdge> iter = q.edgeIterator();\n@@ -515,6 +516,7 @@ public class AtomicTitanQuery implements InternalTitanQuery {\n     }\n \n     public VertexListInternal getVertexIDs() {\n+        edgesOnly();\n         Preconditions.checkNotNull(tx);\n         Preconditions.checkArgument(node==null || (!node.isNew() && !node.isModified()),\n                 \"Cannot query for raw neighborhood on new or modified node.\");\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\nindex 53fc396921..a6fd5e0cc3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\n@@ -61,6 +61,10 @@ public class DashAudioVideoNotesFragment extends DashBaseFragment {\n \n \tpublic void setupNotes() {\n \t\tView mainView = getView();\n+\t\tif (mainView == null) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\tif (plugin == null){\n \t\t\t(mainView.findViewById(R.id.main_notes)).setVisibility(View.GONE);\n \t\t\treturn;\n\ndiff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java b/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\nindex 53fc396921..a6fd5e0cc3 100644\n--- a/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/dashboard/DashAudioVideoNotesFragment.java\n@@ -61,6 +61,10 @@ public class DashAudioVideoNotesFragment extends DashBaseFragment {\n \n \tpublic void setupNotes() {\n \t\tView mainView = getView();\n+\t\tif (mainView == null) {\n+\t\t\treturn;\n+\t\t}\n+\n \t\tif (plugin == null){\n \t\t\t(mainView.findViewById(R.id.main_notes)).setVisibility(View.GONE);\n \t\t\treturn;\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\nindex 91d95547a6..c693ec984c 100644\n--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java\n@@ -9,6 +9,7 @@ import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.dynamic.ClassFileLocator;\n import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\n import net.bytebuddy.implementation.bytecode.StackSize;\n+import net.bytebuddy.test.utility.DebuggingWrapper;\n import net.bytebuddy.test.utility.ObjectPropertyAssertion;\n import org.junit.Test;\n import org.objectweb.asm.ClassReader;\n@@ -52,6 +53,7 @@ public class AdviceTest {\n     public void testEmptyAdviceEntryAndExit() throws Exception {\n         Class<?> type = new ByteBuddy()\n                 .redefine(EmptyMethod.class)\n+                .visit(DebuggingWrapper.makeDefault())\n                 .visit(Advice.to(EmptyAdvice.class).on(named(FOO)).readerFlags(ClassReader.SKIP_DEBUG))\n                 .make()\n                 .load(null, ClassLoadingStrategy.Default.WRAPPER)\n",
          "label": "test"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\nindex 49a824b..7dc0cfc 100755\n--- a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n+++ b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n@@ -345,7 +345,7 @@ public class WXSDKEngine {\n    * {@link WXModuleManager#registerModule(String, ModuleFactory, boolean)}\n    */\n   public static <T extends WXModule> boolean registerModule(String moduleName, Class<T> moduleClass,boolean global) throws WXException {\n-    return registerModule(moduleName, new TypeModuleFactory(moduleClass),global);\n+    return moduleClass != null && registerModule(moduleName, new TypeModuleFactory<>(moduleClass), global);\n   }\n \n   /**\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }\ndiff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
      "atomicChanges": [
        {
          "change": "diff --git a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\nindex 49a824b..7dc0cfc 100755\n--- a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n+++ b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n@@ -345,7 +345,7 @@ public class WXSDKEngine {\n    * {@link WXModuleManager#registerModule(String, ModuleFactory, boolean)}\n    */\n   public static <T extends WXModule> boolean registerModule(String moduleName, Class<T> moduleClass,boolean global) throws WXException {\n-    return registerModule(moduleName, new TypeModuleFactory(moduleClass),global);\n+    return moduleClass != null && registerModule(moduleName, new TypeModuleFactory<>(moduleClass), global);\n   }\n \n   /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        }
      ]
    }
  ]
}