{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "feat",
      "fix",
      "refactor"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n\ndiff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n\ndiff --git a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\nindex bdb0a4f..1e18f2e 100644\n--- a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n+++ b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n@@ -21,6 +21,7 @@ import com.intellij.codeHighlighting.TextEditorHighlightingPass;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassFactory;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassRegistrar;\n import com.intellij.codeInsight.CodeInsightSettings;\n+import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.AbstractProjectComponent;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.project.Project;\n@@ -40,7 +41,8 @@ public class IdentifierHighlighterPassFactory extends AbstractProjectComponent i\n   public TextEditorHighlightingPass createHighlightingPass(@NotNull final PsiFile file, @NotNull final Editor editor) {\n     if (editor.isOneLineMode()) return null;\n \n-    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {\n+    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET ||\n+        ApplicationManager.getApplication().isHeadlessEnvironment()) {\n       return null;\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\nindex bdb0a4f..1e18f2e 100644\n--- a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n+++ b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n@@ -21,6 +21,7 @@ import com.intellij.codeHighlighting.TextEditorHighlightingPass;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassFactory;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassRegistrar;\n import com.intellij.codeInsight.CodeInsightSettings;\n+import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.AbstractProjectComponent;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.project.Project;\n@@ -40,7 +41,8 @@ public class IdentifierHighlighterPassFactory extends AbstractProjectComponent i\n   public TextEditorHighlightingPass createHighlightingPass(@NotNull final PsiFile file, @NotNull final Editor editor) {\n     if (editor.isOneLineMode()) return null;\n \n-    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {\n+    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET ||\n+        ApplicationManager.getApplication().isHeadlessEnvironment()) {\n       return null;\n     }\n \n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n\ndiff --git a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\nindex 56f367fb4..3603a9117 100644\n--- a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n+++ b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n@@ -335,7 +335,7 @@ public class ClassCompiler {\n                 String triple = config.getTriple();\n                 Target target = Target.lookupTarget(triple);\n                 try (TargetMachine targetMachine = target.createTargetMachine(triple,\n-                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelNone: null, null, null)) {\n+                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelDefault: null, null, null)) {\n                     targetMachine.setAsmVerbosityDefault(true);\n                     targetMachine.setFunctionSections(true);\n                     targetMachine.setDataSections(true);\n\ndiff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\nindex 56f367fb4..3603a9117 100644\n--- a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n+++ b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n@@ -335,7 +335,7 @@ public class ClassCompiler {\n                 String triple = config.getTriple();\n                 Target target = Target.lookupTarget(triple);\n                 try (TargetMachine targetMachine = target.createTargetMachine(triple,\n-                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelNone: null, null, null)) {\n+                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelDefault: null, null, null)) {\n                     targetMachine.setAsmVerbosityDefault(true);\n                     targetMachine.setFunctionSections(true);\n                     targetMachine.setDataSections(true);\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n\ndiff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\nindex 4412b27c..fa9b81bd 100644\n--- a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n+++ b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n@@ -1067,6 +1067,7 @@ public class Roster extends Manager {\n             return userPresences;\n         }\n \n+        @Override\n         public void processPacket(Packet packet) throws NotConnectedException {\n             final XMPPConnection connection = connection();\n             Presence presence = (Presence) packet;\n\ndiff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n\ndiff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\nindex 4412b27c..fa9b81bd 100644\n--- a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n+++ b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n@@ -1067,6 +1067,7 @@ public class Roster extends Manager {\n             return userPresences;\n         }\n \n+        @Override\n         public void processPacket(Packet packet) throws NotConnectedException {\n             final XMPPConnection connection = connection();\n             Presence presence = (Presence) packet;\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n\ndiff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n\ndiff --git a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\nindex 80300020..92718985 100644\n--- a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n+++ b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n@@ -115,7 +115,7 @@ public class OAuth2ProviderBeanDefinitionParser implements BeanDefinitionParser\n       String authenticationCacheRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"authentication-cache-ref\");\n       String approvalFilterRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"user-approval-filter-ref\");\n       String approvalHandlerRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n-      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n+      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"redirect-strategy-ref\");\n       if (!StringUtils.hasText(verificationCodeRedirectStrategyRef)) {\n         verificationCodeRedirectStrategyRef = redirectStrategyRef;\n       }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\nindex 80300020..92718985 100644\n--- a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n+++ b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n@@ -115,7 +115,7 @@ public class OAuth2ProviderBeanDefinitionParser implements BeanDefinitionParser\n       String authenticationCacheRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"authentication-cache-ref\");\n       String approvalFilterRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"user-approval-filter-ref\");\n       String approvalHandlerRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n-      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n+      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"redirect-strategy-ref\");\n       if (!StringUtils.hasText(verificationCodeRedirectStrategyRef)) {\n         verificationCodeRedirectStrategyRef = redirectStrategyRef;\n       }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n\ndiff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n\ndiff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n\ndiff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n\ndiff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
      "atomicChanges": [
        {
          "change": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n\ndiff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n\ndiff --git a/java/org/apache/tomcat/util/file/ConfigFileLoader.java b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\nindex 1f1f4039d..1b0b63da0 100644\n--- a/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n+++ b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n@@ -33,7 +33,7 @@ public class ConfigFileLoader {\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        File catalinaBase = new File(\"\");\n+        File catalinaBase = new File(System.getProperty(\"catalina.base\"));\n         CATALINA_BASE_URI = catalinaBase.toURI();\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/ConfigFileLoader.java b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\nindex 1f1f4039d..1b0b63da0 100644\n--- a/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n+++ b/java/org/apache/tomcat/util/file/ConfigFileLoader.java\n@@ -33,7 +33,7 @@ public class ConfigFileLoader {\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        File catalinaBase = new File(\"\");\n+        File catalinaBase = new File(System.getProperty(\"catalina.base\"));\n         CATALINA_BASE_URI = catalinaBase.toURI();\n     }\n \n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n\ndiff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n\ndiff --git a/src/biz/bokhorst/xprivacy/XWebView.java b/src/biz/bokhorst/xprivacy/XWebView.java\nindex 94edfbb7..f1a94807 100644\n--- a/src/biz/bokhorst/xprivacy/XWebView.java\n+++ b/src/biz/bokhorst/xprivacy/XWebView.java\n@@ -30,7 +30,7 @@ public class XWebView extends XHook {\n \t// frameworks/base/core/java/android/webkit/WebView.java\n \t// http://developer.android.com/reference/android/webkit/WebView.html\n \n-\t// public synchronize String getUserAgentString()\n+\t// public synchronized void setUserAgent(int ua)\n \t// public synchronized void setUserAgentString (String ua)\n \t// frameworks/base/core/java/android/webkit/WebSettings.java\n \t// http://developer.android.com/reference/android/webkit/WebSettings.html\n@@ -69,7 +69,7 @@ public class XWebView extends XHook {\n \n \t\t\t\t\t// setUserAgent\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", String.class);\n+\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", Integer.class);\n \t\t\t\t\t\tUtil.log(this, Log.INFO, \"Hooking \" + setUserAgent.getName());\n \t\t\t\t\t\tXposedBridge.hookMethod(setUserAgent, new XC_MethodHook() {\n \t\t\t\t\t\t\t@Override\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\nindex 0c439f3e5..c02de8cb9 100644\n--- a/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n+++ b/subprojects/groovy-templates/src/main/groovy/groovy/text/markup/MarkupTemplateEngine.java\n@@ -39,6 +39,8 @@ import java.io.StringReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.Collections;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -62,7 +64,7 @@ public class MarkupTemplateEngine extends TemplateEngine {\n         this(MarkupTemplateEngine.class.getClassLoader(), new TemplateConfiguration());\n     }\n \n-    public MarkupTemplateEngine(ClassLoader parentLoader, TemplateConfiguration tplConfig) {\n+    public MarkupTemplateEngine(final ClassLoader parentLoader, final TemplateConfiguration tplConfig) {\n         compilerConfiguration = new CompilerConfiguration();\n         templateConfiguration = tplConfig;\n         compilerConfiguration.addCompilationCustomizers(new TemplateASTTransformer(tplConfig));\n@@ -78,7 +80,11 @@ public class MarkupTemplateEngine extends TemplateEngine {\n                     }\n             );\n         }\n-        groovyClassLoader = new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+        groovyClassLoader = AccessController.doPrivileged(new PrivilegedAction<TemplateGroovyClassLoader>() {\n+            public TemplateGroovyClassLoader run() {\n+                return new TemplateGroovyClassLoader(parentLoader, compilerConfiguration);\n+            }\n+        });\n     }\n \n     /**\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/biz/bokhorst/xprivacy/XWebView.java b/src/biz/bokhorst/xprivacy/XWebView.java\nindex 94edfbb7..f1a94807 100644\n--- a/src/biz/bokhorst/xprivacy/XWebView.java\n+++ b/src/biz/bokhorst/xprivacy/XWebView.java\n@@ -30,7 +30,7 @@ public class XWebView extends XHook {\n \t// frameworks/base/core/java/android/webkit/WebView.java\n \t// http://developer.android.com/reference/android/webkit/WebView.html\n \n-\t// public synchronize String getUserAgentString()\n+\t// public synchronized void setUserAgent(int ua)\n \t// public synchronized void setUserAgentString (String ua)\n \t// frameworks/base/core/java/android/webkit/WebSettings.java\n \t// http://developer.android.com/reference/android/webkit/WebSettings.html\n@@ -69,7 +69,7 @@ public class XWebView extends XHook {\n \n \t\t\t\t\t// setUserAgent\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", String.class);\n+\t\t\t\t\t\tMethod setUserAgent = clazzWebSettings.getDeclaredMethod(\"setUserAgent\", Integer.class);\n \t\t\t\t\t\tUtil.log(this, Log.INFO, \"Hooking \" + setUserAgent.getName());\n \t\t\t\t\t\tXposedBridge.hookMethod(setUserAgent, new XC_MethodHook() {\n \t\t\t\t\t\t\t@Override\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/library/src/com/db/chart/view/HorizontalBarChartView.java b/library/src/com/db/chart/view/HorizontalBarChartView.java\nindex 0c59432..ff7ea96 100644\n--- a/library/src/com/db/chart/view/HorizontalBarChartView.java\n+++ b/library/src/com/db/chart/view/HorizontalBarChartView.java\n@@ -68,8 +68,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n@@ -168,8 +168,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n\ndiff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n\ndiff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
      "atomicChanges": [
        {
          "change": "diff --git a/library/src/com/db/chart/view/HorizontalBarChartView.java b/library/src/com/db/chart/view/HorizontalBarChartView.java\nindex 0c59432..ff7ea96 100644\n--- a/library/src/com/db/chart/view/HorizontalBarChartView.java\n+++ b/library/src/com/db/chart/view/HorizontalBarChartView.java\n@@ -68,8 +68,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n@@ -168,8 +168,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        }
      ]
    }
  ]
}