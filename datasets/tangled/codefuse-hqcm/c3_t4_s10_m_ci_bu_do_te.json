{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "cicd",
      "build",
      "docs",
      "test"
    ],
    "allow_same_types": true,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n\ndiff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/jenkins/pipeline/stages/deploy.groovy b/jenkins/pipeline/stages/deploy.groovy\nindex e6d5af1..b2437c8 100644\n--- a/jenkins/pipeline/stages/deploy.groovy\n+++ b/jenkins/pipeline/stages/deploy.groovy\n@@ -1,8 +1,9 @@\n def call(body) {\n-    def config = body.getConfig()\n+    def config = getConfigFromGit()\n     def environment = body.getEnvironment()\n+    def appVersion = getAppVersionFromGit()\n\n-    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${config.imageTag} --namespace=${environment}\")\n+    sh(\"kubectl set image deployment/${config.applicationName} ${config.applicationName}=${config.imageRepository}:${appVersion} --namespace=${environment}\")\n\n     body.doLast()\n }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n\ndiff --git a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\nindex 662c493..093b857 100644\n--- a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n+++ b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n@@ -41,6 +41,7 @@ public class HystrixCommandTestWithCustomConcurrencyStrategy {\n     public void reset() {\n         HystrixRequestContext.setContextOnCurrentThread(null);\n         HystrixPropertiesFactory.reset();\n+        HystrixPlugins.reset();\n     }\n \n     /**\n\ndiff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
          "label": "test"
        },
        {
          "change": "diff --git a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\nindex 662c493..093b857 100644\n--- a/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n+++ b/hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandTestWithCustomConcurrencyStrategy.java\n@@ -41,6 +41,7 @@ public class HystrixCommandTestWithCustomConcurrencyStrategy {\n     public void reset() {\n         HystrixRequestContext.setContextOnCurrentThread(null);\n         HystrixPropertiesFactory.reset();\n+        HystrixPlugins.reset();\n     }\n \n     /**\n",
          "label": "test"
        },
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n\ndiff --git a/source/org/jivesoftware/smackx/packet/Time.java b/source/org/jivesoftware/smackx/packet/Time.java\nindex 196e8f21..0e830567 100644\n--- a/source/org/jivesoftware/smackx/packet/Time.java\n+++ b/source/org/jivesoftware/smackx/packet/Time.java\n@@ -14,24 +14,23 @@ import java.text.DateFormat;\n  * following code snippet:\n  *\n  * <pre>\n- * <font color=\"darkgreen\">// Request the time from a remote user.</font>\n- * Time timeRequest = <font color=\"navy\"><b>new</b></font> Time();\n+ * // Request the time from a remote user.\n+ * Time timeRequest = new Time();\n  * timeRequest.setType(IQ.Type.GET);\n- * timeRequest.setTo(<font color=\"red\">\"someUser@example.com\"</font>);\n-\n- * &nbsp;\n- * <font color=\"darkgreen\">// Create a packet collector to listen for a response.</font>\n+ * timeRequest.setTo(someUser@example.com);\n+ *\n+ * // Create a packet collector to listen for a response.\n  * PacketCollector collector = con.createPacketCollector(\n- *                <font color=\"navy\"><b>new</b></font> PacketIDFilter(timeRequest.getPacketID()));\n- * &nbsp;\n+ *                new PacketIDFilter(timeRequest.getPacketID()));\n+ *\n  * con.sendPacket(timeRequest);\n- * &nbsp;\n- * <font color=\"darkgreen\">// Wait up to 5 seconds for a result.</font>\n+ *\n+ * // Wait up to 5 seconds for a result.\n  * IQ result = (IQ)collector.nextResult(5000);\n- * <font color=\"navy\"><b>if</b></font> (result != <font color=\"navy\"><b>null</b></font> &#38;&#38; result.getType() == IQ.Type.RESULT) <font color=\"navy\">{</font>\n+ * if (result != null && result.getType() == IQ.Type.RESULT) {\n  *     Time timeResult = (Time)result;\n- *     <font color=\"darkgreen\">// Do something with result...</font>\n- * <font color=\"navy\">}</font></pre><p>\n+ *     // Do something with result...\n+ * }</pre><p>\n  *\n  * Warning: this is an non-standard protocol documented by\n  * <a href=\"http://www.jabber.org/jeps/jep-0090.html\">JEP-90</a>. Because this is a\n\ndiff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\nindex cd5bca3..7e1d291 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/artifacts/ComponentModuleMetadataDetails.java\n@@ -20,6 +20,7 @@ import org.gradle.api.Incubating;\n \n /**\n  * Contains and allows configuring component module metadata information.\n+ * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}\n  *\n  * @since 2.2\n  */\n@@ -30,7 +31,9 @@ public interface ComponentModuleMetadataDetails extends ComponentModuleMetadata\n      * Configures a replacement module for this module.\n      * A real world example: 'com.google.collections:google-collections' is replaced by 'com.google.guava:guava'.\n      *\n-     * //TODO SF document that it replaces, add coverage for replacing with 'self'\n+     * Subsequent invocations of this method replace the previous 'replacedBy' value.\n+     *\n+     * For information and examples please see {@link org.gradle.api.artifacts.dsl.ComponentMetadataHandler}.\n      *\n      * @param moduleNotation a String like 'com.google.guava:guava', an instance of {@link org.gradle.api.artifacts.ModuleVersionIdentifier}, null is not permitted\n      */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/source/org/jivesoftware/smackx/packet/Time.java b/source/org/jivesoftware/smackx/packet/Time.java\nindex 196e8f21..0e830567 100644\n--- a/source/org/jivesoftware/smackx/packet/Time.java\n+++ b/source/org/jivesoftware/smackx/packet/Time.java\n@@ -14,24 +14,23 @@ import java.text.DateFormat;\n  * following code snippet:\n  *\n  * <pre>\n- * <font color=\"darkgreen\">// Request the time from a remote user.</font>\n- * Time timeRequest = <font color=\"navy\"><b>new</b></font> Time();\n+ * // Request the time from a remote user.\n+ * Time timeRequest = new Time();\n  * timeRequest.setType(IQ.Type.GET);\n- * timeRequest.setTo(<font color=\"red\">\"someUser@example.com\"</font>);\n-\n- * &nbsp;\n- * <font color=\"darkgreen\">// Create a packet collector to listen for a response.</font>\n+ * timeRequest.setTo(someUser@example.com);\n+ *\n+ * // Create a packet collector to listen for a response.\n  * PacketCollector collector = con.createPacketCollector(\n- *                <font color=\"navy\"><b>new</b></font> PacketIDFilter(timeRequest.getPacketID()));\n- * &nbsp;\n+ *                new PacketIDFilter(timeRequest.getPacketID()));\n+ *\n  * con.sendPacket(timeRequest);\n- * &nbsp;\n- * <font color=\"darkgreen\">// Wait up to 5 seconds for a result.</font>\n+ *\n+ * // Wait up to 5 seconds for a result.\n  * IQ result = (IQ)collector.nextResult(5000);\n- * <font color=\"navy\"><b>if</b></font> (result != <font color=\"navy\"><b>null</b></font> &#38;&#38; result.getType() == IQ.Type.RESULT) <font color=\"navy\">{</font>\n+ * if (result != null && result.getType() == IQ.Type.RESULT) {\n  *     Time timeResult = (Time)result;\n- *     <font color=\"darkgreen\">// Do something with result...</font>\n- * <font color=\"navy\">}</font></pre><p>\n+ *     // Do something with result...\n+ * }</pre><p>\n  *\n  * Warning: this is an non-standard protocol documented by\n  * <a href=\"http://www.jabber.org/jeps/jep-0090.html\">JEP-90</a>. Because this is a\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/docs/pom.xml b/docs/pom.xml\nindex f172775..54bd64c 100644\n--- a/docs/pom.xml\n+++ b/docs/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n     </parent>\n \n     <artifactId>trino-docs</artifactId>",
          "label": "build"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/shenyu-client/pom.xml b/shenyu-client/pom.xml\nindex 971011e..91c0874 100644\n--- a/shenyu-client/pom.xml\n+++ b/shenyu-client/pom.xml\n@@ -37,6 +37,7 @@\n         <module>shenyu-client-websocket</module>\n         <module>shenyu-client-brpc</module>\n         <module>shenyu-client-api-docs-annotations</module>\n+        <module>shenyu-client-autoconfig</module>\n     </modules>\n \n     <dependencies>\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/shenyu-client/pom.xml b/shenyu-client/pom.xml\nindex 971011e..91c0874 100644\n--- a/shenyu-client/pom.xml\n+++ b/shenyu-client/pom.xml\n@@ -37,6 +37,7 @@\n         <module>shenyu-client-websocket</module>\n         <module>shenyu-client-brpc</module>\n         <module>shenyu-client-api-docs-annotations</module>\n+        <module>shenyu-client-autoconfig</module>\n     </modules>\n \n     <dependencies>",
          "label": "build"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:\ndiff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n\ndiff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        },
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests\ndiff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }\ndiff --git a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\nindex 520ea21..f19d711 100644\n--- a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\n+++ b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\n@@ -69,6 +69,19 @@ public class OrientJdbcPreparedStatementTest extends OrientJdbcBaseTest {\n \t}\r\n \r\n \t@Test\r\n+\tpublic void testExecuteUpdateReturnsNumberOfRowsDeleted() throws Exception {\r\n+\t\tconn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n+\t\tconn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n+\t\tconn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n+\r\n+\t\tPreparedStatement statement = conn.prepareStatement(\"DELETE FROM Insertable WHERE ID > ?\");\r\n+\t\tstatement.setInt(1, 0);\r\n+\t\tint rowsInserted = statement.executeUpdate();\r\n+\r\n+\t\tassertEquals( 2, rowsInserted );\r\n+\t}\r\n+\r\n+\t@Test\r\n   public void shouldExecutePreparedStatement() throws Exception {\r\n     PreparedStatement stmt = conn.prepareStatement(\"SELECT  \" + \"FROM Item \" + \"WHERE stringKey = ? OR intKey = ?\");\r\n     assertNotNull(stmt);\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 3e5f6a9..2b763ed 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -1,6 +1,6 @@\n image: node:14\n \n-test:\n+tests:\n   script:\n     - npm install\n     - npm run test\n@@ -8,3 +8,20 @@ test:\n   only:\n     - main\n     - merge_requests\n+\n+code_scan:\n+  image: sonarsource/sonar-scanner-cli\n+  script:\n+    - sonar-scanner\n+  only:\n+    - main\n+    - merge_requests\n+    - feature/*\n+\n+security_scan:\n+  image: aquasec/trivy:latest\n+  script:\n+    - trivy filesystem --exit-code 1 --no-progress /\n+  only:\n+    - main\n+    - merge_requests",
          "label": "cicd"
        },
        {
          "change": "diff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\nindex 520ea21..f19d711 100644\n--- a/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\n+++ b/src/test/java/com/orientechnologies/orient/jdbc/OrientJdbcPreparedStatementTest.java\n@@ -69,6 +69,19 @@ public class OrientJdbcPreparedStatementTest extends OrientJdbcBaseTest {\n \t}\r\n \r\n \t@Test\r\n+\tpublic void testExecuteUpdateReturnsNumberOfRowsDeleted() throws Exception {\r\n+\t\tconn.createStatement().executeQuery(\"CREATE CLASS Insertable \");\r\n+\t\tconn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(1)\");\r\n+\t\tconn.createStatement().executeQuery(\"INSERT INTO Insertable(id) VALUES(2)\");\r\n+\r\n+\t\tPreparedStatement statement = conn.prepareStatement(\"DELETE FROM Insertable WHERE ID > ?\");\r\n+\t\tstatement.setInt(1, 0);\r\n+\t\tint rowsInserted = statement.executeUpdate();\r\n+\r\n+\t\tassertEquals( 2, rowsInserted );\r\n+\t}\r\n+\r\n+\t@Test\r\n   public void shouldExecutePreparedStatement() throws Exception {\r\n     PreparedStatement stmt = conn.prepareStatement(\"SELECT  \" + \"FROM Item \" + \"WHERE stringKey = ? OR intKey = ?\");\r\n     assertNotNull(stmt);\r\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }\ndiff --git a/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java b/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\nindex 69f540c..9e44eb0 100644\n--- a/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\n+++ b/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\n@@ -23,6 +23,8 @@ import org.elasticsearch.common.collect.Tuple;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.env.Environment;\n import org.elasticsearch.node.internal.InternalSettingsPerparer;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;\n@@ -30,9 +32,18 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n \n public class InternalSettingsPerparerTests {\n+    @BeforeMethod\n+    public void setupSystemProperties() {\n+        System.setProperty(\"es.node.zone\", \"foo\");\n+    }\n+\n+    @AfterMethod\n+    public void cleanupSystemProperties() {\n+        System.clearProperty(\"es.node.zone\");\n+    }\n+\n     @Test\n     public void testIgnoreSystemProperties() {\n-        System.setProperty(\"es.node.zone\", \"foo\");\n         Tuple<Settings, Environment> tuple = InternalSettingsPerparer.prepareSettings(settingsBuilder().put(\"node.zone\", \"bar\").build(), true);\n         // Should use setting from the system property\n         assertThat(tuple.v1().get(\"node.zone\"), equalTo(\"foo\"));\n\ndiff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
      "atomicChanges": [
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex e84e462..0f68828 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -15,14 +15,14 @@\n\n-sourceCompatibility = 1.5\n+sourceCompatibility = 1.8\n version = '1.0'\n jar {\n     manifest {\n         attributes 'Implementation-Title': 'Gradle Quickstart',\n                    'Implementation-Version': version\n     }\n }\n \n-dependencies {\n+dependencies { \n     testCompile group: 'junit', name: 'junit', version: '4.12'\n-    compile group: 'com.google.guava', name: 'guava', version: '18.0'\n+    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java b/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\nindex 69f540c..9e44eb0 100644\n--- a/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\n+++ b/src/test/java/org/elasticsearch/test/unit/node/internal/InternalSettingsPerparerTests.java\n@@ -23,6 +23,8 @@ import org.elasticsearch.common.collect.Tuple;\n import org.elasticsearch.common.settings.Settings;\n import org.elasticsearch.env.Environment;\n import org.elasticsearch.node.internal.InternalSettingsPerparer;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;\n@@ -30,9 +32,18 @@ import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.equalTo;\n \n public class InternalSettingsPerparerTests {\n+    @BeforeMethod\n+    public void setupSystemProperties() {\n+        System.setProperty(\"es.node.zone\", \"foo\");\n+    }\n+\n+    @AfterMethod\n+    public void cleanupSystemProperties() {\n+        System.clearProperty(\"es.node.zone\");\n+    }\n+\n     @Test\n     public void testIgnoreSystemProperties() {\n-        System.setProperty(\"es.node.zone\", \"foo\");\n         Tuple<Settings, Environment> tuple = InternalSettingsPerparer.prepareSettings(settingsBuilder().put(\"node.zone\", \"bar\").build(), true);\n         // Should use setting from the system property\n         assertThat(tuple.v1().get(\"node.zone\"), equalTo(\"foo\"));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java b/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\nindex 73a3e36..b10705e 100644\n--- a/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\n+++ b/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\n@@ -17,15 +17,16 @@ import static org.junit.Assert.assertArrayEquals;\n \n public class ImapConnectionTest extends TestCase {\n     private static final String[] CAPABILITIES = new String[] { \"IMAP4REV1\", \"LITERAL+\", \"QUOTA\" };\n-    \n+\n     private StubMailServer stubMailServer;\n     private ImapConnection connection;\n-    private TestImapSettings settings = new TestImapSettings(UserForImap.TEST_USER);\n+    private TestImapSettings settings;\n \n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         stubMailServer = new StubMailServer();\n+        settings = new TestImapSettings(UserForImap.TEST_USER);\n         connection = new ImapConnection(settings, null, null);\n     }\n \n@@ -46,6 +47,10 @@ public class ImapConnectionTest extends TestCase {\n         }\n     }\n \n+    public void testConnectionIsInitiallyClosed() throws Exception {\n+        assertFalse(connection.isOpen());\n+    }\n+\n     public void testSuccessfulOpenConnectionTogglesOpenState() throws Exception {\n         connection.open();\n         assertTrue(connection.isOpen());\n\ndiff --git a/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java b/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\nindex 2ad5c4a151..2aea0522ce 100644\n--- a/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\n+++ b/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\n@@ -28,7 +28,6 @@ import org.sonar.core.activity.db.ActivityDto;\n import org.sonar.core.persistence.DbTester;\n import org.sonar.test.DbTests;\n \n-import java.sql.Timestamp;\n import java.util.Map;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -59,7 +58,9 @@ public class ActivityDaoTest {\n \n     Map<String, Object> map = dbTester.selectFirst(\"select created_at as \\\"createdAt\\\", log_action as \\\"action\\\", data_field as \\\"data\\\" from activities where log_key='UUID_1'\");\n     assertThat(map.get(\"action\")).isEqualTo(\"THE_ACTION\");\n-    assertThat(((Timestamp)map.get(\"createdAt\")).getTime()).isEqualTo(1_500_000_000_000L);\n+    // not possible to check exact date yet. dbTester#selectFirst() uses ResultSet#getObject(), which returns\n+    // non-JDBC interface in Oracle driver.\n+    assertThat(map.get(\"createdAt\")).isNotNull();\n     assertThat(map.get(\"data\")).isEqualTo(\"THE_DATA\");\n   }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java b/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\nindex 73a3e36..b10705e 100644\n--- a/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\n+++ b/k9mail/src/androidTest/java/com/fsck/k9/mail/store/imap/ImapConnectionTest.java\n@@ -17,15 +17,16 @@ import static org.junit.Assert.assertArrayEquals;\n \n public class ImapConnectionTest extends TestCase {\n     private static final String[] CAPABILITIES = new String[] { \"IMAP4REV1\", \"LITERAL+\", \"QUOTA\" };\n-    \n+\n     private StubMailServer stubMailServer;\n     private ImapConnection connection;\n-    private TestImapSettings settings = new TestImapSettings(UserForImap.TEST_USER);\n+    private TestImapSettings settings;\n \n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         stubMailServer = new StubMailServer();\n+        settings = new TestImapSettings(UserForImap.TEST_USER);\n         connection = new ImapConnection(settings, null, null);\n     }\n \n@@ -46,6 +47,10 @@ public class ImapConnectionTest extends TestCase {\n         }\n     }\n \n+    public void testConnectionIsInitiallyClosed() throws Exception {\n+        assertFalse(connection.isOpen());\n+    }\n+\n     public void testSuccessfulOpenConnectionTogglesOpenState() throws Exception {\n         connection.open();\n         assertTrue(connection.isOpen());\n",
          "label": "test"
        },
        {
          "change": "diff --git a/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java b/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\nindex 2ad5c4a151..2aea0522ce 100644\n--- a/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\n+++ b/server/sonar-server/src/test/java/org/sonar/server/activity/db/ActivityDaoTest.java\n@@ -28,7 +28,6 @@ import org.sonar.core.activity.db.ActivityDto;\n import org.sonar.core.persistence.DbTester;\n import org.sonar.test.DbTests;\n \n-import java.sql.Timestamp;\n import java.util.Map;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -59,7 +58,9 @@ public class ActivityDaoTest {\n \n     Map<String, Object> map = dbTester.selectFirst(\"select created_at as \\\"createdAt\\\", log_action as \\\"action\\\", data_field as \\\"data\\\" from activities where log_key='UUID_1'\");\n     assertThat(map.get(\"action\")).isEqualTo(\"THE_ACTION\");\n-    assertThat(((Timestamp)map.get(\"createdAt\")).getTime()).isEqualTo(1_500_000_000_000L);\n+    // not possible to check exact date yet. dbTester#selectFirst() uses ResultSet#getObject(), which returns\n+    // non-JDBC interface in Oracle driver.\n+    assertThat(map.get(\"createdAt\")).isNotNull();\n     assertThat(map.get(\"data\")).isEqualTo(\"THE_DATA\");\n   }\n }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java b/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\nindex f89c3dd8e7..3efc1c10cc 100644\n--- a/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\n+++ b/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\n@@ -38,9 +38,7 @@ import org.hamcrest.Matchers;\n import org.junit.Rule;\n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.assertThat;\n \n public class ModulesTest\n\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/h2o-core/src/test/java/water/fvec/WordCountBigTest.java b/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\nindex cc15bb5b8..c23cf28ed 100644\n--- a/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\n+++ b/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\n@@ -14,4 +14,8 @@ public class WordCountBigTest extends WordCountTest {\n     if( file==null ) throw new FileNotFoundException(best);\n     doWordCount(file);\n   }\n+\n+  @Test public void testWordCount() throws IOException {\n+    // Do nothing; in particular, don't run inherited testWordCount again.\n+  }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java b/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\nindex f89c3dd8e7..3efc1c10cc 100644\n--- a/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\n+++ b/jetty-start/src/test/java/org/eclipse/jetty/start/ModulesTest.java\n@@ -38,9 +38,7 @@ import org.hamcrest.Matchers;\n import org.junit.Rule;\n import org.junit.Test;\n \n-import static org.hamcrest.Matchers.anyOf;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.*;\n import static org.junit.Assert.assertThat;\n \n public class ModulesTest\n",
          "label": "test"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/h2o-core/src/test/java/water/fvec/WordCountBigTest.java b/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\nindex cc15bb5b8..c23cf28ed 100644\n--- a/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\n+++ b/h2o-core/src/test/java/water/fvec/WordCountBigTest.java\n@@ -14,4 +14,8 @@ public class WordCountBigTest extends WordCountTest {\n     if( file==null ) throw new FileNotFoundException(best);\n     doWordCount(file);\n   }\n+\n+  @Test public void testWordCount() throws IOException {\n+    // Do nothing; in particular, don't run inherited testWordCount again.\n+  }\n }\n",
          "label": "test"
        }
      ]
    }
  ]
}