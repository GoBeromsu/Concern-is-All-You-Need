{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "cicd",
      "refactor"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
      "atomicChanges": [
        {
          "change": "diff --git a/common/buildcraft/api/recipes/AssemblyRecipe.java b/common/buildcraft/api/recipes/AssemblyRecipe.java\nindex a384f7125..573db2827 100644\n--- a/common/buildcraft/api/recipes/AssemblyRecipe.java\n+++ b/common/buildcraft/api/recipes/AssemblyRecipe.java\n@@ -1,8 +1,6 @@\n package buildcraft.api.recipes;\n \n import java.util.LinkedList;\n-\n-import buildcraft.core.inventory.StackHelper;\n import net.minecraft.item.ItemStack;\n \n public class AssemblyRecipe {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex c3d4e5f..6a7b8c9 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -15,20 +15,6 @@ pipeline {\n             script {\n                 // Your build commands go here\n             }\n         }\n-        stage('Code Coverage') {\n-            when {\n-                anyOf {\n-                    branch 'main'\n-                    branch 'development'\n-                }\n-            }\n-            steps {\n-                script {\n-                    // Commands to generate code coverage report\n-                    sh 'generate-coverage-report.sh'\n-                }\n-            }\n-        }\n         stage('Deploy') {\n             when {\n                 branch 'main'\n             }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n\ndiff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
      "atomicChanges": [
        {
          "change": "diff --git a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\nindex fcfbb216..96564918 100644\n--- a/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n+++ b/flyway-core/src/main/java/com/googlecode/flyway/core/Flyway.java\n@@ -709,23 +709,6 @@ public class Flyway {\n     }\r\n \r\n     /**\r\n-     * Creates and initializes the Flyway metadata table.\r\n-     *\r\n-     * @param version     (Optional) The initial version to put in the metadata table. Only migrations with a version\r\n-     *                    number higher than this one will be considered for this database.\r\n-     * @param description (Optional) The description of the initial version.\r\n-     * @throws FlywayException when the schema initialization failed.\r\n-     * @deprecated Use init(), setInitialVersion() and setInitialDescription() instead.\r\n-     */\r\n-    @Deprecated\r\n-    public void init(SchemaVersion version, String description) throws FlywayException {\r\n-        performSetup();\r\n-\r\n-        MetaDataTable metaDataTable = createMetaDataTable();\r\n-        new DbInit(transactionTemplate, metaDataTable).init(version, description);\r\n-    }\r\n-\r\n-    /**\r\n      * @return A new, fully configured, MetaDataTable instance.\r\n      */\r\n     private MetaDataTable createMetaDataTable() {\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.github/workflows/site.yml b/.github/workflows/site.yml\nindex 0b8616e..4f47ff1 100644\n--- a/.github/workflows/site.yml\n+++ b/.github/workflows/site.yml\n@@ -74,6 +74,9 @@ jobs:\n     outputs:\n       message: ${{ steps.out.outputs.message}}\n     steps:\n+      - name: Checkout repository from origin \n+        uses: actions/checkout@v3\n+\n       # fetch-depth - number of commits to fetch.\n       # 0 indicates all history for all branches and tags.\n       # 0, because we need access to all branches to create a report.\n@@ -144,6 +147,7 @@ jobs:\n             JOBS_LINK=\"https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}\"\n             API_LINK=\"https://api.github.com/repos/checkstyle/checkstyle/actions/runs/\"\n             API_LINK=\"${API_LINK}${{github.run_id}}/jobs\"\n+            echo \"API_LINK=${API_LINK}\"\n \n             curl --fail-with-body -X GET \"${API_LINK}\" \\\n               -H \"Accept: application/vnd.github+json\" \\",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
      "atomicChanges": [
        {
          "change": "diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\nindex de9a300..e2f258e 100644\n--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java\n@@ -119,9 +119,9 @@ public class PersistentInterval implements CompositeUserType\n             return null;\r\n         }\r\n         PersistentDateTime pst = new PersistentDateTime();\r\n-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);\r\n         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);\r\n-        return new Interval(begin, end);\r\n+        return new Interval(start, end);\r\n     }\r\n \r\n     public void nullSafeSet(PreparedStatement statement, Object value,\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n\ndiff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/xtremelabs/robolectric/Robolectric.java b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\nindex 0df80c0..4f4e727 100644\n--- a/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n+++ b/src/main/java/com/xtremelabs/robolectric/Robolectric.java\n@@ -474,9 +474,9 @@ public class Robolectric {\n         return (ShadowNotification) Robolectric.shadowOf_(other);\n     }\n \n-    public static <E> SparseArray<E> shadowOf(SparseArray<E> other) {\n+    public static <E> ShadowSparseArray<E> shadowOf(SparseArray<E> other) {\n         //noinspection unchecked\n-        return (SparseArray<E>) Robolectric.shadowOf_(other);\n+        return (ShadowSparseArray<E>) Robolectric.shadowOf_(other);\n     }\n \n     @SuppressWarnings({\"unchecked\"})\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/jenkins/Jenkinsfile b/jenkins/Jenkinsfile\nindex 0a1b2c3..4d5e6f7 100644\n--- a/jenkins/Jenkinsfile\n+++ b/jenkins/Jenkinsfile\n@@ -16,8 +16,12 @@ node {\n    stage('Checkout') {\n       checkout scm\n    }\n\n-   stage('Build') {\n+   stage('Pre-Build') {\n+      sh 'npm ci'\n+   }\n+\n+   stage('Build & Test') {\n       sh 'npx ng build --prod'\n       sh 'npx ng test'\n    }\n@@ -25,8 +28,12 @@ node {\n    stage('Deploy to Staging') {\n       sh 'sh ./scripts/staging-deploy.sh'\n    }\n\n-   stage('Deploy to Production') {\n+   stage('Smoke Tests') {\n+      sh 'npm run e2e'\n    }\n+\n+   stage('Deploy to Production') {\n        when { branch 'master' }\n+       sh 'sh ./scripts/production-deploy.sh'\n     }\n }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
      "atomicChanges": [
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 2b3e4f5..6h7j8k9 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -10,29 +10,13 @@ cache:\n stages:\n   - build\n   - test\n-  - static_analysis\n-  - performance_test\n   - deploy\n\n build:\n   script:\n     - echo \"Building the project...\"\n     - build-command\n\n-# Removing static code analysis stage\n-static_analysis:\n-  stage: static_analysis\n-  script:\n-    - echo \"Performing static code analysis...\"\n-    - static-analysis-command\n-\n-# Removing performance testing stage\n-performance_test:\n-  stage: performance_test\n-  script:\n-    - echo \"Running performance tests...\"\n-    - performance-test-command\n-\n test:\n   stage: test\n   script:",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n\ndiff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
      "atomicChanges": [
        {
          "change": "diff --git a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\nindex e3d6b9f..82eb8ea 100644\n--- a/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n+++ b/python/educational/interactive-learning/src/com/jetbrains/edu/learning/courseGeneration/StudyProjectGenerator.java\n@@ -47,7 +47,7 @@ public class StudyProjectGenerator {\n   private static final String CACHE_NAME = \"courseNames.txt\";\n   private List<CourseInfo> myCourses = new ArrayList<CourseInfo>();\n   private CourseInfo mySelectedCourseInfo;\n-  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))+\");\n+  private static final Pattern CACHE_PATTERN = Pattern.compile(\"name=(.*) description=(.*) folder=(.*) (instructor=(.*))*\");\n   private static final String COURSE_META_FILE = \"course.json\";\n   private static final String COURSE_NAME_ATTRIBUTE = \"name\";\n   private static final String COURSE_DESCRIPTION = \"description\";\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\nindex 9850262..1018d2b 100755\n--- a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n+++ b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n@@ -357,8 +357,9 @@ public class OStorageRemote extends OStorageAbstract implements OStorageProxy {\n \r\n       status = STATUS.CLOSING;\r\n       // CLOSE ALL THE CONNECTIONS\r\n-      engine.getConnectionManager().closePool(getCurrentServerURL());\r\n-\r\n+      for(String url: serverURLs) {\r\n+        engine.getConnectionManager().closePool(url);\r\n+      }\r\n       sbTreeCollectionManager.close();\r\n \r\n       super.close(iForce, onDelete);\r\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
      "atomicChanges": [
        {
          "change": "diff --git a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\nindex 9850262..1018d2b 100755\n--- a/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n+++ b/client/src/main/java/com/orientechnologies/orient/client/remote/OStorageRemote.java\n@@ -357,8 +357,9 @@ public class OStorageRemote extends OStorageAbstract implements OStorageProxy {\n \r\n       status = STATUS.CLOSING;\r\n       // CLOSE ALL THE CONNECTIONS\r\n-      engine.getConnectionManager().closePool(getCurrentServerURL());\r\n-\r\n+      for(String url: serverURLs) {\r\n+        engine.getConnectionManager().closePool(url);\r\n+      }\r\n       sbTreeCollectionManager.close();\r\n \r\n       super.close(iForce, onDelete);\r\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex 7a8b9c0..1d2e3f4 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -15,1 +15,4 @@ build:\n     - docker build --tag myimage .\n+    - docker build --cache-from myimage:latest --tag myimage .\n+  before_script:\n+    - docker pull myimage:latest || true",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\nindex b410481e3..ed7cbf127 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n@@ -1178,7 +1178,6 @@ public class OneToOneCallPeerPanel\n      */\n     public void removeMouseAndKeyListeners()\n     {\n-        System.out.println(\"REMOVE MOUSE AND KEY LISTENERSSSSSSSSSSS=======\" + remoteVideo);\n         if(remoteVideo != null)\n         {\n             remoteVideo.removeKeyListener(mouseAndKeyListener);\n@@ -1270,7 +1269,6 @@ public class OneToOneCallPeerPanel\n          */\n         public void mouseMoved(MouseEvent event)\n         {\n-            System.out.println(\"MOUSE MOVED!!!!!!!!!!!!!!!!!!!!\");\n             if(System.currentTimeMillis() > lastMouseMovedTime + 50)\n             {\n                 desktopSharingClient.sendMouseEvent(callPeer, event,\n\ndiff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
      "atomicChanges": [
        {
          "change": "diff --git a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\nindex b410481e3..ed7cbf127 100644\n--- a/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n+++ b/src/net/java/sip/communicator/impl/gui/main/call/OneToOneCallPeerPanel.java\n@@ -1178,7 +1178,6 @@ public class OneToOneCallPeerPanel\n      */\n     public void removeMouseAndKeyListeners()\n     {\n-        System.out.println(\"REMOVE MOUSE AND KEY LISTENERSSSSSSSSSSS=======\" + remoteVideo);\n         if(remoteVideo != null)\n         {\n             remoteVideo.removeKeyListener(mouseAndKeyListener);\n@@ -1270,7 +1269,6 @@ public class OneToOneCallPeerPanel\n          */\n         public void mouseMoved(MouseEvent event)\n         {\n-            System.out.println(\"MOUSE MOVED!!!!!!!!!!!!!!!!!!!!\");\n             if(System.currentTimeMillis() > lastMouseMovedTime + 50)\n             {\n                 desktopSharingClient.sendMouseEvent(callPeer, event,\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml\nindex d3c24f9..b4a1c68 100644\n--- a/.gitlab-ci.yml\n+++ b/.gitlab-ci.yml\n@@ -18,11 +22,3 @@ test:\n     - ctest --output-on-failure\n \n-cache:\n-  paths:\n-    - build/\n-  key: ${CI_COMMIT_REF_SLUG}\n-\n-.caches:\n-  - key: ${CI_COMMIT_REF_SLUG}\n-    paths:\n-      - .cache\n+  # Removed old caching strategy as it was not effective",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n\ndiff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nsimilarity index 98%\nrename from core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\nrename to core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\nindex 206e0d2f4..a1a3942d8 100644\n--- a/core/src/test/java/io/undertow/ssl/SimpleSSLTestCase.java\n+++ b/core/src/test/java/io/undertow/test/ssl/SimpleSSLTestCase.java\n@@ -16,7 +16,7 @@\n  * limitations under the License.\n  */\n \n-package io.undertow.ssl;\n+package io.undertow.test.ssl;\n \n import java.io.IOException;\n import java.security.GeneralSecurityException;\n",
          "label": "refactor"
        },
        {
          "change": "diff --git a/Makefile b/Makefile\nindex 826e814..766f8f0 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -48,9 +48,12 @@ test:\n unit-test:\n    @echo \"Running unit tests\"\n  \n-build:\n+build: test\n    @echo \"Building the project\"\n \n-build-all: clean build\n+test-all: unit-test integration-test\n+\n+build-all: clean test-all build\n    @echo \"Built all components\"\n \n+.PHONY: clean test build test-all build-all",
          "label": "cicd"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }\ndiff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n",
      "atomicChanges": [
        {
          "change": "diff --git a/Jenkinsfile b/Jenkinsfile\nindex 68fabd8..c5320e2 100644\n--- a/Jenkinsfile\n+++ b/Jenkinsfile\n@@ -2,9 +2,14 @@ pipeline {\n     agent any\n     stages {\n         stage('Build') {\n-            steps {\n-                echo 'Building...'\n-                sh 'make'\n+            steps {    \n+                try {\n+                    echo 'Building...'\n+                    sh 'make'\n+                } catch (Exception e) {\n+                    currentBuild.result = 'FAILURE'\n+                    throw e\n+                }    \n             }\n         }\n         stage('Test') {\n@@ -18,8 +20,13 @@ pipeline {\n         }\n         stage('Deploy') {\n             when {\n-                branch 'master'\n+                allOf {\n+                    branch 'master'\n+                    not {\n+                        buildingTag()\n+                    }\n+                }\n             }\n             steps {\n-                echo 'Deploying...'\n+                echo 'Deploying to Prod...'\n                sh './deploy.sh'\n             }\n         }\n     }",
          "label": "cicd"
        },
        {
          "change": "diff --git a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\nindex fc66c88..d721a57 100644\n--- a/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n+++ b/bundles/binding/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/OneWireGenericBindingProvider.java\n@@ -112,7 +112,7 @@ public class OneWireGenericBindingProvider extends AbstractGenericBindingProvide\n \t * correctly and <code>false</code> otherwise\n \t */\n \tprotected boolean checkSensorId(String sensorIdString) {\n-\t\treturn sensorIdString.matches(\"\\\\[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n+\t\treturn sensorIdString.matches(\"[A-F0-9]{2}\\\\.[A-F0-9]{12}\");\n \t}\n \t\n \t\n",
          "label": "refactor"
        }
      ]
    }
  ]
}