{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "docs",
      "test",
      "build"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>\ndiff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        },
        {
          "change": "diff --git a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\nindex 3617e5c..4f3279d 100644\n--- a/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n+++ b/platform/testFramework/src/com/intellij/testFramework/LightPlatformTestCase.java\n@@ -45,7 +45,6 @@ import com.intellij.openapi.command.undo.UndoManager;\n import com.intellij.openapi.editor.Document;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.editor.EditorFactory;\n-import com.intellij.openapi.editor.ex.EditorSettingsExternalizable;\n import com.intellij.openapi.editor.impl.ComplementaryFontsRegistry;\n import com.intellij.openapi.editor.impl.EditorFactoryImpl;\n import com.intellij.openapi.editor.impl.EditorImpl;\n@@ -307,8 +306,6 @@ public abstract class LightPlatformTestCase extends UsefulTestCase implements Da\n         // various tests can use different mocking techniques for font-related code\n         // so we must reset our font cache, to avoid potential impact of tests on other tests \n         ComplementaryFontsRegistry.resetCaches();\n-\n-        System.out.println(\"soft wraps enabled: \" + EditorSettingsExternalizable.getInstance().isUseSoftWraps()); // temporary code to find out cause of test blinking\n       }\n     });\n   }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n\ndiff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))\ndiff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        },
        {
          "change": "diff --git a/realm/src/main/java/io/realm/RealmQuery.java b/realm/src/main/java/io/realm/RealmQuery.java\nindex 1ce8125..40369c5 100644\n--- a/realm/src/main/java/io/realm/RealmQuery.java\n+++ b/realm/src/main/java/io/realm/RealmQuery.java\n@@ -29,11 +29,20 @@ import io.realm.internal.TableQuery;\n import io.realm.internal.TableView;\n \n /**\n+ * A RealmQuery encapsulates a query on a {@link io.realm.Realm} or a {@link io.realm.RealmResults}\n+ * using the Builder pattern. The query is executed using either {@link #findAll()} or\n+ * {@link #findFirst()}\n  *\n+ * The input to many of the query functions take a field name as as String. Note that this is not\n+ * type safe, so if a model class is refactored care has to be taken to not break any queries.\n+ * This is not optimal, but it is our current best compromise between ease of use and type safety.\n  *\n  * A RealmQuery cannot be parsed between different threads.\n  *\n- * @param <E> The class of objects to be queried\n+ * @param <E> The class of the objects to be queried.\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder pattern</a>\n+ * @see Realm#where(Class)\n+ * @see RealmResults#where()\n  */\n public class RealmQuery<E extends RealmObject> {\n \n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }\ndiff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 8ee4d6c..564123e 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -3,7 +3,9 @@ plugins {\n     id 'java'\n }\n \n-dependencies {\n+// Adding new libraries\n+dependencies {\n+    compile 'com.google.guava:guava:23.0'\n     testCompile group: 'junit', name: 'junit', version: '4.13.1'\n     compile 'org.projectlombok:lombok:1.18.12'\n     annotationProcessor 'org.projectlombok:lombok:1.18.12'\n@@ -14,6 +16,6 @@ dependencies {\n }\n \n java {\n-    sourceCompatibility = JavaVersion.VERSION_1_8\n+    sourceCompatibility = JavaVersion.VERSION_1_11\n     targetCompatibility = JavaVersion.VERSION_1_8\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/lib/trino-plugin-toolkit/pom.xml b/lib/trino-plugin-toolkit/pom.xml\nindex 169437f..f404889 100644\n--- a/lib/trino-plugin-toolkit/pom.xml\n+++ b/lib/trino-plugin-toolkit/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\nindex 5a3fdfd6d5..083416c707 100644\n--- a/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n+++ b/hazelcast/src/main/java/com/hazelcast/map/EntryProcessor.java\n@@ -85,7 +85,8 @@ public interface EntryProcessor<K, V> extends Serializable {\n \n     /**\n      * Get the entry processor to be applied to backup entries.\n-     * <p/>\n+     *\n+     * In case of a readonly execution, null can be returned to indicate that no backups should be made.\n      *\n      * @return the back up processor\n      */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n\ndiff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n\ndiff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
      "atomicChanges": [
        {
          "change": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\nindex dfae24cad6..756cad06c8 100644\n--- a/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n+++ b/camel-core/src/test/java/org/apache/camel/component/dataset/DataSetTest.java\n@@ -20,7 +20,6 @@ import javax.naming.Context;\n \n import org.apache.camel.ContextTestSupport;\n import org.apache.camel.builder.RouteBuilder;\n-import org.apache.camel.component.mock.MockEndpoint;\n \n /**\n  * @version $Revision$\n@@ -28,10 +27,9 @@ import org.apache.camel.component.mock.MockEndpoint;\n public class DataSetTest extends ContextTestSupport {\n     protected SimpleDataSet dataSet = new SimpleDataSet(20);\n \n-    public void test() throws Exception {\n-        MockEndpoint endpoint = getMockEndpoint(\"mock:results\");\n-        endpoint.expectedMessageCount((int) dataSet.getSize());\n-\n+    public void testDataSet() throws Exception {\n+        // data set will itself set its assertions so we should just\n+        // assert that all mocks is ok\n         assertMockEndpointsSatisfied();\n     }\n \n@@ -46,9 +44,7 @@ public class DataSetTest extends ContextTestSupport {\n     protected RouteBuilder createRouteBuilder() throws Exception {\n         return new RouteBuilder() {\n             public void configure() throws Exception {\n-                from(\"dataset:foo\").multicast().\n-                        to(\"mock:results\").\n-                        to(\"direct:foo\");\n+                from(\"dataset:foo\").to(\"direct:foo\");\n \n                 from(\"direct:foo\").to(\"dataset:foo\");\n             }\n",
          "label": "test"
        },
        {
          "change": "diff --git a/pom.xml b/pom.xml\nindex 330f26a..2df976a 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -44,6 +44,7 @@\n         <module>shenyu-dist</module>\n         <module>shenyu-alert</module>\n         <module>shenyu-sdk</module>\n+        <module>shenyu-discovery</module>\n     </modules>\n \n     <licenses>",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n\ndiff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n \ndiff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
      "atomicChanges": [
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        },
        {
          "change": "diff --git a/client/trino-cli/pom.xml b/client/trino-cli/pom.xml\nindex 11ded11..212dacf 100644\n--- a/client/trino-cli/pom.xml\n+++ b/client/trino-cli/pom.xml\n@@ -5,7 +5,7 @@\n     <parent>\n         <groupId>io.trino</groupId>\n         <artifactId>trino-root</artifactId>\n-        <version>416</version>\n+        <version>417-SNAPSHOT</version>\n         <relativePath>../../pom.xml</relativePath>\n     </parent>\n ",
          "label": "build"
        },
        {
          "change": "diff --git a/guava/src/com/google/common/hash/Hashing.java b/guava/src/com/google/common/hash/Hashing.java\nindex 689f182..32bd069 100644\n--- a/guava/src/com/google/common/hash/Hashing.java\n+++ b/guava/src/com/google/common/hash/Hashing.java\n@@ -31,6 +31,9 @@ import java.util.zip.Checksum;\n  * Static methods to obtain {@link HashFunction} instances, and other static hashing-related\n  * utilities.\n  *\n+ * <p>A comparison of the various hash functions can be found\n+ * <a href=\"http://goo.gl/jS7HH\">here</a>.\n+ *\n  * @author Kevin Bourrillion\n  * @author Dimitris Andreou\n  * @author Kurt Alfred Kluever\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 88971fa..3cc1ec2 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",\n\ndiff --git a/src/com/android/email/activity/MessageView.java b/src/com/android/email/activity/MessageView.java\nindex 5f09a7d..71db1f7 100644\n--- a/src/com/android/email/activity/MessageView.java\n+++ b/src/com/android/email/activity/MessageView.java\n@@ -485,7 +485,7 @@ public class MessageView extends K9Activity\n         final WebSettings webSettings = mMessageContentView.getSettings();\n \n         webSettings.setSupportZoom(true);\n-        webSettings.setBuiltInZoomControls(true);\n+        //webSettings.setBuiltInZoomControls(true);\n         webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);\n \n         mAttachments.setVisibility(View.GONE);\n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
      "atomicChanges": [
        {
          "change": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\nindex 88971fa..3cc1ec2 100644\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/com/android/email/activity/MessageView.java b/src/com/android/email/activity/MessageView.java\nindex 5f09a7d..71db1f7 100644\n--- a/src/com/android/email/activity/MessageView.java\n+++ b/src/com/android/email/activity/MessageView.java\n@@ -485,7 +485,7 @@ public class MessageView extends K9Activity\n         final WebSettings webSettings = mMessageContentView.getSettings();\n \n         webSettings.setSupportZoom(true);\n-        webSettings.setBuiltInZoomControls(true);\n+        //webSettings.setBuiltInZoomControls(true);\n         webSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);\n \n         mAttachments.setVisibility(View.GONE);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))\ndiff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n\ndiff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\nindex 89a93d0..13ccd9f 100644\n--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n@@ -72,7 +72,7 @@ public class BaseBulletTest extends BulletTest {\n \tpublic ModelBuilder modelBuilder = new ModelBuilder();\n \tpublic ModelBatch modelBatch;\n \tpublic Array<Disposable> disposables = new Array<Disposable>();\n-\tprivate int debugMode = DebugDrawModes.DBG_DrawFeaturesText;\n+\tprivate int debugMode = DebugDrawModes.DBG_NoDebug;\n \t\n \tprotected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        },
        {
          "change": "diff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\nindex 89a93d0..13ccd9f 100644\n--- a/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n+++ b/tests/gdx-tests/src/com/badlogic/gdx/tests/bullet/BaseBulletTest.java\n@@ -72,7 +72,7 @@ public class BaseBulletTest extends BulletTest {\n \tpublic ModelBuilder modelBuilder = new ModelBuilder();\n \tpublic ModelBatch modelBatch;\n \tpublic Array<Disposable> disposables = new Array<Disposable>();\n-\tprivate int debugMode = DebugDrawModes.DBG_DrawFeaturesText;\n+\tprivate int debugMode = DebugDrawModes.DBG_NoDebug;\n \t\n \tprotected final static Vector3 tmpV1 = new Vector3(), tmpV2 = new Vector3();\n \n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n\ndiff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }\ndiff --git a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\nindex 626bc0c..2ee1c4a 100644\n--- a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n+++ b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n@@ -450,9 +450,7 @@ public class SearchingForTestsTask extends Task.Backgroundable {\n \n       if (methods == null) {\n         for (PsiClass c : classes) {\n-          if (!results.containsKey(c)) {\n-            results.put(c, new LinkedHashSet<PsiMethod>());\n-          }\n+          results.put(c, new LinkedHashSet<PsiMethod>());\n         }\n       }\n       for (PsiMember psiMember : membersToCheckNow) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\nindex d2f6273..f380b38 100644\n--- a/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n+++ b/external/storm-hdfs/src/main/java/org/apache/storm/hdfs/common/security/HdfsSecurityUtil.java\n@@ -49,7 +49,6 @@ public class HdfsSecurityUtil {\n                  !(((List)conf.get(TOPOLOGY_AUTO_CREDENTIALS)).contains(AutoTGT.class.getName())))) {\n             if (UserGroupInformation.isSecurityEnabled()) {\n                 // compareAndSet added because of https://issues.apache.org/jira/browse/STORM-1535\n-                // need to test it first during ERIE release testing since the JIRA says \"might\" be and port it to apache.\n                 if (isLoggedIn.compareAndSet(false, true)) {\n                     LOG.info(\"Logging in using keytab as AutoHDFS is not specified for \" + TOPOLOGY_AUTO_CREDENTIALS);\n                     String keytab = (String) conf.get(STORM_KEYTAB_FILE_KEY);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/build.gradle b/build.gradle\nindex 227a903..37bc2yx 100644\n--- a/build.gradle\n+++ b/build.gradle\n@@ -1,7 +1,7 @@\n apply plugin: 'java'\n\n repositories {\n-    mavenCentral()\n+    jcenter()\n }\n\n dependencies {\n-    compile 'org.springframework.boot:spring-boot-starter-web:2.2.2'\n+    compile 'org.springframework.boot:spring-boot-starter-web:2.3.4'\n }",
          "label": "build"
        },
        {
          "change": "diff --git a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\nindex 626bc0c..2ee1c4a 100644\n--- a/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n+++ b/plugins/testng/src/com/theoryinpractice/testng/configuration/SearchingForTestsTask.java\n@@ -450,9 +450,7 @@ public class SearchingForTestsTask extends Task.Backgroundable {\n \n       if (methods == null) {\n         for (PsiClass c : classes) {\n-          if (!results.containsKey(c)) {\n-            results.put(c, new LinkedHashSet<PsiMethod>());\n-          }\n+          results.put(c, new LinkedHashSet<PsiMethod>());\n         }\n       }\n       for (PsiMember psiMember : membersToCheckNow) {\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n\ndiff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/server/sonar-webserver-webapi/build.gradle b/server/sonar-webserver-webapi/build.gradle\nindex a4e223b..2ae902d 100644\n--- a/server/sonar-webserver-webapi/build.gradle\n+++ b/server/sonar-webserver-webapi/build.gradle\n@@ -39,7 +39,7 @@ dependencies {\n   testImplementation 'javax.servlet:javax.servlet-api'\n   testImplementation 'org.mockito:mockito-core'\n   testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'\n-  testImplementation 'org.springframework:spring-test:${springVersion}'\n+  testImplementation 'org.springframework:spring-test'\n   testImplementation testFixtures(project(':server:sonar-server-common'))\n   testImplementation testFixtures(project(':server:sonar-webserver-auth'))\n   testImplementation testFixtures(project(':server:sonar-webserver-es'))",
          "label": "build"
        }
      ]
    }
  ]
}