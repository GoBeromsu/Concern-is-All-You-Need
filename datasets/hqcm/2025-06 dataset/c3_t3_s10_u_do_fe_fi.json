{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 3,
    "types": [
      "feat",
      "fix",
      "docs"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n\ndiff --git a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\nindex bdb0a4f..1e18f2e 100644\n--- a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n+++ b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n@@ -21,6 +21,7 @@ import com.intellij.codeHighlighting.TextEditorHighlightingPass;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassFactory;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassRegistrar;\n import com.intellij.codeInsight.CodeInsightSettings;\n+import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.AbstractProjectComponent;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.project.Project;\n@@ -40,7 +41,8 @@ public class IdentifierHighlighterPassFactory extends AbstractProjectComponent i\n   public TextEditorHighlightingPass createHighlightingPass(@NotNull final PsiFile file, @NotNull final Editor editor) {\n     if (editor.isOneLineMode()) return null;\n \n-    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {\n+    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET ||\n+        ApplicationManager.getApplication().isHeadlessEnvironment()) {\n       return null;\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\nindex 0cf3f64..71032e2 100644\n--- a/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n+++ b/demos/metagun/metagun-desktop/src/com/mojang/metagun/screen/Screen.java\n@@ -3,13 +3,16 @@ package com.mojang.metagun.screen;\n import java.awt.Graphics;\r\n import java.util.Random;\r\n \r\n+import com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n import com.mojang.metagun.*;\r\n \r\n public abstract class Screen {\r\n     protected static Random random = new Random();\r\n     private Metagun metagun;\r\n+    protected SpriteBatch spriteBatch = new SpriteBatch(100);\r\n     \r\n-    public void removed() {\r\n+    public void removed() {    \t\r\n+    \tspriteBatch.dispose();\r\n     }\r\n \r\n     public final void init(Metagun metagun) {\r\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\nindex bdb0a4f..1e18f2e 100644\n--- a/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n+++ b/platform/lang-impl/src/com/intellij/codeInsight/daemon/impl/IdentifierHighlighterPassFactory.java\n@@ -21,6 +21,7 @@ import com.intellij.codeHighlighting.TextEditorHighlightingPass;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassFactory;\n import com.intellij.codeHighlighting.TextEditorHighlightingPassRegistrar;\n import com.intellij.codeInsight.CodeInsightSettings;\n+import com.intellij.openapi.application.ApplicationManager;\n import com.intellij.openapi.components.AbstractProjectComponent;\n import com.intellij.openapi.editor.Editor;\n import com.intellij.openapi.project.Project;\n@@ -40,7 +41,8 @@ public class IdentifierHighlighterPassFactory extends AbstractProjectComponent i\n   public TextEditorHighlightingPass createHighlightingPass(@NotNull final PsiFile file, @NotNull final Editor editor) {\n     if (editor.isOneLineMode()) return null;\n \n-    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {\n+    if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET ||\n+        ApplicationManager.getApplication().isHeadlessEnvironment()) {\n       return null;\n     }\n \n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n\ndiff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n\ndiff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
      "atomicChanges": [
        {
          "change": "diff --git a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\nindex e6d59e4..444705c 100644\n--- a/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n+++ b/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java\n@@ -147,14 +147,22 @@ public final class BluetoothMidiDevice {\n             // switch to receiving notifications after initial characteristic read\n             mBluetoothGatt.setCharacteristicNotification(characteristic, true);\n \n+            // Use writeType that requests acknowledgement.\n+            // This improves compatibility with various BLE-MIDI devices.\n+            int originalWriteType = characteristic.getWriteType();\n+            characteristic.setWriteType(BluetoothGattCharacteristic.WRITE_TYPE_DEFAULT);\n+\n             BluetoothGattDescriptor descriptor = characteristic.getDescriptor(\n                     CLIENT_CHARACTERISTIC_CONFIG);\n             if (descriptor != null) {\n                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n-                mBluetoothGatt.writeDescriptor(descriptor);\n+                boolean result = mBluetoothGatt.writeDescriptor(descriptor);\n+                Log.d(TAG, \"writeDescriptor returned \" + result);\n             } else {\n                 Log.e(TAG, \"No CLIENT_CHARACTERISTIC_CONFIG for device \" + mBluetoothDevice);\n             }\n+\n+            characteristic.setWriteType(originalWriteType);\n         }\n \n         @Override\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/java/org/apache/catalina/servlets/CGIServlet.java b/java/org/apache/catalina/servlets/CGIServlet.java\nindex 0a01f6620..1669f3471 100644\n--- a/java/org/apache/catalina/servlets/CGIServlet.java\n+++ b/java/org/apache/catalina/servlets/CGIServlet.java\n@@ -576,7 +576,6 @@ public final class CGIServlet extends HttpServlet {\n                                           cgiEnv.getEnvironment(),\n                                           cgiEnv.getWorkingDirectory(),\n                                           cgiEnv.getParameters());\n-            // If POST, we need to cgi.setInput\n             // REMIND: how does this interact with Servlet API 2.3's Filters?!\n             if (\"POST\".equals(req.getMethod())) {\n                 cgi.setInput(req.getInputStream());\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/com/android/email/mail/store/WebDavStore.java b/src/com/android/email/mail/store/WebDavStore.java\nindex 9dd1955..a6301e3 100644\n--- a/src/com/android/email/mail/store/WebDavStore.java\n+++ b/src/com/android/email/mail/store/WebDavStore.java\n@@ -509,7 +509,7 @@ public class WebDavStore extends Store {\n             ArrayList<BasicNameValuePair> pairs = new ArrayList();\n             pairs.add(new BasicNameValuePair(\"username\", username));\n             pairs.add(new BasicNameValuePair(\"password\", password));\n-            pairs.add(new BasicNameValuePair(\"destination\", finalUrl + \"/exchange/\" +username+\"/\"));\n+            pairs.add(new BasicNameValuePair(\"destination\", url));\n             pairs.add(new BasicNameValuePair(\"flags\", \"0\"));\n             pairs.add(new BasicNameValuePair(\"SubmitCreds\", \"Log+On\"));\n             pairs.add(new BasicNameValuePair(\"forcedownlevel\", \"0\"));\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n\ndiff --git a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\nindex 2e58961e6c..d19bf2734f 100644\n--- a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n+++ b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n@@ -55,11 +55,11 @@ public class BinaryInspector {\n \t\tBinaryInspector in = new BinaryInspector();\n \t\tin.inspector(args);\n \t\t// test cases show info\n-\t\tin.inspector(new String[]{\n+\t\t/*in.inspector(new String[]{\n \t\t\t\t\"-vpoi\",\n \t\t\t\t//\"-vmap\", \"-vmapobjects\", \n \t\t\t\t//\"-vstreets\", \"-bbox=14.4,50.1,14.5,50.01\", \n-\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});\n+\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});*/\n \t}\n \n \tprivate void printToFile(String s) throws IOException {\n\ndiff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\nindex 7c57825..1f18421 100644\n--- a/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n+++ b/platform/platform-api/src/com/intellij/openapi/fileChooser/FileChooserDescriptorFactory.java\n@@ -95,4 +95,12 @@ public class FileChooserDescriptorFactory {\n       }\n     });\n   }\n+\n+  /**\n+   * @deprecated not very useful (to be removed in IDEA 15)\n+   */\n+  @SuppressWarnings(\"UnusedDeclaration\")\n+  public static FileChooserDescriptor getDirectoryChooserDescriptor(String objectName) {\n+    return createSingleFolderDescriptor().withTitle(\"Select \" + objectName);\n+  }\n }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\nindex 2e58961e6c..d19bf2734f 100644\n--- a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n+++ b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n@@ -55,11 +55,11 @@ public class BinaryInspector {\n \t\tBinaryInspector in = new BinaryInspector();\n \t\tin.inspector(args);\n \t\t// test cases show info\n-\t\tin.inspector(new String[]{\n+\t\t/*in.inspector(new String[]{\n \t\t\t\t\"-vpoi\",\n \t\t\t\t//\"-vmap\", \"-vmapobjects\", \n \t\t\t\t//\"-vstreets\", \"-bbox=14.4,50.1,14.5,50.01\", \n-\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});\n+\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});*/\n \t}\n \n \tprivate void printToFile(String s) throws IOException {\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/main/java/redis/clients/jedis/JedisSentinelPool.java b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\nindex 609c742..10db508 100644\n--- a/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n+++ b/src/main/java/redis/clients/jedis/JedisSentinelPool.java\n@@ -53,6 +53,9 @@ public class JedisSentinelPool extends Pool<Jedis> {\n     public JedisSentinelPool(String masterName, Set<String> sentinels, final Config poolConfig, int timeout, final String password,\n                      final int database) {\n     \tthis.poolConfig = poolConfig;\n+    \tthis.timeout = timeout;\n+    \tthis.password = password;\n+    \tthis.database = database;\n     \tHostAndPort master = initSentinels(sentinels, masterName);\n         initPool(master);    \t        \n     }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n\ndiff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n\ndiff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex c7844a1..efe5aa0 100644\n--- a/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/platform-impl/src/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -562,6 +562,8 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n     }\n \n     private void disposeFocusTrackbackIfNoChildWindowFocused(@Nullable IdeFocusManager focusManager) {\n+      if (myFocusTrackback == null) return;\n+\n       final DialogWrapper wrapper = myDialogWrapper.get();\n       if (wrapper == null || !wrapper.isShowing()) {\n         myFocusTrackback.dispose();\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\nindex 10a2597135..5736ecd771 100644\n--- a/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n+++ b/server/sonar-search/src/main/java/org/sonar/search/EsSettings.java\n@@ -134,6 +134,7 @@ public class EsSettings implements EsSettingsMBean {\n       LOGGER.warn(\"Elasticsearch HTTP connector is enabled on port {}. MUST NOT BE USED FOR PRODUCTION\", httpPort);\n       // see https://github.com/lmenezes/elasticsearch-kopf/issues/195\n       builder.put(\"http.cors.enabled\", true);\n+      builder.put(\"http.cors.allow-origin\", \"*\");\n       builder.put(\"http.enabled\", true);\n       builder.put(\"http.host\", host.getHostAddress());\n       builder.put(\"http.port\", httpPort);\n@@ -169,7 +170,6 @@ public class EsSettings implements EsSettingsMBean {\n     builder.put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, replicationFactor);\n     builder.put(\"cluster.name\", getClusterName());\n     builder.put(\"cluster.routing.allocation.awareness.attributes\", \"rack_id\");\n-    String nodeName = getNodeName();\n     builder.put(\"node.rack_id\", nodeName);\n     builder.put(\"node.name\", nodeName);\n     builder.put(\"node.data\", true);\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\nindex 80300020..92718985 100644\n--- a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n+++ b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n@@ -115,7 +115,7 @@ public class OAuth2ProviderBeanDefinitionParser implements BeanDefinitionParser\n       String authenticationCacheRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"authentication-cache-ref\");\n       String approvalFilterRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"user-approval-filter-ref\");\n       String approvalHandlerRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n-      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n+      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"redirect-strategy-ref\");\n       if (!StringUtils.hasText(verificationCodeRedirectStrategyRef)) {\n         verificationCodeRedirectStrategyRef = redirectStrategyRef;\n       }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java\nindex 2ce5e82f..bcd0da6d 100644\n--- a/src/main/java/org/bukkit/ChatColor.java\n+++ b/src/main/java/org/bukkit/ChatColor.java\n@@ -103,6 +103,16 @@ public enum ChatColor {\n         return colors.get(code);\n     }\n \n+    /**\n+     * Strips the given message of all color codes\n+     *\n+     * @param input String to strip of color\n+     * @return A copy of the input string, without any coloring\n+     */\n+    public static String stripColor(final String input) {\n+        return input.replaceAll(\"(?i)\\u00A7[0-F]\", \"\");\n+    }\n+\n     static {\n         for (ChatColor color : ChatColor.values()) {\n             colors.put(color.getCode(), color);\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\nindex 80300020..92718985 100644\n--- a/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n+++ b/spring-security-oauth/src/main/java/org/springframework/security/oauth2/config/OAuth2ProviderBeanDefinitionParser.java\n@@ -115,7 +115,7 @@ public class OAuth2ProviderBeanDefinitionParser implements BeanDefinitionParser\n       String authenticationCacheRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"authentication-cache-ref\");\n       String approvalFilterRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"user-approval-filter-ref\");\n       String approvalHandlerRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n-      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"approval-handler-ref\");\n+      String verificationCodeRedirectStrategyRef = verificationCodeElement == null ? null : verificationCodeElement.getAttribute(\"redirect-strategy-ref\");\n       if (!StringUtils.hasText(verificationCodeRedirectStrategyRef)) {\n         verificationCodeRedirectStrategyRef = redirectStrategyRef;\n       }\n",
          "label": "fix"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n\ndiff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n\ndiff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/preference/VolumePreference.java b/core/java/android/preference/VolumePreference.java\nindex 970d520..0219fe8 100644\n--- a/core/java/android/preference/VolumePreference.java\n+++ b/core/java/android/preference/VolumePreference.java\n@@ -109,7 +109,9 @@ public class VolumePreference extends SeekBarPreference implements\n     }\n \n     public void onActivityStop() {\n-        cleanup();\n+        if (mSeekBarVolumizer != null) {\n+            mSeekBarVolumizer.stopSample();\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\nindex 373b8bfc06..c877385a52 100644\n--- a/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n+++ b/byte-buddy-agent/src/main/java/net/bytebuddy/agent/ByteBuddyAgent.java\n@@ -563,7 +563,7 @@ public class ByteBuddyAgent {\n                         @Override\n                         public Accessor resolve(Class<?> virtualMachineType) {\n                             try {\n-                                return new Simple(virtualMachineType, (String) getPid.invoke(current.invoke(STATIC_MEMBER)));\n+                                return new Simple(virtualMachineType, getPid.invoke(current.invoke(STATIC_MEMBER)).toString());\n                             } catch (IllegalAccessException exception) {\n                                 throw new UnsupportedOperationException(\"Not yet implemented\");\n                             } catch (InvocationTargetException exception) {\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n\ndiff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n\ndiff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
      "atomicChanges": [
        {
          "change": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\nindex 590a484417..fa829ee8c2 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/batch/ResourceFilter.java\n@@ -23,7 +23,8 @@ import org.sonar.api.BatchExtension;\n import org.sonar.api.resources.Resource;\n \n /**\n- * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project)\n+ * Filter resources to save. For example, ignore a resource if its path matches an exclusion pattern (defined on the project).\n+ * Filters are applied to files, directories and packages only.\n  *\n  * If the method start(), without parameters, exists, then it is executed at startup.\n  *\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/framework/src/org/apache/cordova/CordovaWebView.java b/framework/src/org/apache/cordova/CordovaWebView.java\nindex b9ea21e2..46d1f312 100644\n--- a/framework/src/org/apache/cordova/CordovaWebView.java\n+++ b/framework/src/org/apache/cordova/CordovaWebView.java\n@@ -84,12 +84,16 @@ public class CordovaWebView extends WebView {\n   public CordovaWebView(Context context, AttributeSet attrs) {\n     super(context, attrs);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n   public CordovaWebView(Context context, AttributeSet attrs, int defStyle) {\n     super(context, attrs, defStyle);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n@@ -97,6 +101,8 @@ public class CordovaWebView extends WebView {\n       boolean privateBrowsing) {\n     super(context, attrs, defStyle, privateBrowsing);\n     mCtx = context;\n+    preferences = new PreferenceSet();\n+    loadConfiguration();\n     setup();\n   }\n   \n",
          "label": "feat"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n\ndiff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n\ndiff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/java/android/animation/PropertyValuesHolder.java b/core/java/android/animation/PropertyValuesHolder.java\nindex bf2924c..bdfbde1 100644\n--- a/core/java/android/animation/PropertyValuesHolder.java\n+++ b/core/java/android/animation/PropertyValuesHolder.java\n@@ -631,6 +631,9 @@ public class PropertyValuesHolder implements Cloneable {\n     public void setObjectValues(Object... values) {\n         mValueType = values[0].getClass();\n         mKeyframeSet = KeyframeSet.ofObject(values);\n+        if (mEvaluator != null) {\n+            mKeyframeSet.setEvaluator(mEvaluator);\n+        }\n     }\n \n     /**\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\nindex 7bf00668c..757b26457 100644\n--- a/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n+++ b/engine/src/main/java/org/terasology/input/binds/movement/RunButton.java\n@@ -26,6 +26,6 @@ import org.terasology.input.RegisterBindButton;\n  * @author Immortius\n  */\n @RegisterBindButton(id = \"run\", description = \"Run\")\n-@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.LEFT_SHIFT)\n+@DefaultBinding(type = InputType.KEY, id = Keyboard.KeyId.R)\n public class RunButton extends BindButtonEvent {\n }\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\nindex c0a5f168..df6fff67 100644\n--- a/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n+++ b/data/src/main/java/com/linkedin/data/schema/validator/DataSchemaAnnotationValidator.java\n@@ -259,6 +259,9 @@ public class DataSchemaAnnotationValidator implements Validator\n    * This method causes the \"validate\" properties of the schema and referenced schemas to\n    * be parsed and appropriate instances of {@link Validator}'s to be constructed.\n    *\n+   * This method does not throw an exception if there is an initialization error.\n+   * The client should check the return value for initialization errors.\n+   *\n    * @param schema to be parsed to compute the {@link Validator}'s that have to be created.\n    * @param classMap provides the map of the keys to {@link Validator}s that is looked up first\n    *                 before looking for classes with names derived from the key.\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n\ndiff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n\ndiff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/telephony/java/com/android/internal/telephony/DataConnection.java b/telephony/java/com/android/internal/telephony/DataConnection.java\nindex 99d5520..cf06173 100644\n--- a/telephony/java/com/android/internal/telephony/DataConnection.java\n+++ b/telephony/java/com/android/internal/telephony/DataConnection.java\n@@ -274,7 +274,7 @@ public abstract class DataConnection extends HierarchicalStateMachine {\n \n         clearSettings();\n \n-        setDbg(true);\n+        setDbg(false);\n         addState(mDefaultState);\n             addState(mInactiveState, mDefaultState);\n             addState(mActivatingState, mDefaultState);\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\nindex 381f821..8b1da1f 100644\n--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java\n@@ -1593,6 +1593,9 @@ public class DatabaseHelper extends SQLiteOpenHelper {\n \n             loadStringSetting(stmt, Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL,\n                     R.string.def_accessibility_screen_reader_url);\n+\n+            loadBooleanSetting(stmt, Settings.System.LOCKSCREEN_DISABLED,\n+                    R.bool.def_lockscreen_disabled);\n         } finally {\n             if (stmt != null) stmt.close();\n         }\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/src/main/java/com/alibaba/fastjson/JSON.java b/src/main/java/com/alibaba/fastjson/JSON.java\nindex a9552f4..a5b89ea 100755\n--- a/src/main/java/com/alibaba/fastjson/JSON.java\n+++ b/src/main/java/com/alibaba/fastjson/JSON.java\n@@ -611,7 +611,6 @@ public abstract class JSON implements JSONStreamAware, JSONAware {\n      * @param object\n      * @param writer output writer\n      * @param features serializer features\n-     * @throws IOException\n      */\n     public static void writeJSONString(Object object, Writer writer, SerializerFeature... features) {\n         writeJSONString(object, writer, JSON.DEFAULT_GENERATE_FEATURE, features);\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/library/src/com/db/chart/view/HorizontalBarChartView.java b/library/src/com/db/chart/view/HorizontalBarChartView.java\nindex 0c59432..ff7ea96 100644\n--- a/library/src/com/db/chart/view/HorizontalBarChartView.java\n+++ b/library/src/com/db/chart/view/HorizontalBarChartView.java\n@@ -68,8 +68,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n@@ -168,8 +168,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n\ndiff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
      "atomicChanges": [
        {
          "change": "diff --git a/library/src/com/db/chart/view/HorizontalBarChartView.java b/library/src/com/db/chart/view/HorizontalBarChartView.java\nindex 0c59432..ff7ea96 100644\n--- a/library/src/com/db/chart/view/HorizontalBarChartView.java\n+++ b/library/src/com/db/chart/view/HorizontalBarChartView.java\n@@ -68,8 +68,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n@@ -168,8 +168,8 @@ public class HorizontalBarChartView extends BaseBarChartView {\n \t\tfloat offset;\n \t\tBarSet barSet;\n \t\tBar bar;\n-\t\t\n-\t\tfor (int i = nEntries - 1; i >= 0; i--) {\n+\n+\t\tfor (int i = 0; i < nEntries; i++){\n \t\t\t\n \t\t\t// Set first offset to draw a group of bars\n             offset = data.get(0).getEntry(i).getY() - drawingOffset;\n",
          "label": "fix"
        },
        {
          "change": "diff --git a/java/org/apache/tomcat/websocket/WsFrameBase.java b/java/org/apache/tomcat/websocket/WsFrameBase.java\nindex 00b312e48..8ca2691bc 100644\n--- a/java/org/apache/tomcat/websocket/WsFrameBase.java\n+++ b/java/org/apache/tomcat/websocket/WsFrameBase.java\n@@ -402,6 +402,13 @@ public abstract class WsFrameBase {\n                 // End of frame and possible message as well.\n \n                 if (continuationExpected) {\n+                    // If partial messages are supported, send what we have\n+                    // managed to decode\n+                    if (usePartial()) {\n+                        messageBufferText.flip();\n+                        sendMessageText(false);\n+                        messageBufferText.clear();\n+                    }\n                     messageBufferBinary.compact();\n                     newFrame();\n                     // Process next frame\n",
          "label": "feat"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        }
      ]
    }
  ]
}