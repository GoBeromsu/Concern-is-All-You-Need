{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 1,
    "types": [
      "refactor"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/edu/stanford/nlp/process/PTBTokenizer.java b/src/edu/stanford/nlp/process/PTBTokenizer.java\nindex 4880c43..b00953c 100644\n--- a/src/edu/stanford/nlp/process/PTBTokenizer.java\n+++ b/src/edu/stanford/nlp/process/PTBTokenizer.java\n@@ -163,7 +163,7 @@ import edu.stanford.nlp.util.StringUtils;\n public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n \n   // the underlying lexer\n-  private PTBLexer lexer;\n+  private final PTBLexer lexer;\n \n \n   /**\n@@ -183,7 +183,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that makes CoreLabel tokens.\n    * It optionally returns carriage returns\n    * as their own token. CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.NEWLINE_TOKEN</code>.\n+   * the value of {@code PTBLexer.NEWLINE_TOKEN}.\n    *\n    * @param r The Reader to read tokens from\n    * @param tokenizeNLs Whether to return newlines as separate tokens\n@@ -202,7 +202,7 @@ public class PTBTokenizer<T extends HasWord> extends AbstractTokenizer<T> {\n    * Constructs a new PTBTokenizer that optionally returns carriage returns\n    * as their own token, and has a custom LexedTokenFactory.\n    * If asked for, CRs come back as Words whose text is\n-   * the value of <code>PTBLexer.cr</code>.  This constructor translates\n+   * the value of {@code PTBLexer.cr}.  This constructor translates\n    * between the traditional boolean options of PTBTokenizer and the new\n    * options String.\n    *\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java b/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\nindex fc7b5be1..50b692d5 100644\n--- a/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\n+++ b/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\n@@ -18,7 +18,7 @@\n  */\r\n \r\n /*\r\n- * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.\r\n  */\r\n package org.opensolaris.opengrok.analysis.vb;\r\n \r\n@@ -42,9 +42,9 @@ import org.opensolaris.opengrok.history.Annotation;\n  */\r\n public class VBAnalyzer extends PlainAnalyzer {\r\n \r\n-    private VBSymbolTokenizer cref;\r\n-    private VBXref xref;\r\n-    private Reader dummy = new StringReader(\"\");\r\n+    private final VBSymbolTokenizer cref;\r\n+    private final VBXref xref;\r\n+    private final Reader dummy = new StringReader(\"\");\r\n \r\n     /** Creates a new instance of VBAnalyzer */\r\n     protected VBAnalyzer(FileAnalyzerFactory factory) {\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java b/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\nindex fc7b5be1..50b692d5 100644\n--- a/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\n+++ b/src/org/opensolaris/opengrok/analysis/vb/VBAnalyzer.java\n@@ -18,7 +18,7 @@\n  */\r\n \r\n /*\r\n- * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.\r\n  */\r\n package org.opensolaris.opengrok.analysis.vb;\r\n \r\n@@ -42,9 +42,9 @@ import org.opensolaris.opengrok.history.Annotation;\n  */\r\n public class VBAnalyzer extends PlainAnalyzer {\r\n \r\n-    private VBSymbolTokenizer cref;\r\n-    private VBXref xref;\r\n-    private Reader dummy = new StringReader(\"\");\r\n+    private final VBSymbolTokenizer cref;\r\n+    private final VBXref xref;\r\n+    private final Reader dummy = new StringReader(\"\");\r\n \r\n     /** Creates a new instance of VBAnalyzer */\r\n     protected VBAnalyzer(FileAnalyzerFactory factory) {\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\nindex ee74b6117..2a30c5fe3 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\n@@ -438,7 +438,8 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n             setIdForCommentContainer();\n             showComment();\n         }\n-        setRemoteBlogId(note.getSiteId());\n+\n+        mRemoteBlogId = note.getSiteId();\n     }\n \n     private void setIdForFragmentContainer(int id){\n@@ -534,10 +535,6 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n         return mRemoteBlogId;\n     }\n \n-    private void setRemoteBlogId(int remoteBlogId) {\n-        mRemoteBlogId = remoteBlogId;\n-    }\n-\n     /*\n      * reload the current comment from the local database\n      */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\nindex ee74b6117..2a30c5fe3 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/comments/CommentDetailFragment.java\n@@ -438,7 +438,8 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n             setIdForCommentContainer();\n             showComment();\n         }\n-        setRemoteBlogId(note.getSiteId());\n+\n+        mRemoteBlogId = note.getSiteId();\n     }\n \n     private void setIdForFragmentContainer(int id){\n@@ -534,10 +535,6 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n         return mRemoteBlogId;\n     }\n \n-    private void setRemoteBlogId(int remoteBlogId) {\n-        mRemoteBlogId = remoteBlogId;\n-    }\n-\n     /*\n      * reload the current comment from the local database\n      */\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\nindex 867b820d8..cf0625e9a 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/Scope.java\n@@ -159,7 +159,7 @@ public final class Scope implements Comparable, Serializable\n     static Scope getInstance(String aScopeName)\n     {\n         // canonicalize argument\n-        String scopeName = aScopeName.toLowerCase();\n+        final String scopeName = aScopeName.trim().toLowerCase();\n \n         final Scope retVal = (Scope) NAME_TO_SCOPE.get(scopeName);\n         if (retVal == null) {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\nindex 56f367fb4..3603a9117 100644\n--- a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n+++ b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n@@ -335,7 +335,7 @@ public class ClassCompiler {\n                 String triple = config.getTriple();\n                 Target target = Target.lookupTarget(triple);\n                 try (TargetMachine targetMachine = target.createTargetMachine(triple,\n-                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelNone: null, null, null)) {\n+                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelDefault: null, null, null)) {\n                     targetMachine.setAsmVerbosityDefault(true);\n                     targetMachine.setFunctionSections(true);\n                     targetMachine.setDataSections(true);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\nindex 56f367fb4..3603a9117 100644\n--- a/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n+++ b/compiler/src/main/java/org/robovm/compiler/ClassCompiler.java\n@@ -335,7 +335,7 @@ public class ClassCompiler {\n                 String triple = config.getTriple();\n                 Target target = Target.lookupTarget(triple);\n                 try (TargetMachine targetMachine = target.createTargetMachine(triple,\n-                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelNone: null, null, null)) {\n+                        config.getArch().getLlvmCpu(), null, config.isDebug()? CodeGenOptLevel.CodeGenLevelDefault: null, null, null)) {\n                     targetMachine.setAsmVerbosityDefault(true);\n                     targetMachine.setFunctionSections(true);\n                     targetMachine.setDataSections(true);\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\nindex 2626a3d463..51f7835630 100644\n--- a/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n+++ b/logging/src/main/java/org/jboss/as/logging/LoggingConfigurationProcessor.java\n@@ -153,9 +153,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n      * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n      *\n      * @param resourceRoot the resource to check.\n-     *\n      * @return the configuration file if found, otherwise {@code null}.\n-     *\n      * @throws DeploymentUnitProcessingException\n      *          if an error occurs.\n      */\n@@ -203,7 +201,7 @@ public class LoggingConfigurationProcessor implements DeploymentUnitProcessor {\n \n         @Override\n         public boolean accepts(final VirtualFile file) {\n-            return file.isDirectory() || configFiles.contains(file.getName());\n+            return configFiles.contains(file.getName());\n         }\n     }\n }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/h2o-core/src/main/java/water/Job.java b/h2o-core/src/main/java/water/Job.java\nindex 14cd8ad0a..a54be25be 100644\n--- a/h2o-core/src/main/java/water/Job.java\n+++ b/h2o-core/src/main/java/water/Job.java\n@@ -263,7 +263,7 @@ public final class Job<T extends Keyed> extends Keyed<Job> {\n   }\n \n   static public boolean isCancelledException(Throwable ex) {\n-    return false; // return ex instanceof JobCancelledException || ex.getCause() != null && ex.getCause() instanceof JobCancelledException;\n+    return ex instanceof JobCancelledException || ex.getCause() != null && ex.getCause() instanceof JobCancelledException;\n   }\n \n   private static class Barrier1OnCom extends JAtomic {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/h2o-core/src/main/java/water/Job.java b/h2o-core/src/main/java/water/Job.java\nindex 14cd8ad0a..a54be25be 100644\n--- a/h2o-core/src/main/java/water/Job.java\n+++ b/h2o-core/src/main/java/water/Job.java\n@@ -263,7 +263,7 @@ public final class Job<T extends Keyed> extends Keyed<Job> {\n   }\n \n   static public boolean isCancelledException(Throwable ex) {\n-    return false; // return ex instanceof JobCancelledException || ex.getCause() != null && ex.getCause() instanceof JobCancelledException;\n+    return ex instanceof JobCancelledException || ex.getCause() != null && ex.getCause() instanceof JobCancelledException;\n   }\n \n   private static class Barrier1OnCom extends JAtomic {\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\nindex a90a796..e4c934c 100644\n--- a/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n+++ b/core/src/main/java/com/orientechnologies/orient/core/type/tree/OMVRBTreePersistent.java\n@@ -83,7 +83,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \tpublic OMVRBTreePersistent(String iClusterName, final OStreamSerializer iKeySerializer, final OStreamSerializer iValueSerializer) {\r\n \t\t// MINIMIZE I/O USING A LARGER PAGE THAN THE DEFAULT USED IN MEMORY\r\n-\t\tsuper(1024, 0.7f);\r\n+\t\tsuper(OGlobalConfiguration.MVRBTREE_NODE_PAGE_SIZE.getValueAsInteger(), 0.7f);\r\n \t\tconfig();\r\n \r\n \t\tclusterName = iClusterName;\r\n@@ -640,7 +640,7 @@ public abstract class OMVRBTreePersistent<K, V> extends OMVRBTree<K, V> implemen\n \r\n \t\tfinal V previous = super.put(key, value);\r\n \r\n-\t\tif (insertionCounter > optimizeThreshold) {\r\n+\t\tif (optimizeThreshold > -1 && insertionCounter > optimizeThreshold) {\r\n \t\t\tinsertionCounter = 0;\r\n \t\t\toptimize(false);\r\n \t\t} else\r\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java b/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\nindex 5823435f..c3c59d7f 100644\n--- a/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\n+++ b/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\n@@ -1,6 +1,6 @@\n /**\n  *\n- * Copyright 2014 Florian Schmaus\n+ * Copyright 2014-2015 Florian Schmaus\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,7 +35,7 @@ public final class SmackExecutorThreadFactory implements ThreadFactory {\n     @Override\n     public Thread newThread(Runnable runnable) {\n         Thread thread = new Thread(runnable);\n-        thread.setName(\"Smack Executor - \" + name + ' ' + count++ + \" (\" + connectionCounterValue + \")\");\n+        thread.setName(\"Smack-\" + name + ' ' + count++ + \" (\" + connectionCounterValue + \")\");\n         thread.setDaemon(true);\n         return thread;\n     }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java b/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\nindex 5823435f..c3c59d7f 100644\n--- a/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\n+++ b/smack-core/src/main/java/org/jivesoftware/smack/util/SmackExecutorThreadFactory.java\n@@ -1,6 +1,6 @@\n /**\n  *\n- * Copyright 2014 Florian Schmaus\n+ * Copyright 2014-2015 Florian Schmaus\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -35,7 +35,7 @@ public final class SmackExecutorThreadFactory implements ThreadFactory {\n     @Override\n     public Thread newThread(Runnable runnable) {\n         Thread thread = new Thread(runnable);\n-        thread.setName(\"Smack Executor - \" + name + ' ' + count++ + \" (\" + connectionCounterValue + \")\");\n+        thread.setName(\"Smack-\" + name + ' ' + count++ + \" (\" + connectionCounterValue + \")\");\n         thread.setDaemon(true);\n         return thread;\n     }\n",
          "label": "refactor"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\nindex 4412b27c..fa9b81bd 100644\n--- a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n+++ b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n@@ -1067,6 +1067,7 @@ public class Roster extends Manager {\n             return userPresences;\n         }\n \n+        @Override\n         public void processPacket(Packet packet) throws NotConnectedException {\n             final XMPPConnection connection = connection();\n             Presence presence = (Presence) packet;\n",
      "atomicChanges": [
        {
          "change": "diff --git a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\nindex 4412b27c..fa9b81bd 100644\n--- a/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n+++ b/smack-im/src/main/java/org/jivesoftware/smack/roster/Roster.java\n@@ -1067,6 +1067,7 @@ public class Roster extends Manager {\n             return userPresences;\n         }\n \n+        @Override\n         public void processPacket(Packet packet) throws NotConnectedException {\n             final XMPPConnection connection = connection();\n             Presence presence = (Presence) packet;\n",
          "label": "refactor"
        }
      ]
    }
  ]
}