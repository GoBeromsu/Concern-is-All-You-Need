{
  "metadata": {
    "num_cases": 10,
    "concerns_per_case": 2,
    "types": [
      "docs",
      "test"
    ],
    "allow_same_types": false,
    "seed": 42,
    "source_dataset": "datasets/candidates/codefuse-hqcm/dataset/test.json"
  },
  "cases": [
    {
      "tangleChange": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n\ndiff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\nindex 32807f83c..76c4e8f95 100644\n--- a/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n+++ b/src/test/java/org/opentripplanner/routing/edgetype/loader/TestPatternHopFactory.java\n@@ -38,18 +38,16 @@ import org.opentripplanner.gtfs.GtfsLibrary;\n import org.opentripplanner.routing.algorithm.GenericAStar;\n import org.opentripplanner.routing.core.OptimizeType;\n import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.State;\n import org.opentripplanner.routing.core.StopTransfer;\n import org.opentripplanner.routing.core.TransferTable;\n import org.opentripplanner.routing.core.TraverseModeSet;\n-import org.opentripplanner.routing.edgetype.PatternDwell;\n import org.opentripplanner.routing.edgetype.PatternHop;\n import org.opentripplanner.routing.edgetype.PlainStreetEdge;\n import org.opentripplanner.routing.edgetype.StreetTransitLink;\n import org.opentripplanner.routing.edgetype.StreetTraversalPermission;\n-import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.TransferEdge;\n import org.opentripplanner.routing.edgetype.TransitBoardAlight;\n+import org.opentripplanner.routing.edgetype.TripPattern;\n import org.opentripplanner.routing.edgetype.factory.GTFSPatternHopFactory;\n import org.opentripplanner.routing.graph.Edge;\n import org.opentripplanner.routing.graph.Graph;\n@@ -486,11 +484,10 @@ public class TestPatternHopFactory extends TestCase {\n         ShortestPathTree spt = aStar.getShortestPathTree(options);\n         GraphPath path = spt.getPath(destination, false);\n \n-        // TODO this is wrong (milliseconds)\n-//        long endTime = path.getEndTime();\n-//        Calendar c = new GregorianCalendar();\n-//        c.setTimeInMillis(endTime);\n-//        assertTrue(endTime - startTime.getTimeInMillis() < 7200);\n+        long endTime = path.getEndTime();\n+        Calendar c = new GregorianCalendar();\n+        c.setTimeInMillis(endTime * 1000L);\n+        assertTrue(endTime - TestUtils.toSeconds(startTime) < 7200);\n     }\n \n     public void testFrequencies() {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\nindex 8f932cf339..da93bce36c 100644\n--- a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n+++ b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n@@ -24,7 +24,7 @@ import org.junit.Test;\n \n public class HttpProxyRouteTest extends BaseJettyTest {\n \n-    private int size = 500;\n+    private int size = 10;\n \n     @Test\n     public void testHttpProxy() throws Exception {\n\ndiff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
      "atomicChanges": [
        {
          "change": "diff --git a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\nindex 8f932cf339..da93bce36c 100644\n--- a/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n+++ b/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpProxyRouteTest.java\n@@ -24,7 +24,7 @@ import org.junit.Test;\n \n public class HttpProxyRouteTest extends BaseJettyTest {\n \n-    private int size = 500;\n+    private int size = 10;\n \n     @Test\n     public void testHttpProxy() throws Exception {\n",
          "label": "test"
        },
        {
          "change": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\nindex 34b2bf19e2..e2cb9aa75f 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/WriteCallbackWrapper.java\n@@ -22,7 +22,7 @@ import org.eclipse.jetty.util.Callback;\n import org.eclipse.jetty.websocket.api.WriteCallback;\n \n /**\n- * Wraps the exposed {@link WriteCallback} API with a Jetty {@link Callback}.\n+ * Wraps the exposed {@link WriteCallback} WebSocket API with a Jetty {@link Callback}.\n  * <p>\n  * We don't expose the jetty {@link Callback} object to the webapp, as that makes things complicated for the WebAppContext's Classloader.\n  */\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n\ndiff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\nindex 9e028974..cdad97c9 100644\n--- a/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n+++ b/src/main/java/com/simpligility/maven/plugins/android/asm/AndroidTestFinder.java\n@@ -28,7 +28,7 @@ import java.util.LinkedList;\n import java.util.List;\n \n /**\n- * Finds Android instrumentation test classes in a directory of compiled Java classes.\n+ * Finds Android instrumentation test classes to be run by InstrumentationTestRunner in a directory of compiled Java classes.\n  *\n  * @author hugo.josefson@jayway.com\n  */\n",
          "label": "test"
        },
        {
          "change": "diff --git a/src/main/groovy/lang/MetaMethod.java b/src/main/groovy/lang/MetaMethod.java\nindex f11fb7964..fc82a6776 100644\n--- a/src/main/groovy/lang/MetaMethod.java\n+++ b/src/main/groovy/lang/MetaMethod.java\n@@ -207,13 +207,13 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n \n     public final RuntimeException processDoMethodInvokeException (Exception e, Object object, Object [] argumentArray) {\n         if (e instanceof IllegalArgumentException) {\n-            //TODO: test if this is ok with new MOP, should be changed!\n+            //TODO: test if this is OK with new MOP, should be changed!\n             // we don't want the exception being unwrapped if it is a IllegalArgumentException\n             // but in the case it is for example a IllegalThreadStateException, we want the unwrapping\n             // from the runtime\n             //Note: the reason we want unwrapping sometimes and sometimes not is that the method\n-            // invokation tries to invoke the method with and then reacts with type transformation\n-            // if the invokation failed here. This is ok for IllegalArgumentException, but it is\n+            // invocation tries to invoke the method with and then reacts with type transformation\n+            // if the invocation failed here. This is OK for IllegalArgumentException, but it is\n             // possible that a Reflector will be used to execute the call and then an Exception from inside\n             // the method is not wrapped in a InvocationTargetException and we will end here.\n             boolean setReason = e.getClass() != IllegalArgumentException.class || this instanceof GeneratedMetaMethod;\n@@ -227,7 +227,7 @@ public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n     }\n \n     // This method is not final but it should be overloaded very carefully and only by generated methods\n-    // there is no garantee that it will be called\n+    // there is no guarantee that it will be called\n     public Object doMethodInvoke(Object object, Object[] argumentArray) {\n         argumentArray = coerceArgumentsToClasses(argumentArray);\n         try {\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n\ndiff --git a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\nindex 2e58961e6c..d19bf2734f 100644\n--- a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n+++ b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n@@ -55,11 +55,11 @@ public class BinaryInspector {\n \t\tBinaryInspector in = new BinaryInspector();\n \t\tin.inspector(args);\n \t\t// test cases show info\n-\t\tin.inspector(new String[]{\n+\t\t/*in.inspector(new String[]{\n \t\t\t\t\"-vpoi\",\n \t\t\t\t//\"-vmap\", \"-vmapobjects\", \n \t\t\t\t//\"-vstreets\", \"-bbox=14.4,50.1,14.5,50.01\", \n-\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});\n+\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});*/\n \t}\n \n \tprivate void printToFile(String s) throws IOException {\n",
      "atomicChanges": [
        {
          "change": "diff --git a/src/test/java/hex/GLMTest.java b/src/test/java/hex/GLMTest.java\nindex 98d56c70a..e4946bdce 100644\n--- a/src/test/java/hex/GLMTest.java\n+++ b/src/test/java/hex/GLMTest.java\n@@ -390,8 +390,7 @@ public class GLMTest extends TestUtil {\n       JsonObject glm = computeGLMlog(lsms,va,true); // Solve it!\n       JsonObject jcoefs = glm.get(\"coefficients\").getAsJsonObject();\n       double icept = jcoefs.get(\"Intercept\").getAsDouble();\n-\n-      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n+//      assertCat(jcoefs,icept,\"Low\" ,0.0      );\n       assertCat(jcoefs,icept,\"Med\" ,0.3333333);\n       assertCat(jcoefs,icept,\"High\",1.0      );\n       UKV.remove(Key.make(glm.get(Constants.MODEL_KEY).getAsString()));\n",
          "label": "test"
        },
        {
          "change": "diff --git a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\nindex 2e58961e6c..d19bf2734f 100644\n--- a/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n+++ b/OsmAnd-java/src/net/osmand/binary/BinaryInspector.java\n@@ -55,11 +55,11 @@ public class BinaryInspector {\n \t\tBinaryInspector in = new BinaryInspector();\n \t\tin.inspector(args);\n \t\t// test cases show info\n-\t\tin.inspector(new String[]{\n+\t\t/*in.inspector(new String[]{\n \t\t\t\t\"-vpoi\",\n \t\t\t\t//\"-vmap\", \"-vmapobjects\", \n \t\t\t\t//\"-vstreets\", \"-bbox=14.4,50.1,14.5,50.01\", \n-\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});\n+\t\t\t\t\"/home/victor/projects/osmand/osm-gen/Map.obf\"});*/\n \t}\n \n \tprivate void printToFile(String s) throws IOException {\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n\ndiff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
      "atomicChanges": [
        {
          "change": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n",
          "label": "test"
        },
        {
          "change": "diff --git a/java/org/apache/tomcat/util/file/Matcher.java b/java/org/apache/tomcat/util/file/Matcher.java\nindex c2ab0eb8b..1996907e5 100644\n--- a/java/org/apache/tomcat/util/file/Matcher.java\n+++ b/java/org/apache/tomcat/util/file/Matcher.java\n@@ -37,7 +37,7 @@ public final class Matcher {\n      *\n      * @param patternSet The pattern set to match against. Must not be\n      *                <code>null</code>.\n-     * @param str     The file name to match, as a String. Must not be\n+     * @param fileName The file name to match, as a String. Must not be\n      *                <code>null</code>. It must be just a file name, without\n      *                a path.\n      *\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/common/src/main/java/tachyon/master/block/BlockId.java b/common/src/main/java/tachyon/master/block/BlockId.java\nindex fe21c3f..6b1995a 100644\n--- a/common/src/main/java/tachyon/master/block/BlockId.java\n+++ b/common/src/main/java/tachyon/master/block/BlockId.java\n@@ -15,6 +15,15 @@\n \n package tachyon.master.block;\n \n+/**\n+ * This class provides a set of methods related to block Ids. Each block Id is a value of long with\n+ * the following two parts:\n+ * <ul>\n+ * <li>The most significant 5 bytes (40 bits) represent the container Id of this block and</li>\n+ * <li>The least significant 3 bytes (24 bits) represent the sequence number of this block in the\n+ * container.</li>\n+ * </ul>\n+ */\n public final class BlockId {\n \n   private static final int CONTAINER_ID_BITS = 40;\n\ndiff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
      "atomicChanges": [
        {
          "change": "diff --git a/common/src/main/java/tachyon/master/block/BlockId.java b/common/src/main/java/tachyon/master/block/BlockId.java\nindex fe21c3f..6b1995a 100644\n--- a/common/src/main/java/tachyon/master/block/BlockId.java\n+++ b/common/src/main/java/tachyon/master/block/BlockId.java\n@@ -15,6 +15,15 @@\n \n package tachyon.master.block;\n \n+/**\n+ * This class provides a set of methods related to block Ids. Each block Id is a value of long with\n+ * the following two parts:\n+ * <ul>\n+ * <li>The most significant 5 bytes (40 bits) represent the container Id of this block and</li>\n+ * <li>The least significant 3 bytes (24 bits) represent the sequence number of this block in the\n+ * container.</li>\n+ * </ul>\n+ */\n public final class BlockId {\n \n   private static final int CONTAINER_ID_BITS = 40;\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\nindex 039aa4c45c..76c5218583 100644\n--- a/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n+++ b/trunk/JLanguageTool/src/test/de/danielnaber/languagetool/synthesis/en/EnglishSynthesizerTest.java\n@@ -26,6 +26,7 @@ public class EnglishSynthesizerTest extends TestCase {\n     //with special indefinite article\n     assertEquals(\"[a university, the university]\", Arrays.toString(synth.synthesize(dummyToken(\"university\"), \"+DT\", false)));\n     assertEquals(\"[an hour, the hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+DT\", false)));\n+    assertEquals(\"[an hour]\", Arrays.toString(synth.synthesize(dummyToken(\"hour\"), \"+INDT\", false)));\n   }\n \n }\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\nindex 2ce37ae..399aa1b 100644\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,6 @@ package org.springframework.web.servlet.view.document;\n import java.io.OutputStream;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -34,9 +33,9 @@ import org.springframework.web.servlet.view.AbstractView;\n /**\n  * Convenient superclass for Excel document views.\n  *\n- * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>. More\n- * information on <i>JExcelAPI</i> can be found on their <a\n- * href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n+ * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>.\n+ * More information on <i>JExcelAPI</i> can be found on their\n+ * <a href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n  *\n  * <p>Properties:\n  * <ul>\n@@ -58,11 +57,11 @@ import org.springframework.web.servlet.view.AbstractView;\n  *\n  * <pre class=\"code\">\n  * protected void buildExcelDocument(\n- *      Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n- * \t\tHttpServletRequest request, HttpServletResponse response) {\n+ *     Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n+ *     HttpServletRequest request, HttpServletResponse response) {\n  *\n  * \t if (workbook.getNumberOfSheets() == 0) {\n- * \t     workbook.createSheet(&quot;Spring&quot;, 0);\n+ * \t   workbook.createSheet(&quot;Spring&quot;, 0);\n  *   }\n  *\n  * \t WritableSheet sheet = workbook.getSheet(&quot;Spring&quot;);\n@@ -70,7 +69,7 @@ import org.springframework.web.servlet.view.AbstractView;\n  * \t sheet.addCell(label);\n  * }</pre>\n  *\n- * The use of this view is close to the AbstractExcelView class,\n+ * The use of this view is close to the {@link AbstractExcelView} class,\n  * just using the JExcel API instead of the Apache POI API.\n  *\n  * @author Bram Smeets\n@@ -79,7 +78,10 @@ import org.springframework.web.servlet.view.AbstractView;\n  * @since 1.2.5\n  * @see AbstractExcelView\n  * @see AbstractPdfView\n+ * @deprecated as of Spring 4.0, since JExcelAPI is an abandoned project\n+ * (no release since 2009, with serious bugs remaining)\n  */\n+@Deprecated\n public abstract class AbstractJExcelView extends AbstractView {\n \n \t/** The content type for an Excel response */\n\ndiff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\nindex 2ce37ae..399aa1b 100644\n--- a/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n+++ b/spring-webmvc/src/main/java/org/springframework/web/servlet/view/document/AbstractJExcelView.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2002-2012 the original author or authors.\n+ * Copyright 2002-2013 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,7 +19,6 @@ package org.springframework.web.servlet.view.document;\n import java.io.OutputStream;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n@@ -34,9 +33,9 @@ import org.springframework.web.servlet.view.AbstractView;\n /**\n  * Convenient superclass for Excel document views.\n  *\n- * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>. More\n- * information on <i>JExcelAPI</i> can be found on their <a\n- * href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n+ * <p>This class uses the <i>JExcelAPI</i> instead of <i>POI</i>.\n+ * More information on <i>JExcelAPI</i> can be found on their\n+ * <a href=\"http://www.andykhan.com/jexcelapi/\" target=\"_blank\">website</a>.\n  *\n  * <p>Properties:\n  * <ul>\n@@ -58,11 +57,11 @@ import org.springframework.web.servlet.view.AbstractView;\n  *\n  * <pre class=\"code\">\n  * protected void buildExcelDocument(\n- *      Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n- * \t\tHttpServletRequest request, HttpServletResponse response) {\n+ *     Map&lt;String, Object&gt; model, WritableWorkbook workbook,\n+ *     HttpServletRequest request, HttpServletResponse response) {\n  *\n  * \t if (workbook.getNumberOfSheets() == 0) {\n- * \t     workbook.createSheet(&quot;Spring&quot;, 0);\n+ * \t   workbook.createSheet(&quot;Spring&quot;, 0);\n  *   }\n  *\n  * \t WritableSheet sheet = workbook.getSheet(&quot;Spring&quot;);\n@@ -70,7 +69,7 @@ import org.springframework.web.servlet.view.AbstractView;\n  * \t sheet.addCell(label);\n  * }</pre>\n  *\n- * The use of this view is close to the AbstractExcelView class,\n+ * The use of this view is close to the {@link AbstractExcelView} class,\n  * just using the JExcel API instead of the Apache POI API.\n  *\n  * @author Bram Smeets\n@@ -79,7 +78,10 @@ import org.springframework.web.servlet.view.AbstractView;\n  * @since 1.2.5\n  * @see AbstractExcelView\n  * @see AbstractPdfView\n+ * @deprecated as of Spring 4.0, since JExcelAPI is an abandoned project\n+ * (no release since 2009, with serious bugs remaining)\n  */\n+@Deprecated\n public abstract class AbstractJExcelView extends AbstractView {\n \n \t/** The content type for an Excel response */\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\nindex 74827ac..72770d6 100644\n--- a/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n+++ b/presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueries.java\n@@ -1785,21 +1785,25 @@ public abstract class AbstractTestQueries\n     {\n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey\");\n+                        \"(SELECT CASE WHEN orderkey > 10 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\");\n \n         assertQuery(\n                 \"SELECT DISTINCT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"FULL OUTER JOIN orders b ON a.orderkey = b.orderkey\",\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"FULL OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey\",\n                 \"SELECT DISTINCT orderkey FROM (\" +\n                         \"SELECT a.orderkey FROM \" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"RIGHT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"RIGHT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"UNION ALL \" +\n                         \"SELECT a.orderkey FROM\" +\n-                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders) a \" +\n-                        \"LEFT OUTER JOIN orders b ON a.orderkey = b.orderkey \" +\n+                        \"(SELECT CASE WHEN orderkey > 2 THEN orderkey END orderkey FROM orders WHERE orderkey < 100) a \" +\n+                        \"LEFT OUTER JOIN \" +\n+                        \"(SELECT * FROM orders WHERE orderkey < 100) b ON a.orderkey = b.orderkey \" +\n                         \"WHERE a.orderkey IS NULL)\");\n     }\n \n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n\ndiff --git a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\nindex 43e4c2fa43..19dd78fcb6 100644\n--- a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n+++ b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n@@ -29,7 +29,7 @@ import org.apache.camel.component.mock.MockEndpoint;\n  * @version $Revision$\n  */\n public class HttpGetTest extends ContextTestSupport {\n-    protected String expectedText = \"<html\";\n+    protected String expectedText = \"activemq\";\n \n     public void testHttpGet() throws Exception {\n         MockEndpoint mockEndpoint = resolveMandatoryEndpoint(\"mock:results\", MockEndpoint.class);\n",
      "atomicChanges": [
        {
          "change": "diff --git a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\nindex ffd278a..8c23e53 100644\n--- a/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n+++ b/core/src/main/java/org/elasticsearch/plugins/AnalysisPlugin.java\n@@ -45,6 +45,10 @@ import static java.util.Collections.emptyMap;\n  *     }\n  * }\n  * }</pre>\n+ *\n+ * Elasticsearch doesn't have any automatic mechanism to share these components between indexes. If any component is heavy enough to warrant\n+ * such sharing then it is the Pugin's responsibility to do it in their {@link AnalysisProvider} implementation. We recommend against doing\n+ * this unless absolutely necessary because it can be difficult to get the caching right given things like behavior changes across versions.\n  */\n public interface AnalysisPlugin {\n     /**\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\nindex 43e4c2fa43..19dd78fcb6 100644\n--- a/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n+++ b/components/camel-http/src/test/java/org/apache/camel/component/http/HttpGetTest.java\n@@ -29,7 +29,7 @@ import org.apache.camel.component.mock.MockEndpoint;\n  * @version $Revision$\n  */\n public class HttpGetTest extends ContextTestSupport {\n-    protected String expectedText = \"<html\";\n+    protected String expectedText = \"activemq\";\n \n     public void testHttpGet() throws Exception {\n         MockEndpoint mockEndpoint = resolveMandatoryEndpoint(\"mock:results\", MockEndpoint.class);\n",
          "label": "test"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n\ndiff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
      "atomicChanges": [
        {
          "change": "diff --git a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\nindex 47f870c6c..0696fed31 100644\n--- a/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n+++ b/sql/src/test/java/io/crate/jobs/KeepAliveTimersTest.java\n@@ -80,7 +80,7 @@ public class KeepAliveTimersTest extends CrateUnitTest {\n         KeepAliveTimers.ResettableTimer timer = futureAndTimer.v2();\n         SettableFuture<Void> future = futureAndTimer.v1();\n         timer.start();\n-        future.get(100, TimeUnit.MILLISECONDS);\n+        future.get(1000, TimeUnit.MILLISECONDS);\n     }\n \n     @Test\n",
          "label": "test"
        },
        {
          "change": "diff --git a/rs/java/android/renderscript/ScriptIntrinsicBlur.java b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\nindex 98499b5..7a702e8 100644\n--- a/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n+++ b/rs/java/android/renderscript/ScriptIntrinsicBlur.java\n@@ -34,7 +34,8 @@ public final class ScriptIntrinsicBlur extends ScriptIntrinsic {\n      * Create an intrinsic for applying a blur to an allocation. The\n      * default radius is 5.0.\n      *\n-     * Supported elements types are {@link Element#U8_4 Element#U8}\n+     * Supported elements types are {@link Element#U8},\n+     * {@link Element#U8_4}.\n      *\n      * @param rs The RenderScript context\n      * @param e Element type for inputs and outputs\n",
          "label": "docs"
        }
      ]
    },
    {
      "tangleChange": "diff --git a/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java b/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\nindex 1b717bc19..519e70390 100644\n--- a/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\n+++ b/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\n@@ -1,3 +1,8 @@\n+/*\r\n+ * Copyright (c) 2010 Mysema Ltd.\r\n+ * All rights reserved.\r\n+ * \r\n+ */\r\n package com.mysema.query.collections;\r\n \r\n import java.io.File;\r\n\ndiff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
      "atomicChanges": [
        {
          "change": "diff --git a/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java b/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\nindex 1b717bc19..519e70390 100644\n--- a/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\n+++ b/querydsl-collections/src/main/java/com/mysema/query/collections/SimpleEvaluator.java\n@@ -1,3 +1,8 @@\n+/*\r\n+ * Copyright (c) 2010 Mysema Ltd.\r\n+ * All rights reserved.\r\n+ * \r\n+ */\r\n package com.mysema.query.collections;\r\n \r\n import java.io.File;\r\n",
          "label": "docs"
        },
        {
          "change": "diff --git a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\nindex c3f2555..ae9dc3f 100644\n--- a/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n+++ b/src/test/java/com/ning/http/client/async/BasicHttpsTest.java\n@@ -209,29 +209,6 @@ public class BasicHttpsTest {\n         log.info(\"Local HTTP server started successfully\");\n     }\n \n-    @Test(groups = \"online\")\n-    public void multipleJavaDotDeadSSLTest() throws Throwable {\n-        AsyncHttpClient c = new AsyncHttpClient();\n-\n-        String body = \"hello there\";\n-\n-        // once\n-        Response response = c.preparePost(\"https://atmosphere.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertNotNull(response);\n-        assertEquals(response.getStatusCode(), 200);\n-\n-        // twice\n-        response = c.preparePost(\"https://grizzly.dev.java.net:443/\")\n-                .setBody(body)\n-                .execute().get(TIMEOUT, TimeUnit.SECONDS);\n-\n-        assertEquals(response.getStatusCode(), 200);\n-\n-    }\n-\n     @Test(groups = \"standalone\")\n     public void zeroCopyPostTest() throws Throwable {\n \n",
          "label": "test"
        }
      ]
    }
  ]
}