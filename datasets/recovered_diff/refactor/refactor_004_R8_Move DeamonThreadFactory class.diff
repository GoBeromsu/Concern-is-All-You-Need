# Type: refactor
# Subtype: R8
# English Summary: Move DeamonThreadFactory class
# Chinese Summary: 移动DeamonThreadFactory 类
# Entry Number: 4

# === Git Diff Content ===

diff --git a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/executiongraph/ExecutionGraph.java b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/executiongraph/ExecutionGraph.java
index 8ffada7f8c..84d3184122 100644
--- a/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/executiongraph/ExecutionGraph.java
+++ b/nephele/nephele-server/src/main/java/eu/stratosphere/nephele/executiongraph/ExecutionGraph.java
@@ -70,18 +70,7 @@ import eu.stratosphere.nephele.util.StringUtils;
  */
 public class ExecutionGraph implements ExecutionListener {
 
-	/**
-	 * @author Arvid Heise
-	 *
-	 */
-	private static final class DeamonThreadFactory implements ThreadFactory {
-		@Override
-		public Thread newThread(Runnable r) {
-			final Thread thread = new Thread(r);
-			thread.setDaemon(true);
-			return thread;
-		}
-	}
+
 
 	/**
 	 * The log object used for debugging.
@@ -1451,4 +1440,20 @@ public class ExecutionGraph implements ExecutionListener {
 
 		this.executorService.execute(command);
 	}
-}
+	
+	/**
+	 * Creates deamon threads.<br />
+	 * Is used to allow the JVM to shutdown without closing the executorService of the {@link ExecutionGraph}.<br />
+	 * Has to be static to avoid resource leaks, since threads are GC roots.
+	 * 
+	 * @author Arvid Heise
+	 */
+	private static final class DeamonThreadFactory implements ThreadFactory {
+		@Override
+		public Thread newThread(Runnable r) {
+			final Thread thread = new Thread(r);
+			thread.setDaemon(true);
+			return thread;
+		}
+	}
+}
\ No newline at end of file
